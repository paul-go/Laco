{
.appVersion = "99";
copyright = "Copyright (c) 2010-2011 by tyPoland Lukasz Dziedzic with Reserved Font Name \"Lato\". Licensed under the SIL Open Font License, Version 1.1.";
date = "2011-09-12 07:00:00 +0000";
designer = "Paul Go";
designerURL = "http://www.github.com/paul-go";
familyName = "Lato Code";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub three slash four by threequarters;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub f i by fi;\012sub f l by fl;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 1610;
capHeight = 1457;
custom = Black;
customParameters = (
{
name = "Prep Table Assembly";
value = "PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012SWAP[ ]	/* SwapTopStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01240 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0129 10 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01211 16 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01217 22 3 2 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\0124 40 6 \012RCVT[ ]	/* ReadCVT */\012GT[ ]	/* GreaterThan */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\01211 16 4 2 \012CALL[ ]	/* CallFunction */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RCVT[ ]	/* ReadCVT */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01222 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\0126 4 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0129 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 4 values pushed */\01211 11 1 0 \012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0126 2 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01211 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01218 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01212 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01216 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01231 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
310,
230,
310,
310,
230,
230,
1457,
0,
1497,
1037,
0,
-329,
1473,
-16,
1503,
1051,
-16,
-329
);
}
);
descender = -390;
id = "10974C74-6ED2-4F66-BD25-910E45086E66";
italicAngle = 7;
weightValue = 900;
widthValue = 5;
xHeight = 1037;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"950 1457 LINE",
"616 1457 LINE",
"-80 0 LINE",
"176 0 LINE SMOOTH",
"228 0 OFFCURVE",
"275.333 33.667 OFFCURVE",
"290 71 CURVE SMOOTH",
"398 333 LINE",
"893 333 LINE",
"938 71 LINE SMOOTH",
"944.667 28.333 OFFCURVE",
"980 0 OFFCURVE",
"1036 0 CURVE SMOOTH",
"1288 0 LINE"
);
},
{
closed = 1;
nodes = (
"660 969 LINE SMOOTH",
"676.929 1009.629 OFFCURVE",
"731.128 1126.385 OFFCURVE",
"747 1174 CURVE",
"751.667 1144.667 OFFCURVE",
"757.5 1112.167 OFFCURVE",
"764.5 1076.5 CURVE SMOOTH",
"771.5 1040.833 OFFCURVE",
"778 1005.667 OFFCURVE",
"784 971 CURVE SMOOTH",
"855 555 LINE",
"489 555 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 14 13 12 11 9 6 5 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
19 1 4 3 1 30 0 4 0 1 0 4 1 0 2 38 0 3 3 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
19 1 4 3 1 30 0 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
19 1 4 3 1 30 0 3 4 3 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1326;
}
);
note = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 388, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Aacute;
unicode = 00C1;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 358, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Acircumflex;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 358, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Adieresis;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 358, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Agrave;
unicode = 00C0;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1232 -171 OFFCURVE",
"1226.333 -172.5 OFFCURVE",
"1221 -175.5 CURVE SMOOTH",
"1215.667 -178.5 OFFCURVE",
"1204 -180 OFFCURVE",
"1186 -180 CURVE SMOOTH",
"1159.333 -180 OFFCURVE",
"1146 -160.667 OFFCURVE",
"1146 -134 CURVE SMOOTH",
"1146 -76.667 OFFCURVE",
"1190 -30.667 OFFCURVE",
"1246 0 CURVE",
"1288 0 LINE",
"950 1457 LINE",
"616 1457 LINE",
"-80 0 LINE",
"176 0 LINE SMOOTH",
"228 0 OFFCURVE",
"275.333 33.667 OFFCURVE",
"290 71 CURVE SMOOTH",
"398 333 LINE",
"893 333 LINE",
"938 71 LINE SMOOTH",
"944.667 28.333 OFFCURVE",
"980 0 OFFCURVE",
"1036 0 CURVE SMOOTH",
"1072 0 LINE",
"961.333 -64 OFFCURVE",
"916 -139.333 OFFCURVE",
"916 -214 CURVE SMOOTH",
"916 -290 OFFCURVE",
"976.667 -347 OFFCURVE",
"1102 -347 CURVE SMOOTH",
"1174 -347 OFFCURVE",
"1245.333 -325 OFFCURVE",
"1292 -297 CURVE",
"1262 -190 LINE",
"1260 -177.333 OFFCURVE",
"1252 -171 OFFCURVE",
"1238 -171 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"660 969 LINE",
"686.667 1025 OFFCURVE",
"716.667 1096.333 OFFCURVE",
"746 1175 CURVE",
"752.667 1136.333 OFFCURVE",
"759.333 1099.667 OFFCURVE",
"766 1065 CURVE SMOOTH",
"772.667 1030.333 OFFCURVE",
"778.667 999 OFFCURVE",
"784 971 CURVE SMOOTH",
"855 555 LINE",
"489 555 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 37 36 34 32 27 26 25 24 23 21 18 17 14 12 7 5 0 35 1 35 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
41 1 8 5 3 1 1 0 2 30 7 9 2 0 2 1 2 0 1 50 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 0 1 1 16 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
41 1 8 5 3 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 7 1 2 7 1 48 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
41 1 8 5 3 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 7 1 2 7 1 48 0 1 1 51 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
41 1 8 5 3 1 1 7 2 30 0 5 8 5 52 6 4 2 2 3 0 3 2 0 50 9 1 0 7 3 0 7 48 0 7 1 3 7 1 48 0 1 1 51 0 8 3 3 8 0 0 35 0 8 8 3 0 2 36 0 3 8 3 0 2 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
41 1 8 5 3 1 1 7 2 30 0 5 8 5 52 0 6 3 4 3 6 4 50 0 4 2 3 4 2 48 0 2 0 3 2 0 48 9 1 0 7 3 0 7 48 0 7 1 3 7 1 48 0 1 1 51 0 8 3 3 8 0 0 35 0 8 8 3 0 2 36 0 3 8 3 0 2 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1326;
}
);
note = Aogonek;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.case;
transform = "{1, 0, 0, 1, 362, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Aring;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 358, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1326;
}
);
note = Atilde;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-102 0 LINE",
"152 0 LINE SMOOTH",
"206.667 0 OFFCURVE",
"255.333 32.333 OFFCURVE",
"274 71 CURVE SMOOTH",
"405 333 LINE",
"834 333 LINE",
"834 0 LINE",
"1592 0 LINE",
"1624 251 LINE",
"1142 251 LINE",
"1142 610 LINE",
"1538 610 LINE",
"1568 852 LINE",
"1142 852 LINE",
"1142 1206 LINE",
"1740 1206 LINE",
"1772 1457 LINE",
"716 1457 LINE"
);
},
{
closed = 1;
nodes = (
"748 1019 LINE",
"778.667 1069.667 OFFCURVE",
"806 1130 OFFCURVE",
"834 1198 CURVE",
"834 555 LINE",
"516 555 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
20 19 18 16 13 12 11 10 9 8 7 6 5 4 3 2 1 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
21 1 2 1 1 30 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 1 1 0 0 0 36 0 0 0 11 31 0 4 4 5 1 0 36 7 1 5 5 12 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 1 2 1 1 30 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 5 5 4 0 0 35 0 4 4 5 1 0 36 7 1 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
21 1 2 1 1 30 0 7 4 5 4 7 5 50 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 7 5 4 0 0 35 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1716;
}
);
note = AE;
unicode = 00C6;
},
{
glyphname = B;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"588 0 LINE SMOOTH",
"764 0 OFFCURVE",
"904.667 53.333 OFFCURVE",
"1002 140 CURVE SMOOTH",
"1099.333 226.667 OFFCURVE",
"1152 346.333 OFFCURVE",
"1152 481 CURVE SMOOTH",
"1152 618.333 OFFCURVE",
"1078.333 708.333 OFFCURVE",
"921 751 CURVE",
"1021 785.667 OFFCURVE",
"1090.833 838.333 OFFCURVE",
"1135.5 901 CURVE SMOOTH",
"1180.167 963.667 OFFCURVE",
"1200 1039 OFFCURVE",
"1200 1119 CURVE SMOOTH",
"1200 1220.333 OFFCURVE",
"1166.167 1305.167 OFFCURVE",
"1089.5 1364.5 CURVE SMOOTH",
"1012.833 1423.833 OFFCURVE",
"893.333 1457 OFFCURVE",
"724 1457 CURVE SMOOTH",
"224 1457 LINE",
"44 0 LINE"
);
},
{
closed = 1;
nodes = (
"656 622 LINE SMOOTH",
"779.763 622 OFFCURVE",
"830 572.281 OFFCURVE",
"830 477 CURVE SMOOTH",
"830 337.557 OFFCURVE",
"766.53 245 OFFCURVE",
"614 245 CURVE SMOOTH",
"400 245 LINE",
"446 622 LINE"
);
},
{
closed = 1;
nodes = (
"518 1214 LINE",
"694 1214 LINE SMOOTH",
"812.667 1214 OFFCURVE",
"868 1174 OFFCURVE",
"868 1066 CURVE SMOOTH",
"868 898.206 OFFCURVE",
"780.716 838 OFFCURVE",
"628 838 CURVE SMOOTH",
"472 838 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
21 21 0 0 44 42 36 34 21 33 21 32 24 22 0 20 0 19 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 4 1 30 0 4 7 1 3 2 4 3 1 0 38 0 5 5 0 1 0 36 0 0 0 11 31 0 2 2 1 1 0 36 6 1 1 1 12 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 6 1 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1208;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"594 252 OFFCURVE",
"520 288.167 OFFCURVE",
"468 355.5 CURVE SMOOTH",
"416 422.833 OFFCURVE",
"384 521 OFFCURVE",
"384 645 CURVE SMOOTH",
"384 815.667 OFFCURVE",
"430.5 955.833 OFFCURVE",
"508.5 1052.5 CURVE SMOOTH",
"586.5 1149.167 OFFCURVE",
"695.333 1203 OFFCURVE",
"818 1203 CURVE SMOOTH",
"884.993 1203 OFFCURVE",
"970.226 1174.713 OFFCURVE",
"1002 1150 CURVE SMOOTH",
"1033.014 1125.878 OFFCURVE",
"1063.152 1097 OFFCURVE",
"1094 1097 CURVE SMOOTH",
"1128.667 1097 OFFCURVE",
"1148 1114.333 OFFCURVE",
"1164 1133 CURVE SMOOTH",
"1278 1265 LINE",
"1235.333 1326.333 OFFCURVE",
"1178.167 1377.833 OFFCURVE",
"1105.5 1414.5 CURVE SMOOTH",
"1032.833 1451.167 OFFCURVE",
"943.333 1473 OFFCURVE",
"834 1473 CURVE SMOOTH",
"761.333 1473 OFFCURVE",
"691.667 1463.5 OFFCURVE",
"625 1444.5 CURVE SMOOTH",
"491.667 1406.5 OFFCURVE",
"374.833 1335.333 OFFCURVE",
"279.5 1234 CURVE SMOOTH",
"231.833 1183.333 OFFCURVE",
"191 1126.333 OFFCURVE",
"157 1063 CURVE SMOOTH",
"89 936.333 OFFCURVE",
"50 785.667 OFFCURVE",
"50 619 CURVE SMOOTH",
"50 439 OFFCURVE",
"100.667 279.333 OFFCURVE",
"198 166 CURVE SMOOTH",
"295.333 52.667 OFFCURVE",
"438 -16 OFFCURVE",
"622 -16 CURVE SMOOTH",
"843.333 -16 OFFCURVE",
"1017.333 63.333 OFFCURVE",
"1144 214 CURVE",
"1030 351 LINE",
"1023.333 360.333 OFFCURVE",
"1009.333 369 OFFCURVE",
"988 369 CURVE SMOOTH",
"957.952 369 OFFCURVE",
"925.29 336.3 OFFCURVE",
"892 310.5 CURVE SMOOTH",
"856.217 282.768 OFFCURVE",
"756.483 252 OFFCURVE",
"678 252 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 43 41 36 34 27 25 15 13 8 6 0 51 1 51 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
31 1 5 3 11 1 2 0 2 30 0 4 5 1 5 4 1 50 0 1 0 5 1 0 48 0 5 5 3 1 0 36 0 3 3 17 31 6 1 0 0 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
31 1 5 3 11 1 2 0 2 30 0 4 5 1 5 4 1 50 0 1 0 5 1 0 48 0 3 0 5 4 3 5 1 0 38 6 1 0 2 2 0 1 0 35 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1182;
}
);
note = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 404, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1204;
}
);
note = Cacute;
unicode = 0106;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"467.333 -214 OFFCURVE",
"458.667 -224.333 OFFCURVE",
"452 -239 CURVE SMOOTH",
"412 -329 LINE",
"458.667 -342.333 OFFCURVE",
"497.333 -347 OFFCURVE",
"548 -347 CURVE SMOOTH",
"695.219 -347 OFFCURVE",
"820 -288.846 OFFCURVE",
"820 -178 CURVE SMOOTH",
"820 -123.333 OFFCURVE",
"788.667 -75 OFFCURVE",
"694 -47 CURVE",
"707 -12 LINE",
"888.333 6.667 OFFCURVE",
"1033.333 83.333 OFFCURVE",
"1144 214 CURVE",
"1030 351 LINE",
"1023.333 360.333 OFFCURVE",
"1009.333 369 OFFCURVE",
"988 369 CURVE SMOOTH",
"957.952 369 OFFCURVE",
"925.29 336.3 OFFCURVE",
"892 310.5 CURVE SMOOTH",
"856.217 282.768 OFFCURVE",
"756.483 252 OFFCURVE",
"678 252 CURVE SMOOTH",
"594 252 OFFCURVE",
"520 288.167 OFFCURVE",
"468 355.5 CURVE SMOOTH",
"416 422.833 OFFCURVE",
"384 521 OFFCURVE",
"384 645 CURVE SMOOTH",
"384 815.667 OFFCURVE",
"430.5 955.833 OFFCURVE",
"508.5 1052.5 CURVE SMOOTH",
"586.5 1149.167 OFFCURVE",
"695.333 1203 OFFCURVE",
"818 1203 CURVE SMOOTH",
"884.993 1203 OFFCURVE",
"970.226 1174.713 OFFCURVE",
"1002 1150 CURVE SMOOTH",
"1033.014 1125.878 OFFCURVE",
"1063.152 1097 OFFCURVE",
"1094 1097 CURVE SMOOTH",
"1128.667 1097 OFFCURVE",
"1148 1114.333 OFFCURVE",
"1164 1133 CURVE SMOOTH",
"1278 1265 LINE",
"1235.333 1326.333 OFFCURVE",
"1178.167 1377.833 OFFCURVE",
"1105.5 1414.5 CURVE SMOOTH",
"1032.833 1451.167 OFFCURVE",
"943.333 1473 OFFCURVE",
"834 1473 CURVE SMOOTH",
"761.333 1473 OFFCURVE",
"691.667 1463.5 OFFCURVE",
"625 1444.5 CURVE SMOOTH",
"491.667 1406.5 OFFCURVE",
"374.833 1335.333 OFFCURVE",
"279.5 1234 CURVE SMOOTH",
"231.833 1183.333 OFFCURVE",
"191 1126.333 OFFCURVE",
"157 1063 CURVE SMOOTH",
"89 936.333 OFFCURVE",
"50 785.667 OFFCURVE",
"50 619 CURVE SMOOTH",
"50 455 OFFCURVE",
"92 309.5 OFFCURVE",
"172 199.5 CURVE SMOOTH",
"252 89.5 OFFCURVE",
"370 14.667 OFFCURVE",
"522 -8 CURVE",
"472 -136 LINE",
"514 -142 OFFCURVE",
"543.5 -148.5 OFFCURVE",
"560.5 -155.5 CURVE SMOOTH",
"577.5 -162.5 OFFCURVE",
"586 -172.667 OFFCURVE",
"586 -186 CURVE SMOOTH",
"586 -204.667 OFFCURVE",
"572.667 -224 OFFCURVE",
"542 -224 CURVE SMOOTH",
"530 -224 OFFCURVE",
"520.167 -222.333 OFFCURVE",
"512.5 -219 CURVE SMOOTH",
"504.833 -215.667 OFFCURVE",
"496 -214 OFFCURVE",
"486 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 72 70 56 54 49 47 39 37 32 30 23 21 4 2 0 77 1 77 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
27 1 4 2 63 59 10 9 4 0 5 74 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 0 4 4 2 1 0 36 0 2 2 17 31 1 8 2 0 0 7 1 0 36 0 7 7 16 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
27 1 4 2 63 59 10 9 4 0 5 74 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 4 4 2 1 0 36 0 2 2 17 31 0 1 1 7 1 0 36 0 7 7 16 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
27 1 4 2 63 59 10 9 4 0 5 74 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 1 0 7 1 7 1 0 37 0 4 4 2 1 0 36 0 2 2 17 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
27 1 4 2 63 59 10 9 4 0 5 74 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 2 0 4 3 2 4 1 0 38 0 1 7 7 1 1 0 35 0 1 1 7 1 0 36 0 7 1 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1182;
}
);
note = Ccedilla;
unicode = 00C7;
},
{
glyphname = D;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1366 1003.333 OFFCURVE",
"1306.667 1161.667 OFFCURVE",
"1200 1275 CURVE SMOOTH",
"1093.333 1388.333 OFFCURVE",
"938.667 1457 OFFCURVE",
"748 1457 CURVE SMOOTH",
"224 1457 LINE",
"44 0 LINE",
"568 0 LINE SMOOTH",
"644.667 0 OFFCURVE",
"717.833 9.333 OFFCURVE",
"787.5 28 CURVE SMOOTH",
"926.833 65.333 OFFCURVE",
"1045.167 135.5 OFFCURVE",
"1140.5 233.5 CURVE SMOOTH",
"1188.167 282.5 OFFCURVE",
"1228.667 337.5 OFFCURVE",
"1262 398.5 CURVE SMOOTH",
"1328.667 520.5 OFFCURVE",
"1366 663.333 OFFCURVE",
"1366 822 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1032 640.667 OFFCURVE",
"990.667 500.333 OFFCURVE",
"916 403 CURVE SMOOTH",
"841.333 305.667 OFFCURVE",
"733.333 251 OFFCURVE",
"600 251 CURVE SMOOTH",
"404 251 LINE",
"520 1206 LINE",
"716 1206 LINE SMOOTH",
"817.333 1206 OFFCURVE",
"896.5 1167 OFFCURVE",
"950.5 1099 CURVE SMOOTH",
"1004.5 1031 OFFCURVE",
"1032 932.667 OFFCURVE",
"1032 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
24 22 21 19 11 9 8 6 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 11 31 0 3 3 0 1 0 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1364;
}
);
note = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"68 641 LINE",
"218 641 LINE",
"140 0 LINE",
"664 0 LINE SMOOTH",
"740.667 0 OFFCURVE",
"813.5 9.333 OFFCURVE",
"882.5 28 CURVE SMOOTH",
"1020.5 65.333 OFFCURVE",
"1139.167 135.5 OFFCURVE",
"1234.5 233.5 CURVE SMOOTH",
"1282.167 282.5 OFFCURVE",
"1322.667 337.5 OFFCURVE",
"1356 398.5 CURVE SMOOTH",
"1422.667 520.5 OFFCURVE",
"1460 663.333 OFFCURVE",
"1460 822 CURVE SMOOTH",
"1460 1003.333 OFFCURVE",
"1401.667 1161.667 OFFCURVE",
"1295 1275 CURVE SMOOTH",
"1188.333 1388.333 OFFCURVE",
"1034 1457 OFFCURVE",
"842 1457 CURVE SMOOTH",
"318 1457 LINE",
"240 819 LINE",
"92 819 LINE"
);
},
{
closed = 1;
nodes = (
"1126 640.667 OFFCURVE",
"1084.5 500.333 OFFCURVE",
"1010.5 403 CURVE SMOOTH",
"936.5 305.667 OFFCURVE",
"829.333 251 OFFCURVE",
"696 251 CURVE SMOOTH",
"500 251 LINE",
"546 641 LINE",
"858 641 LINE",
"880 819 LINE",
"568 819 LINE",
"614 1206 LINE",
"810 1206 LINE SMOOTH",
"911.333 1206 OFFCURVE",
"990.5 1167 OFFCURVE",
"1044.5 1099 CURVE SMOOTH",
"1098.5 1031 OFFCURVE",
"1126 932.667 OFFCURVE",
"1126 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
32 30 29 28 27 26 25 23 18 17 16 14 4 2 1 0 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
5 1 0 6 1 3 7 0 3 0 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 7 7 2 1 0 36 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 1 0 4 0 1 4 1 0 38 0 5 0 6 3 5 6 0 0 38 0 0 0 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1458;
}
);
note = Eth;
unicode = 00D0;
},
{
glyphname = E;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1092 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"914 0 LINE",
"946 251 LINE",
"403 251 LINE",
"447 612 LINE",
"858 612 LINE",
"890 854 LINE",
"477 854 LINE",
"521 1206 LINE",
"1060 1206 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 5 0 0 36 0 5 5 11 31 0 3 3 4 0 0 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1036;
}
);
note = E;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1036;
}
);
note = Eacute;
unicode = 00C9;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1036;
}
);
note = Ecircumflex;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1036;
}
);
note = Edieresis;
unicode = 00CB;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1036;
}
);
note = Egrave;
unicode = 00C8;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"804 -171 OFFCURVE",
"798.333 -172.5 OFFCURVE",
"793 -175.5 CURVE SMOOTH",
"787.667 -178.5 OFFCURVE",
"776 -180 OFFCURVE",
"758 -180 CURVE SMOOTH",
"731.333 -180 OFFCURVE",
"718 -160.667 OFFCURVE",
"718 -134 CURVE SMOOTH",
"718 -76.667 OFFCURVE",
"762 -30.667 OFFCURVE",
"818 0 CURVE",
"914 0 LINE",
"946 251 LINE",
"403 251 LINE",
"447 612 LINE",
"858 612 LINE",
"890 854 LINE",
"477 854 LINE",
"521 1206 LINE",
"1060 1206 LINE",
"1092 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"644 0 LINE",
"533.333 -64 OFFCURVE",
"488 -139.333 OFFCURVE",
"488 -214 CURVE SMOOTH",
"488 -290 OFFCURVE",
"548.667 -347 OFFCURVE",
"674 -347 CURVE SMOOTH",
"746 -347 OFFCURVE",
"817.333 -325 OFFCURVE",
"864 -297 CURVE",
"834 -190 LINE",
"832 -177.333 OFFCURVE",
"824 -171 OFFCURVE",
"810 -171 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 32 30 25 24 23 22 21 20 19 18 17 16 15 14 13 12 7 5 0 33 1 33 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
3 1 1 0 1 30 9 10 2 0 2 1 2 0 1 50 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 9 1 2 9 1 48 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 9 1 2 9 1 48 0 1 1 51 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 2 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 9 1 2 9 1 48 0 1 1 51 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 2 2 7 0 0 35 0 7 7 2 0 0 36 8 1 2 7 2 0 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
3 1 1 9 1 30 0 8 7 2 2 8 42 10 1 0 2 9 2 0 9 50 0 9 1 2 9 1 48 0 1 1 51 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 8 2 7 0 2 35 0 7 7 2 0 0 36 0 2 7 2 0 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1036;
}
);
note = Eogonek;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1092 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"372 0 LINE",
"442 571 LINE",
"890 571 LINE",
"924 822 LINE",
"473 822 LINE",
"521 1206 LINE",
"1060 1206 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
9 8 7 6 5 4 3 2 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 4 0 0 36 0 4 4 11 31 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 3 2 3 53 0 4 0 0 1 4 0 0 0 38 0 1 2 2 1 0 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"612.667 235 OFFCURVE",
"531.333 273.5 OFFCURVE",
"474 343.5 CURVE SMOOTH",
"416.667 413.5 OFFCURVE",
"384 517 OFFCURVE",
"384 645 CURVE SMOOTH",
"384 810.333 OFFCURVE",
"428 950.5 OFFCURVE",
"504 1048.5 CURVE SMOOTH",
"580 1146.5 OFFCURVE",
"687.333 1203 OFFCURVE",
"814 1203 CURVE SMOOTH",
"930.029 1203 OFFCURVE",
"994.699 1170.887 OFFCURVE",
"1090 1110 CURVE SMOOTH",
"1108.667 1098 OFFCURVE",
"1127 1092 OFFCURVE",
"1145 1092 CURVE SMOOTH",
"1175 1092 OFFCURVE",
"1202 1106.667 OFFCURVE",
"1226 1136 CURVE SMOOTH",
"1332 1267 LINE",
"1284 1320.333 OFFCURVE",
"1222 1372.5 OFFCURVE",
"1142 1410.5 CURVE SMOOTH",
"1062 1448.5 OFFCURVE",
"962 1473 OFFCURVE",
"838 1473 CURVE SMOOTH",
"764 1473 OFFCURVE",
"693.333 1463.5 OFFCURVE",
"626 1444.5 CURVE SMOOTH",
"491.333 1406.5 OFFCURVE",
"373.833 1335 OFFCURVE",
"278.5 1235 CURVE SMOOTH",
"230.833 1185 OFFCURVE",
"190 1129 OFFCURVE",
"156 1067 CURVE SMOOTH",
"88 943 OFFCURVE",
"50 795.333 OFFCURVE",
"50 634 CURVE SMOOTH",
"50 448.667 OFFCURVE",
"110.5 286 OFFCURVE",
"216.5 170 CURVE SMOOTH",
"322.5 54 OFFCURVE",
"474 -16 OFFCURVE",
"654 -16 CURVE SMOOTH",
"763.333 -16 OFFCURVE",
"859.167 -4.333 OFFCURVE",
"946.5 21 CURVE SMOOTH",
"1033.833 46.333 OFFCURVE",
"1113.333 85.333 OFFCURVE",
"1188 140 CURVE",
"1264 749 LINE",
"778 749 LINE",
"756 561 LINE",
"756 531.667 OFFCURVE",
"776.667 513 OFFCURVE",
"814 513 CURVE SMOOTH",
"938 513 LINE",
"910 275 LINE",
"851.333 249.667 OFFCURVE",
"790 235 OFFCURVE",
"710 235 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 44 42 37 35 29 27 17 15 10 9 6 4 0 52 1 52 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
33 1 6 4 8 1 1 2 2 30 0 5 6 2 6 5 2 50 0 2 0 1 0 2 1 1 0 38 0 6 6 4 1 0 36 0 4 4 17 31 7 1 0 0 3 1 0 36 0 3 3 18 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
33 1 6 4 8 1 1 2 2 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 3 3 0 1 0 35 7 1 0 0 3 1 0 36 0 3 0 3 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1306;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1406 1457 LINE",
"1078 1457 LINE",
"1002 842 LINE",
"476 842 LINE",
"552 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"372 0 LINE",
"448 620 LINE",
"974 620 LINE",
"898 0 LINE",
"1226 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 4 0 1 0 4 1 0 2 38 5 1 3 3 11 31 2 1 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
5 1 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
0 3 5 3 52 0 5 4 5 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1392;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"578 1457 LINE",
"250 1457 LINE",
"72 0 LINE",
"400 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 592;
}
);
note = I;
unicode = 0049;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 592;
}
);
note = Iacute;
unicode = 00CD;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 592;
}
);
note = Icircumflex;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 592;
}
);
note = Idieresis;
unicode = 00CF;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 592;
}
);
note = Igrave;
unicode = 00CC;
},
{
glyphname = J;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"802 1457 LINE",
"476 1457 LINE",
"362 515 LINE SMOOTH",
"339.333 323 OFFCURVE",
"268 244 OFFCURVE",
"160 244 CURVE SMOOTH",
"136 244 OFFCURVE",
"114 245.833 OFFCURVE",
"94 249.5 CURVE SMOOTH",
"74 253.167 OFFCURVE",
"56 255 OFFCURVE",
"40 255 CURVE SMOOTH",
"-2.667 255 OFFCURVE",
"-20 230.333 OFFCURVE",
"-24 197 CURVE SMOOTH",
"-48 10 LINE",
"24 -8.667 OFFCURVE",
"89.333 -16 OFFCURVE",
"160 -16 CURVE SMOOTH",
"317.333 -16 OFFCURVE",
"439 37.333 OFFCURVE",
"527 132 CURVE SMOOTH",
"615 226.667 OFFCURVE",
"668 360.333 OFFCURVE",
"688 523 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
20 19 16 14 13 11 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
43 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
8 1 0 1 1 30 0 3 3 11 31 2 1 1 1 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
8 1 0 2 1 30 0 1 3 2 3 1 2 50 0 3 3 11 31 0 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
8 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 788;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"548 1457 LINE",
"222 1457 LINE",
"44 0 LINE",
"368 0 LINE",
"445 624 LINE",
"520 624 LINE SMOOTH",
"576 624 OFFCURVE",
"606.667 610.667 OFFCURVE",
"624 572 CURVE SMOOTH",
"850 60 LINE SMOOTH",
"868.195 17.545 OFFCURVE",
"901.25 0 OFFCURVE",
"968 0 CURVE SMOOTH",
"1258 0 LINE",
"950 676 LINE SMOOTH",
"926 729.333 OFFCURVE",
"891.333 758.333 OFFCURVE",
"846 777 CURVE",
"882 795.667 OFFCURVE",
"915.333 820.667 OFFCURVE",
"946 862 CURVE SMOOTH",
"1404 1457 LINE",
"1122 1457 LINE SMOOTH",
"1058 1457 OFFCURVE",
"1011.333 1444 OFFCURVE",
"974 1392 CURVE SMOOTH",
"628 909 LINE SMOOTH",
"605.333 875.667 OFFCURVE",
"568.667 861 OFFCURVE",
"522 861 CURVE SMOOTH",
"474 861 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
32 31 30 29 28 26 19 17 9 7 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 5 1 1 1 11 31 4 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
13 1 3 0 1 30 5 1 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 2 38 5 1 1 1 2 1 0 36 4 1 2 1 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
13 1 3 0 1 30 0 5 1 0 1 5 0 50 0 4 3 2 3 4 2 50 0 1 5 2 1 1 0 35 0 0 0 3 4 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1320;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"550 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"860 0 LINE",
"892 260 LINE",
"402 260 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 956;
}
);
note = L;
unicode = 004C;
},
{
glyphname = Lslash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"624 1457 LINE",
"298 1457 LINE",
"213 770 LINE",
"64 696 LINE SMOOTH",
"40 684.667 OFFCURVE",
"26.667 666.667 OFFCURVE",
"24 642 CURVE SMOOTH",
"-4 424 LINE",
"181 513 LINE",
"118 0 LINE",
"934 0 LINE",
"966 260 LINE",
"476 260 LINE",
"526 666 LINE",
"792 807 LINE SMOOTH",
"814.667 819 OFFCURVE",
"832 837.667 OFFCURVE",
"836 867 CURVE SMOOTH",
"864 1081 LINE",
"558 926 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 10 9 8 7 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
12 11 1 0 4 0 2 1 30 0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
12 11 1 0 4 0 2 1 30 0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1030;
}
);
note = Lslash;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"830 640 LINE",
"574 1407 LINE SMOOTH",
"558.59 1455.799 OFFCURVE",
"526.705 1457 OFFCURVE",
"472 1457 CURVE SMOOTH",
"224 1457 LINE",
"44 0 LINE",
"332 0 LINE",
"432 853 LINE SMOOTH",
"434 870.333 OFFCURVE",
"435.5 889.667 OFFCURVE",
"436.5 911 CURVE SMOOTH",
"437.5 932.333 OFFCURVE",
"438.667 954.333 OFFCURVE",
"440 977 CURVE",
"696 223 LINE SMOOTH",
"710.667 179 OFFCURVE",
"751.333 156 OFFCURVE",
"802 156 CURVE SMOOTH",
"846 156 LINE SMOOTH",
"896.667 156 OFFCURVE",
"941.333 177.667 OFFCURVE",
"968 223 CURVE SMOOTH",
"1406 975 LINE",
"1395.333 928.333 OFFCURVE",
"1386 884 OFFCURVE",
"1382 848 CURVE SMOOTH",
"1280 0 LINE",
"1566 0 LINE",
"1746 1457 LINE",
"1490 1457 LINE SMOOTH",
"1452.667 1457 OFFCURVE",
"1408.667 1452.333 OFFCURVE",
"1382 1407 CURVE SMOOTH",
"936 640 LINE SMOOTH",
"910.667 597.333 OFFCURVE",
"887.333 555 OFFCURVE",
"866 511 CURVE",
"856 555 OFFCURVE",
"844 598 OFFCURVE",
"830 640 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
34 31 30 29 22 19 12 11 10 8 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
25 16 2 3 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 0 11 31 3 1 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
25 16 2 3 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 2 1 0 1 0 35 4 1 0 0 1 0 0 36 3 1 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
25 16 2 3 2 4 1 30 0 2 4 1 4 2 1 50 0 0 4 1 0 1 0 35 0 4 2 1 4 1 0 35 0 4 4 1 0 0 36 3 1 1 4 1 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
25 16 2 3 2 4 1 30 0 2 4 3 4 2 3 50 0 0 4 1 0 1 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1732;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"396 1457 LINE",
"224 1457 LINE",
"44 0 LINE",
"332 0 LINE",
"432 850 LINE SMOOTH",
"433.333 865.333 OFFCURVE",
"434.833 881.667 OFFCURVE",
"436.5 899 CURVE SMOOTH",
"438.167 916.333 OFFCURVE",
"439.667 934.333 OFFCURVE",
"441 953 CURVE",
"950 54 LINE SMOOTH",
"974 11.333 OFFCURVE",
"1005.333 0 OFFCURVE",
"1056 0 CURVE SMOOTH",
"1226 0 LINE",
"1406 1457 LINE",
"1118 1457 LINE",
"1020 634 LINE SMOOTH",
"1018 615.333 OFFCURVE",
"1015.667 595.333 OFFCURVE",
"1013 574 CURVE SMOOTH",
"1010.333 552.667 OFFCURVE",
"1008.333 530.333 OFFCURVE",
"1007 507 CURVE",
"496 1407 LINE SMOOTH",
"471.249 1451.002 OFFCURVE",
"449.876 1457 OFFCURVE",
"396 1457 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
24 23 22 21 14 12 11 10 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
6 1 2 0 1 30 4 1 2 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
6 1 2 0 1 30 4 1 2 0 2 2 0 0 0 35 4 1 2 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
6 1 3 4 1 30 0 0 1 0 52 0 1 4 2 1 0 0 35 0 4 0 3 2 4 3 0 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1392;
}
);
note = N;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 384, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1392;
}
);
note = Nacute;
unicode = 0143;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 384, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1392;
}
);
note = Ntilde;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1468 1003.333 OFFCURVE",
"1409.5 1166.667 OFFCURVE",
"1303.5 1284 CURVE SMOOTH",
"1197.5 1401.333 OFFCURVE",
"1042.667 1473 OFFCURVE",
"852 1473 CURVE SMOOTH",
"774.667 1473 OFFCURVE",
"701.333 1463.167 OFFCURVE",
"632 1443.5 CURVE SMOOTH",
"493.333 1404.167 OFFCURVE",
"374 1332.333 OFFCURVE",
"278 1231 CURVE SMOOTH",
"230 1180.333 OFFCURVE",
"189.167 1124 OFFCURVE",
"155.5 1062 CURVE SMOOTH",
"88.167 938 OFFCURVE",
"50 791.333 OFFCURVE",
"50 634 CURVE SMOOTH",
"50 451.333 OFFCURVE",
"108.333 289.167 OFFCURVE",
"215 172.5 CURVE SMOOTH",
"321.667 55.833 OFFCURVE",
"476 -16 OFFCURVE",
"668 -16 CURVE SMOOTH",
"744.667 -16 OFFCURVE",
"817.667 -6.167 OFFCURVE",
"887 13.5 CURVE SMOOTH",
"1025.667 52.833 OFFCURVE",
"1145.167 124.667 OFFCURVE",
"1240.5 226 CURVE SMOOTH",
"1288.167 276.667 OFFCURVE",
"1328.833 333 OFFCURVE",
"1362.5 395 CURVE SMOOTH",
"1429.833 519 OFFCURVE",
"1468 664.667 OFFCURVE",
"1468 822 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1134 643.333 OFFCURVE",
"1092.5 501 OFFCURVE",
"1018.5 401 CURVE SMOOTH",
"944.5 301 OFFCURVE",
"837.333 244 OFFCURVE",
"704 244 CURVE SMOOTH",
"601.333 244 OFFCURVE",
"520.5 283.667 OFFCURVE",
"466.5 353 CURVE SMOOTH",
"412.5 422.333 OFFCURVE",
"384 521 OFFCURVE",
"384 641 CURVE SMOOTH",
"384 811.667 OFFCURVE",
"424.5 955 OFFCURVE",
"498.5 1055 CURVE SMOOTH",
"572.5 1155 OFFCURVE",
"678.667 1213 OFFCURVE",
"812 1213 CURVE SMOOTH",
"913.333 1213 OFFCURVE",
"994.167 1173.5 OFFCURVE",
"1049.5 1103.5 CURVE SMOOTH",
"1104.833 1033.5 OFFCURVE",
"1134 934 OFFCURVE",
"1134 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
40 38 30 28 20 18 8 6 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
note = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1464;
}
);
note = Oacute;
unicode = 00D3;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1464;
}
);
note = Ocircumflex;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1464;
}
);
note = Odieresis;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1464;
}
);
note = Ograve;
unicode = 00D2;
},
{
glyphname = Oslash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1468 992.667 OFFCURVE",
"1417.667 1144 OFFCURVE",
"1323 1260 CURVE",
"1528 1521 LINE",
"1362 1521 LINE SMOOTH",
"1291.62 1521 OFFCURVE",
"1265.395 1502.747 OFFCURVE",
"1220 1444 CURVE SMOOTH",
"1176 1388 LINE",
"1085.333 1442.667 OFFCURVE",
"977.333 1473 OFFCURVE",
"852 1473 CURVE SMOOTH",
"774.667 1473 OFFCURVE",
"701.333 1463.167 OFFCURVE",
"632 1443.5 CURVE SMOOTH",
"493.333 1404.167 OFFCURVE",
"374 1332.333 OFFCURVE",
"278 1231 CURVE SMOOTH",
"230 1180.333 OFFCURVE",
"189.167 1124 OFFCURVE",
"155.5 1062 CURVE SMOOTH",
"88.167 938 OFFCURVE",
"50 791.333 OFFCURVE",
"50 634 CURVE SMOOTH",
"50 448.667 OFFCURVE",
"109.667 286.667 OFFCURVE",
"219 168 CURVE",
"-2 -113 LINE",
"126 -113 LINE SMOOTH",
"189.786 -113 OFFCURVE",
"263.9 -89.757 OFFCURVE",
"312 -29 CURVE SMOOTH",
"374 50 LINE",
"458 7.333 OFFCURVE",
"556 -16 OFFCURVE",
"668 -16 CURVE SMOOTH",
"744.667 -16 OFFCURVE",
"817.667 -6.167 OFFCURVE",
"887 13.5 CURVE SMOOTH",
"1025.667 52.833 OFFCURVE",
"1145.167 124.667 OFFCURVE",
"1240.5 226 CURVE SMOOTH",
"1288.167 276.667 OFFCURVE",
"1328.833 333 OFFCURVE",
"1362.5 395 CURVE SMOOTH",
"1429.833 519 OFFCURVE",
"1468 664.667 OFFCURVE",
"1468 822 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"384 811.667 OFFCURVE",
"424.5 955 OFFCURVE",
"498.5 1055 CURVE SMOOTH",
"572.5 1155 OFFCURVE",
"678.667 1213 OFFCURVE",
"812 1213 CURVE SMOOTH",
"884 1213 OFFCURVE",
"944.667 1193 OFFCURVE",
"994 1157 CURVE",
"423 428 LINE",
"397 488 OFFCURVE",
"384 559 OFFCURVE",
"384 641 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1134 643.333 OFFCURVE",
"1092.5 501 OFFCURVE",
"1018.5 401 CURVE SMOOTH",
"944.5 301 OFFCURVE",
"837.333 244 OFFCURVE",
"704 244 CURVE SMOOTH",
"646.667 244 OFFCURVE",
"596.333 255.667 OFFCURVE",
"553 279 CURVE",
"1109 987 LINE",
"1125 936.333 OFFCURVE",
"1134 878 OFFCURVE",
"1134 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
60 58 49 47 38 36 29 27 17 15 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
39 31 2 4 2 57 44 2 5 4 18 10 2 0 5 3 30 0 1 0 1 53 0 3 3 19 31 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
39 31 2 4 2 57 44 2 5 4 18 10 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
39 31 2 4 2 57 44 2 5 4 18 10 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 0 36 0 0 5 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
note = Oslash;
unicode = 00D8;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1464;
}
);
note = Otilde;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"2008 1457 LINE",
"1178 1457 LINE",
"1158 1299 LINE",
"1070 1407 OFFCURVE",
"944 1473 OFFCURVE",
"780 1473 CURVE SMOOTH",
"569.333 1473 OFFCURVE",
"387.5 1380.167 OFFCURVE",
"257.5 1227.5 CURVE SMOOTH",
"127.5 1074.833 OFFCURVE",
"50 862.667 OFFCURVE",
"50 624 CURVE SMOOTH",
"50 444 OFFCURVE",
"101.5 283.667 OFFCURVE",
"195.5 169 CURVE SMOOTH",
"289.5 54.333 OFFCURVE",
"427.333 -16 OFFCURVE",
"598 -16 CURVE SMOOTH",
"759.333 -16 OFFCURVE",
"900.333 40 OFFCURVE",
"1015 136 CURVE",
"998 0 LINE",
"1828 0 LINE",
"1860 251 LINE",
"1318 251 LINE",
"1362 610 LINE",
"1774 610 LINE",
"1804 852 LINE",
"1392 852 LINE",
"1435 1206 LINE",
"1976 1206 LINE"
);
},
{
closed = 1;
nodes = (
"1056 650.667 OFFCURVE",
"1018 504 OFFCURVE",
"950 400 CURVE SMOOTH",
"882 296 OFFCURVE",
"783.333 235 OFFCURVE",
"662 235 CURVE SMOOTH",
"570 235 OFFCURVE",
"500.667 275.5 OFFCURVE",
"454 345.5 CURVE SMOOTH",
"407.333 415.5 OFFCURVE",
"384 515 OFFCURVE",
"384 631 CURVE SMOOTH",
"384 804.333 OFFCURVE",
"422 951.833 OFFCURVE",
"490 1056.5 CURVE SMOOTH",
"558 1161.167 OFFCURVE",
"658 1222 OFFCURVE",
"782 1222 CURVE SMOOTH",
"871.333 1222 OFFCURVE",
"940.5 1180.5 OFFCURVE",
"986.5 1110.5 CURVE SMOOTH",
"1032.5 1040.5 OFFCURVE",
"1056 941.333 OFFCURVE",
"1056 824 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
45 43 35 33 28 27 24 22 14 12 9 8 7 6 5 4 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
26 1 0 6 10 1 4 3 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 7 1 6 6 17 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
26 1 8 7 10 1 4 9 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 0 7 7 11 31 0 3 3 4 0 0 36 0 4 4 12 31 0 9 9 5 1 0 36 0 5 5 18 5 32 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 73 values pushed */
26 1 8 7 10 1 4 9 2 30 0 6 0 8 0 6 8 1 0 38 0 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 9 4 5 9 1 0 35 0 3 0 4 5 3 4 0 0 38 0 9 9 5 1 0 36 0 5 9 5 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1952;
}
);
note = OE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"584 491 LINE SMOOTH",
"793.333 491 OFFCURVE",
"946 550.333 OFFCURVE",
"1046 649 CURVE SMOOTH",
"1146 747.667 OFFCURVE",
"1194 886.333 OFFCURVE",
"1194 1045 CURVE SMOOTH",
"1194 1161 OFFCURVE",
"1157.833 1264.5 OFFCURVE",
"1078.5 1338.5 CURVE SMOOTH",
"999.167 1412.5 OFFCURVE",
"877.333 1457 OFFCURVE",
"704 1457 CURVE SMOOTH",
"222 1457 LINE",
"44 0 LINE",
"368 0 LINE",
"428 491 LINE"
);
},
{
closed = 1;
nodes = (
"672 1214 LINE SMOOTH",
"801.27 1214 OFFCURVE",
"866 1136.342 OFFCURVE",
"866 1018 CURVE SMOOTH",
"866 845.82 OFFCURVE",
"796.727 736 OFFCURVE",
"616 736 CURVE SMOOTH",
"459 736 LINE",
"518 1214 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
15 15 0 0 15 27 15 26 18 16 0 14 0 13 5 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 5 1 2 0 3 2 1 0 38 6 1 4 4 1 1 0 36 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
0 0 2 0 53 0 1 6 1 4 3 1 4 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 5 1 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1180;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"608 1457 LINE",
"282 1457 LINE",
"104 0 LINE",
"428 0 LINE",
"459 254 LINE",
"616 254 LINE SMOOTH",
"825.333 254 OFFCURVE",
"978 312.333 OFFCURVE",
"1078 411 CURVE SMOOTH",
"1178 509.667 OFFCURVE",
"1226 648 OFFCURVE",
"1226 808 CURVE SMOOTH",
"1226 924 OFFCURVE",
"1190 1025.833 OFFCURVE",
"1110 1098.5 CURVE SMOOTH",
"1030 1171.167 OFFCURVE",
"908 1216 OFFCURVE",
"736 1216 CURVE SMOOTH",
"578 1216 LINE"
);
},
{
closed = 1;
nodes = (
"704 973 LINE SMOOTH",
"833.166 973 OFFCURVE",
"898 898.835 OFFCURVE",
"898 781 CURVE SMOOTH",
"898 608.82 OFFCURVE",
"828.727 499 OFFCURVE",
"648 499 CURVE SMOOTH",
"489 499 LINE",
"548 973 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 17 17 29 17 28 20 18 16 15 14 13 12 10 2 0 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 0 6 1 5 4 0 5 1 2 38 0 4 0 1 2 4 1 1 0 38 0 3 3 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 3 0 3 52 0 2 1 2 53 0 0 6 1 5 4 0 5 1 2 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1180;
}
);
note = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1468 1003.333 OFFCURVE",
"1409.5 1166.667 OFFCURVE",
"1303.5 1284 CURVE SMOOTH",
"1197.5 1401.333 OFFCURVE",
"1042.667 1473 OFFCURVE",
"852 1473 CURVE SMOOTH",
"774.667 1473 OFFCURVE",
"701.333 1463.167 OFFCURVE",
"632 1443.5 CURVE SMOOTH",
"493.333 1404.167 OFFCURVE",
"374 1332.333 OFFCURVE",
"278 1231 CURVE SMOOTH",
"230 1180.333 OFFCURVE",
"189.167 1124 OFFCURVE",
"155.5 1062 CURVE SMOOTH",
"88.167 938 OFFCURVE",
"50 791.333 OFFCURVE",
"50 634 CURVE SMOOTH",
"50 451.333 OFFCURVE",
"108.333 289.167 OFFCURVE",
"215 172.5 CURVE SMOOTH",
"321.667 55.833 OFFCURVE",
"476 -16 OFFCURVE",
"668 -16 CURVE SMOOTH",
"722.667 -16 OFFCURVE",
"775.667 -11 OFFCURVE",
"827 -1 CURVE",
"968 -204 LINE SMOOTH",
"1006.667 -261.333 OFFCURVE",
"1070 -274 OFFCURVE",
"1146 -274 CURVE SMOOTH",
"1414 -274 LINE",
"1123 124 LINE",
"1228.333 197.333 OFFCURVE",
"1315 298.167 OFFCURVE",
"1375 417.5 CURVE SMOOTH",
"1435 536.833 OFFCURVE",
"1468 674 OFFCURVE",
"1468 822 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1134 643.333 OFFCURVE",
"1092.5 501 OFFCURVE",
"1018.5 401 CURVE SMOOTH",
"944.5 301 OFFCURVE",
"837.333 244 OFFCURVE",
"704 244 CURVE SMOOTH",
"601.333 244 OFFCURVE",
"520.5 283.667 OFFCURVE",
"466.5 353 CURVE SMOOTH",
"412.5 422.333 OFFCURVE",
"384 521 OFFCURVE",
"384 641 CURVE SMOOTH",
"384 811.667 OFFCURVE",
"424.5 955 OFFCURVE",
"498.5 1055 CURVE SMOOTH",
"572.5 1155 OFFCURVE",
"678.667 1213 OFFCURVE",
"812 1213 CURVE SMOOTH",
"913.333 1213 OFFCURVE",
"994.167 1173.5 OFFCURVE",
"1049.5 1103.5 CURVE SMOOTH",
"1104.833 1033.5 OFFCURVE",
"1134 934 OFFCURVE",
"1134 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
46 44 36 34 26 24 14 12 8 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"508 544 LINE SMOOTH",
"556 544 OFFCURVE",
"577.333 530.333 OFFCURVE",
"592 493 CURVE SMOOTH",
"750 62 LINE SMOOTH",
"764.667 22 OFFCURVE",
"803.333 0 OFFCURVE",
"858 0 CURVE SMOOTH",
"1152 0 LINE",
"940 513 LINE SMOOTH",
"920 561 OFFCURVE",
"882 591.333 OFFCURVE",
"842 614 CURVE",
"943.333 654 OFFCURVE",
"1023.333 716.833 OFFCURVE",
"1078 797.5 CURVE SMOOTH",
"1132.667 878.167 OFFCURVE",
"1162 975 OFFCURVE",
"1162 1083 CURVE SMOOTH",
"1162 1189.667 OFFCURVE",
"1127 1283.333 OFFCURVE",
"1047 1350 CURVE SMOOTH",
"967 1416.667 OFFCURVE",
"842.667 1457 OFFCURVE",
"664 1457 CURVE SMOOTH",
"222 1457 LINE",
"44 0 LINE",
"368 0 LINE",
"435 544 LINE"
);
},
{
closed = 1;
nodes = (
"634 1214 LINE SMOOTH",
"768.656 1214 OFFCURVE",
"838 1147.39 OFFCURVE",
"838 1033 CURVE SMOOTH",
"838 881.354 OFFCURVE",
"760.356 769 OFFCURVE",
"582 769 CURVE SMOOTH",
"463 769 LINE",
"518 1214 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 27 0 0 27 39 27 38 30 28 0 26 0 25 20 18 5 3 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
14 1 3 4 1 30 0 4 6 1 3 0 4 3 1 0 38 7 1 5 5 1 1 0 36 0 1 1 11 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
14 1 3 4 1 30 2 1 0 3 0 53 0 1 7 1 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
14 1 3 4 1 30 0 2 3 0 3 2 0 50 0 0 0 51 0 1 7 1 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1228;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1040 1299 LINE",
"959.264 1402.008 OFFCURVE",
"802.976 1471 OFFCURVE",
"646 1471 CURVE SMOOTH",
"484.667 1471 OFFCURVE",
"353.667 1412 OFFCURVE",
"263 1320 CURVE SMOOTH",
"172.333 1228 OFFCURVE",
"122 1104.333 OFFCURVE",
"122 975 CURVE SMOOTH",
"122 863 OFFCURVE",
"154.833 789.167 OFFCURVE",
"203.5 736.5 CURVE SMOOTH",
"252.167 683.833 OFFCURVE",
"317.667 654 OFFCURVE",
"383 630 CURVE SMOOTH",
"435.694 610.643 OFFCURVE",
"520.641 583.936 OFFCURVE",
"562.5 561 CURVE SMOOTH",
"611.167 534.333 OFFCURVE",
"644 498 OFFCURVE",
"644 438 CURVE SMOOTH",
"644 308.667 OFFCURVE",
"575.333 242 OFFCURVE",
"454 242 CURVE SMOOTH",
"371.333 242 OFFCURVE",
"317.667 273.167 OFFCURVE",
"275 304.5 CURVE SMOOTH",
"236.448 332.812 OFFCURVE",
"197.509 367 OFFCURVE",
"162 367 CURVE SMOOTH",
"134 367 OFFCURVE",
"103.333 350.667 OFFCURVE",
"86 328 CURVE SMOOTH",
"-30 176 LINE",
"16.667 118.667 OFFCURVE",
"85.5 71.5 OFFCURVE",
"163.5 37.5 CURVE SMOOTH",
"241.5 3.5 OFFCURVE",
"328 -16 OFFCURVE",
"412 -16 CURVE SMOOTH",
"581.333 -16 OFFCURVE",
"718.333 44.833 OFFCURVE",
"813 141.5 CURVE SMOOTH",
"907.667 238.167 OFFCURVE",
"960 371.333 OFFCURVE",
"960 518 CURVE SMOOTH",
"960 620.667 OFFCURVE",
"927.5 692 OFFCURVE",
"877.5 744 CURVE SMOOTH",
"827.5 796 OFFCURVE",
"761.5 828.333 OFFCURVE",
"695.5 855 CURVE SMOOTH",
"642.767 876.306 OFFCURVE",
"557.039 906.246 OFFCURVE",
"514.5 929.5 CURVE SMOOTH",
"464.5 956.833 OFFCURVE",
"432 990.667 OFFCURVE",
"432 1044 CURVE SMOOTH",
"432 1146.269 OFFCURVE",
"498.695 1215 OFFCURVE",
"616 1215 CURVE SMOOTH",
"682.667 1215 OFFCURVE",
"730.5 1191 OFFCURVE",
"768.5 1167 CURVE SMOOTH",
"801.619 1146.083 OFFCURVE",
"837.707 1119 OFFCURVE",
"866 1119 CURVE SMOOTH",
"898 1119 OFFCURVE",
"919.333 1133 OFFCURVE",
"942 1165 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
59 57 42 40 37 35 28 26 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
63 1 1 5 32 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 17 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
63 1 1 5 32 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1000;
}
);
note = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 238, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1000;
}
);
note = Sacute;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 220, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1000;
}
);
note = Scaron;
unicode = 0160;
},
{
glyphname = T;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"136 1457 LINE",
"104 1199 LINE",
"476 1199 LINE",
"330 0 LINE",
"654 0 LINE",
"802 1199 LINE",
"1172 1199 LINE",
"1206 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 7 0 7 6 5 4 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
2 1 0 0 3 0 0 36 4 1 3 3 11 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 1 53 4 1 3 0 0 3 0 0 35 4 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 3 0 0 2 42 0 1 0 1 53 4 1 3 2 0 3 0 2 35 4 1 3 3 0 0 0 36 0 0 3 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1104;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"497.333 256 OFFCURVE",
"420 355.667 OFFCURVE",
"420 521 CURVE SMOOTH",
"420 543.667 OFFCURVE",
"421.333 567 OFFCURVE",
"424 591 CURVE SMOOTH",
"530 1457 LINE",
"204 1457 LINE",
"100 591 LINE SMOOTH",
"96 557.667 OFFCURVE",
"94 525.333 OFFCURVE",
"94 494 CURVE SMOOTH",
"94 343.333 OFFCURVE",
"140.167 215.5 OFFCURVE",
"227.5 125.5 CURVE SMOOTH",
"314.833 35.5 OFFCURVE",
"443.333 -16 OFFCURVE",
"606 -16 CURVE SMOOTH",
"786 -16 OFFCURVE",
"938.5 47.167 OFFCURVE",
"1052.5 154.5 CURVE SMOOTH",
"1166.5 261.833 OFFCURVE",
"1239.333 413.667 OFFCURVE",
"1262 591 CURVE SMOOTH",
"1368 1457 LINE",
"1042 1457 LINE",
"936 591 LINE SMOOTH",
"924 488.333 OFFCURVE",
"889.667 404.5 OFFCURVE",
"839 346.5 CURVE SMOOTH",
"788.333 288.5 OFFCURVE",
"721.333 256 OFFCURVE",
"640 256 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 22 21 14 12 7 6 0 28 1 28 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 1 11 31 4 1 0 0 2 1 2 36 0 2 2 18 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 0 1 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 2 36 0 2 0 2 1 2 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 1 52 0 3 0 3 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 2 36 0 2 0 2 1 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1334;
}
);
note = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 364, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1334;
}
);
note = Uacute;
unicode = 00DA;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 364, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1334;
}
);
note = Ucircumflex;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 364, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1334;
}
);
note = Udieresis;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 364, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1334;
}
);
note = Ugrave;
unicode = 00D9;
},
{
glyphname = V;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"476 0 LINE",
"772 0 LINE",
"1488 1457 LINE",
"1224 1457 LINE SMOOTH",
"1171.997 1457 OFFCURVE",
"1125.422 1423.748 OFFCURVE",
"1108 1386 CURVE SMOOTH",
"768 583 LINE SMOOTH",
"754 549 OFFCURVE",
"738 511.833 OFFCURVE",
"720 471.5 CURVE SMOOTH",
"702 431.167 OFFCURVE",
"686 390 OFFCURVE",
"672 348 CURVE",
"666.667 390 OFFCURVE",
"659.833 431.5 OFFCURVE",
"651.5 472.5 CURVE SMOOTH",
"643.167 513.5 OFFCURVE",
"636 550.333 OFFCURVE",
"630 583 CURVE SMOOTH",
"478 1386 LINE SMOOTH",
"470 1427.333 OFFCURVE",
"436 1457 OFFCURVE",
"380 1457 CURVE SMOOTH",
"118 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
20 19 18 16 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 11 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1368;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"364 0 LINE",
"658 0 LINE",
"1014 920 LINE SMOOTH",
"1019.333 934.667 OFFCURVE",
"1025.5 950.833 OFFCURVE",
"1032.5 968.5 CURVE SMOOTH",
"1039.5 986.167 OFFCURVE",
"1046.667 1004.667 OFFCURVE",
"1054 1024 CURVE",
"1056 1004.667 OFFCURVE",
"1058.333 986.167 OFFCURVE",
"1061 968.5 CURVE SMOOTH",
"1063.667 950.833 OFFCURVE",
"1066 934.667 OFFCURVE",
"1068 920 CURVE SMOOTH",
"1202 0 LINE",
"1498 0 LINE",
"2092 1457 LINE",
"1834 1457 LINE SMOOTH",
"1779.333 1457 OFFCURVE",
"1731.333 1423.333 OFFCURVE",
"1718 1386 CURVE SMOOTH",
"1430 601 LINE SMOOTH",
"1412.667 553 OFFCURVE",
"1395.333 498 OFFCURVE",
"1378 438 CURVE",
"1372.667 498 OFFCURVE",
"1364.667 554.333 OFFCURVE",
"1358 601 CURVE SMOOTH",
"1246 1386 LINE SMOOTH",
"1239.333 1428.667 OFFCURVE",
"1202 1457 OFFCURVE",
"1146 1457 CURVE SMOOTH",
"1070 1457 LINE SMOOTH",
"1015.333 1457 OFFCURVE",
"970.667 1422 OFFCURVE",
"956 1386 CURVE SMOOTH",
"658 601 LINE SMOOTH",
"648.667 576.333 OFFCURVE",
"638.5 550.167 OFFCURVE",
"627.5 522.5 CURVE SMOOTH",
"616.5 494.833 OFFCURVE",
"606 465.333 OFFCURVE",
"596 434 CURVE",
"596 452 OFFCURVE",
"595.333 470.667 OFFCURVE",
"594 490 CURVE SMOOTH",
"592.667 506 OFFCURVE",
"591.333 523.833 OFFCURVE",
"590 543.5 CURVE SMOOTH",
"588.667 563.167 OFFCURVE",
"586.667 582.333 OFFCURVE",
"584 601 CURVE SMOOTH",
"482 1386 LINE SMOOTH",
"475.333 1428.667 OFFCURVE",
"440 1457 OFFCURVE",
"384 1457 CURVE SMOOTH",
"128 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
44 43 35 34 33 31 19 16 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
39 25 10 8 4 3 0 1 30 2 1 2 0 0 11 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
39 25 10 8 4 3 0 1 30 2 1 2 0 3 3 0 1 0 35 2 1 2 0 0 3 0 0 36 4 1 3 0 3 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
39 25 10 8 4 4 2 1 30 0 1 0 2 0 1 2 50 0 2 4 0 2 4 48 0 3 4 3 53 0 0 1 4 0 1 0 35 0 0 0 4 0 0 36 0 4 0 4 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1980;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-76 0 LINE",
"250 0 LINE SMOOTH",
"288.667 0 OFFCURVE",
"322.667 13.333 OFFCURVE",
"348 52 CURVE SMOOTH",
"670 562 LINE SMOOTH",
"672.667 566 OFFCURVE",
"675.5 570 OFFCURVE",
"678.5 574 CURVE SMOOTH",
"681.5 578 OFFCURVE",
"684.333 582.333 OFFCURVE",
"687 587 CURVE",
"902 52 LINE SMOOTH",
"912.667 25.333 OFFCURVE",
"935.333 0 OFFCURVE",
"978 0 CURVE SMOOTH",
"1270 0 LINE",
"919 793 LINE",
"1404 1457 LINE",
"1062 1457 LINE SMOOTH",
"1031.333 1457 OFFCURVE",
"1010.667 1445.667 OFFCURVE",
"992 1415 CURVE SMOOTH",
"736 999 LINE SMOOTH",
"731.333 991.667 OFFCURVE",
"727 985 OFFCURVE",
"723 979 CURVE SMOOTH",
"719 973 OFFCURVE",
"715.333 966.667 OFFCURVE",
"712 960 CURVE",
"520 1420 LINE SMOOTH",
"508 1446.667 OFFCURVE",
"494.667 1457 OFFCURVE",
"452 1457 CURVE SMOOTH",
"156 1457 LINE",
"472 777 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
29 27 18 16 14 12 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 0 2 2 0 1 30 1 1 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
15 0 2 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
15 0 2 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1324;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1396 1457 LINE",
"1126 1457 LINE SMOOTH",
"1071.333 1457 OFFCURVE",
"1032 1422 OFFCURVE",
"1012 1386 CURVE SMOOTH",
"764 945 LINE SMOOTH",
"729.333 885 OFFCURVE",
"698.333 831.667 OFFCURVE",
"673 781 CURVE",
"662.333 831.667 OFFCURVE",
"646.667 886.333 OFFCURVE",
"628 945 CURVE SMOOTH",
"488 1386 LINE SMOOTH",
"473.333 1428.667 OFFCURVE",
"444 1457 OFFCURVE",
"388 1457 CURVE SMOOTH",
"98 1457 LINE",
"473 555 LINE",
"404 0 LINE",
"730 0 LINE",
"799 558 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
20 18 6 4 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
12 3 2 0 1 1 30 2 1 1 1 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
12 3 2 0 1 1 30 2 1 1 0 0 1 1 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
12 3 2 0 2 1 30 0 2 1 0 1 2 0 50 0 1 2 0 1 1 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1256;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 350, -3}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1256;
}
);
note = Yacute;
unicode = 00DD;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 350, -3}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1256;
}
);
note = Ydieresis;
unicode = 0178;
},
{
glyphname = Z;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"204 1457 LINE",
"172 1206 LINE",
"755 1206 LINE",
"18 169 LINE SMOOTH",
"2 146.333 OFFCURVE",
"-12 122.667 OFFCURVE",
"-16 96 CURVE SMOOTH",
"-28 0 LINE",
"1012 0 LINE",
"1044 251 LINE",
"428 251 LINE",
"1164 1286 LINE SMOOTH",
"1180 1308.667 OFFCURVE",
"1194 1332.333 OFFCURVE",
"1198 1359 CURVE SMOOTH",
"1212 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 15 0 15 14 13 8 7 6 5 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 0 0 36 4 1 3 3 11 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1120;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 290, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1120;
}
);
note = Zacute;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 290, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1120;
}
);
note = Zcaron;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent.case;
transform = "{1, 0, 0, 1, 290, -1}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1120;
}
);
note = Zdotaccent;
unicode = 017B;
},
{
glyphname = a;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1023 1007 LINE",
"924.333 1041.667 OFFCURVE",
"821.667 1053 OFFCURVE",
"723 1053 CURVE SMOOTH",
"520.333 1053 OFFCURVE",
"347.833 972.667 OFFCURVE",
"224.5 846 CURVE SMOOTH",
"101.167 719.333 OFFCURVE",
"29 545 OFFCURVE",
"29 357 CURVE SMOOTH",
"29 229 OFFCURVE",
"63.667 135.167 OFFCURVE",
"117 74.5 CURVE SMOOTH",
"170.333 13.833 OFFCURVE",
"242.333 -16 OFFCURVE",
"317 -16 CURVE SMOOTH",
"442.333 -16 OFFCURVE",
"545.667 54.667 OFFCURVE",
"631 172 CURVE",
"631 98 LINE SMOOTH",
"631 37.491 OFFCURVE",
"657.213 0 OFFCURVE",
"731 0 CURVE SMOOTH",
"897 0 LINE"
);
},
{
closed = 1;
nodes = (
"373.748 229 OFFCURVE",
"339 295.924 OFFCURVE",
"339 412 CURVE SMOOTH",
"339 529.333 OFFCURVE",
"373 635.5 OFFCURVE",
"433 713.5 CURVE SMOOTH",
"493 791.5 OFFCURVE",
"577.667 840 OFFCURVE",
"679 840 CURVE SMOOTH",
"697 840 LINE",
"661 553 LINE",
"638.333 463.667 OFFCURVE",
"605.5 382.667 OFFCURVE",
"567.5 324 CURVE SMOOTH",
"529.5 265.333 OFFCURVE",
"486.333 229 OFFCURVE",
"441 229 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
25 24 32 30 24 40 25 40 21 19 11 9 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
23 1 4 2 7 1 0 3 2 30 5 1 3 4 0 4 3 0 50 0 4 4 2 1 0 36 0 2 2 20 31 1 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
23 1 4 2 7 1 0 3 2 30 5 1 3 4 0 4 3 0 50 0 4 4 2 1 0 36 0 2 2 20 31 0 0 0 12 31 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
23 1 4 2 7 1 0 3 2 30 5 1 3 4 0 4 3 0 50 0 0 1 4 0 1 48 0 1 1 51 0 4 4 2 1 0 36 0 2 2 20 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
23 1 4 2 7 1 0 3 2 30 5 1 3 4 0 4 3 0 50 0 0 1 4 0 1 48 0 1 1 51 0 2 4 4 2 1 0 35 0 2 2 4 1 0 36 0 4 2 4 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1058;
}
);
note = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 297, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = aacute;
unicode = 00E1;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 297, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = acircumflex;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 297, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = adieresis;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 395, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = agrave;
unicode = 00E0;
},
{
glyphname = aogonek;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"853 -171 OFFCURVE",
"847.333 -172.5 OFFCURVE",
"842 -175.5 CURVE SMOOTH",
"836.667 -178.5 OFFCURVE",
"825 -180 OFFCURVE",
"807 -180 CURVE SMOOTH",
"780.333 -180 OFFCURVE",
"767 -160.667 OFFCURVE",
"767 -134 CURVE SMOOTH",
"767 -76.667 OFFCURVE",
"811 -30.667 OFFCURVE",
"867 0 CURVE",
"897 0 LINE",
"1023 1007 LINE",
"924.333 1041.667 OFFCURVE",
"821.667 1053 OFFCURVE",
"723 1053 CURVE SMOOTH",
"520.333 1053 OFFCURVE",
"347.833 972.667 OFFCURVE",
"224.5 846 CURVE SMOOTH",
"101.167 719.333 OFFCURVE",
"29 545 OFFCURVE",
"29 357 CURVE SMOOTH",
"29 229 OFFCURVE",
"63.667 135.167 OFFCURVE",
"117 74.5 CURVE SMOOTH",
"170.333 13.833 OFFCURVE",
"242.333 -16 OFFCURVE",
"317 -16 CURVE SMOOTH",
"442.333 -16 OFFCURVE",
"545.667 54.667 OFFCURVE",
"631 172 CURVE",
"631 98 LINE SMOOTH",
"631 51.333 OFFCURVE",
"646 13.667 OFFCURVE",
"698 3 CURVE",
"583.333 -62.333 OFFCURVE",
"537 -138 OFFCURVE",
"537 -214 CURVE SMOOTH",
"537 -290 OFFCURVE",
"597.667 -347 OFFCURVE",
"723 -347 CURVE SMOOTH",
"795 -347 OFFCURVE",
"866.333 -325 OFFCURVE",
"913 -297 CURVE",
"883 -190 LINE",
"881 -177.333 OFFCURVE",
"873 -171 OFFCURVE",
"859 -171 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"373.748 229 OFFCURVE",
"339 295.924 OFFCURVE",
"339 412 CURVE SMOOTH",
"339 529.333 OFFCURVE",
"373 635.5 OFFCURVE",
"433 713.5 CURVE SMOOTH",
"493 791.5 OFFCURVE",
"577.667 840 OFFCURVE",
"679 840 CURVE SMOOTH",
"697 840 LINE",
"661 553 LINE",
"638.333 463.667 OFFCURVE",
"605.5 382.667 OFFCURVE",
"567.5 324 CURVE SMOOTH",
"529.5 265.333 OFFCURVE",
"486.333 229 OFFCURVE",
"441 229 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
44 43 1 0 51 49 43 59 44 59 41 39 34 33 30 28 20 18 7 5 0 42 1 42 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
32 1 7 3 16 12 2 2 6 3 1 1 0 3 30 9 1 6 7 2 7 6 2 50 5 8 2 0 2 1 2 0 1 50 0 7 7 3 1 0 36 0 3 3 20 31 4 1 2 2 18 31 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
32 1 7 3 16 12 2 4 6 3 1 1 0 3 30 9 1 6 7 4 7 6 4 50 5 8 2 0 2 1 2 0 1 50 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 12 31 0 2 2 18 31 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
32 1 7 3 16 12 2 4 6 3 1 1 5 3 30 9 1 6 7 4 7 6 4 50 8 1 0 2 5 2 0 5 50 0 5 1 2 5 1 48 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 12 31 0 2 2 18 31 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 68 values pushed */
32 1 7 3 16 12 2 4 6 3 1 1 5 3 30 9 1 6 7 4 7 6 4 50 8 1 0 2 5 2 0 5 50 0 5 1 2 5 1 48 0 1 1 51 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 12 31 0 2 2 18 2 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
32 1 7 3 16 12 2 4 6 3 1 1 5 3 30 9 1 6 7 4 7 6 4 50 0 4 2 7 4 2 48 0 2 0 7 2 0 48 8 1 0 5 7 0 5 48 0 5 1 7 5 1 48 0 1 1 51 0 7 7 3 1 0 36 0 3 3 20 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
32 1 7 3 16 12 2 4 6 3 1 1 5 3 30 9 1 6 7 4 7 6 4 50 0 4 2 7 4 2 48 0 2 0 7 2 0 48 8 1 0 5 7 0 5 48 0 5 1 7 5 1 48 0 1 1 51 0 3 7 7 3 1 0 35 0 3 3 7 1 0 36 0 7 3 7 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1072;
}
);
note = aogonek;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 317, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = aring;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 297, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1058;
}
);
note = atilde;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"987.333 1051 OFFCURVE",
"879 1002 OFFCURVE",
"795 918 CURVE",
"752.333 1003.333 OFFCURVE",
"669.333 1055 OFFCURVE",
"532 1055 CURVE SMOOTH",
"381.333 1055 OFFCURVE",
"251.333 1001.333 OFFCURVE",
"122 892 CURVE",
"164 798 LINE SMOOTH",
"177.333 768.667 OFFCURVE",
"204 746 OFFCURVE",
"244 746 CURVE SMOOTH",
"334.653 746 OFFCURVE",
"380.703 825 OFFCURVE",
"498 825 CURVE SMOOTH",
"567.333 825 OFFCURVE",
"607 785 OFFCURVE",
"607 693 CURVE SMOOTH",
"607 685.667 OFFCURVE",
"606.667 677.333 OFFCURVE",
"606 668 CURVE SMOOTH",
"605.333 658.667 OFFCURVE",
"603.333 643.333 OFFCURVE",
"600 622 CURVE",
"520.667 620 OFFCURVE",
"450.833 613 OFFCURVE",
"390.5 601 CURVE SMOOTH",
"269.833 577 OFFCURVE",
"182 538.5 OFFCURVE",
"122 488.5 CURVE SMOOTH",
"92 463.5 OFFCURVE",
"68 437.167 OFFCURVE",
"50 409.5 CURVE SMOOTH",
"14 354.167 OFFCURVE",
"0 293 OFFCURVE",
"0 237 CURVE SMOOTH",
"0 78.333 OFFCURVE",
"100 -16 OFFCURVE",
"316 -16 CURVE SMOOTH",
"453.202 -16 OFFCURVE",
"590.823 42.905 OFFCURVE",
"681 164 CURVE",
"749 40 OFFCURVE",
"861.333 -16 OFFCURVE",
"984 -16 CURVE SMOOTH",
"1082.667 -16 OFFCURVE",
"1164.5 -0.5 OFFCURVE",
"1238.5 33.5 CURVE SMOOTH",
"1312.5 67.5 OFFCURVE",
"1380.667 120 OFFCURVE",
"1454 192 CURVE",
"1374 285 LINE SMOOTH",
"1359.333 301 OFFCURVE",
"1340 312 OFFCURVE",
"1320 312 CURVE SMOOTH",
"1276.431 312 OFFCURVE",
"1245.295 287.53 OFFCURVE",
"1210 264 CURVE SMOOTH",
"1169.104 236.736 OFFCURVE",
"1119.456 216 OFFCURVE",
"1046 216 CURVE SMOOTH",
"932.667 216 OFFCURVE",
"868 282.333 OFFCURVE",
"864 441 CURVE",
"944.667 443.667 OFFCURVE",
"1015 450.5 OFFCURVE",
"1075 461.5 CURVE SMOOTH",
"1195 483.5 OFFCURVE",
"1280.333 517.5 OFFCURVE",
"1335 559.5 CURVE SMOOTH",
"1362.333 580.5 OFFCURVE",
"1384 602.833 OFFCURVE",
"1400 626.5 CURVE SMOOTH",
"1432 673.833 OFFCURVE",
"1442 725 OFFCURVE",
"1442 773 CURVE SMOOTH",
"1442 849 OFFCURVE",
"1407.5 918.333 OFFCURVE",
"1349.5 969 CURVE SMOOTH",
"1291.5 1019.667 OFFCURVE",
"1211.333 1051 OFFCURVE",
"1122 1051 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"576 425 LINE SMOOTH",
"556.632 262.791 OFFCURVE",
"486.012 181 OFFCURVE",
"374 181 CURVE SMOOTH",
"316.667 181 OFFCURVE",
"288 211.667 OFFCURVE",
"288 273 CURVE SMOOTH",
"288 315.667 OFFCURVE",
"300.5 356.333 OFFCURVE",
"342.5 387 CURVE SMOOTH",
"384.5 417.667 OFFCURVE",
"456.667 439.333 OFFCURVE",
"578 446 CURVE"
);
},
{
closed = 1;
nodes = (
"1148.667 844 OFFCURVE",
"1172 804.667 OFFCURVE",
"1172 758 CURVE SMOOTH",
"1172 726 OFFCURVE",
"1161.5 695.333 OFFCURVE",
"1119.5 670 CURVE SMOOTH",
"1077.5 644.667 OFFCURVE",
"1003 623 OFFCURVE",
"875 611 CURVE",
"898.274 748.056 OFFCURVE",
"962.468 844 OFFCURVE",
"1082 844 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
87 86 1 0 86 98 87 98 81 79 74 73 68 66 61 59 56 54 49 48 40 38 32 30 23 21 16 14 12 11 0 72 1 72 15 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
70 64 2 7 0 91 1 1 6 34 26 2 4 2 3 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 0 6 10 1 1 3 6 1 1 0 38 14 12 2 7 7 0 1 0 36 9 13 2 0 0 20 31 11 1 2 2 4 1 0 36 5 1 4 4 18 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
70 64 2 7 0 91 1 1 6 26 1 11 2 34 1 4 11 4 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 0 6 10 1 1 3 6 1 1 0 38 14 12 2 7 7 0 1 0 36 9 13 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 18 31 0 11 11 4 1 0 36 5 1 4 4 18 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 103 values pushed */
70 64 2 12 0 91 1 1 6 26 1 11 2 34 1 4 11 4 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 0 6 10 1 1 3 6 1 1 0 38 14 1 12 12 0 1 0 36 9 13 2 0 0 20 31 0 7 7 0 1 0 36 9 13 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 18 31 0 11 11 4 1 0 36 5 1 4 4 18 4 32 12 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 95 values pushed */
70 64 2 12 0 91 1 1 6 26 1 11 2 34 1 4 11 4 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 0 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 5 1 4 11 4 1 0 37 14 1 12 12 0 1 0 36 9 13 2 0 0 20 31 0 7 7 0 1 0 36 9 13 2 0 0 20 7 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 99 values pushed */
70 64 2 12 0 91 1 1 6 26 1 11 2 34 1 4 11 4 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 14 1 12 7 0 12 1 0 35 9 13 2 0 0 7 8 0 7 1 0 38 0 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 100 values pushed */
70 64 2 12 0 91 1 1 6 26 1 11 2 34 1 4 11 4 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 0 14 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 0 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 107 values pushed */
70 64 2 12 0 91 1 10 6 26 1 11 2 34 1 5 11 4 30 0 8 7 6 7 8 6 50 0 1 10 3 10 1 3 50 0 3 2 10 3 2 48 13 1 0 14 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 0 6 0 10 1 6 10 1 0 38 0 2 11 4 2 1 0 35 0 11 0 5 4 11 5 1 0 38 0 2 2 4 1 0 36 0 4 2 4 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1473;
}
);
note = ae;
unicode = 00E6;
},
{
glyphname = b;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"213 0 LINE SMOOTH",
"279.667 0 OFFCURVE",
"302.333 25 OFFCURVE",
"321 81 CURVE SMOOTH",
"324 91 LINE",
"378.667 27 OFFCURVE",
"456.333 -16 OFFCURVE",
"559 -16 CURVE SMOOTH",
"692.333 -16 OFFCURVE",
"818.667 62 OFFCURVE",
"912 186 CURVE SMOOTH",
"1005.333 310 OFFCURVE",
"1065 478.667 OFFCURVE",
"1065 660 CURVE SMOOTH",
"1065 797.333 OFFCURVE",
"1034.833 896 OFFCURVE",
"983.5 960 CURVE SMOOTH",
"932.167 1024 OFFCURVE",
"860.333 1053 OFFCURVE",
"775 1053 CURVE SMOOTH",
"653.667 1053 OFFCURVE",
"544 986 OFFCURVE",
"452 874 CURVE",
"529 1497 LINE",
"225 1497 LINE",
"43 0 LINE"
);
},
{
closed = 1;
nodes = (
"715 818 OFFCURVE",
"757 761 OFFCURVE",
"757 629 CURVE SMOOTH",
"757 525 OFFCURVE",
"731 420.5 OFFCURVE",
"687 342.5 CURVE SMOOTH",
"643 264.5 OFFCURVE",
"581 212 OFFCURVE",
"509 212 CURVE SMOOTH",
"465 212 OFFCURVE",
"413.667 224 OFFCURVE",
"375 256 CURVE",
"405 498 LINE",
"430.333 586 OFFCURVE",
"470 666.5 OFFCURVE",
"514 724.5 CURVE SMOOTH",
"558 782.5 OFFCURVE",
"607 818 OFFCURVE",
"651 818 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
25 24 0 0 34 32 24 40 25 40 0 23 0 22 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
3 1 4 1 30 1 5 4 19 1 2 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 2 36 6 3 2 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
3 1 4 1 30 1 5 4 19 1 3 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 12 31 0 5 5 2 1 2 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
3 1 4 1 30 1 5 4 19 1 3 5 3 30 6 1 3 5 2 5 3 2 50 0 5 0 2 5 2 1 2 37 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
3 1 4 1 30 1 5 4 19 1 3 5 3 30 6 1 3 5 2 5 3 2 50 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 5 2 1 2 37 0 0 0 13 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
3 1 4 1 30 1 5 4 19 1 3 5 3 30 0 0 1 0 52 6 1 3 5 2 5 3 2 50 0 1 7 1 4 5 1 4 1 0 38 0 5 3 2 5 1 0 35 0 5 5 2 1 2 36 0 2 5 2 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1100;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"855 182 LINE",
"775 276 LINE SMOOTH",
"761.667 292 OFFCURVE",
"741 302 OFFCURVE",
"721 302 CURVE SMOOTH",
"651.769 302 OFFCURVE",
"611.908 216 OFFCURVE",
"505 216 CURVE SMOOTH",
"411.41 216 OFFCURVE",
"351 295.413 OFFCURVE",
"351 422 CURVE SMOOTH",
"351 546 OFFCURVE",
"380.667 644.333 OFFCURVE",
"426 711 CURVE SMOOTH",
"471.333 777.667 OFFCURVE",
"531.667 814 OFFCURVE",
"593 814 CURVE SMOOTH",
"667.362 814 OFFCURVE",
"709.383 761 OFFCURVE",
"755 761 CURVE SMOOTH",
"777.667 761 OFFCURVE",
"796.333 774.333 OFFCURVE",
"811 789 CURVE",
"911 904 LINE",
"832.333 1005.333 OFFCURVE",
"737.667 1051 OFFCURVE",
"599 1051 CURVE SMOOTH",
"436.333 1051 OFFCURVE",
"297.833 978.667 OFFCURVE",
"198.5 864 CURVE SMOOTH",
"99.167 749.333 OFFCURVE",
"41 592.333 OFFCURVE",
"41 423 CURVE SMOOTH",
"41 288.333 OFFCURVE",
"79.833 179 OFFCURVE",
"148.5 103 CURVE SMOOTH",
"217.167 27 OFFCURVE",
"315.667 -16 OFFCURVE",
"437 -16 CURVE SMOOTH",
"526.333 -16 OFFCURVE",
"598.667 -2.667 OFFCURVE",
"664 28 CURVE SMOOTH",
"729.333 58.667 OFFCURVE",
"788.333 108.667 OFFCURVE",
"855 182 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
43 41 38 36 28 26 23 21 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 3 3 1 1 0 36 0 1 1 20 31 0 4 4 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 4 0 0 4 0 1 0 37 0 3 3 1 1 0 36 0 1 1 20 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 1 0 3 2 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 0 0 4 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 876;
}
);
note = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 181, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 876;
}
);
note = cacute;
unicode = 0107;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"274.333 -214 OFFCURVE",
"265.667 -224.333 OFFCURVE",
"259 -239 CURVE SMOOTH",
"219 -329 LINE",
"265.667 -342.333 OFFCURVE",
"304.333 -347 OFFCURVE",
"355 -347 CURVE SMOOTH",
"502.219 -347 OFFCURVE",
"627 -288.846 OFFCURVE",
"627 -178 CURVE SMOOTH",
"627 -123.333 OFFCURVE",
"595.667 -75 OFFCURVE",
"501 -47 CURVE",
"514 -12 LINE",
"653.75 1.701 OFFCURVE",
"747.986 62.246 OFFCURVE",
"855 182 CURVE",
"775 276 LINE SMOOTH",
"761.667 292 OFFCURVE",
"741 302 OFFCURVE",
"721 302 CURVE SMOOTH",
"651.769 302 OFFCURVE",
"611.908 216 OFFCURVE",
"505 216 CURVE SMOOTH",
"411.41 216 OFFCURVE",
"351 295.413 OFFCURVE",
"351 422 CURVE SMOOTH",
"351 546 OFFCURVE",
"380.667 644.333 OFFCURVE",
"426 711 CURVE SMOOTH",
"471.333 777.667 OFFCURVE",
"531.667 814 OFFCURVE",
"593 814 CURVE SMOOTH",
"667.362 814 OFFCURVE",
"709.383 761 OFFCURVE",
"755 761 CURVE SMOOTH",
"777.667 761 OFFCURVE",
"796.333 774.333 OFFCURVE",
"811 789 CURVE",
"911 904 LINE",
"832.333 1005.333 OFFCURVE",
"737.667 1051 OFFCURVE",
"599 1051 CURVE SMOOTH",
"436.333 1051 OFFCURVE",
"297.833 978.667 OFFCURVE",
"198.5 864 CURVE SMOOTH",
"99.167 749.333 OFFCURVE",
"41 592.333 OFFCURVE",
"41 423 CURVE SMOOTH",
"41 309.667 OFFCURVE",
"68.5 213.167 OFFCURVE",
"118.5 140.5 CURVE SMOOTH",
"168.5 67.833 OFFCURVE",
"240.667 17.333 OFFCURVE",
"330 -4 CURVE",
"279 -136 LINE",
"321 -142 OFFCURVE",
"350.5 -148.5 OFFCURVE",
"367.5 -155.5 CURVE SMOOTH",
"384.5 -162.5 OFFCURVE",
"393 -172.667 OFFCURVE",
"393 -186 CURVE SMOOTH",
"393 -204.667 OFFCURVE",
"379.667 -224 OFFCURVE",
"349 -224 CURVE SMOOTH",
"337 -224 OFFCURVE",
"327.167 -222.333 OFFCURVE",
"319.5 -219 CURVE SMOOTH",
"311.833 -215.667 OFFCURVE",
"303 -214 OFFCURVE",
"293 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 66 64 48 46 43 41 33 31 28 26 21 19 4 2 0 71 1 71 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
23 1 4 2 57 51 10 9 4 0 5 68 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 0 4 4 2 1 0 36 0 2 2 20 31 1 8 2 0 0 7 1 0 36 0 7 7 16 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
23 1 4 2 57 51 10 9 4 0 5 68 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 4 4 2 1 0 36 0 2 2 20 31 0 1 1 7 1 0 36 0 7 7 16 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
23 1 4 2 57 51 10 9 4 0 5 68 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 1 0 7 1 7 1 0 37 0 4 4 2 1 0 36 0 2 2 20 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
23 1 4 2 57 51 10 9 4 0 5 68 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 2 0 4 3 2 4 1 0 38 0 1 7 7 1 1 0 35 0 1 1 7 1 0 36 0 7 1 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 876;
}
);
note = ccedilla;
unicode = 00E7;
},
{
glyphname = d;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"931 0 LINE",
"1117 1497 LINE",
"813 1497 LINE",
"747 975 LINE",
"695 1021.667 OFFCURVE",
"626.333 1053 OFFCURVE",
"541 1053 CURVE SMOOTH",
"496.333 1053 OFFCURVE",
"453 1044.667 OFFCURVE",
"411 1028 CURVE SMOOTH",
"327 994.667 OFFCURVE",
"250.667 934.833 OFFCURVE",
"188 851.5 CURVE SMOOTH",
"156.667 809.833 OFFCURVE",
"129.667 764 OFFCURVE",
"107 714 CURVE SMOOTH",
"61.667 614 OFFCURVE",
"35 498 OFFCURVE",
"35 378 CURVE SMOOTH",
"35 239.333 OFFCURVE",
"65.167 141 OFFCURVE",
"116.5 77 CURVE SMOOTH",
"167.833 13 OFFCURVE",
"239.667 -16 OFFCURVE",
"325 -16 CURVE SMOOTH",
"454.333 -16 OFFCURVE",
"570.333 59.667 OFFCURVE",
"665 185 CURVE",
"665 98 LINE SMOOTH",
"665 37.491 OFFCURVE",
"691.213 0 OFFCURVE",
"765 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"385 220 OFFCURVE",
"343 276 OFFCURVE",
"343 408 CURVE SMOOTH",
"343 512 OFFCURVE",
"369 616.5 OFFCURVE",
"413 694.5 CURVE SMOOTH",
"457 772.5 OFFCURVE",
"519 825 OFFCURVE",
"591 825 CURVE SMOOTH",
"633.667 825 OFFCURVE",
"684.333 812.667 OFFCURVE",
"723 782 CURVE",
"691 530 LINE",
"664.333 443.333 OFFCURVE",
"625.833 366 OFFCURVE",
"582.5 310 CURVE SMOOTH",
"539.167 254 OFFCURVE",
"491.667 220 OFFCURVE",
"449 220 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
29 28 1 0 38 36 28 44 29 44 26 25 22 20 10 8 0 27 1 27 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
24 1 5 2 34 1 4 5 6 1 0 4 3 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 1 6 2 0 0 12 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
24 1 5 2 34 1 4 5 6 1 0 4 3 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 12 31 7 1 4 4 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
24 1 5 2 34 1 4 5 6 1 0 4 3 30 7 1 4 0 1 4 1 1 0 37 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 3 0 0 36 0 3 3 13 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
24 1 5 2 34 1 4 5 6 1 0 4 3 30 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 1 0 37 6 1 0 0 3 0 0 36 0 3 3 13 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
24 1 5 2 34 1 4 5 6 1 0 4 3 30 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 0 35 0 3 6 1 0 1 3 0 1 0 38 7 1 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1102;
}
);
note = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"461 960 LINE",
"683 1089 LINE",
"760.333 1015.667 OFFCURVE",
"794.333 925.333 OFFCURVE",
"801 808 CURVE",
"739.667 890.667 OFFCURVE",
"652.333 935 OFFCURVE",
"531 935 CURVE SMOOTH",
"392.333 935 OFFCURVE",
"270 874.833 OFFCURVE",
"182 779.5 CURVE SMOOTH",
"94 684.167 OFFCURVE",
"41 552.333 OFFCURVE",
"41 411 CURVE SMOOTH",
"41 279 OFFCURVE",
"83.667 171.333 OFFCURVE",
"157 98 CURVE SMOOTH",
"230.333 24.667 OFFCURVE",
"334.333 -16 OFFCURVE",
"457 -16 CURVE SMOOTH",
"638.333 -16 OFFCURVE",
"784 54 OFFCURVE",
"884 182 CURVE SMOOTH",
"984 310 OFFCURVE",
"1039 496 OFFCURVE",
"1039 728 CURVE SMOOTH",
"1039 918.667 OFFCURVE",
"986 1068.333 OFFCURVE",
"894 1183 CURVE",
"985 1236 LINE SMOOTH",
"1007.667 1249.333 OFFCURVE",
"1016 1265.333 OFFCURVE",
"1016 1284 CURVE SMOOTH",
"1016 1294 OFFCURVE",
"1013.333 1304.333 OFFCURVE",
"1008 1315 CURVE SMOOTH",
"958 1410 LINE",
"767 1303 LINE",
"667 1375 OFFCURVE",
"548.333 1420.333 OFFCURVE",
"415 1443 CURVE",
"369 1351 LINE SMOOTH",
"358.333 1331 OFFCURVE",
"353 1314 OFFCURVE",
"353 1298 CURVE SMOOTH",
"353 1268 OFFCURVE",
"373.333 1246.333 OFFCURVE",
"414 1233 CURVE SMOOTH",
"455.333 1218.333 OFFCURVE",
"492.333 1205 OFFCURVE",
"527 1189 CURVE",
"423 1129 LINE",
"408.333 1119.667 OFFCURVE",
"397 1103.667 OFFCURVE",
"397 1085 CURVE SMOOTH",
"397 1074.333 OFFCURVE",
"399.667 1065 OFFCURVE",
"405 1057 CURVE"
);
},
{
closed = 1;
nodes = (
"401 205 OFFCURVE",
"337 282.667 OFFCURVE",
"337 424 CURVE SMOOTH",
"337 584.227 OFFCURVE",
"422.609 715 OFFCURVE",
"565 715 CURVE SMOOTH",
"664.752 715 OFFCURVE",
"716.393 652.344 OFFCURVE",
"744 564 CURVE",
"724 424 OFFCURVE",
"687.167 334.667 OFFCURVE",
"642.5 280 CURVE SMOOTH",
"597.833 225.333 OFFCURVE",
"545 205 OFFCURVE",
"493 205 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
53 52 63 61 52 69 53 69 45 43 35 33 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
47 1 3 1 57 1 2 3 2 30 51 50 26 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
47 1 3 1 57 1 2 3 2 30 51 50 26 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 0 0 2 1 0 35 4 1 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1068;
}
);
note = eth;
unicode = 00F0;
},
{
glyphname = e;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"951 846 OFFCURVE",
"919.667 913.167 OFFCURVE",
"861 964.5 CURVE SMOOTH",
"802.333 1015.833 OFFCURVE",
"715.667 1051 OFFCURVE",
"605 1051 CURVE SMOOTH",
"549 1051 OFFCURVE",
"496.167 1043.167 OFFCURVE",
"446.5 1027.5 CURVE SMOOTH",
"347.167 996.167 OFFCURVE",
"263.667 939.5 OFFCURVE",
"197 861.5 CURVE SMOOTH",
"163.667 822.5 OFFCURVE",
"135.5 779.833 OFFCURVE",
"112.5 733.5 CURVE SMOOTH",
"66.5 640.833 OFFCURVE",
"41 533.667 OFFCURVE",
"41 423 CURVE SMOOTH",
"41 291 OFFCURVE",
"83.5 181.167 OFFCURVE",
"157.5 104.5 CURVE SMOOTH",
"231.5 27.833 OFFCURVE",
"336.333 -16 OFFCURVE",
"459 -16 CURVE SMOOTH",
"557.667 -16 OFFCURVE",
"639.5 -0.5 OFFCURVE",
"713.5 33.5 CURVE SMOOTH",
"787.5 67.5 OFFCURVE",
"855.667 120 OFFCURVE",
"929 192 CURVE",
"849 285 LINE SMOOTH",
"834.333 301 OFFCURVE",
"815 312 OFFCURVE",
"795 312 CURVE SMOOTH",
"751.431 312 OFFCURVE",
"720.295 287.53 OFFCURVE",
"685 264 CURVE SMOOTH",
"644.104 236.736 OFFCURVE",
"594.456 216 OFFCURVE",
"521 216 CURVE SMOOTH",
"405 216 OFFCURVE",
"345.667 278.667 OFFCURVE",
"343 420 CURVE",
"580.333 444 OFFCURVE",
"732.833 486.833 OFFCURVE",
"825.5 547.5 CURVE SMOOTH",
"918.167 608.167 OFFCURVE",
"951 687.333 OFFCURVE",
"951 782 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"645.667 842 OFFCURVE",
"671 804.667 OFFCURVE",
"671 770 CURVE SMOOTH",
"671 735.333 OFFCURVE",
"659 705.5 OFFCURVE",
"615 679.5 CURVE SMOOTH",
"571 653.5 OFFCURVE",
"494.333 632 OFFCURVE",
"365 612 CURVE",
"403.667 754.667 OFFCURVE",
"484.333 842 OFFCURVE",
"587 842 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
42 41 41 51 42 51 37 35 25 23 16 14 9 7 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
44 5 2 1 4 19 1 2 0 2 30 0 1 4 0 4 1 0 50 5 1 4 4 3 1 0 36 0 3 3 20 31 0 0 0 2 1 0 36 0 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
44 5 2 1 4 19 1 2 0 2 30 0 1 4 0 4 1 0 50 0 0 0 2 0 2 1 0 37 5 1 4 4 3 1 0 36 0 3 3 20 4 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
44 5 2 1 4 19 1 2 0 2 30 0 1 4 0 4 1 0 50 0 3 5 1 4 1 3 4 1 0 38 0 0 2 2 0 1 0 35 0 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 968;
}
);
note = e;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 217, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 968;
}
);
note = eacute;
unicode = 00E9;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 217, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 968;
}
);
note = ecircumflex;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 217, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 968;
}
);
note = edieresis;
unicode = 00EB;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 275, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 968;
}
);
note = egrave;
unicode = 00E8;
},
{
glyphname = eogonek;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"589 -171 OFFCURVE",
"583.333 -172.5 OFFCURVE",
"578 -175.5 CURVE SMOOTH",
"572.667 -178.5 OFFCURVE",
"561 -180 OFFCURVE",
"543 -180 CURVE SMOOTH",
"516.333 -180 OFFCURVE",
"503 -160.667 OFFCURVE",
"503 -134 CURVE SMOOTH",
"503 -78 OFFCURVE",
"543.667 -33.667 OFFCURVE",
"597 -3 CURVE",
"722.333 22.333 OFFCURVE",
"819.667 84 OFFCURVE",
"929 192 CURVE",
"849 285 LINE SMOOTH",
"834.333 301 OFFCURVE",
"815 312 OFFCURVE",
"795 312 CURVE SMOOTH",
"751.431 312 OFFCURVE",
"720.295 287.53 OFFCURVE",
"685 264 CURVE SMOOTH",
"644.104 236.736 OFFCURVE",
"594.456 216 OFFCURVE",
"521 216 CURVE SMOOTH",
"405 216 OFFCURVE",
"345.667 278.667 OFFCURVE",
"343 420 CURVE",
"580.333 444 OFFCURVE",
"732.833 486.833 OFFCURVE",
"825.5 547.5 CURVE SMOOTH",
"918.167 608.167 OFFCURVE",
"951 687.333 OFFCURVE",
"951 782 CURVE SMOOTH",
"951 846 OFFCURVE",
"919.667 913.167 OFFCURVE",
"861 964.5 CURVE SMOOTH",
"802.333 1015.833 OFFCURVE",
"715.667 1051 OFFCURVE",
"605 1051 CURVE SMOOTH",
"549 1051 OFFCURVE",
"496.167 1043.167 OFFCURVE",
"446.5 1027.5 CURVE SMOOTH",
"347.167 996.167 OFFCURVE",
"263.667 939.5 OFFCURVE",
"197 861.5 CURVE SMOOTH",
"163.667 822.5 OFFCURVE",
"135.5 779.833 OFFCURVE",
"112.5 733.5 CURVE SMOOTH",
"66.5 640.833 OFFCURVE",
"41 533.667 OFFCURVE",
"41 423 CURVE SMOOTH",
"41 300.333 OFFCURVE",
"78 196.833 OFFCURVE",
"142 121.5 CURVE SMOOTH",
"206 46.167 OFFCURVE",
"297.667 -1 OFFCURVE",
"407 -13 CURVE",
"311 -74.333 OFFCURVE",
"273 -143.333 OFFCURVE",
"273 -214 CURVE SMOOTH",
"273 -290 OFFCURVE",
"333.667 -347 OFFCURVE",
"459 -347 CURVE SMOOTH",
"531 -347 OFFCURVE",
"602.333 -325 OFFCURVE",
"649 -297 CURVE",
"619 -190 LINE",
"617 -177.333 OFFCURVE",
"609 -171 OFFCURVE",
"595 -171 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"645.667 842 OFFCURVE",
"671 804.667 OFFCURVE",
"671 770 CURVE SMOOTH",
"671 735.333 OFFCURVE",
"659 705.5 OFFCURVE",
"615 679.5 CURVE SMOOTH",
"571 653.5 OFFCURVE",
"494.333 632 OFFCURVE",
"365 612 CURVE",
"403.667 754.667 OFFCURVE",
"484.333 842 OFFCURVE",
"587 842 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
61 60 1 0 60 70 61 70 58 56 45 43 38 36 25 23 7 5 0 59 1 59 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
63 34 2 4 6 48 12 2 0 3 3 1 1 0 3 30 0 4 6 3 6 4 3 50 5 7 2 0 3 1 3 0 1 50 8 1 6 6 2 1 0 36 0 2 2 20 31 0 3 3 1 1 0 36 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
63 34 2 4 6 48 12 2 0 3 3 1 1 5 3 30 0 4 6 3 6 4 3 50 7 1 0 3 5 3 0 5 50 0 5 1 3 5 1 48 8 1 6 6 2 1 0 36 0 2 2 20 31 0 3 3 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
63 34 2 4 6 48 12 2 0 3 3 1 1 5 3 30 0 4 6 3 6 4 3 50 7 1 0 3 5 3 0 5 50 0 5 1 3 5 1 48 0 3 0 1 3 1 1 0 37 8 1 6 6 2 1 0 36 0 2 2 20 6 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
63 34 2 4 6 48 12 2 0 3 3 1 1 5 3 30 0 4 6 3 6 4 3 50 7 1 0 3 5 3 0 5 50 0 5 1 3 5 1 48 0 2 8 1 6 4 2 6 1 0 38 0 3 0 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 968;
}
);
note = eogonek;
unicode = 0119;
},
{
glyphname = f;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"681 823 LINE",
"709 1035 LINE",
"499 1035 LINE",
"505 1084 LINE SMOOTH",
"521 1220 OFFCURVE",
"582.333 1268 OFFCURVE",
"685 1268 CURVE SMOOTH",
"715.667 1268 OFFCURVE",
"752.333 1275.333 OFFCURVE",
"759 1310 CURVE SMOOTH",
"787 1466 LINE",
"747 1479.333 OFFCURVE",
"709.667 1485 OFFCURVE",
"663 1485 CURVE SMOOTH",
"543 1485 OFFCURVE",
"437.667 1446 OFFCURVE",
"359 1378 CURVE SMOOTH",
"280.333 1310 OFFCURVE",
"227.667 1212.667 OFFCURVE",
"213 1094 CURVE SMOOTH",
"206 1035 LINE",
"75 1035 LINE",
"59 913 LINE",
"58.333 910.333 OFFCURVE",
"58 906.667 OFFCURVE",
"58 902 CURVE SMOOTH",
"58 866 OFFCURVE",
"84.333 846 OFFCURVE",
"119 838 CURVE SMOOTH",
"180 824 LINE",
"51 -246 LINE",
"177 -246 LINE SMOOTH",
"267.667 -246 OFFCURVE",
"313 -201.333 OFFCURVE",
"337 -124 CURVE SMOOTH",
"391 50 LINE",
"484 823 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 34 0 34 33 32 29 27 22 20 15 14 6 4 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
24 1 3 2 7 1 5 1 2 30 0 3 3 2 1 0 36 0 2 2 17 31 6 1 5 5 1 0 0 36 4 1 1 1 14 31 0 0 0 1 0 0 36 4 1 1 1 14 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
24 1 3 2 7 1 5 1 2 30 0 2 0 3 1 2 3 1 0 38 6 1 5 5 1 0 0 36 4 1 1 1 14 31 0 0 0 1 0 0 36 4 1 1 1 14 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
24 1 3 2 7 1 5 1 2 30 0 2 0 3 1 2 3 1 0 38 4 1 1 6 1 5 0 1 5 0 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
24 1 3 2 7 1 5 4 2 30 0 2 0 3 1 2 3 1 0 38 0 1 4 0 1 0 0 35 0 4 6 1 5 0 4 5 0 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"901 750.333 OFFCURVE",
"899 773 OFFCURVE",
"895 795 CURVE",
"983 825 LINE SMOOTH",
"1015.667 835.667 OFFCURVE",
"1035 861.333 OFFCURVE",
"1041 902 CURVE SMOOTH",
"1055 999 LINE",
"757 999 LINE",
"695.667 1035 OFFCURVE",
"621.667 1053 OFFCURVE",
"543 1053 CURVE SMOOTH",
"389.667 1053 OFFCURVE",
"274.5 1002.167 OFFCURVE",
"196.5 925.5 CURVE SMOOTH",
"118.5 848.833 OFFCURVE",
"79 746.667 OFFCURVE",
"79 644 CURVE SMOOTH",
"79 533.333 OFFCURVE",
"115.167 453.333 OFFCURVE",
"170.5 400 CURVE SMOOTH",
"225.833 346.667 OFFCURVE",
"300.333 321 OFFCURVE",
"379 321 CURVE SMOOTH",
"479 321 OFFCURVE",
"542 342.333 OFFCURVE",
"594 377 CURVE",
"576 331.667 OFFCURVE",
"567 291.333 OFFCURVE",
"567 256 CURVE SMOOTH",
"567 246.667 OFFCURVE",
"567 237.833 OFFCURVE",
"567 229.5 CURVE SMOOTH",
"567 221.167 OFFCURVE",
"567.667 213 OFFCURVE",
"569 205 CURVE",
"522.333 214.333 OFFCURVE",
"466.333 220 OFFCURVE",
"405 220 CURVE SMOOTH",
"297 220 OFFCURVE",
"177.333 202.833 OFFCURVE",
"84 155.5 CURVE SMOOTH",
"-9.333 108.167 OFFCURVE",
"-75 32.333 OFFCURVE",
"-75 -85 CURVE SMOOTH",
"-75 -161 OFFCURVE",
"-33.5 -229 OFFCURVE",
"40.5 -277 CURVE SMOOTH",
"114.5 -325 OFFCURVE",
"222.333 -355 OFFCURVE",
"357 -355 CURVE SMOOTH",
"521 -355 OFFCURVE",
"651 -309.833 OFFCURVE",
"739 -238.5 CURVE SMOOTH",
"827 -167.167 OFFCURVE",
"875 -68.667 OFFCURVE",
"875 38 CURVE SMOOTH",
"875 168.124 OFFCURVE",
"789 242.176 OFFCURVE",
"789 352 CURVE SMOOTH",
"789 506.369 OFFCURVE",
"901 560.681 OFFCURVE",
"901 727 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"397 501 OFFCURVE",
"361 554 OFFCURVE",
"361 642 CURVE SMOOTH",
"361 750.765 OFFCURVE",
"408.635 852 OFFCURVE",
"507 852 CURVE SMOOTH",
"581.667 852 OFFCURVE",
"617 801.667 OFFCURVE",
"617 715 CURVE SMOOTH",
"617 611.207 OFFCURVE",
"565.485 501 OFFCURVE",
"469 501 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"593 -87.135 OFFCURVE",
"501.635 -150 OFFCURVE",
"383 -150 CURVE SMOOTH",
"264.333 -150 OFFCURVE",
"219 -115 OFFCURVE",
"219 -47 CURVE SMOOTH",
"219 17.691 OFFCURVE",
"295.689 53 OFFCURVE",
"421 53 CURVE SMOOTH",
"467.667 53 OFFCURVE",
"524 47.667 OFFCURVE",
"592 37 CURVE",
"592.667 33.667 OFFCURVE",
"593 30 OFFCURVE",
"593 26 CURVE SMOOTH",
"593 22 OFFCURVE",
"593 18 OFFCURVE",
"593 14 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
57 56 87 85 79 77 65 63 56 71 57 71 50 49 47 45 37 35 26 24 16 14 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
54 1 5 6 33 1 2 5 28 1 7 1 3 30 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 4 4 14 31 0 6 6 3 1 0 36 0 3 3 20 31 0 8 8 0 1 0 36 0 0 0 16 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
54 1 5 6 33 1 2 5 28 1 7 1 3 30 0 4 3 6 3 4 6 50 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 6 6 3 1 0 36 0 3 3 20 31 0 8 8 0 1 0 36 0 0 0 16 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
54 1 5 6 33 1 2 5 28 1 7 1 3 30 0 4 3 6 3 4 6 50 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 8 0 0 8 0 1 0 37 0 6 6 3 1 0 36 0 3 3 20 6 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
54 1 5 6 33 1 2 5 28 1 7 1 3 30 0 4 3 6 3 4 6 50 0 3 0 6 5 3 6 1 0 38 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 8 0 0 8 1 0 35 0 8 8 0 1 0 36 0 0 8 0 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1008;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"353 0 LINE",
"420 550 LINE",
"463.023 691.019 OFFCURVE",
"563.073 810 OFFCURVE",
"655 810 CURVE SMOOTH",
"705.667 810 OFFCURVE",
"731 786 OFFCURVE",
"731 714 CURVE SMOOTH",
"731 698 OFFCURVE",
"729.667 680.333 OFFCURVE",
"727 659 CURVE SMOOTH",
"649 0 LINE",
"959 0 LINE",
"1037 659 LINE SMOOTH",
"1039.667 685.667 OFFCURVE",
"1042 711 OFFCURVE",
"1042 735 CURVE SMOOTH",
"1042 837.667 OFFCURVE",
"1013.667 916.5 OFFCURVE",
"967 970.5 CURVE SMOOTH",
"920.333 1024.5 OFFCURVE",
"852.333 1053 OFFCURVE",
"775 1053 CURVE SMOOTH",
"663 1053 OFFCURVE",
"556.667 1005 OFFCURVE",
"462 901 CURVE",
"535 1497 LINE",
"225 1497 LINE",
"43 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 29 0 29 24 22 16 15 7 5 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
3 1 3 1 1 30 0 3 1 2 1 3 2 50 0 0 0 13 31 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
3 1 3 1 1 30 0 3 1 2 1 3 2 50 5 4 2 2 2 0 0 0 36 0 0 0 13 31 5 4 2 2 2 1 1 0 36 0 1 1 20 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
3 1 3 1 1 30 0 3 1 2 1 3 2 50 0 1 3 2 1 1 0 35 5 4 2 2 2 0 0 0 36 0 0 0 13 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
3 1 3 1 1 30 0 3 1 2 1 3 2 50 0 0 1 2 0 0 0 35 0 1 3 2 1 1 0 35 0 1 1 2 0 0 36 5 4 2 2 1 2 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
3 1 3 1 1 30 0 3 1 4 1 3 4 50 0 1 3 2 1 1 0 35 0 0 5 1 4 2 0 4 0 0 38 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1108;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"179 1037 LINE",
"55 0 LINE",
"361 0 LINE",
"485 1037 LINE"
);
},
{
closed = 1;
nodes = (
"543 1421.497 OFFCURVE",
"454.872 1503 OFFCURVE",
"359 1503 CURVE SMOOTH",
"265.144 1503 OFFCURVE",
"179 1418.121 OFFCURVE",
"179 1321 CURVE SMOOTH",
"179 1224.759 OFFCURVE",
"264.299 1141 OFFCURVE",
"357 1141 CURVE SMOOTH",
"451.006 1141 OFFCURVE",
"543 1224.691 OFFCURVE",
"543 1321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 20 18 10 8 0 3 0 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 19 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 1 0 36 0 3 3 19 31 0 0 0 1 0 0 36 4 1 1 1 14 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
4 1 1 0 0 1 0 0 0 37 0 2 2 3 1 0 36 0 3 3 19 2 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 3 0 2 1 3 2 1 0 38 4 1 1 0 0 1 0 0 35 4 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 540;
}
);
note = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"179 1037 LINE",
"55 0 LINE",
"361 0 LINE",
"485 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 14 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 0 0 1 0 0 36 2 1 1 1 14 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 540;
}
);
note = dotlessi;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, -50, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 540;
}
);
note = iacute;
unicode = 00ED;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -50, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 540;
}
);
note = icircumflex;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -50, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 540;
}
);
note = idieresis;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 7, 0}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 540;
}
);
note = igrave;
unicode = 00EC;
},
{
glyphname = j;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"183 1037 LINE",
"57 -2 LINE SMOOTH",
"44.373 -103.015 OFFCURVE",
"20.848 -135 OFFCURVE",
"-67 -135 CURVE SMOOTH",
"-111 -135 OFFCURVE",
"-125.667 -148 OFFCURVE",
"-131 -176 CURVE SMOOTH",
"-161 -339 LINE",
"-118.333 -351 OFFCURVE",
"-81.667 -357 OFFCURVE",
"-23 -357 CURVE SMOOTH",
"95.667 -357 OFFCURVE",
"186.167 -317.167 OFFCURVE",
"249.5 -252.5 CURVE SMOOTH",
"312.833 -187.833 OFFCURVE",
"349 -99.333 OFFCURVE",
"361 -2 CURVE SMOOTH",
"487 1037 LINE"
);
},
{
closed = 1;
nodes = (
"533 1421.497 OFFCURVE",
"444.872 1503 OFFCURVE",
"349 1503 CURVE SMOOTH",
"255.144 1503 OFFCURVE",
"169 1418.121 OFFCURVE",
"169 1321 CURVE SMOOTH",
"169 1224.759 OFFCURVE",
"254.299 1141 OFFCURVE",
"347 1141 CURVE SMOOTH",
"441.006 1141 OFFCURVE",
"533 1224.691 OFFCURVE",
"533 1321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 36 34 26 24 0 19 0 19 14 12 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 0 3 3 4 1 0 36 0 4 4 19 31 5 1 2 2 14 31 0 1 1 0 1 0 36 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
9 1 0 1 1 30 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 19 31 5 1 2 2 14 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 19 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 4 0 3 2 4 3 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 534;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"231 1497 LINE",
"47 0 LINE",
"353 0 LINE",
"409 459 LINE",
"441 459 LINE SMOOTH",
"478.333 459 OFFCURVE",
"490.333 452.333 OFFCURVE",
"505 419 CURVE",
"649 52 LINE SMOOTH",
"665 13.333 OFFCURVE",
"693 0 OFFCURVE",
"737 0 CURVE SMOOTH",
"1007 0 LINE",
"799 496 LINE SMOOTH",
"783 534.667 OFFCURVE",
"763 564.333 OFFCURVE",
"735 587 CURVE",
"769.667 607 OFFCURVE",
"802.333 633.333 OFFCURVE",
"829 668 CURVE SMOOTH",
"1119 1037 LINE",
"841 1037 LINE SMOOTH",
"797 1037 OFFCURVE",
"768.333 1021.667 OFFCURVE",
"743 987 CURVE SMOOTH",
"529 695 LINE SMOOTH",
"507.667 667 OFFCURVE",
"489.667 658 OFFCURVE",
"455 658 CURVE SMOOTH",
"434 658 LINE",
"537 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 30 0 30 29 28 27 25 20 18 10 8 3 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 1 5 5 13 31 0 1 1 14 31 4 1 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 1 5 5 13 31 4 1 2 2 1 1 0 36 0 1 1 14 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 0 1 4 1 2 1 2 1 0 37 6 1 5 5 13 5 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
14 1 3 0 1 30 6 1 5 1 5 52 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 2 38 0 1 1 2 1 0 36 4 1 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
14 1 3 0 1 30 6 1 5 1 5 52 0 4 3 2 3 4 2 50 0 1 0 2 1 1 0 35 0 0 0 3 4 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1074;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"349 0 LINE",
"531 1497 LINE",
"225 1497 LINE",
"43 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 0 13 31 2 1 1 1 12 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 1 1 0 0 0 36 0 0 0 13 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 24 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 2 1 1 0 1 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 520;
}
);
note = l;
unicode = 006C;
},
{
glyphname = lslash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"67 566 LINE",
"187 613 LINE",
"113 0 LINE",
"419 0 LINE",
"506 720 LINE",
"637 774 LINE SMOOTH",
"663.667 784 OFFCURVE",
"677 804.667 OFFCURVE",
"677 836 CURVE SMOOTH",
"677 1010 LINE",
"535 954 LINE",
"601 1497 LINE",
"295 1497 LINE",
"216 846 LINE",
"103 800 LINE SMOOTH",
"79 790 OFFCURVE",
"67 772 OFFCURVE",
"67 746 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
13 12 5 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 14 7 6 4 1 0 1 30 0 0 0 13 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
15 14 7 6 4 1 0 1 30 0 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
15 14 7 6 4 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = lslash;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"339 0 LINE",
"407 563 LINE",
"445.682 698.387 OFFCURVE",
"513.992 808 OFFCURVE",
"605 808 CURVE SMOOTH",
"647.667 808 OFFCURVE",
"669 785 OFFCURVE",
"669 717 CURVE SMOOTH",
"669 699.667 OFFCURVE",
"667.667 681.667 OFFCURVE",
"665 659 CURVE SMOOTH",
"587 0 LINE",
"893 0 LINE",
"960 568 LINE",
"998.782 701.312 OFFCURVE",
"1067.135 808 OFFCURVE",
"1157 808 CURVE SMOOTH",
"1199.667 808 OFFCURVE",
"1221 785 OFFCURVE",
"1221 717 CURVE SMOOTH",
"1221 699.667 OFFCURVE",
"1219.667 681.667 OFFCURVE",
"1217 659 CURVE SMOOTH",
"1139 0 LINE",
"1445 0 LINE",
"1523 659 LINE SMOOTH",
"1525.667 687 OFFCURVE",
"1528 714.667 OFFCURVE",
"1528 740 CURVE SMOOTH",
"1528 841.333 OFFCURVE",
"1502.167 918.667 OFFCURVE",
"1457.5 972 CURVE SMOOTH",
"1412.833 1025.333 OFFCURVE",
"1348.333 1053 OFFCURVE",
"1271 1053 CURVE SMOOTH",
"1133.667 1053 OFFCURVE",
"1027 983.333 OFFCURVE",
"935 830 CURVE",
"913.667 975.333 OFFCURVE",
"832.333 1053 OFFCURVE",
"715 1053 CURVE SMOOTH",
"608.333 1053 OFFCURVE",
"511 997.333 OFFCURVE",
"423 880 CURVE",
"423 941 LINE SMOOTH",
"423 1009 OFFCURVE",
"385 1037 OFFCURVE",
"321 1037 CURVE SMOOTH",
"161 1037 LINE",
"35 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 52 0 52 47 45 39 38 33 31 25 24 16 14 10 8 3 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
12 6 2 4 0 1 30 6 1 4 4 0 1 0 36 2 1 2 0 0 14 31 8 7 5 3 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
12 6 2 4 0 1 30 0 0 0 14 31 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
12 6 2 4 0 1 30 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 0 1 0 36 0 0 0 14 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
12 6 2 4 0 1 30 0 0 4 3 0 1 0 35 2 1 1 6 1 4 3 1 4 1 0 38 0 0 0 3 0 0 36 8 7 5 3 3 0 3 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
12 6 2 6 0 1 30 0 6 0 4 0 6 4 50 0 3 5 3 53 0 1 2 5 1 1 0 35 0 2 0 4 7 2 4 1 0 38 0 0 8 1 7 5 0 7 0 0 38 0 1 1 5 0 0 36 0 5 1 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1594;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"951 0 LINE",
"1029 659 LINE SMOOTH",
"1031.667 685.667 OFFCURVE",
"1034 711 OFFCURVE",
"1034 735 CURVE SMOOTH",
"1034 837.667 OFFCURVE",
"1005.667 916.5 OFFCURVE",
"959 970.5 CURVE SMOOTH",
"912.333 1024.5 OFFCURVE",
"846.333 1053 OFFCURVE",
"769 1053 CURVE SMOOTH",
"642.333 1053 OFFCURVE",
"521 991.333 OFFCURVE",
"421 858 CURVE",
"421 941 LINE SMOOTH",
"421 1009 OFFCURVE",
"383 1037 OFFCURVE",
"319 1037 CURVE SMOOTH",
"159 1037 LINE",
"35 0 LINE",
"345 0 LINE",
"402 515 LINE",
"423.333 603 OFFCURVE",
"462.833 677.333 OFFCURVE",
"507.5 728 CURVE SMOOTH",
"552.167 778.667 OFFCURVE",
"603.667 808 OFFCURVE",
"649 808 CURVE SMOOTH",
"698.333 808 OFFCURVE",
"723 784.667 OFFCURVE",
"723 714 CURVE SMOOTH",
"723 698 OFFCURVE",
"721.667 680.333 OFFCURVE",
"719 659 CURVE SMOOTH",
"641 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 32 0 32 24 22 17 15 14 13 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
20 1 0 2 1 30 0 0 0 2 1 0 36 3 1 2 2 14 31 5 4 2 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
20 1 0 2 1 30 0 2 2 14 31 0 0 0 3 1 0 36 0 3 3 20 31 5 4 2 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
20 1 0 2 1 30 0 0 0 3 1 0 36 0 3 3 20 31 5 4 2 1 1 2 1 0 36 0 2 2 14 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
20 1 0 2 1 30 0 2 0 1 2 1 0 35 0 3 0 0 1 3 0 1 0 38 0 2 2 1 0 0 36 5 4 2 1 2 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
20 1 0 2 1 30 5 1 4 0 1 0 4 1 50 0 2 0 1 2 1 0 35 0 3 0 0 4 3 0 1 0 38 0 2 2 1 0 0 36 0 1 2 1 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1100;
}
);
note = n;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 257, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1100;
}
);
note = nacute;
unicode = 0144;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 257, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1100;
}
);
note = ntilde;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"379 214 OFFCURVE",
"341 276 OFFCURVE",
"341 424 CURVE SMOOTH",
"341 533.333 OFFCURVE",
"362.5 634 OFFCURVE",
"400.5 706 CURVE SMOOTH",
"438.5 778 OFFCURVE",
"493.667 823 OFFCURVE",
"563 823 CURVE SMOOTH",
"655 823 OFFCURVE",
"693 763.667 OFFCURVE",
"693 613 CURVE SMOOTH",
"693 503.667 OFFCURVE",
"671.5 404.167 OFFCURVE",
"633.5 331.5 CURVE SMOOTH",
"595.5 258.833 OFFCURVE",
"540.333 214 OFFCURVE",
"471 214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"592.333 -16 OFFCURVE",
"732.333 50.833 OFFCURVE",
"835 163.5 CURVE SMOOTH",
"937.667 276.167 OFFCURVE",
"1003 433.667 OFFCURVE",
"1003 615 CURVE SMOOTH",
"1003 756.333 OFFCURVE",
"957.5 865.5 OFFCURVE",
"883.5 939.5 CURVE SMOOTH",
"809.5 1013.5 OFFCURVE",
"707 1053 OFFCURVE",
"591 1053 CURVE SMOOTH",
"441.667 1053 OFFCURVE",
"301.667 987 OFFCURVE",
"199 875 CURVE SMOOTH",
"96.333 763 OFFCURVE",
"31 606 OFFCURVE",
"31 422 CURVE SMOOTH",
"31 280.667 OFFCURVE",
"75.5 171.5 OFFCURVE",
"149.5 97.5 CURVE SMOOTH",
"223.5 23.5 OFFCURVE",
"327 -16 OFFCURVE",
"443 -16 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 1 0 27 25 16 35 17 35 9 7 0 15 1 15 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 1 3 1 0 36 0 3 3 20 31 4 1 0 0 2 1 0 36 5 1 2 2 18 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
4 1 0 5 1 2 0 2 1 0 37 0 1 1 3 1 0 36 0 3 3 20 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 3 0 1 0 3 1 1 0 38 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 5 1 2 0 2 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1034;
}
);
note = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1034;
}
);
note = oacute;
unicode = 00F3;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1034;
}
);
note = ocircumflex;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1034;
}
);
note = odieresis;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 261, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1034;
}
);
note = ograve;
unicode = 00F2;
},
{
glyphname = oslash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"592.333 -16 OFFCURVE",
"732.333 50.833 OFFCURVE",
"835 163.5 CURVE SMOOTH",
"937.667 276.167 OFFCURVE",
"1003 433.667 OFFCURVE",
"1003 615 CURVE SMOOTH",
"1003 727 OFFCURVE",
"975 817.333 OFFCURVE",
"927 888 CURVE",
"1071 1084 LINE",
"919 1084 LINE SMOOTH",
"851.007 1084 OFFCURVE",
"825.128 1063.504 OFFCURVE",
"785 1010 CURVE",
"725.667 1038.667 OFFCURVE",
"661 1053 OFFCURVE",
"591 1053 CURVE SMOOTH",
"441.667 1053 OFFCURVE",
"301.667 987 OFFCURVE",
"199 875 CURVE SMOOTH",
"96.333 763 OFFCURVE",
"31 606 OFFCURVE",
"31 422 CURVE SMOOTH",
"31 310 OFFCURVE",
"58 219.667 OFFCURVE",
"106 149 CURVE",
"-35 -43 LINE",
"77 -43 LINE SMOOTH",
"135.667 -43 OFFCURVE",
"200 -23.667 OFFCURVE",
"248 27 CURVE",
"306.667 -1.667 OFFCURVE",
"371.667 -16 OFFCURVE",
"443 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"448.333 195 OFFCURVE",
"427.667 199.667 OFFCURVE",
"409 209 CURVE",
"712 631 LINE",
"712 627.667 OFFCURVE",
"712.167 624.667 OFFCURVE",
"712.5 622 CURVE SMOOTH",
"712.833 619.333 OFFCURVE",
"713 616.333 OFFCURVE",
"713 613 CURVE SMOOTH",
"713 485 OFFCURVE",
"686.833 380 OFFCURVE",
"643.5 308 CURVE SMOOTH",
"600.167 236 OFFCURVE",
"540.333 195 OFFCURVE",
"471 195 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"321 424 LINE SMOOTH",
"321 553.333 OFFCURVE",
"347.167 658 OFFCURVE",
"390.5 730 CURVE SMOOTH",
"433.833 802 OFFCURVE",
"493.667 842 OFFCURVE",
"563 842 CURVE SMOOTH",
"583.667 842 OFFCURVE",
"603.333 837.667 OFFCURVE",
"622 829 CURVE",
"321 407 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
33 32 1 0 47 45 32 42 33 42 23 21 16 14 6 4 0 31 1 31 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
16 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 5 5 2 1 0 36 3 1 2 2 20 31 7 1 4 4 0 1 0 36 1 6 2 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
18 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 3 20 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 1 6 2 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 3 20 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 6 1 0 0 18 31 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 2 3 52 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 6 1 0 0 18 31 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 2 3 52 0 1 0 1 53 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 6 1 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 2 3 52 0 1 0 1 53 7 1 4 6 1 0 1 4 0 1 0 38 0 5 5 2 1 0 36 0 2 2 20 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
24 17 2 5 2 44 43 41 40 4 4 5 7 2 2 0 4 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 5 4 2 5 1 0 38 7 1 4 0 0 4 1 0 35 7 1 4 4 0 1 0 36 6 1 0 4 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1034;
}
);
note = oslash;
unicode = 00F8;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1034;
}
);
note = otilde;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1086.667 1051 OFFCURVE",
"971.667 1000 OFFCURVE",
"885 916 CURVE",
"825 1002.667 OFFCURVE",
"731.667 1051 OFFCURVE",
"609 1051 CURVE SMOOTH",
"560.333 1051 OFFCURVE",
"512.333 1044.5 OFFCURVE",
"465 1031.5 CURVE SMOOTH",
"370.333 1005.5 OFFCURVE",
"284 954 OFFCURVE",
"212 878 CURVE SMOOTH",
"176 840 OFFCURVE",
"144.833 795.5 OFFCURVE",
"118.5 744.5 CURVE SMOOTH",
"65.833 642.5 OFFCURVE",
"34 516.667 OFFCURVE",
"34 366 CURVE SMOOTH",
"34 263.333 OFFCURVE",
"65.833 168.5 OFFCURVE",
"126.5 98.5 CURVE SMOOTH",
"187.167 28.5 OFFCURVE",
"275.667 -16 OFFCURVE",
"389 -16 CURVE SMOOTH",
"542.333 -16 OFFCURVE",
"675 45 OFFCURVE",
"775 153 CURVE",
"843 37 OFFCURVE",
"951.333 -16 OFFCURVE",
"1070 -16 CURVE SMOOTH",
"1168.667 -16 OFFCURVE",
"1250.5 -0.5 OFFCURVE",
"1324.5 33.5 CURVE SMOOTH",
"1398.5 67.5 OFFCURVE",
"1466.667 120 OFFCURVE",
"1540 192 CURVE",
"1460 285 LINE SMOOTH",
"1445.333 301 OFFCURVE",
"1426 312 OFFCURVE",
"1406 312 CURVE SMOOTH",
"1362.431 312 OFFCURVE",
"1331.295 287.53 OFFCURVE",
"1296 264 CURVE SMOOTH",
"1255.104 236.736 OFFCURVE",
"1205.456 216 OFFCURVE",
"1132 216 CURVE SMOOTH",
"1024 216 OFFCURVE",
"960.333 276 OFFCURVE",
"951 420 CURVE",
"1184.333 444 OFFCURVE",
"1334.333 487.833 OFFCURVE",
"1425 548.5 CURVE SMOOTH",
"1515.667 609.167 OFFCURVE",
"1549 686.667 OFFCURVE",
"1549 780 CURVE SMOOTH",
"1549 861.333 OFFCURVE",
"1516.833 929.167 OFFCURVE",
"1461.5 976.5 CURVE SMOOTH",
"1406.167 1023.833 OFFCURVE",
"1326.667 1051 OFFCURVE",
"1232 1051 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"368.928 206 OFFCURVE",
"336 285.83 OFFCURVE",
"336 382 CURVE SMOOTH",
"336 515.333 OFFCURVE",
"358.667 626.333 OFFCURVE",
"400 705 CURVE SMOOTH",
"441.333 783.667 OFFCURVE",
"502.333 829 OFFCURVE",
"581 829 CURVE SMOOTH",
"665 829 OFFCURVE",
"705 765.667 OFFCURVE",
"705 651 CURVE SMOOTH",
"705 636.333 OFFCURVE",
"704.333 623 OFFCURVE",
"703 607 CURVE SMOOTH",
"695 485.667 OFFCURVE",
"673.667 385.5 OFFCURVE",
"635 315.5 CURVE SMOOTH",
"596.333 245.5 OFFCURVE",
"540.333 206 OFFCURVE",
"463 206 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1255 844 OFFCURVE",
"1289 810.333 OFFCURVE",
"1289 769 CURVE SMOOTH",
"1289 737 OFFCURVE",
"1273.333 705.333 OFFCURVE",
"1224 676 CURVE SMOOTH",
"1174.667 646.667 OFFCURVE",
"1094 620 OFFCURVE",
"962 600 CURVE",
"992.667 761.333 OFFCURVE",
"1076.333 844 OFFCURVE",
"1183 844 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
75 74 54 53 1 0 74 84 75 84 65 63 53 73 54 73 48 46 36 34 30 28 21 19 14 12 0 52 1 52 12 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
50 1 7 0 77 58 10 3 2 7 32 24 2 3 1 3 30 0 2 7 1 7 2 1 50 11 8 2 7 7 0 1 0 36 5 9 2 0 0 20 31 10 6 2 1 1 3 1 0 36 4 1 3 3 18 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
50 1 8 0 77 58 10 3 2 7 32 24 2 3 1 3 30 0 2 7 1 7 2 1 50 11 1 8 8 0 1 0 36 5 9 2 0 0 20 31 0 7 7 0 1 0 36 5 9 2 0 0 20 31 10 6 2 1 1 3 1 0 36 4 1 3 3 18 3 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
50 1 8 0 77 58 10 3 2 7 32 24 2 3 6 3 30 0 2 7 1 7 2 1 50 11 1 8 8 0 1 0 36 5 9 2 0 0 20 31 0 7 7 0 1 0 36 5 9 2 0 0 20 31 0 1 1 3 1 0 36 4 1 3 3 18 31 10 1 6 6 3 1 0 36 4 1 3 3 18 3 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
50 1 8 0 77 58 10 3 2 7 32 24 2 3 6 3 30 0 2 7 1 7 2 1 50 0 1 6 3 1 1 0 35 10 1 6 4 1 3 6 3 1 0 37 11 1 8 8 0 1 0 36 5 9 2 0 0 20 31 0 7 7 0 1 0 36 5 9 2 0 0 20 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
50 1 8 0 77 58 10 3 2 7 32 24 2 3 6 3 30 0 2 7 1 7 2 1 50 11 1 8 7 0 8 1 0 35 5 9 2 0 0 7 2 0 7 1 0 38 0 1 6 3 1 1 0 35 10 1 6 3 3 6 1 0 35 10 1 6 6 3 1 0 36 4 1 3 6 3 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 81 values pushed */
50 1 8 5 77 58 10 3 2 7 32 24 2 4 6 3 30 0 2 7 1 7 2 1 50 9 1 0 11 1 8 7 0 8 1 0 38 0 5 0 7 2 5 7 1 0 38 0 1 6 3 1 1 0 35 10 1 6 0 4 3 6 4 1 0 38 0 1 1 3 1 0 36 0 3 1 3 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1568;
}
);
note = oe;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"297 -329 LINE",
"345 61 LINE",
"397 14.333 OFFCURVE",
"464.333 -16 OFFCURVE",
"551 -16 CURVE SMOOTH",
"684.333 -16 OFFCURVE",
"810.667 62 OFFCURVE",
"904 186 CURVE SMOOTH",
"997.333 310 OFFCURVE",
"1057 478.667 OFFCURVE",
"1057 660 CURVE SMOOTH",
"1057 797.333 OFFCURVE",
"1026.833 896 OFFCURVE",
"975.5 960 CURVE SMOOTH",
"924.167 1024 OFFCURVE",
"852.333 1053 OFFCURVE",
"767 1053 CURVE SMOOTH",
"635 1053 OFFCURVE",
"517.667 975 OFFCURVE",
"423 847 CURVE",
"423 941 LINE SMOOTH",
"423 1009 OFFCURVE",
"385 1037 OFFCURVE",
"321 1037 CURVE SMOOTH",
"161 1037 LINE",
"-5 -329 LINE"
);
},
{
closed = 1;
nodes = (
"707 818 OFFCURVE",
"749 761 OFFCURVE",
"749 629 CURVE SMOOTH",
"749 525 OFFCURVE",
"723 420.5 OFFCURVE",
"679 342.5 CURVE SMOOTH",
"635 264.5 OFFCURVE",
"573 212 OFFCURVE",
"501 212 CURVE SMOOTH",
"458.333 212 OFFCURVE",
"407.667 224.333 OFFCURVE",
"369 255 CURVE",
"400 505 LINE",
"425.333 591.667 OFFCURVE",
"465.167 669.833 OFFCURVE",
"508.5 726.5 CURVE SMOOTH",
"551.833 783.167 OFFCURVE",
"600.333 818 OFFCURVE",
"643 818 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
25 24 0 0 34 32 24 40 25 40 0 23 0 23 20 18 10 8 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
6 1 4 0 30 1 5 4 22 1 2 5 3 30 7 1 4 4 0 1 0 36 1 1 0 0 14 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
6 1 4 0 30 1 5 4 22 1 2 5 3 30 0 0 0 14 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
6 1 4 0 30 1 5 4 22 1 2 5 3 30 0 5 0 2 3 5 2 1 0 38 0 0 0 14 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
6 1 4 0 30 1 5 4 22 1 2 5 3 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 3 0 0 36 6 1 3 3 16 3 32 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1082;
}
);
note = p;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"197 -329 LINE SMOOTH",
"261.031 -329 OFFCURVE",
"311.47 -283.535 OFFCURVE",
"317 -231 CURVE SMOOTH",
"353 61 LINE",
"405 14.333 OFFCURVE",
"472.333 -16 OFFCURVE",
"559 -16 CURVE SMOOTH",
"692.333 -16 OFFCURVE",
"818.667 62 OFFCURVE",
"912 186 CURVE SMOOTH",
"1005.333 310 OFFCURVE",
"1065 478.667 OFFCURVE",
"1065 660 CURVE SMOOTH",
"1065 797.333 OFFCURVE",
"1034.833 896 OFFCURVE",
"983.5 960 CURVE SMOOTH",
"932.167 1024 OFFCURVE",
"860.333 1053 OFFCURVE",
"775 1053 CURVE SMOOTH",
"653.667 1053 OFFCURVE",
"544.667 985.333 OFFCURVE",
"454 876 CURVE",
"531 1497 LINE",
"225 1497 LINE",
"3 -329 LINE"
);
},
{
closed = 1;
nodes = (
"715 818 OFFCURVE",
"757 761 OFFCURVE",
"757 629 CURVE SMOOTH",
"757 525 OFFCURVE",
"731 420.5 OFFCURVE",
"687 342.5 CURVE SMOOTH",
"643 264.5 OFFCURVE",
"581 212 OFFCURVE",
"509 212 CURVE SMOOTH",
"466.333 212 OFFCURVE",
"415.667 224.333 OFFCURVE",
"377 255 CURVE",
"408 505 LINE",
"433.333 591.667 OFFCURVE",
"473.167 669.833 OFFCURVE",
"516.5 726.5 CURVE SMOOTH",
"559.833 783.167 OFFCURVE",
"608.333 818 OFFCURVE",
"651 818 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 0 0 36 34 26 42 27 42 0 25 0 24 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
3 1 4 1 32 1 5 4 19 1 2 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 2 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
3 1 4 1 32 1 5 4 19 1 2 5 3 30 0 5 0 2 3 5 2 1 2 38 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
3 1 4 1 32 1 5 4 19 1 2 5 3 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 2 38 0 0 0 13 31 6 1 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
3 1 4 1 32 1 5 4 19 1 2 5 3 30 0 0 1 0 52 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 2 38 6 1 3 3 16 3 32 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1090;
}
);
note = thorn;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1023 1007 LINE",
"924.333 1041.667 OFFCURVE",
"821.667 1053 OFFCURVE",
"723 1053 CURVE SMOOTH",
"520.333 1053 OFFCURVE",
"347.833 972.667 OFFCURVE",
"224.5 846 CURVE SMOOTH",
"101.167 719.333 OFFCURVE",
"29 545 OFFCURVE",
"29 357 CURVE SMOOTH",
"29 229 OFFCURVE",
"63.667 135.167 OFFCURVE",
"117 74.5 CURVE SMOOTH",
"170.333 13.833 OFFCURVE",
"242.333 -16 OFFCURVE",
"317 -16 CURVE SMOOTH",
"430.333 -16 OFFCURVE",
"526.667 42 OFFCURVE",
"608 142 CURVE",
"561 -223 LINE",
"560.333 -226.333 OFFCURVE",
"560 -231.333 OFFCURVE",
"560 -238 CURVE SMOOTH",
"560 -284.602 OFFCURVE",
"587.631 -329 OFFCURVE",
"651 -329 CURVE SMOOTH",
"855 -329 LINE"
);
},
{
closed = 1;
nodes = (
"373.748 229 OFFCURVE",
"339 295.924 OFFCURVE",
"339 412 CURVE SMOOTH",
"339 529.333 OFFCURVE",
"373 635.5 OFFCURVE",
"433 713.5 CURVE SMOOTH",
"493 791.5 OFFCURVE",
"577.667 840 OFFCURVE",
"679 840 CURVE SMOOTH",
"697 840 LINE",
"660 550 LINE",
"637.333 462 OFFCURVE",
"604.5 381.5 OFFCURVE",
"566.5 323.5 CURVE SMOOTH",
"528.5 265.5 OFFCURVE",
"485 229 OFFCURVE",
"441 229 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
27 26 34 32 26 42 27 42 23 21 13 11 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
25 1 4 2 9 1 1 3 2 30 5 1 3 4 1 4 3 1 50 0 4 4 2 1 0 36 0 2 2 20 31 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
25 1 4 2 9 1 1 3 2 30 5 1 3 4 1 4 3 1 50 0 1 0 4 1 0 48 0 4 4 2 1 0 36 0 2 2 20 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
25 1 4 2 9 1 1 3 2 30 5 1 3 4 1 4 3 1 50 0 1 0 4 1 0 48 0 2 0 4 3 2 4 1 0 38 0 0 0 16 0 32 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1058;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"339 0 LINE",
"395 466 LINE",
"444.333 671.333 OFFCURVE",
"525.333 759 OFFCURVE",
"628 759 CURVE SMOOTH",
"658.667 759 OFFCURVE",
"691 751.667 OFFCURVE",
"725 737 CURVE",
"781 1024 LINE",
"753.667 1036.667 OFFCURVE",
"726 1043 OFFCURVE",
"698 1043 CURVE SMOOTH",
"598 1043 OFFCURVE",
"503 964.333 OFFCURVE",
"423 823 CURVE",
"423 941 LINE SMOOTH",
"423 1009 OFFCURVE",
"385 1037 OFFCURVE",
"321 1037 CURVE SMOOTH",
"161 1037 LINE",
"35 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 18 0 18 15 13 10 8 3 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
11 6 2 2 0 12 1 3 2 2 30 0 2 2 0 1 0 36 1 1 0 0 14 31 4 1 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
11 6 2 2 0 12 1 3 2 2 30 0 0 0 14 31 0 2 2 1 1 0 36 0 1 1 14 31 4 1 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 6 2 2 0 12 1 3 2 2 30 0 2 2 1 1 0 36 0 1 1 14 31 4 1 3 3 0 1 0 36 0 0 0 14 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
11 6 2 2 0 12 1 3 2 2 30 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 0 0 36 4 1 3 0 3 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 750;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"823 929 LINE",
"752.333 998.333 OFFCURVE",
"641.667 1053 OFFCURVE",
"503 1053 CURVE SMOOTH",
"364.333 1053 OFFCURVE",
"260.5 1006.5 OFFCURVE",
"190.5 936.5 CURVE SMOOTH",
"120.5 866.5 OFFCURVE",
"85 772 OFFCURVE",
"85 676 CURVE SMOOTH",
"85 530.212 OFFCURVE",
"168.055 470.978 OFFCURVE",
"276 429 CURVE SMOOTH",
"367.432 393.443 OFFCURVE",
"467 374.549 OFFCURVE",
"467 292 CURVE SMOOTH",
"467 238.667 OFFCURVE",
"425 193 OFFCURVE",
"337 193 CURVE SMOOTH",
"234.765 193 OFFCURVE",
"191.647 269 OFFCURVE",
"129 269 CURVE SMOOTH",
"93 269 OFFCURVE",
"69.667 252.667 OFFCURVE",
"51 226 CURVE SMOOTH",
"-25 112 LINE",
"36.28 36.792 OFFCURVE",
"175.545 -16 OFFCURVE",
"297 -16 CURVE SMOOTH",
"434.333 -16 OFFCURVE",
"545.667 27.833 OFFCURVE",
"623 96.5 CURVE SMOOTH",
"700.333 165.167 OFFCURVE",
"743 261 OFFCURVE",
"743 365 CURVE SMOOTH",
"743 504.587 OFFCURVE",
"657.005 567.859 OFFCURVE",
"551 613.5 CURVE SMOOTH",
"462.815 651.468 OFFCURVE",
"359 674.638 OFFCURVE",
"359 749 CURVE SMOOTH",
"359 805 OFFCURVE",
"395 844 OFFCURVE",
"487 844 CURVE SMOOTH",
"572.427 844 OFFCURVE",
"631.25 785 OFFCURVE",
"685 785 CURVE SMOOTH",
"711.667 785 OFFCURVE",
"724.333 795 OFFCURVE",
"743 819 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
57 55 40 38 35 33 26 24 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
59 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 20 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
59 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 4 0 2 4 2 1 0 37 0 1 1 5 1 0 36 0 5 5 20 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
59 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 790;
}
);
note = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 117, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 790;
}
);
note = sacute;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 117, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 790;
}
);
note = scaron;
unicode = 0161;
},
{
glyphname = germandbls;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"646.333 1483 OFFCURVE",
"526 1428.833 OFFCURVE",
"430 1345.5 CURVE SMOOTH",
"334 1262.167 OFFCURVE",
"262 1149.667 OFFCURVE",
"222 1031 CURVE",
"53 1031 LINE",
"49.146 996.317 OFFCURVE",
"38 903.037 OFFCURVE",
"38 903 CURVE SMOOTH",
"38 868.333 OFFCURVE",
"65 851.333 OFFCURVE",
"105 842 CURVE SMOOTH",
"181 824 LINE",
"51 -246 LINE",
"177 -246 LINE SMOOTH",
"267.667 -246 OFFCURVE",
"313 -201.333 OFFCURVE",
"337 -124 CURVE SMOOTH",
"391 50 LINE",
"491 881 LINE SMOOTH",
"503 977 OFFCURVE",
"527.667 1075.5 OFFCURVE",
"569 1149.5 CURVE SMOOTH",
"610.333 1223.5 OFFCURVE",
"667.667 1274 OFFCURVE",
"745 1274 CURVE SMOOTH",
"845 1274 OFFCURVE",
"891 1223 OFFCURVE",
"891 1147 CURVE SMOOTH",
"891 1115.667 OFFCURVE",
"883.667 1089.333 OFFCURVE",
"869 1068 CURVE SMOOTH",
"839.667 1025.333 OFFCURVE",
"794.667 989.833 OFFCURVE",
"744 954.5 CURVE SMOOTH",
"718.667 936.833 OFFCURVE",
"695.167 916.167 OFFCURVE",
"673.5 892.5 CURVE SMOOTH",
"630.167 845.167 OFFCURVE",
"597 783.667 OFFCURVE",
"597 689 CURVE SMOOTH",
"597 649.667 OFFCURVE",
"604.167 616.333 OFFCURVE",
"618.5 589 CURVE SMOOTH",
"647.167 534.333 OFFCURVE",
"691.333 494.667 OFFCURVE",
"742 464 CURVE SMOOTH",
"795.519 431.607 OFFCURVE",
"887 366.792 OFFCURVE",
"887 308 CURVE SMOOTH",
"887 240.877 OFFCURVE",
"843.175 185 OFFCURVE",
"793 185 CURVE SMOOTH",
"711.091 185 OFFCURVE",
"683.964 263 OFFCURVE",
"615 263 CURVE SMOOTH",
"579 263 OFFCURVE",
"553.667 246 OFFCURVE",
"535 222 CURVE SMOOTH",
"451 112 LINE",
"518.196 39.428 OFFCURVE",
"634.503 -16 OFFCURVE",
"741 -16 CURVE SMOOTH",
"849 -16 OFFCURVE",
"956.667 17.333 OFFCURVE",
"1038 84 CURVE SMOOTH",
"1119.333 150.667 OFFCURVE",
"1173 251.333 OFFCURVE",
"1173 386 CURVE SMOOTH",
"1173 428.667 OFFCURVE",
"1166.667 465.5 OFFCURVE",
"1154 496.5 CURVE SMOOTH",
"1128.667 558.5 OFFCURVE",
"1090 604.667 OFFCURVE",
"1046 638 CURVE SMOOTH",
"998.877 673.699 OFFCURVE",
"919 730.074 OFFCURVE",
"919 775 CURVE SMOOTH",
"919 824.867 OFFCURVE",
"1001.858 880.433 OFFCURVE",
"1050 913 CURVE SMOOTH",
"1072.667 928.333 OFFCURVE",
"1093.667 946.667 OFFCURVE",
"1113 968 CURVE SMOOTH",
"1151.667 1010.667 OFFCURVE",
"1181 1068.333 OFFCURVE",
"1181 1155 CURVE SMOOTH",
"1181 1220.333 OFFCURVE",
"1157.333 1301.5 OFFCURVE",
"1096 1367.5 CURVE SMOOTH",
"1034.667 1433.5 OFFCURVE",
"935.667 1483 OFFCURVE",
"785 1483 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 82 81 71 69 61 59 39 37 34 32 25 23 0 86 1 86 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
72 1 2 6 29 1 1 3 2 30 0 2 6 3 6 2 3 50 0 4 4 0 1 0 36 7 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 31 0 5 5 6 0 0 36 0 6 6 14 5 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
72 1 2 6 29 1 1 3 2 30 0 2 6 3 6 2 3 50 7 1 0 0 4 6 0 4 1 0 38 0 3 0 1 5 3 1 1 0 38 0 5 5 6 0 0 36 0 6 6 14 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
72 1 2 6 29 1 1 3 2 30 0 2 6 3 6 2 3 50 7 1 0 0 4 6 0 4 1 0 38 0 6 2 5 6 0 0 35 0 3 0 1 5 3 1 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1214;
}
);
note = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"140.363 73.847 OFFCURVE",
"244.436 -16 OFFCURVE",
"401 -16 CURVE SMOOTH",
"497 -16 OFFCURVE",
"594.333 14 OFFCURVE",
"677 74 CURVE",
"609 221 LINE SMOOTH",
"601 239.667 OFFCURVE",
"593.667 248 OFFCURVE",
"575 248 CURVE SMOOTH",
"551.348 248 OFFCURVE",
"535.997 225 OFFCURVE",
"499 225 CURVE SMOOTH",
"460.333 225 OFFCURVE",
"443 254.333 OFFCURVE",
"443 293 CURVE SMOOTH",
"443 294.389 OFFCURVE",
"452.881 382.224 OFFCURVE",
"457 416 CURVE SMOOTH",
"507 823 LINE",
"739 823 LINE",
"765 1035 LINE",
"533 1035 LINE",
"571 1338 LINE",
"403 1338 LINE SMOOTH",
"367.667 1338 OFFCURVE",
"345 1322 OFFCURVE",
"335 1290 CURVE SMOOTH",
"248 1037 LINE",
"91 1005 LINE",
"88 978 LINE",
"88 962.243 OFFCURVE",
"76 888.145 OFFCURVE",
"76 873 CURVE SMOOTH",
"76 839.667 OFFCURVE",
"95.667 823 OFFCURVE",
"121 823 CURVE SMOOTH",
"204 823 LINE",
"151 399 LINE SMOOTH",
"143 332.333 OFFCURVE",
"138.5 294.167 OFFCURVE",
"136.5 269.5 CURVE SMOOTH",
"135.08 251.984 OFFCURVE",
"135 231.266 OFFCURVE",
"135 224 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
47 45 40 38 35 33 25 24 23 22 21 19 8 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
15 1 0 2 43 1 6 4 2 30 0 1 2 2 1 40 5 1 4 0 6 0 4 6 50 3 1 0 0 2 0 0 36 0 2 2 14 31 0 6 6 18 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
22 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
15 1 0 2 43 1 6 4 2 30 0 1 2 1 52 5 1 4 0 6 0 4 6 50 3 1 0 0 2 0 0 36 0 2 2 14 31 0 6 6 18 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
15 1 0 2 43 1 6 4 2 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 4 6 0 4 6 48 3 1 0 0 2 0 0 36 0 2 2 14 31 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
15 1 0 2 43 1 6 4 2 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 4 6 0 4 6 48 0 6 6 51 3 1 0 0 2 0 0 36 0 2 2 14 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
15 1 0 2 43 1 6 4 2 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 4 6 0 4 6 48 0 6 6 51 0 2 0 0 2 0 0 35 0 2 2 0 1 2 36 3 1 0 2 0 1 2 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
15 1 3 2 43 1 6 4 2 30 0 1 2 1 52 0 0 3 5 3 0 5 50 0 5 4 3 5 4 48 0 4 6 3 4 6 48 0 6 6 51 0 2 3 3 2 0 0 35 0 2 2 3 0 2 36 0 3 2 3 0 2 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 730;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"149 1037 LINE",
"71 379 LINE SMOOTH",
"68.333 352.333 OFFCURVE",
"66 327 OFFCURVE",
"66 303 CURVE SMOOTH",
"66 200.333 OFFCURVE",
"93.167 120.5 OFFCURVE",
"140.5 66.5 CURVE SMOOTH",
"187.833 12.5 OFFCURVE",
"253.667 -16 OFFCURVE",
"331 -16 CURVE SMOOTH",
"455 -16 OFFCURVE",
"571 42.667 OFFCURVE",
"671 168 CURVE",
"671 102 LINE SMOOTH",
"671 34 OFFCURVE",
"707.667 0 OFFCURVE",
"781 0 CURVE SMOOTH",
"939 0 LINE",
"1065 1037 LINE",
"755 1037 LINE",
"688 488 LINE",
"644.85 346.565 OFFCURVE",
"544.017 229 OFFCURVE",
"451 229 CURVE SMOOTH",
"401.667 229 OFFCURVE",
"377 253.333 OFFCURVE",
"377 324 CURVE SMOOTH",
"377 340 OFFCURVE",
"378.333 357.667 OFFCURVE",
"381 379 CURVE SMOOTH",
"459 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 31 0 31 23 21 17 15 14 13 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
19 1 2 0 1 30 5 4 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
19 1 2 0 1 30 5 4 2 1 1 14 31 0 2 2 12 31 0 0 0 3 1 2 36 0 3 3 18 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
19 1 2 0 1 30 0 0 0 3 0 3 1 2 37 0 2 2 1 0 0 36 5 4 2 1 1 14 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
19 1 2 0 1 30 0 0 2 3 0 1 0 35 5 4 2 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
19 1 2 0 1 30 5 1 4 1 0 1 4 0 50 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1098;
}
);
note = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 229, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1098;
}
);
note = uacute;
unicode = 00FA;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 229, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1098;
}
);
note = ucircumflex;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 229, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1098;
}
);
note = udieresis;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 287, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1098;
}
);
note = ugrave;
unicode = 00F9;
},
{
glyphname = v;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"315 0 LINE",
"577 0 LINE",
"1081 1037 LINE",
"835 1037 LINE SMOOTH",
"799 1037 OFFCURVE",
"765 1015 OFFCURVE",
"753 983 CURVE SMOOTH",
"571 518 LINE SMOOTH",
"539 436.667 OFFCURVE",
"510 363.667 OFFCURVE",
"486 289 CURVE",
"480.667 365 OFFCURVE",
"473 439.333 OFFCURVE",
"461 518 CURVE SMOOTH",
"393 983 LINE SMOOTH",
"387.667 1013.667 OFFCURVE",
"361.667 1037 OFFCURVE",
"319 1037 CURVE SMOOTH",
"63 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 14 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 0 1 30 0 2 2 0 1 0 36 1 1 0 0 14 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
8 1 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
8 1 2 1 1 30 0 1 0 2 0 1 2 50 0 0 1 2 0 1 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1032;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"243 0 LINE",
"475 0 LINE SMOOTH",
"505 0 OFFCURVE",
"527 17.333 OFFCURVE",
"541 52 CURVE SMOOTH",
"739 567 LINE SMOOTH",
"744.333 581.667 OFFCURVE",
"750 596.333 OFFCURVE",
"756 611 CURVE SMOOTH",
"762 625.667 OFFCURVE",
"767.667 640.667 OFFCURVE",
"773 656 CURVE",
"775.667 626.667 OFFCURVE",
"779 598.333 OFFCURVE",
"783 569 CURVE SMOOTH",
"859 52 LINE SMOOTH",
"865.667 14.667 OFFCURVE",
"881 0 OFFCURVE",
"905 0 CURVE SMOOTH",
"1147 0 LINE",
"1569 1037 LINE",
"1341 1037 LINE SMOOTH",
"1305 1037 OFFCURVE",
"1271.667 1013.667 OFFCURVE",
"1261 983 CURVE SMOOTH",
"1115 518 LINE SMOOTH",
"1103.667 482.667 OFFCURVE",
"1092.667 449 OFFCURVE",
"1082 417 CURVE SMOOTH",
"1071.333 385 OFFCURVE",
"1061.333 353 OFFCURVE",
"1052 321 CURVE",
"1045.333 385 OFFCURVE",
"1036.333 450 OFFCURVE",
"1027 518 CURVE SMOOTH",
"967 984 LINE SMOOTH",
"963 1014.667 OFFCURVE",
"935.667 1038 OFFCURVE",
"893 1038 CURVE SMOOTH",
"759 1038 LINE SMOOTH",
"723 1038 OFFCURVE",
"687.667 1014.667 OFFCURVE",
"677 984 CURVE SMOOTH",
"503 518 LINE SMOOTH",
"489.667 483.333 OFFCURVE",
"476.167 449.667 OFFCURVE",
"462.5 417 CURVE SMOOTH",
"448.833 384.333 OFFCURVE",
"436 352 OFFCURVE",
"424 320 CURVE",
"422.667 380 OFFCURVE",
"420 439 OFFCURVE",
"416 503 CURVE",
"416 505.667 OFFCURVE",
"415.833 508.167 OFFCURVE",
"415.5 510.5 CURVE SMOOTH",
"415.167 512.833 OFFCURVE",
"415 515.333 OFFCURVE",
"415 518 CURVE",
"385 983 LINE SMOOTH",
"382.333 1015 OFFCURVE",
"351 1037 OFFCURVE",
"311 1037 CURVE SMOOTH",
"73 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
50 48 37 35 34 32 20 17 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
43 26 11 4 4 3 0 1 30 2 1 2 0 0 14 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
43 26 11 4 4 3 0 1 30 4 1 3 3 0 1 0 36 2 1 2 0 0 14 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
43 26 11 4 4 3 0 1 30 2 1 2 0 3 3 0 1 0 35 2 1 2 0 0 3 1 0 36 4 1 3 0 3 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
43 26 11 4 4 3 0 1 30 0 1 0 3 1 1 0 35 2 1 0 3 3 0 1 0 35 2 1 0 0 3 1 0 36 4 1 3 0 3 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
43 26 11 4 4 4 2 1 30 0 2 0 4 0 2 4 50 0 1 0 3 1 1 0 35 0 0 0 4 3 0 4 1 0 38 0 1 1 3 1 0 36 0 3 1 3 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1510;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-59 0 LINE",
"215 0 LINE SMOOTH",
"253.667 0 OFFCURVE",
"278.333 26 OFFCURVE",
"297 54 CURVE SMOOTH",
"481 332 LINE",
"489 342.667 OFFCURVE",
"497.333 356.333 OFFCURVE",
"504 371 CURVE",
"633 54 LINE SMOOTH",
"645 24.667 OFFCURVE",
"667 0 OFFCURVE",
"707 0 CURVE SMOOTH",
"991 0 LINE",
"733 563 LINE",
"1093 1037 LINE",
"811 1037 LINE SMOOTH",
"784.333 1037 OFFCURVE",
"762.333 1023 OFFCURVE",
"745 995 CURVE SMOOTH",
"609 784 LINE SMOOTH",
"603.667 775.333 OFFCURVE",
"598.333 767 OFFCURVE",
"593 759 CURVE SMOOTH",
"587.667 751 OFFCURVE",
"582.667 742.667 OFFCURVE",
"578 734 CURVE",
"463 1001 LINE SMOOTH",
"451 1027.667 OFFCURVE",
"437 1037 OFFCURVE",
"397 1037 CURVE SMOOTH",
"113 1037 LINE",
"346 562 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
28 26 17 15 13 11 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
14 6 0 3 2 0 1 30 1 1 0 0 14 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
14 6 0 3 2 0 1 30 3 1 2 2 0 1 0 36 1 1 0 0 14 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
14 6 0 3 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
14 6 0 3 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1070;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1093 1037 LINE",
"843 1037 LINE SMOOTH",
"811 1037 OFFCURVE",
"777 1013.667 OFFCURVE",
"761 983 CURVE",
"569 538 LINE SMOOTH",
"560.333 518.667 OFFCURVE",
"551.333 499.167 OFFCURVE",
"542 479.5 CURVE SMOOTH",
"532.667 459.833 OFFCURVE",
"524 440.333 OFFCURVE",
"516 421 CURVE",
"512 459.667 OFFCURVE",
"505 497.333 OFFCURVE",
"497 536 CURVE SMOOTH",
"407 983 LINE",
"399 1012.333 OFFCURVE",
"379 1037 OFFCURVE",
"335 1037 CURVE SMOOTH",
"73 1037 LINE",
"330 93 LINE",
"93 -329 LINE",
"325 -329 LINE SMOOTH",
"369 -329 OFFCURVE",
"399.667 -311.333 OFFCURVE",
"421 -270 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
22 20 8 6 4 2 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
14 5 2 0 1 1 30 2 1 1 1 14 31 0 0 0 16 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
14 5 2 0 1 1 30 2 1 1 1 0 1 0 36 0 0 0 16 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 29 values pushed */
14 5 2 0 2 1 30 0 2 1 0 1 2 0 50 0 1 1 0 1 0 36 0 0 0 16 0 32 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1032;
}
);
note = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1032;
}
);
note = yacute;
unicode = 00FD;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 1032;
}
);
note = ydieresis;
unicode = 00FF;
},
{
glyphname = z;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"905 1037 LINE",
"147 1037 LINE",
"119 807 LINE",
"513 807 LINE",
"61 228 LINE SMOOTH",
"34.333 193.333 OFFCURVE",
"13.667 151.333 OFFCURVE",
"11 126 CURVE SMOOTH",
"-5 0 LINE",
"771 0 LINE",
"799 230 LINE",
"391 230 LINE",
"839 802 LINE SMOOTH",
"861.667 830 OFFCURVE",
"883.667 870.333 OFFCURVE",
"889 913 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
15 14 13 12 7 6 5 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 3 0 0 36 0 3 3 14 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 0 0 1 0 1 0 0 37 0 2 2 3 0 0 36 0 3 3 14 2 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 892;
}
);
note = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 147, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 892;
}
);
note = zacute;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 147, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 892;
}
);
note = zcaron;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 147, 2}";
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 892;
}
);
note = zdotaccent;
unicode = 017C;
},
{
glyphname = fi;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"497 1044 LINE SMOOTH",
"506.333 1128 OFFCURVE",
"529.667 1190.833 OFFCURVE",
"583 1231.5 CURVE SMOOTH",
"636.333 1272.167 OFFCURVE",
"718.333 1293 OFFCURVE",
"849 1293 CURVE SMOOTH",
"881.648 1293 OFFCURVE",
"913.462 1300.337 OFFCURVE",
"921 1333 CURVE SMOOTH",
"951 1484 LINE",
"908.333 1496 OFFCURVE",
"843 1502 OFFCURVE",
"787 1502 CURVE SMOOTH",
"604.333 1502 OFFCURVE",
"466.667 1452.5 OFFCURVE",
"372 1370.5 CURVE SMOOTH",
"277.333 1288.5 OFFCURVE",
"223.667 1175.333 OFFCURVE",
"209 1050 CURVE SMOOTH",
"207 1035 LINE",
"73 1035 LINE",
"68.157 988.51 OFFCURVE",
"62.245 935.127 OFFCURVE",
"60.5 920 CURVE SMOOTH",
"59.506 911.388 OFFCURVE",
"58 899.688 OFFCURVE",
"58 899 CURVE SMOOTH",
"58 864.333 OFFCURVE",
"85 847.333 OFFCURVE",
"125 838 CURVE SMOOTH",
"181 825 LINE",
"49 -248 LINE",
"175 -248 LINE SMOOTH",
"265.667 -248 OFFCURVE",
"311 -203.333 OFFCURVE",
"335 -126 CURVE SMOOTH",
"389 48 LINE",
"482 823 LINE",
"781 823 LINE",
"679 0 LINE",
"983 0 LINE",
"1109 1035 LINE",
"496 1035 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
38 36 29 27 22 21 11 9 5 4 3 2 1 0 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
31 1 6 5 12 1 2 0 2 30 0 6 6 5 1 0 36 0 5 5 19 31 0 2 2 0 0 0 36 4 1 0 0 14 31 0 1 1 12 31 0 3 3 0 0 0 36 4 1 0 0 14 3 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
31 1 6 5 12 1 2 0 2 30 0 1 2 3 2 1 3 50 0 6 6 5 1 0 36 0 5 5 19 31 0 2 2 0 0 0 36 4 1 0 0 14 31 0 3 3 0 0 0 36 4 1 0 0 14 3 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
31 1 6 5 12 1 2 0 2 30 0 1 2 3 2 1 3 50 0 2 1 0 2 0 0 35 4 1 0 0 3 0 3 1 0 37 0 6 6 5 1 0 36 0 5 5 19 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
31 1 6 5 12 1 2 0 2 30 0 1 2 3 2 1 3 50 0 5 0 6 0 5 6 1 0 38 4 1 0 0 2 1 0 2 0 0 38 4 1 0 0 3 1 0 36 0 3 0 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
31 1 6 5 12 1 2 4 2 30 0 1 2 3 2 1 3 50 0 5 0 6 0 5 6 1 0 38 0 4 2 3 4 0 0 35 0 0 0 2 1 0 2 0 0 38 0 4 4 3 1 0 36 0 3 4 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1164;
}
);
note = fi;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"671 823 LINE",
"697 1035 LINE",
"499 1035 LINE",
"503 1073 LINE SMOOTH",
"515 1210.333 OFFCURVE",
"584.333 1276 OFFCURVE",
"695 1276 CURVE SMOOTH",
"744.333 1276 OFFCURVE",
"798.333 1268.667 OFFCURVE",
"853 1262 CURVE",
"699 0 LINE",
"999 0 LINE",
"1181 1475 LINE",
"984 1475 LINE SMOOTH",
"932.667 1475 OFFCURVE",
"882.167 1477 OFFCURVE",
"832.5 1481 CURVE SMOOTH",
"782.833 1485 OFFCURVE",
"729.667 1487 OFFCURVE",
"673 1487 CURVE SMOOTH",
"529 1487 OFFCURVE",
"420 1436.167 OFFCURVE",
"344 1359.5 CURVE SMOOTH",
"268 1282.833 OFFCURVE",
"224.333 1178.333 OFFCURVE",
"211 1073 CURVE SMOOTH",
"206 1035 LINE",
"74 1035 LINE",
"68.193 988.547 OFFCURVE",
"62.091 933.789 OFFCURVE",
"60.5 920 CURVE SMOOTH",
"59.506 911.388 OFFCURVE",
"58 899.688 OFFCURVE",
"58 899 CURVE SMOOTH",
"58 864.333 OFFCURVE",
"85 847.333 OFFCURVE",
"125 838 CURVE SMOOTH",
"180 825 LINE",
"49 -248 LINE",
"175 -248 LINE SMOOTH",
"265.667 -248 OFFCURVE",
"311 -203.333 OFFCURVE",
"335 -126 CURVE SMOOTH",
"389 48 LINE",
"484 823 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 39 0 39 38 37 34 32 29 28 27 25 24 22 17 16 6 4 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
41 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
7 1 7 1 1 30 0 5 5 2 1 0 36 3 1 2 2 13 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 4 4 12 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
7 1 7 1 1 30 0 3 3 17 31 0 5 5 2 1 0 36 0 2 2 13 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 4 4 12 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
98 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
7 1 7 1 1 30 0 3 0 4 0 3 4 0 0 38 0 5 5 2 1 0 36 0 2 2 13 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
7 1 7 1 1 30 0 2 0 5 1 2 5 1 0 38 0 3 0 4 0 3 4 0 0 38 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
7 1 7 1 1 30 0 2 0 5 1 2 5 1 0 38 6 1 1 8 1 7 4 1 7 0 0 38 0 3 0 4 0 3 4 0 0 38 6 1 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
7 1 7 6 1 30 0 2 0 5 1 2 5 1 0 38 0 1 6 0 1 0 0 35 0 6 8 1 7 4 6 7 0 0 38 0 3 0 4 0 3 4 0 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1176;
}
);
note = fl;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"642 842 LINE",
"690 1229 LINE SMOOTH",
"690.667 1233.667 OFFCURVE",
"691 1238.167 OFFCURVE",
"691 1242.5 CURVE SMOOTH",
"691 1246.833 OFFCURVE",
"691 1251.333 OFFCURVE",
"691 1256 CURVE SMOOTH",
"691 1380.901 OFFCURVE",
"604.009 1477 OFFCURVE",
"478 1477 CURVE SMOOTH",
"375.333 1477 OFFCURVE",
"280.667 1447.667 OFFCURVE",
"198 1377 CURVE",
"228 1310 LINE SMOOTH",
"237.333 1290 OFFCURVE",
"253.333 1272 OFFCURVE",
"284 1272 CURVE SMOOTH",
"341.734 1272 OFFCURVE",
"365.058 1312 OFFCURVE",
"430 1312 CURVE SMOOTH",
"478.509 1312 OFFCURVE",
"482 1272.966 OFFCURVE",
"482 1229 CURVE",
"480 1211 LINE",
"333.333 1207 OFFCURVE",
"244 1173 OFFCURVE",
"192 1129 CURVE SMOOTH",
"140 1085 OFFCURVE",
"124 1030 OFFCURVE",
"124 982 CURVE SMOOTH",
"124 888.667 OFFCURVE",
"181.333 834 OFFCURVE",
"284 834 CURVE SMOOTH",
"358.991 834 OFFCURVE",
"407.755 859.232 OFFCURVE",
"468 909 CURVE",
"476 882 LINE SMOOTH",
"486.667 848.667 OFFCURVE",
"503.333 842 OFFCURVE",
"542 842 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"341.333 974 OFFCURVE",
"330 983 OFFCURVE",
"330 1007 CURVE SMOOTH",
"330 1057.391 OFFCURVE",
"369.905 1080.472 OFFCURVE",
"465 1085 CURVE",
"457 1014 LINE",
"426.333 984.667 OFFCURVE",
"402.667 974 OFFCURVE",
"372 974 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
46 45 1 0 50 49 45 56 46 56 36 34 29 27 24 22 17 16 10 8 0 44 1 44 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
32 1 3 5 18 1 2 3 4 1 0 6 3 30 9 1 6 7 0 7 6 0 50 1 8 2 0 0 51 0 2 0 7 6 2 7 1 0 38 4 1 3 3 5 1 0 36 0 5 5 17 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
32 1 3 5 18 1 2 4 4 1 0 6 3 30 0 4 3 2 3 4 2 50 9 1 6 7 0 7 6 0 50 1 8 2 0 0 51 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 17 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
32 1 3 5 18 1 2 4 4 1 0 6 3 30 0 4 3 2 3 4 2 50 9 1 6 7 0 7 6 0 50 8 1 0 1 7 0 1 48 0 1 1 51 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 17 3 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
32 1 3 5 18 1 2 4 4 1 0 6 3 30 0 4 3 2 3 4 2 50 9 1 6 7 0 7 6 0 50 8 1 0 1 7 0 1 48 0 1 1 51 0 5 0 3 4 5 3 1 0 38 0 2 7 7 2 1 0 35 0 2 2 7 1 0 36 0 7 2 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 652;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"383.333 1475 OFFCURVE",
"293.5 1439.667 OFFCURVE",
"227.5 1377 CURVE SMOOTH",
"161.5 1314.333 OFFCURVE",
"122 1222 OFFCURVE",
"122 1110 CURVE SMOOTH",
"122 937.814 OFFCURVE",
"235.213 830 OFFCURVE",
"408 830 CURVE SMOOTH",
"509.333 830 OFFCURVE",
"599.833 865 OFFCURVE",
"664.5 929 CURVE SMOOTH",
"729.167 993 OFFCURVE",
"768 1085.667 OFFCURVE",
"768 1199 CURVE SMOOTH",
"768 1367.201 OFFCURVE",
"656.451 1475 OFFCURVE",
"486 1475 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"379.333 998 OFFCURVE",
"354 1034 OFFCURVE",
"354 1106 CURVE SMOOTH",
"354 1222.87 OFFCURVE",
"366.291 1306 OFFCURVE",
"466 1306 CURVE SMOOTH",
"512.667 1306 OFFCURVE",
"536 1270.333 OFFCURVE",
"536 1199 CURVE SMOOTH",
"536 1068.333 OFFCURVE",
"508.667 998 OFFCURVE",
"430 998 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 26 24 20 31 21 31 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 17 31 0 1 1 2 1 0 36 5 1 2 2 14 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
5 1 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 4 1 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 728;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = pi;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"220 1035 LINE SMOOTH",
"155.369 1035 OFFCURVE",
"104.081 982.647 OFFCURVE",
"98 934 CURVE SMOOTH",
"84 830 LINE",
"239 830 LINE",
"172 284 LINE SMOOTH",
"163.862 216.182 OFFCURVE",
"147.878 191 OFFCURVE",
"80 191 CURVE SMOOTH",
"32 191 OFFCURVE",
"21.333 170 OFFCURVE",
"16 142 CURVE SMOOTH",
"-8 21 LINE",
"40 -5.667 OFFCURVE",
"99.333 -16 OFFCURVE",
"146 -16 CURVE SMOOTH",
"252.667 -16 OFFCURVE",
"328 15 OFFCURVE",
"380 67 CURVE SMOOTH",
"432 119 OFFCURVE",
"459.333 193.333 OFFCURVE",
"470 280 CURVE SMOOTH",
"538 830 LINE",
"789 830 LINE",
"688 0 LINE",
"986 0 LINE",
"1088 830 LINE",
"1156 830 LINE SMOOTH",
"1212 830 OFFCURVE",
"1249.333 871 OFFCURVE",
"1256 919 CURVE SMOOTH",
"1272 1035 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 35 0 34 29 28 23 21 16 14 9 8 7 6 5 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 3 1 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 1 1 12 31 0 3 3 18 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 0 1 3 0 1 3 48 0 3 3 51 5 2 2 0 0 6 1 0 36 7 1 6 6 14 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 0 1 3 0 1 3 48 0 3 3 51 7 1 6 0 0 6 1 0 35 7 1 6 6 0 0 0 36 5 2 2 0 6 0 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
18 1 1 4 1 30 0 5 6 2 2 5 42 0 0 2 4 2 0 42 0 4 1 2 4 1 48 0 1 3 2 1 3 48 0 3 3 51 7 1 6 5 2 6 1 2 35 7 1 6 6 2 0 0 36 0 2 6 2 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1240;
}
);
note = pi;
unicode = 03C0;
},
{
glyphname = zero;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"517.333 1471 OFFCURVE",
"359.5 1399 OFFCURVE",
"245.5 1251 CURVE SMOOTH",
"131.5 1103 OFFCURVE",
"62 879.667 OFFCURVE",
"62 577 CURVE SMOOTH",
"62 379.667 OFFCURVE",
"107.333 231.833 OFFCURVE",
"186 132.5 CURVE SMOOTH",
"264.667 33.167 OFFCURVE",
"377.333 -16 OFFCURVE",
"512 -16 CURVE SMOOTH",
"689.333 -16 OFFCURVE",
"848.5 56 OFFCURVE",
"962.5 204 CURVE SMOOTH",
"1076.5 352 OFFCURVE",
"1146 575.333 OFFCURVE",
"1146 878 CURVE SMOOTH",
"1146 1075.333 OFFCURVE",
"1100.667 1224.333 OFFCURVE",
"1022 1323 CURVE SMOOTH",
"943.333 1421.667 OFFCURVE",
"830.667 1471 OFFCURVE",
"696 1471 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"508 224 OFFCURVE",
"463.333 243.5 OFFCURVE",
"430 297.5 CURVE SMOOTH",
"396.667 351.5 OFFCURVE",
"374 441.667 OFFCURVE",
"374 583 CURVE SMOOTH",
"374 800.333 OFFCURVE",
"403.5 963 OFFCURVE",
"453.5 1071 CURVE SMOOTH",
"503.5 1179 OFFCURVE",
"573.333 1232 OFFCURVE",
"656 1232 CURVE SMOOTH",
"700 1232 OFFCURVE",
"744.667 1212.667 OFFCURVE",
"778 1158 CURVE SMOOTH",
"811.333 1103.333 OFFCURVE",
"834 1014.333 OFFCURVE",
"834 873 CURVE SMOOTH",
"834 654.333 OFFCURVE",
"804.5 491.833 OFFCURVE",
"754.5 384.5 CURVE SMOOTH",
"704.5 277.167 OFFCURVE",
"633.333 224 OFFCURVE",
"552 224 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 17 31 5 1 2 2 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"196 0 LINE",
"1020 0 LINE",
"1048 217 LINE",
"803 217 LINE",
"956 1458 LINE",
"708 1458 LINE",
"210 1077 LINE",
"288 951 LINE SMOOTH",
"298.667 935 OFFCURVE",
"323.333 918 OFFCURVE",
"358 918 CURVE SMOOTH",
"376.667 918 OFFCURVE",
"399.333 921.667 OFFCURVE",
"422 939 CURVE SMOOTH",
"619 1091 LINE",
"598 1001 LINE",
"504 217 LINE",
"222 217 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 16 15 14 13 12 8 6 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
11 3 2 1 2 1 30 0 1 2 0 2 1 0 50 0 2 2 11 31 3 1 0 0 4 0 2 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
11 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
11 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"582 1471 OFFCURVE",
"460.667 1436 OFFCURVE",
"362 1364 CURVE SMOOTH",
"263.333 1292 OFFCURVE",
"188 1185 OFFCURVE",
"148 1041 CURVE",
"302 1014 LINE SMOOTH",
"315.333 1011.333 OFFCURVE",
"329.333 1010 OFFCURVE",
"344 1010 CURVE SMOOTH",
"398.667 1010 OFFCURVE",
"433.333 1033.667 OFFCURVE",
"460 1091 CURVE SMOOTH",
"495.42 1170.014 OFFCURVE",
"570.888 1228 OFFCURVE",
"664 1228 CURVE SMOOTH",
"768 1228 OFFCURVE",
"820 1168.333 OFFCURVE",
"820 1071 CURVE SMOOTH",
"820 996.333 OFFCURVE",
"803.167 931 OFFCURVE",
"762.5 863 CURVE SMOOTH",
"721.833 795 OFFCURVE",
"657.333 725 OFFCURVE",
"564 641 CURVE SMOOTH",
"88 215 LINE SMOOTH",
"46.667 179 OFFCURVE",
"26 132 OFFCURVE",
"22 96 CURVE SMOOTH",
"10 0 LINE",
"1028 0 LINE",
"1036.678 63.638 OFFCURVE",
"1045.692 137.301 OFFCURVE",
"1048 157.5 CURVE SMOOTH",
"1049.445 170.144 OFFCURVE",
"1051 184.053 OFFCURVE",
"1051 186 CURVE SMOOTH",
"1051 236.667 OFFCURVE",
"1018 270 OFFCURVE",
"958 270 CURVE SMOOTH",
"668 270 LINE SMOOTH",
"606.667 270 OFFCURVE",
"532.667 257.333 OFFCURVE",
"458 236 CURVE",
"788 537 LINE SMOOTH",
"884 625 OFFCURVE",
"969.667 704.667 OFFCURVE",
"1031 794 CURVE SMOOTH",
"1092.333 883.333 OFFCURVE",
"1130 980 OFFCURVE",
"1130 1100 CURVE SMOOTH",
"1130 1208 OFFCURVE",
"1090.833 1300.5 OFFCURVE",
"1019.5 1366.5 CURVE SMOOTH",
"948.167 1432.5 OFFCURVE",
"843.333 1471 OFFCURVE",
"714 1471 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 46 44 38 36 24 23 16 13 0 52 1 52 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
48 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 0 3 3 0 1 0 36 5 1 0 0 17 31 0 1 1 2 0 0 36 0 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
48 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"618 1471 OFFCURVE",
"496.5 1436 OFFCURVE",
"398.5 1364 CURVE SMOOTH",
"300.5 1292 OFFCURVE",
"224.667 1185 OFFCURVE",
"186 1041 CURVE",
"340 1014 LINE SMOOTH",
"354.667 1011.333 OFFCURVE",
"369 1010 OFFCURVE",
"381 1010 CURVE SMOOTH",
"434.333 1010 OFFCURVE",
"469.333 1033.667 OFFCURVE",
"496 1091 CURVE SMOOTH",
"530.667 1168.333 OFFCURVE",
"603.333 1228 OFFCURVE",
"702 1228 CURVE SMOOTH",
"804.667 1228 OFFCURVE",
"858 1172 OFFCURVE",
"858 1072 CURVE SMOOTH",
"858 1000 OFFCURVE",
"840 944.5 OFFCURVE",
"792 906.5 CURVE SMOOTH",
"744 868.5 OFFCURVE",
"665.333 847.333 OFFCURVE",
"544 846 CURVE",
"516 641 LINE",
"637.333 641 OFFCURVE",
"708.5 625 OFFCURVE",
"750.5 597 CURVE SMOOTH",
"792.5 569 OFFCURVE",
"804 529 OFFCURVE",
"804 481 CURVE SMOOTH",
"804 340.144 OFFCURVE",
"713.363 227 OFFCURVE",
"562 227 CURVE SMOOTH",
"459.333 227 OFFCURVE",
"402 277 OFFCURVE",
"358 393 CURVE SMOOTH",
"346 423.667 OFFCURVE",
"314.333 440 OFFCURVE",
"273 440 CURVE SMOOTH",
"250.333 440 OFFCURVE",
"227.333 436.667 OFFCURVE",
"202 426 CURVE SMOOTH",
"62 372 LINE",
"91.333 236 OFFCURVE",
"139 139.833 OFFCURVE",
"215 76.5 CURVE SMOOTH",
"291 13.167 OFFCURVE",
"395.333 -16 OFFCURVE",
"534 -16 CURVE SMOOTH",
"582.667 -16 OFFCURVE",
"630.5 -11.333 OFFCURVE",
"677.5 -2 CURVE SMOOTH",
"771.5 16.667 OFFCURVE",
"856.167 55 OFFCURVE",
"927.5 111 CURVE SMOOTH",
"963.167 139 OFFCURVE",
"993.833 171.667 OFFCURVE",
"1019.5 209 CURVE SMOOTH",
"1070.833 283.667 OFFCURVE",
"1102 375.333 OFFCURVE",
"1102 486 CURVE SMOOTH",
"1102 623.333 OFFCURVE",
"1034.333 720 OFFCURVE",
"897 776 CURVE",
"982.333 800 OFFCURVE",
"1047.167 836 OFFCURVE",
"1090.5 892 CURVE SMOOTH",
"1133.833 948 OFFCURVE",
"1156 1025.667 OFFCURVE",
"1156 1131 CURVE SMOOTH",
"1156 1223 OFFCURVE",
"1120 1307.5 OFFCURVE",
"1052 1369.5 CURVE SMOOTH",
"984 1431.5 OFFCURVE",
"882 1471 OFFCURVE",
"750 1471 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 61 59 55 53 47 46 45 44 36 34 30 28 21 19 0 68 1 68 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
64 1 7 6 10 1 4 5 25 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 0 5 0 4 2 5 4 1 0 38 0 6 6 0 1 0 36 8 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
64 1 7 6 10 1 4 5 25 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1098 1457 LINE",
"804 1457 LINE",
"16 547 LINE",
"27 408 LINE SMOOTH",
"31 365.333 OFFCURVE",
"68.333 339 OFFCURVE",
"107 339 CURVE SMOOTH",
"691 339 LINE",
"650 0 LINE",
"920 0 LINE",
"961 339 LINE",
"1048 339 LINE SMOOTH",
"1086.667 339 OFFCURVE",
"1110 364.667 OFFCURVE",
"1114 394 CURVE SMOOTH",
"1138 561 LINE",
"988 561 LINE"
);
},
{
closed = 1;
nodes = (
"718 561 LINE",
"339 561 LINE",
"793 1097 LINE",
"779.667 1047.667 OFFCURVE",
"771.333 1001 OFFCURVE",
"766 961 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
22 21 16 15 11 9 8 7 6 4 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
20 1 0 4 1 30 5 1 0 3 1 1 2 0 1 1 2 38 0 4 4 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
20 1 0 4 1 30 0 4 0 4 52 0 2 1 2 53 5 1 0 1 1 0 0 0 35 5 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
20 1 0 4 1 30 0 4 0 4 52 0 2 1 2 53 0 0 5 1 0 0 0 35 0 5 0 3 1 5 3 1 0 38 0 0 0 1 1 2 36 0 1 0 1 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1116 1457 LINE",
"376 1457 LINE",
"162 732 LINE",
"340 682 LINE",
"416 706 OFFCURVE",
"481 716 OFFCURVE",
"537 716 CURVE SMOOTH",
"682.333 716 OFFCURVE",
"754 642.333 OFFCURVE",
"754 525 CURVE SMOOTH",
"754 446.333 OFFCURVE",
"733 371.667 OFFCURVE",
"689 317 CURVE SMOOTH",
"645 262.333 OFFCURVE",
"576.667 226 OFFCURVE",
"482 226 CURVE SMOOTH",
"399.333 226 OFFCURVE",
"348 251.5 OFFCURVE",
"308 277.5 CURVE SMOOTH",
"271.111 301.478 OFFCURVE",
"236.248 329 OFFCURVE",
"200 329 CURVE SMOOTH",
"172 329 OFFCURVE",
"142.667 317.667 OFFCURVE",
"120 291 CURVE SMOOTH",
"12 166 LINE",
"57.333 116.667 OFFCURVE",
"115.5 71.333 OFFCURVE",
"185.5 38 CURVE SMOOTH",
"255.5 4.667 OFFCURVE",
"339.333 -16 OFFCURVE",
"434 -16 CURVE SMOOTH",
"608.667 -16 OFFCURVE",
"764 44.5 OFFCURVE",
"876 146.5 CURVE SMOOTH",
"988 248.5 OFFCURVE",
"1056 393.667 OFFCURVE",
"1056 563 CURVE SMOOTH",
"1056 672.333 OFFCURVE",
"1019.833 769.5 OFFCURVE",
"948.5 839.5 CURVE SMOOTH",
"877.167 909.5 OFFCURVE",
"769.667 952 OFFCURVE",
"627 952 CURVE SMOOTH",
"580.333 952 OFFCURVE",
"529.667 948.667 OFFCURVE",
"475 938 CURVE",
"550 1195 LINE",
"906 1195 LINE SMOOTH",
"1025.771 1195 OFFCURVE",
"1088.124 1243.929 OFFCURVE",
"1100 1333 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
48 47 43 41 35 33 30 28 21 19 11 9 6 4 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
46 7 2 5 1 45 1 3 5 25 1 2 4 3 30 0 3 5 4 5 3 4 50 0 1 0 5 3 1 5 1 0 38 0 0 0 6 0 0 36 0 6 6 11 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
46 7 2 5 1 45 1 3 5 25 1 2 4 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"678 919 OFFCURVE",
"624.333 909.667 OFFCURVE",
"575 891 CURVE",
"1112 1455 LINE",
"846 1455 LINE SMOOTH",
"775.333 1455 OFFCURVE",
"711.333 1424.667 OFFCURVE",
"678 1386 CURVE SMOOTH",
"292 939 LINE SMOOTH",
"144 768.333 OFFCURVE",
"66 613 OFFCURVE",
"66 433 CURVE SMOOTH",
"66 302.333 OFFCURVE",
"107.5 189.833 OFFCURVE",
"185.5 110.5 CURVE SMOOTH",
"263.5 31.167 OFFCURVE",
"379.333 -16 OFFCURVE",
"526 -16 CURVE SMOOTH",
"695.333 -16 OFFCURVE",
"843.5 47.667 OFFCURVE",
"949.5 149 CURVE SMOOTH",
"1055.5 250.333 OFFCURVE",
"1118 390 OFFCURVE",
"1118 542 CURVE SMOOTH",
"1118 667.333 OFFCURVE",
"1071.667 762.333 OFFCURVE",
"1001 825 CURVE SMOOTH",
"930.333 887.667 OFFCURVE",
"835.333 919 OFFCURVE",
"738 919 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"350 587.836 OFFCURVE",
"456.744 703 OFFCURVE",
"606 703 CURVE SMOOTH",
"733.58 703 OFFCURVE",
"816 623.425 OFFCURVE",
"816 494 CURVE SMOOTH",
"816 338.611 OFFCURVE",
"695.321 220 OFFCURVE",
"550 220 CURVE SMOOTH",
"418.932 220 OFFCURVE",
"350 298.009 OFFCURVE",
"350 423 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 43 41 33 31 23 21 11 9 0 26 1 26 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
24 1 4 0 1 30 5 1 0 2 4 2 0 4 50 0 4 3 2 4 3 48 0 2 2 11 31 0 3 3 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
24 1 4 0 1 30 0 2 0 2 52 5 1 0 4 0 52 0 4 3 4 52 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"204 1457 LINE",
"195.499 1395.37 OFFCURVE",
"178 1276.749 OFFCURVE",
"178 1254 CURVE SMOOTH",
"178 1223.333 OFFCURVE",
"203.333 1195 OFFCURVE",
"238 1195 CURVE SMOOTH",
"888 1195 LINE",
"845.333 1155 OFFCURVE",
"809.333 1112.333 OFFCURVE",
"776 1059 CURVE SMOOTH",
"120 0 LINE",
"372 0 LINE SMOOTH",
"416 0 OFFCURVE",
"463.333 28.667 OFFCURVE",
"486 66 CURVE SMOOTH",
"1172 1212 LINE SMOOTH",
"1190.667 1241.333 OFFCURVE",
"1203.333 1288.667 OFFCURVE",
"1210 1342 CURVE SMOOTH",
"1224 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
0 0 0 22 0 22 15 13 9 7 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
0 1 1 2 0 0 36 3 1 2 2 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
0 0 1 0 53 3 1 2 1 1 2 0 0 35 3 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"683.333 -16 OFFCURVE",
"827.5 31.167 OFFCURVE",
"929.5 114.5 CURVE SMOOTH",
"1031.5 197.833 OFFCURVE",
"1092 317.667 OFFCURVE",
"1092 463 CURVE SMOOTH",
"1092 596.333 OFFCURVE",
"1030 700 OFFCURVE",
"882 756 CURVE",
"1043.333 821.333 OFFCURVE",
"1124 945.333 OFFCURVE",
"1124 1116 CURVE SMOOTH",
"1124 1216 OFFCURVE",
"1081.5 1305.167 OFFCURVE",
"1007.5 1368.5 CURVE SMOOTH",
"933.5 1431.833 OFFCURVE",
"826.667 1471 OFFCURVE",
"700 1471 CURVE SMOOTH",
"553.333 1471 OFFCURVE",
"424.5 1423.833 OFFCURVE",
"330.5 1344.5 CURVE SMOOTH",
"236.5 1265.167 OFFCURVE",
"180 1154.667 OFFCURVE",
"180 1028 CURVE SMOOTH",
"180 906.667 OFFCURVE",
"234.333 814.667 OFFCURVE",
"345 760 CURVE",
"241 726.667 OFFCURVE",
"167 674.833 OFFCURVE",
"119 607.5 CURVE SMOOTH",
"71 540.167 OFFCURVE",
"50 458 OFFCURVE",
"50 366 CURVE SMOOTH",
"50 251.333 OFFCURVE",
"95.5 155.667 OFFCURVE",
"177.5 89 CURVE SMOOTH",
"259.5 22.333 OFFCURVE",
"375.333 -16 OFFCURVE",
"518 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"421.986 210 OFFCURVE",
"362 282.853 OFFCURVE",
"362 391 CURVE SMOOTH",
"362 540.997 OFFCURVE",
"428.867 638 OFFCURVE",
"598 638 CURVE SMOOTH",
"727.361 638 OFFCURVE",
"784 570.738 OFFCURVE",
"784 458 CURVE SMOOTH",
"784 312.373 OFFCURVE",
"703.449 210 OFFCURVE",
"546 210 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"513.175 864 OFFCURVE",
"470 939.003 OFFCURVE",
"470 1032 CURVE SMOOTH",
"470 1155.845 OFFCURVE",
"535.395 1253 OFFCURVE",
"674 1253 CURVE SMOOTH",
"780.879 1253 OFFCURVE",
"830 1184.56 OFFCURVE",
"830 1095 CURVE SMOOTH",
"830 977.587 OFFCURVE",
"785.443 864 OFFCURVE",
"626 864 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
55 54 35 34 1 0 65 63 54 73 55 73 45 43 34 53 35 53 19 17 0 33 1 33 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
26 10 2 3 4 1 30 8 1 4 0 3 2 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 17 31 7 1 2 2 0 1 0 36 6 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
26 10 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 0 0 2 1 0 35 7 1 2 2 0 1 0 36 6 1 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"604.667 570 OFFCURVE",
"678.667 586.667 OFFCURVE",
"744 620 CURVE",
"725.333 598.667 OFFCURVE",
"705.333 576.667 OFFCURVE",
"684 554 CURVE SMOOTH",
"156 0 LINE",
"432 0 LINE SMOOTH",
"502.667 0 OFFCURVE",
"562 28.333 OFFCURVE",
"594 67 CURVE SMOOTH",
"966 517 LINE SMOOTH",
"1034 598.333 OFFCURVE",
"1089.333 678.5 OFFCURVE",
"1128 764.5 CURVE SMOOTH",
"1166.667 850.5 OFFCURVE",
"1188 941.333 OFFCURVE",
"1188 1048 CURVE SMOOTH",
"1188 1172 OFFCURVE",
"1147.833 1277.333 OFFCURVE",
"1072.5 1352 CURVE SMOOTH",
"997.167 1426.667 OFFCURVE",
"885.333 1471 OFFCURVE",
"744 1471 CURVE SMOOTH",
"580 1471 OFFCURVE",
"436.5 1409.5 OFFCURVE",
"334.5 1311.5 CURVE SMOOTH",
"232.5 1213.5 OFFCURVE",
"172 1079.667 OFFCURVE",
"172 933 CURVE SMOOTH",
"172 810.333 OFFCURVE",
"216.333 720 OFFCURVE",
"283 660 CURVE SMOOTH",
"349.667 600 OFFCURVE",
"438 570 OFFCURVE",
"526 570 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"904 892.204 OFFCURVE",
"810.492 789 OFFCURVE",
"660 789 CURVE SMOOTH",
"537.333 789 OFFCURVE",
"476 853 OFFCURVE",
"476 973 CURVE SMOOTH",
"476 1124.199 OFFCURVE",
"568.926 1236 OFFCURVE",
"710 1236 CURVE SMOOTH",
"826.738 1236 OFFCURVE",
"904 1164.084 OFFCURVE",
"904 1044 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 46 44 38 36 25 23 11 9 0 31 1 31 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
29 1 0 4 1 30 0 4 5 1 0 2 4 0 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
29 1 0 4 1 30 0 2 0 2 53 0 1 0 3 4 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 5 1 0 4 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"206 900 LINE",
"636 900 LINE",
"654 1050 LINE",
"568 1050 LINE",
"642 1648 LINE",
"462 1648 LINE",
"198 1451 LINE",
"252 1363 LINE",
"260 1351 OFFCURVE",
"278.333 1340 OFFCURVE",
"301 1340 CURVE SMOOTH",
"314.333 1340 OFFCURVE",
"329.333 1342.333 OFFCURVE",
"344 1353 CURVE SMOOTH",
"402 1395 LINE",
"390 1342 LINE",
"355 1050 LINE",
"226 1050 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
17 16 15 14 13 12 8 6 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
75 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
11 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 4 4 0 0 0 36 3 1 0 0 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
11 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
11 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = onesuperior;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"336 1656 OFFCURVE",
"216 1584 OFFCURVE",
"172 1424 CURVE",
"288 1405 LINE SMOOTH",
"298.667 1403 OFFCURVE",
"308.333 1402 OFFCURVE",
"317 1402 CURVE SMOOTH",
"353 1402 OFFCURVE",
"373.333 1417 OFFCURVE",
"392 1445 CURVE SMOOTH",
"413.333 1477 OFFCURVE",
"429.333 1491 OFFCURVE",
"460 1491 CURVE SMOOTH",
"492 1491 OFFCURVE",
"504 1466.667 OFFCURVE",
"504 1436 CURVE SMOOTH",
"504 1379.821 OFFCURVE",
"443.729 1297.562 OFFCURVE",
"384 1245 CURVE SMOOTH",
"160 1048 LINE SMOOTH",
"133.333 1024 OFFCURVE",
"120 992.333 OFFCURVE",
"116 967 CURVE SMOOTH",
"106 900 LINE",
"672 900 LINE",
"674 922.667 OFFCURVE",
"676.333 943.333 OFFCURVE",
"679 962 CURVE",
"680.333 978 OFFCURVE",
"681.833 992.833 OFFCURVE",
"683.5 1006.5 CURVE SMOOTH",
"685.167 1020.167 OFFCURVE",
"686 1028.667 OFFCURVE",
"686 1032 CURVE SMOOTH",
"686 1065.333 OFFCURVE",
"665.333 1086 OFFCURVE",
"624 1086 CURVE SMOOTH",
"544 1086 LINE SMOOTH",
"509.333 1086 OFFCURVE",
"464.333 1078.333 OFFCURVE",
"419 1065 CURVE",
"540 1175 LINE SMOOTH",
"634.72 1261.601 OFFCURVE",
"722 1335.595 OFFCURVE",
"722 1458 CURVE SMOOTH",
"722 1573.589 OFFCURVE",
"638.113 1656 OFFCURVE",
"492 1656 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 44 42 38 36 24 23 16 13 0 48 1 48 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
46 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 2 2 1 1 0 36 0 1 1 20 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
46 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = twosuperior;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"369.198 1656 OFFCURVE",
"247.047 1577.925 OFFCURVE",
"206 1424 CURVE",
"314 1405 LINE SMOOTH",
"326 1403 OFFCURVE",
"336 1402 OFFCURVE",
"344 1402 CURVE SMOOTH",
"376 1402 OFFCURVE",
"394 1416.333 OFFCURVE",
"414 1447 CURVE",
"430 1473.667 OFFCURVE",
"446 1487 OFFCURVE",
"482 1487 CURVE SMOOTH",
"520.667 1487 OFFCURVE",
"532 1464.333 OFFCURVE",
"532 1435 CURVE SMOOTH",
"532 1367.556 OFFCURVE",
"493.738 1354 OFFCURVE",
"396 1354 CURVE",
"378 1210 LINE",
"467.333 1210 OFFCURVE",
"500 1198.667 OFFCURVE",
"500 1148 CURVE SMOOTH",
"500 1093.333 OFFCURVE",
"468 1063 OFFCURVE",
"420 1063 CURVE SMOOTH",
"389.333 1063 OFFCURVE",
"364 1078.667 OFFCURVE",
"352 1112 CURVE SMOOTH",
"344 1133.333 OFFCURVE",
"322.333 1144 OFFCURVE",
"293 1144 CURVE SMOOTH",
"277.667 1144 OFFCURVE",
"262 1141 OFFCURVE",
"246 1135 CURVE SMOOTH",
"148 1097 LINE",
"181.047 939.393 OFFCURVE",
"267.119 892 OFFCURVE",
"410 892 CURVE SMOOTH",
"479.333 892 OFFCURVE",
"556.5 911.833 OFFCURVE",
"614.5 956.5 CURVE SMOOTH",
"672.5 1001.167 OFFCURVE",
"714 1069 OFFCURVE",
"714 1165 CURVE SMOOTH",
"714 1231.667 OFFCURVE",
"684 1271 OFFCURVE",
"624 1295 CURVE",
"712 1329.667 OFFCURVE",
"742 1387 OFFCURVE",
"742 1475 CURVE SMOOTH",
"742 1573.082 OFFCURVE",
"652.662 1656 OFFCURVE",
"514 1656 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 52 50 46 44 38 37 36 35 31 29 25 23 17 15 0 58 1 58 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
54 1 7 6 8 1 4 5 21 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 1 1 3 1 0 36 0 3 3 20 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
54 1 7 6 8 1 4 5 21 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = threesuperior;
unicode = 00B3;
},
{
glyphname = fraction;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1036 1455 LINE",
"914 1455 LINE SMOOTH",
"842 1455 OFFCURVE",
"788.333 1421 OFFCURVE",
"743 1357 CURVE SMOOTH",
"-208 0 LINE",
"-86 0 LINE SMOOTH",
"-22 0 OFFCURVE",
"27.333 18.333 OFFCURVE",
"74 85 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
9 7 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 756;
}
);
note = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1410 1455 LINE",
"1288 1455 LINE SMOOTH",
"1216 1455 OFFCURVE",
"1162.333 1421 OFFCURVE",
"1117 1357 CURVE SMOOTH",
"166 0 LINE",
"288 0 LINE SMOOTH",
"352 0 OFFCURVE",
"401.333 18.333 OFFCURVE",
"448 85 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1016 756 OFFCURVE",
"896 684 OFFCURVE",
"852 524 CURVE",
"953 507 LINE SMOOTH",
"966.333 505 OFFCURVE",
"976 503.667 OFFCURVE",
"982 503 CURVE SMOOTH",
"988 502.333 OFFCURVE",
"993.333 502 OFFCURVE",
"998 502 CURVE SMOOTH",
"1034 502 OFFCURVE",
"1052 517 OFFCURVE",
"1072 545 CURVE SMOOTH",
"1093.333 575.667 OFFCURVE",
"1109.333 591 OFFCURVE",
"1140 591 CURVE SMOOTH",
"1172 591 OFFCURVE",
"1184 566.667 OFFCURVE",
"1184 536 CURVE SMOOTH",
"1184 479.821 OFFCURVE",
"1123.729 397.562 OFFCURVE",
"1064 345 CURVE SMOOTH",
"840 148 LINE SMOOTH",
"813.333 124 OFFCURVE",
"798.667 92.333 OFFCURVE",
"796 67 CURVE",
"786 0 LINE",
"1352 0 LINE",
"1362 88 LINE SMOOTH",
"1364 106.667 OFFCURVE",
"1365.167 118.333 OFFCURVE",
"1365.5 123 CURVE SMOOTH",
"1365.833 127.667 OFFCURVE",
"1366 130.667 OFFCURVE",
"1366 132 CURVE SMOOTH",
"1366 165.333 OFFCURVE",
"1345.333 186 OFFCURVE",
"1304 186 CURVE SMOOTH",
"1224 186 LINE SMOOTH",
"1189.333 186 OFFCURVE",
"1144.333 178.333 OFFCURVE",
"1099 165 CURVE",
"1220 275 LINE SMOOTH",
"1314.72 361.601 OFFCURVE",
"1402 435.595 OFFCURVE",
"1402 558 CURVE SMOOTH",
"1402 673.589 OFFCURVE",
"1318.113 756 OFFCURVE",
"1172 756 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"176 708 LINE",
"606 708 LINE",
"624 858 LINE",
"538 858 LINE",
"612 1456 LINE",
"432 1456 LINE",
"168 1259 LINE",
"222 1171 LINE",
"230 1159 OFFCURVE",
"244.333 1147 OFFCURVE",
"267 1147 CURVE SMOOTH",
"285 1147 OFFCURVE",
"300.667 1151.667 OFFCURVE",
"314 1161 CURVE SMOOTH",
"372 1203 LINE",
"360 1150 LINE",
"325 858 LINE",
"196 858 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
11 10 75 74 73 72 71 70 66 64 60 59 53 51 47 45 33 32 26 23 10 58 11 58 9 7 4 2 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
69 62 2 8 1 56 1 6 5 21 1 0 3 3 30 0 8 1 7 1 8 7 50 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 9 1 1 1 11 31 0 3 3 0 1 2 36 4 1 0 0 12 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
69 62 2 8 1 56 1 6 5 21 1 0 3 3 30 9 1 1 8 1 52 0 8 7 8 52 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 2 36 4 1 0 3 0 1 2 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
69 62 2 8 1 56 1 6 5 21 1 0 3 3 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 2 36 4 1 0 3 0 1 2 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 94 values pushed */
69 62 2 8 1 56 1 6 5 21 1 4 3 3 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 10 7 2 7 10 42 0 6 5 3 5 6 3 50 0 0 4 0 53 0 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 4 4 3 1 0 35 0 3 3 4 0 2 36 0 4 3 4 0 2 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1438 1455 LINE",
"1316 1455 LINE SMOOTH",
"1244 1455 OFFCURVE",
"1190.333 1421 OFFCURVE",
"1145 1357 CURVE SMOOTH",
"194 0 LINE",
"316 0 LINE SMOOTH",
"380 0 OFFCURVE",
"429.333 18.333 OFFCURVE",
"476 85 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1376 748 LINE",
"1170 748 LINE",
"782 297 LINE",
"790 195 LINE SMOOTH",
"792.667 169.667 OFFCURVE",
"812 151 OFFCURVE",
"848 151 CURVE SMOOTH",
"1124 151 LINE",
"1106 0 LINE",
"1284 0 LINE",
"1302 151 LINE",
"1346 151 LINE SMOOTH",
"1370 151 OFFCURVE",
"1386 170.333 OFFCURVE",
"1390 189 CURVE",
"1404 310 LINE",
"1322 310 LINE"
);
},
{
closed = 1;
nodes = (
"166 708 LINE",
"596 708 LINE",
"614 858 LINE",
"528 858 LINE",
"602 1456 LINE",
"422 1456 LINE",
"158 1259 LINE",
"212 1171 LINE",
"220 1159 OFFCURVE",
"234.333 1147 OFFCURVE",
"257 1147 CURVE SMOOTH",
"275 1147 OFFCURVE",
"290.667 1151.667 OFFCURVE",
"304 1161 CURVE SMOOTH",
"362 1203 LINE",
"350 1150 LINE",
"315 858 LINE",
"186 858 LINE"
);
},
{
closed = 1;
nodes = (
"1143 310 LINE",
"990 310 LINE",
"1179 536 LINE",
"1167.667 490 OFFCURVE",
"1160 449 OFFCURVE",
"1156 413 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
48 47 43 42 41 40 39 38 34 32 28 27 26 25 21 19 18 17 16 14 11 10 9 7 4 2 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
37 30 2 8 1 46 1 2 11 2 30 0 8 1 7 1 8 7 50 0 6 7 11 7 6 11 50 10 1 7 0 11 2 7 11 0 2 38 12 1 2 5 1 3 0 2 3 1 2 38 9 1 1 1 11 31 4 1 0 0 12 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
37 30 2 8 1 46 1 2 11 2 30 9 1 1 8 1 52 0 8 7 8 52 0 6 7 11 7 6 11 50 4 1 0 3 0 53 10 1 7 0 11 2 7 11 0 2 38 12 1 2 3 3 2 0 0 35 12 1 2 2 3 1 2 36 5 1 3 2 3 1 2 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
37 30 2 8 1 46 1 2 11 2 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 6 7 11 7 6 11 50 4 1 0 3 0 53 10 1 7 0 11 2 7 11 0 2 38 12 1 2 3 3 2 0 0 35 12 1 2 2 3 1 2 36 5 1 3 2 3 1 2 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 95 values pushed */
37 30 2 8 1 46 1 2 11 2 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 10 7 6 7 10 42 0 6 11 7 6 11 48 0 4 3 0 3 4 0 50 0 0 0 51 0 7 0 11 2 7 11 0 2 38 0 2 12 3 2 0 0 35 0 12 0 5 3 12 5 1 0 38 0 2 2 3 1 2 36 0 3 2 3 1 2 33 13 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1450 1455 LINE",
"1328 1455 LINE SMOOTH",
"1256 1455 OFFCURVE",
"1202.333 1421 OFFCURVE",
"1157 1357 CURVE SMOOTH",
"206 0 LINE",
"328 0 LINE SMOOTH",
"392 0 OFFCURVE",
"441.333 18.333 OFFCURVE",
"488 85 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1386 748 LINE",
"1180 748 LINE",
"792 297 LINE",
"800 195 LINE SMOOTH",
"802.667 169.667 OFFCURVE",
"822 151 OFFCURVE",
"858 151 CURVE SMOOTH",
"1134 151 LINE",
"1116 0 LINE",
"1294 0 LINE",
"1312 151 LINE",
"1356 151 LINE SMOOTH",
"1380 151 OFFCURVE",
"1396 170.333 OFFCURVE",
"1400 189 CURVE",
"1414 310 LINE",
"1332 310 LINE"
);
},
{
closed = 1;
nodes = (
"341.198 1464 OFFCURVE",
"219.047 1385.925 OFFCURVE",
"178 1232 CURVE",
"286 1213 LINE SMOOTH",
"298 1211 OFFCURVE",
"308 1210 OFFCURVE",
"316 1210 CURVE SMOOTH",
"348 1210 OFFCURVE",
"366 1224.333 OFFCURVE",
"386 1255 CURVE",
"402 1281.667 OFFCURVE",
"418 1295 OFFCURVE",
"454 1295 CURVE SMOOTH",
"492.667 1295 OFFCURVE",
"504 1272.333 OFFCURVE",
"504 1243 CURVE SMOOTH",
"504 1175.556 OFFCURVE",
"465.738 1162 OFFCURVE",
"368 1162 CURVE",
"350 1018 LINE",
"439.333 1018 OFFCURVE",
"472 1006.667 OFFCURVE",
"472 956 CURVE SMOOTH",
"472 901.333 OFFCURVE",
"440 871 OFFCURVE",
"392 871 CURVE SMOOTH",
"361.333 871 OFFCURVE",
"336 886.667 OFFCURVE",
"324 920 CURVE SMOOTH",
"316 941.333 OFFCURVE",
"294.333 952 OFFCURVE",
"265 952 CURVE SMOOTH",
"249.667 952 OFFCURVE",
"234 949 OFFCURVE",
"218 943 CURVE SMOOTH",
"120 905 LINE",
"153.047 747.393 OFFCURVE",
"239.119 700 OFFCURVE",
"382 700 CURVE SMOOTH",
"451.333 700 OFFCURVE",
"528.5 719.833 OFFCURVE",
"586.5 764.5 CURVE SMOOTH",
"644.5 809.167 OFFCURVE",
"686 877 OFFCURVE",
"686 973 CURVE SMOOTH",
"686 1039.667 OFFCURVE",
"656 1079 OFFCURVE",
"596 1103 CURVE",
"684 1137.667 OFFCURVE",
"714 1195 OFFCURVE",
"714 1283 CURVE SMOOTH",
"714 1381.082 OFFCURVE",
"624.662 1464 OFFCURVE",
"486 1464 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1153 310 LINE",
"1000 310 LINE",
"1189 536 LINE",
"1177.667 490 OFFCURVE",
"1170 449 OFFCURVE",
"1166 413 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
28 27 90 89 79 77 73 71 65 64 63 62 58 56 52 50 44 42 27 85 28 85 26 25 21 19 18 17 16 14 11 10 9 7 4 2 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 95 values pushed */
81 1 14 13 35 1 11 12 48 1 10 9 88 1 2 8 4 30 0 14 13 12 13 14 12 50 0 6 10 8 10 6 8 50 0 12 0 11 9 12 11 1 0 38 0 10 0 8 2 10 8 1 0 38 15 1 2 5 1 3 0 2 3 1 2 38 0 13 13 1 1 0 36 16 7 2 1 1 11 31 0 9 9 0 1 0 36 4 1 0 0 12 0 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 99 values pushed */
81 1 14 13 35 1 11 12 48 1 10 9 88 1 2 8 4 30 0 14 13 12 13 14 12 50 0 6 10 8 10 6 8 50 0 12 0 11 9 12 11 1 0 38 0 10 0 8 2 10 8 1 0 38 15 1 2 5 1 3 0 2 3 1 2 38 0 1 1 11 31 0 13 13 7 1 0 36 16 1 7 7 11 31 0 9 9 0 1 0 36 4 1 0 0 12 0 32 11 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 109 values pushed */
81 1 14 13 35 1 11 12 48 1 10 9 88 1 2 8 4 30 0 1 7 13 7 1 13 50 0 14 13 12 13 14 12 50 0 6 10 8 10 6 8 50 16 1 7 0 13 14 7 13 1 0 38 0 12 0 11 9 12 11 1 0 38 0 9 10 0 9 1 0 35 0 10 0 8 2 10 8 1 0 38 15 1 2 5 1 3 0 2 3 1 2 38 0 9 9 0 1 0 36 4 1 0 9 0 1 0 33 11 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 124 values pushed */
81 1 14 13 35 1 11 12 48 1 10 9 88 1 2 8 4 30 0 1 7 13 7 1 13 50 0 14 13 12 13 14 12 50 0 6 10 8 10 6 8 50 0 4 3 0 3 4 0 50 16 1 7 0 13 14 7 13 1 0 38 0 12 0 11 9 12 11 1 0 38 0 9 10 0 9 1 0 35 0 10 0 8 2 10 8 1 0 38 0 15 0 5 3 15 5 1 0 38 0 2 0 3 4 2 3 1 2 38 0 9 9 0 1 0 36 0 0 9 0 1 0 33 13 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = period;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"24 59.388 OFFCURVE",
"100.294 -14 OFFCURVE",
"200 -14 CURVE SMOOTH",
"298.829 -14 OFFCURVE",
"376 60.052 OFFCURVE",
"376 157 CURVE SMOOTH",
"376 251.99 OFFCURVE",
"298.331 328 OFFCURVE",
"200 328 CURVE SMOOTH",
"100.786 328 OFFCURVE",
"24 252.642 OFFCURVE",
"24 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"30 83.416 OFFCURVE",
"91.29 13.004 OFFCURVE",
"182 5 CURVE",
"162.753 -71.989 OFFCURVE",
"48 -170.513 OFFCURVE",
"48 -205 CURVE SMOOTH",
"48 -222.333 OFFCURVE",
"55.333 -232.333 OFFCURVE",
"70 -247 CURVE",
"124 -295 LINE",
"205.333 -235 OFFCURVE",
"268.5 -159 OFFCURVE",
"310.5 -83 CURVE SMOOTH",
"352.5 -7 OFFCURVE",
"374 70.333 OFFCURVE",
"374 137 CURVE SMOOTH",
"374 242.846 OFFCURVE",
"313.89 328 OFFCURVE",
"198 328 CURVE SMOOTH",
"100.481 328 OFFCURVE",
"30 262.039 OFFCURVE",
"30 176 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 4 1 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 10 values pushed */
24 15 2 0 27 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"24 59.388 OFFCURVE",
"100.294 -14 OFFCURVE",
"200 -14 CURVE SMOOTH",
"298.829 -14 OFFCURVE",
"376 60.052 OFFCURVE",
"376 157 CURVE SMOOTH",
"376 251.99 OFFCURVE",
"298.331 328 OFFCURVE",
"200 328 CURVE SMOOTH",
"100.786 328 OFFCURVE",
"24 252.642 OFFCURVE",
"24 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"120 742.388 OFFCURVE",
"196.294 669 OFFCURVE",
"296 669 CURVE SMOOTH",
"394.829 669 OFFCURVE",
"472 743.052 OFFCURVE",
"472 840 CURVE SMOOTH",
"472 934.99 OFFCURVE",
"394.331 1011 OFFCURVE",
"296 1011 CURVE SMOOTH",
"196.786 1011 OFFCURVE",
"120 935.642 OFFCURVE",
"120 840 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 18 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"24 83.416 OFFCURVE",
"85.29 13.004 OFFCURVE",
"176 5 CURVE",
"156.753 -71.989 OFFCURVE",
"42 -170.513 OFFCURVE",
"42 -205 CURVE SMOOTH",
"42 -222.333 OFFCURVE",
"49.333 -232.333 OFFCURVE",
"64 -247 CURVE",
"118 -295 LINE",
"199.333 -235 OFFCURVE",
"262.5 -159 OFFCURVE",
"304.5 -83 CURVE SMOOTH",
"346.5 -7 OFFCURVE",
"368 70.333 OFFCURVE",
"368 137 CURVE SMOOTH",
"368 242.846 OFFCURVE",
"307.89 328 OFFCURVE",
"192 328 CURVE SMOOTH",
"94.481 328 OFFCURVE",
"24 262.039 OFFCURVE",
"24 176 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"118 742.388 OFFCURVE",
"194.294 669 OFFCURVE",
"294 669 CURVE SMOOTH",
"392.829 669 OFFCURVE",
"470 743.052 OFFCURVE",
"470 840 CURVE SMOOTH",
"470 934.99 OFFCURVE",
"392.331 1011 OFFCURVE",
"294 1011 CURVE SMOOTH",
"194.786 1011 OFFCURVE",
"118 935.642 OFFCURVE",
"118 840 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
45 43 35 33 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
24 15 2 0 27 0 0 2 0 53 0 2 2 1 1 0 36 0 1 1 14 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
24 15 2 0 27 0 0 2 0 53 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"24 59.388 OFFCURVE",
"100.294 -14 OFFCURVE",
"200 -14 CURVE SMOOTH",
"298.829 -14 OFFCURVE",
"376 60.052 OFFCURVE",
"376 157 CURVE SMOOTH",
"376 251.99 OFFCURVE",
"298.331 328 OFFCURVE",
"200 328 CURVE SMOOTH",
"100.786 328 OFFCURVE",
"24 252.642 OFFCURVE",
"24 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"576 59.388 OFFCURVE",
"652.294 -14 OFFCURVE",
"752 -14 CURVE SMOOTH",
"850.829 -14 OFFCURVE",
"928 60.052 OFFCURVE",
"928 157 CURVE SMOOTH",
"928 251.99 OFFCURVE",
"850.331 328 OFFCURVE",
"752 328 CURVE SMOOTH",
"652.786 328 OFFCURVE",
"576 252.642 OFFCURVE",
"576 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1128 59.388 OFFCURVE",
"1204.294 -14 OFFCURVE",
"1304 -14 CURVE SMOOTH",
"1402.829 -14 OFFCURVE",
"1480 60.052 OFFCURVE",
"1480 157 CURVE SMOOTH",
"1480 251.99 OFFCURVE",
"1402.331 328 OFFCURVE",
"1304 328 CURVE SMOOTH",
"1204.786 328 OFFCURVE",
"1128 252.642 OFFCURVE",
"1128 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 46 44 36 34 26 24 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
4 2 2 0 1 1 0 1 0 35 4 2 2 0 0 1 1 0 36 5 3 2 1 0 1 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 0 2 1 0 1 0 35 0 4 0 5 3 4 5 1 0 38 0 2 0 3 1 2 3 1 0 38 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1576;
}
);
note = ellipsis;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"332 1457 LINE",
"262 883 LINE SMOOTH",
"252.667 809.667 OFFCURVE",
"249 738.333 OFFCURVE",
"249 665 CURVE SMOOTH",
"249 615.667 OFFCURVE",
"251.333 566.667 OFFCURVE",
"254 516 CURVE",
"456 516 LINE",
"494.667 642.667 OFFCURVE",
"525.333 761.667 OFFCURVE",
"540 883 CURVE SMOOTH",
"610 1457 LINE"
);
},
{
closed = 1;
nodes = (
"150 59.388 OFFCURVE",
"226.294 -14 OFFCURVE",
"326 -14 CURVE SMOOTH",
"424.829 -14 OFFCURVE",
"502 60.052 OFFCURVE",
"502 157 CURVE SMOOTH",
"502 251.99 OFFCURVE",
"424.331 328 OFFCURVE",
"326 328 CURVE SMOOTH",
"226.786 328 OFFCURVE",
"150 252.642 OFFCURVE",
"150 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 29 27 19 17 0 12 0 12 5 4 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 0 0 1 0 0 36 4 1 1 1 11 31 0 2 2 3 1 0 36 0 3 3 18 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 3 3 2 1 0 35 0 2 2 3 1 0 36 0 3 2 3 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 698;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"392 -331 LINE",
"456 198 LINE SMOOTH",
"465.333 271.333 OFFCURVE",
"469 343.667 OFFCURVE",
"469 417 CURVE SMOOTH",
"469 466.333 OFFCURVE",
"466.667 514.333 OFFCURVE",
"464 565 CURVE",
"260 565 LINE",
"221.333 439.667 OFFCURVE",
"190.667 320.667 OFFCURVE",
"176 198 CURVE SMOOTH",
"110 -331 LINE"
);
},
{
closed = 1;
nodes = (
"222 784.388 OFFCURVE",
"298.294 711 OFFCURVE",
"398 711 CURVE SMOOTH",
"496.829 711 OFFCURVE",
"574 785.052 OFFCURVE",
"574 882 CURVE SMOOTH",
"574 976.99 OFFCURVE",
"496.331 1053 OFFCURVE",
"398 1053 CURVE SMOOTH",
"298.786 1053 OFFCURVE",
"222 977.642 OFFCURVE",
"222 882 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 29 27 19 17 0 12 0 12 5 4 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 3 2 1 0 36 0 2 2 20 31 0 0 0 1 0 0 36 4 1 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
236 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 0 0 36 4 1 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 4 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 698;
}
);
note = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"202 1201 LINE",
"212.667 1175.667 OFFCURVE",
"231.333 1165 OFFCURVE",
"258 1165 CURVE SMOOTH",
"279.102 1165 OFFCURVE",
"311.437 1186.616 OFFCURVE",
"339 1201.5 CURVE SMOOTH",
"372.333 1219.5 OFFCURVE",
"415.333 1238 OFFCURVE",
"478 1238 CURVE SMOOTH",
"566 1238 OFFCURVE",
"598 1192 OFFCURVE",
"598 1120 CURVE SMOOTH",
"598 1089.333 OFFCURVE",
"590.167 1061.833 OFFCURVE",
"574.5 1037.5 CURVE SMOOTH",
"543.167 988.833 OFFCURVE",
"493.667 948 OFFCURVE",
"439 908 CURVE SMOOTH",
"411.667 888 OFFCURVE",
"386.167 866.667 OFFCURVE",
"362.5 844 CURVE SMOOTH",
"315.167 798.667 OFFCURVE",
"280 746.333 OFFCURVE",
"280 677 CURVE SMOOTH",
"280 516 LINE",
"486 516 LINE",
"530 658 LINE SMOOTH",
"539.333 688.667 OFFCURVE",
"554.333 715 OFFCURVE",
"575 737 CURVE SMOOTH",
"616.333 781 OFFCURVE",
"669.5 817.833 OFFCURVE",
"723.5 858.5 CURVE SMOOTH",
"750.5 878.833 OFFCURVE",
"775.167 903 OFFCURVE",
"797.5 931 CURVE SMOOTH",
"842.167 987 OFFCURVE",
"874 1061.667 OFFCURVE",
"874 1175 CURVE SMOOTH",
"874 1255 OFFCURVE",
"846.167 1328.5 OFFCURVE",
"789.5 1382.5 CURVE SMOOTH",
"732.833 1436.5 OFFCURVE",
"647.333 1471 OFFCURVE",
"534 1471 CURVE SMOOTH",
"375.38 1471 OFFCURVE",
"246.6 1408.323 OFFCURVE",
"138 1322 CURVE"
);
},
{
closed = 1;
nodes = (
"184 59.388 OFFCURVE",
"260.294 -14 OFFCURVE",
"360 -14 CURVE SMOOTH",
"458.829 -14 OFFCURVE",
"536 60.052 OFFCURVE",
"536 157 CURVE SMOOTH",
"536 251.99 OFFCURVE",
"458.331 328 OFFCURVE",
"360 328 CURVE SMOOTH",
"260.786 328 OFFCURVE",
"184 252.642 OFFCURVE",
"184 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
55 53 45 43 36 34 31 29 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 2 2 0 1 0 36 0 0 0 17 31 0 4 4 5 1 0 36 0 5 5 18 5 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 820;
}
);
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"656 -75 LINE SMOOTH",
"643.333 -52.333 OFFCURVE",
"624.667 -41 OFFCURVE",
"600 -41 CURVE SMOOTH",
"578.898 -41 OFFCURVE",
"546.563 -62.616 OFFCURVE",
"519 -77.5 CURVE SMOOTH",
"485.667 -95.5 OFFCURVE",
"442.667 -113 OFFCURVE",
"380 -113 CURVE SMOOTH",
"325.333 -113 OFFCURVE",
"282 -75.333 OFFCURVE",
"282 6 CURVE SMOOTH",
"282 34.667 OFFCURVE",
"289.167 60 OFFCURVE",
"303.5 82 CURVE SMOOTH",
"332.167 126 OFFCURVE",
"376.667 162.167 OFFCURVE",
"426 197.5 CURVE SMOOTH",
"450.667 215.167 OFFCURVE",
"473.667 234 OFFCURVE",
"495 254 CURVE SMOOTH",
"537.667 294 OFFCURVE",
"570 340.333 OFFCURVE",
"570 403 CURVE SMOOTH",
"570 565 LINE",
"366 565 LINE",
"322 424 LINE SMOOTH",
"315.333 401.333 OFFCURVE",
"302.167 381.333 OFFCURVE",
"282.5 364 CURVE SMOOTH",
"249.453 334.874 OFFCURVE",
"180.972 288.138 OFFCURVE",
"137 256.5 CURVE SMOOTH",
"109.667 236.833 OFFCURVE",
"84.667 213.333 OFFCURVE",
"62 186 CURVE SMOOTH",
"16.667 131.333 OFFCURVE",
"-16 58.333 OFFCURVE",
"-16 -47 CURVE SMOOTH",
"-16 -139 OFFCURVE",
"15.5 -214 OFFCURVE",
"73.5 -266 CURVE SMOOTH",
"131.5 -318 OFFCURVE",
"217.333 -347 OFFCURVE",
"324 -347 CURVE SMOOTH",
"484.618 -347 OFFCURVE",
"609.638 -282.894 OFFCURVE",
"720 -198 CURVE"
);
},
{
closed = 1;
nodes = (
"322 785.388 OFFCURVE",
"398.294 712 OFFCURVE",
"498 712 CURVE SMOOTH",
"596.829 712 OFFCURVE",
"674 786.052 OFFCURVE",
"674 883 CURVE SMOOTH",
"674 977.99 OFFCURVE",
"596.331 1054 OFFCURVE",
"498 1054 CURVE SMOOTH",
"398.786 1054 OFFCURVE",
"322 978.642 OFFCURVE",
"322 883 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
54 52 44 42 36 34 31 29 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 5 5 4 1 0 36 0 4 4 20 31 0 2 2 0 1 2 36 0 0 0 16 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 2 0 0 2 0 1 2 37 0 5 5 4 1 0 36 0 4 4 20 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 4 0 5 1 4 5 1 0 38 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 0 0 2 0 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 820;
}
);
note = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"78 475.828 OFFCURVE",
"178.602 379 OFFCURVE",
"302 379 CURVE SMOOTH",
"427.075 379 OFFCURVE",
"528 474.915 OFFCURVE",
"528 596 CURVE SMOOTH",
"528 717.941 OFFCURVE",
"427.573 814 OFFCURVE",
"302 814 CURVE SMOOTH",
"178.116 814 OFFCURVE",
"78 717.014 OFFCURVE",
"78 596 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 570;
}
);
note = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"100 460 OFFCURVE",
"155.667 338.667 OFFCURVE",
"245 252 CURVE SMOOTH",
"334.333 165.333 OFFCURVE",
"458 111 OFFCURVE",
"594 111 CURVE SMOOTH",
"731.333 111 OFFCURVE",
"854.5 165.333 OFFCURVE",
"944.5 252 CURVE SMOOTH",
"1034.5 338.667 OFFCURVE",
"1090 460 OFFCURVE",
"1090 592 CURVE SMOOTH",
"1090 725.333 OFFCURVE",
"1034.5 846 OFFCURVE",
"944.5 934 CURVE SMOOTH",
"854.5 1022 OFFCURVE",
"731.333 1076 OFFCURVE",
"594 1076 CURVE SMOOTH",
"458 1076 OFFCURVE",
"334.333 1022 OFFCURVE",
"245 934 CURVE SMOOTH",
"155.667 846 OFFCURVE",
"100 725.333 OFFCURVE",
"100 592 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
39 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 1 0 36 0 0 0 20 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"476 819 LINE",
"498 996 LINE SMOOTH",
"499.333 1006.667 OFFCURVE",
"500 1018.333 OFFCURVE",
"500 1029 CURVE SMOOTH",
"500 1043.667 OFFCURVE",
"498.667 1056.667 OFFCURVE",
"496 1070 CURVE",
"510.667 1052.667 OFFCURVE",
"528.667 1038.333 OFFCURVE",
"550 1025 CURVE",
"672 938 LINE",
"754 1051 LINE",
"634 1140 LINE SMOOTH",
"611.333 1156 OFFCURVE",
"587.333 1165.667 OFFCURVE",
"562 1171 CURVE",
"588.667 1176.333 OFFCURVE",
"615.333 1186.333 OFFCURVE",
"642 1201 CURVE",
"784 1288 LINE",
"730 1404 LINE",
"588 1316 LINE",
"561.333 1302.667 OFFCURVE",
"539.667 1280.667 OFFCURVE",
"521 1262 CURVE",
"533 1284.667 OFFCURVE",
"538 1320.333 OFFCURVE",
"542 1347 CURVE SMOOTH",
"564 1522 LINE",
"424 1522 LINE",
"402 1346 LINE",
"400.667 1340.667 OFFCURVE",
"400 1335.167 OFFCURVE",
"400 1329.5 CURVE SMOOTH",
"400 1323.833 OFFCURVE",
"400 1318.333 OFFCURVE",
"400 1313 CURVE SMOOTH",
"400 1296.333 OFFCURVE",
"401.333 1282.333 OFFCURVE",
"404 1271 CURVE",
"389.333 1288.333 OFFCURVE",
"370 1302.667 OFFCURVE",
"350 1316 CURVE",
"228 1406 LINE",
"144 1290 LINE",
"266 1201 LINE SMOOTH",
"288 1185 OFFCURVE",
"311.667 1175 OFFCURVE",
"337 1171 CURVE",
"310.333 1165.667 OFFCURVE",
"284.667 1154.667 OFFCURVE",
"258 1140 CURVE",
"116 1053 LINE",
"170 938 LINE",
"312 1025 LINE",
"337.333 1038.333 OFFCURVE",
"359.333 1052.333 OFFCURVE",
"378 1071 CURVE",
"368 1047.667 OFFCURVE",
"361.333 1022 OFFCURVE",
"358 994 CURVE SMOOTH",
"336 819 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 56 0 56 27 26 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
39 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
49 45 44 40 36 35 31 20 16 15 12 8 7 3 14 1 0 1 30 2 1 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
49 45 44 40 36 35 31 20 16 15 12 8 7 3 14 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 2 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 736;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1038 397 LINE",
"1066 489 LINE SMOOTH",
"1072.667 509.667 OFFCURVE",
"1076 528.333 OFFCURVE",
"1076 545 CURVE SMOOTH",
"1076 587.667 OFFCURVE",
"1050 606 OFFCURVE",
"1006 606 CURVE SMOOTH",
"891 606 LINE",
"964 851 LINE",
"1034 851 LINE SMOOTH",
"1118 851 OFFCURVE",
"1156 878 OFFCURVE",
"1176 938 CURVE SMOOTH",
"1216 1058 LINE",
"1019 1058 LINE",
"1108 1357 LINE SMOOTH",
"1110.667 1365 OFFCURVE",
"1112 1373.667 OFFCURVE",
"1112 1383 CURVE SMOOTH",
"1112 1425.667 OFFCURVE",
"1078.667 1455 OFFCURVE",
"1028 1455 CURVE SMOOTH",
"894 1455 LINE",
"773 1058 LINE",
"601 1058 LINE",
"722 1455 LINE",
"584 1455 LINE SMOOTH",
"521.333 1455 OFFCURVE",
"464.667 1420.333 OFFCURVE",
"446 1359 CURVE SMOOTH",
"356 1058 LINE",
"282 1058 LINE SMOOTH",
"195.333 1058 OFFCURVE",
"156.667 1032 OFFCURVE",
"138 972 CURVE SMOOTH",
"100 851 LINE",
"302 851 LINE",
"229 606 LINE",
"50 606 LINE",
"22 514 LINE SMOOTH",
"15.333 493.333 OFFCURVE",
"12 474.667 OFFCURVE",
"12 458 CURVE SMOOTH",
"12 415.333 OFFCURVE",
"38 397 OFFCURVE",
"82 397 CURVE SMOOTH",
"175 397 LINE",
"54 0 LINE",
"188 0 LINE SMOOTH",
"251.941 0 OFFCURVE",
"313.366 31.781 OFFCURVE",
"334 104 CURVE SMOOTH",
"420 397 LINE",
"593 397 LINE",
"510 119 LINE SMOOTH",
"506 105.667 OFFCURVE",
"505 93.667 OFFCURVE",
"505 83 CURVE SMOOTH",
"505 35 OFFCURVE",
"534 0 OFFCURVE",
"578 0 CURVE SMOOTH",
"718 0 LINE",
"837 397 LINE"
);
},
{
closed = 1;
nodes = (
"548 851 LINE",
"720 851 LINE",
"647 606 LINE",
"473 606 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
0 0 66 65 64 63 0 62 0 62 57 55 54 52 49 48 43 41 40 39 38 36 33 31 28 27 26 25 20 18 17 15 10 9 3 1 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
47 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 15 11 2 5 5 6 0 0 36 10 8 2 6 6 14 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
9 1 7 6 7 52 2 1 0 1 0 53 10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 1 1 4 0 0 35 14 12 2 4 4 1 0 0 36 16 13 3 3 1 4 1 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 96 values pushed */
0 7 9 7 52 0 9 6 9 52 0 2 1 0 1 2 0 50 0 0 0 51 0 8 0 15 11 8 15 0 2 38 0 10 0 11 5 10 11 1 2 38 0 6 0 5 4 6 5 0 0 38 0 14 13 1 14 0 0 35 0 12 16 1 13 3 12 13 0 0 38 0 4 0 3 1 4 3 1 0 38 0 14 14 1 0 0 36 0 1 14 1 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"880 1459 LINE",
"754 1459 LINE SMOOTH",
"683.333 1459 OFFCURVE",
"620.667 1423.667 OFFCURVE",
"590 1357 CURVE SMOOTH",
"-92 -101 LINE",
"36 -101 LINE SMOOTH",
"97.691 -101 OFFCURVE",
"174.136 -60.195 OFFCURVE",
"204 7 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
11 9 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 53 0 1 1 11 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 750;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"420 7 LINE",
"438.667 -63.667 OFFCURVE",
"499.333 -101 OFFCURVE",
"562 -101 CURVE SMOOTH",
"688 -101 LINE",
"364 1357 LINE",
"345.333 1421 OFFCURVE",
"296.667 1459 OFFCURVE",
"226 1459 CURVE SMOOTH",
"100 1459 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
7 5 2 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 11 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 748;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"328 609.667 OFFCURVE",
"355.5 781.667 OFFCURVE",
"401.5 943 CURVE SMOOTH",
"447.5 1104.333 OFFCURVE",
"514 1253.333 OFFCURVE",
"590 1392 CURVE SMOOTH",
"604.667 1418.667 OFFCURVE",
"613 1436 OFFCURVE",
"613 1452 CURVE SMOOTH",
"613 1477.333 OFFCURVE",
"596.667 1492.667 OFFCURVE",
"578 1506 CURVE",
"454 1582 LINE",
"312.667 1382 OFFCURVE",
"216.333 1193 OFFCURVE",
"155 1001 CURVE SMOOTH",
"93.667 809 OFFCURVE",
"68 614 OFFCURVE",
"68 406 CURVE SMOOTH",
"68 290 OFFCURVE",
"79.833 160.667 OFFCURVE",
"104.5 34 CURVE SMOOTH",
"129.167 -92.667 OFFCURVE",
"166.667 -218 OFFCURVE",
"220 -330 CURVE",
"362 -253 LINE SMOOTH",
"390 -238.333 OFFCURVE",
"413 -218 OFFCURVE",
"413 -182 CURVE SMOOTH",
"413 -170 OFFCURVE",
"409.333 -156 OFFCURVE",
"404 -140 CURVE SMOOTH",
"377.333 -57.333 OFFCURVE",
"358 40.167 OFFCURVE",
"346 139.5 CURVE SMOOTH",
"334 238.833 OFFCURVE",
"328 339 OFFCURVE",
"328 427 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
22 12 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"258 642.333 OFFCURVE",
"230.5 469.167 OFFCURVE",
"184.5 308.5 CURVE SMOOTH",
"138.5 147.833 OFFCURVE",
"72 -2.667 OFFCURVE",
"-4 -140 CURVE SMOOTH",
"-18.667 -166.667 OFFCURVE",
"-27 -184 OFFCURVE",
"-27 -200 CURVE SMOOTH",
"-27 -225.333 OFFCURVE",
"-10.667 -240.667 OFFCURVE",
"8 -254 CURVE",
"132 -330 LINE",
"273.333 -130 OFFCURVE",
"369.667 59 OFFCURVE",
"431 251 CURVE SMOOTH",
"492.333 443 OFFCURVE",
"518 638 OFFCURVE",
"518 846 CURVE SMOOTH",
"518 962 OFFCURVE",
"506.167 1090.167 OFFCURVE",
"481.5 1217.5 CURVE SMOOTH",
"456.833 1344.833 OFFCURVE",
"419.333 1470 OFFCURVE",
"366 1582 CURVE",
"224 1505 LINE SMOOTH",
"196 1490.333 OFFCURVE",
"173 1470 OFFCURVE",
"173 1434 CURVE SMOOTH",
"173 1422 OFFCURVE",
"176.667 1408 OFFCURVE",
"182 1392 CURVE SMOOTH",
"208.667 1309.333 OFFCURVE",
"228 1211.833 OFFCURVE",
"240 1112.5 CURVE SMOOTH",
"252 1013.167 OFFCURVE",
"258 913 OFFCURVE",
"258 825 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
12 22 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"96 358.667 OFFCURVE",
"75.333 287.333 OFFCURVE",
"54 214 CURVE SMOOTH",
"32.667 140.667 OFFCURVE",
"12 63.333 OFFCURVE",
"12 -22 CURVE SMOOTH",
"12 -110 OFFCURVE",
"37.167 -184.833 OFFCURVE",
"92.5 -237.5 CURVE SMOOTH",
"147.833 -290.167 OFFCURVE",
"233.333 -320 OFFCURVE",
"352 -320 CURVE SMOOTH",
"400 -320 LINE",
"403.146 -294.83 OFFCURVE",
"416 -207.088 OFFCURVE",
"416 -185 CURVE SMOOTH",
"416 -150.333 OFFCURVE",
"385.333 -134 OFFCURVE",
"364 -134 CURVE SMOOTH",
"300 -134 OFFCURVE",
"272 -88 OFFCURVE",
"272 -16 CURVE SMOOTH",
"272 132.716 OFFCURVE",
"346 280.597 OFFCURVE",
"346 427 CURVE SMOOTH",
"346 511 OFFCURVE",
"306 586.667 OFFCURVE",
"222 616 CURVE",
"323.418 647.206 OFFCURVE",
"386.371 737.417 OFFCURVE",
"400 841 CURVE SMOOTH",
"410.721 937.492 OFFCURVE",
"407.458 1101.745 OFFCURVE",
"422 1216 CURVE SMOOTH",
"434 1312 OFFCURVE",
"472 1370 OFFCURVE",
"548 1370 CURVE SMOOTH",
"572.823 1370 OFFCURVE",
"609.219 1389.141 OFFCURVE",
"614 1425 CURVE SMOOTH",
"630 1555 LINE",
"584 1555 LINE SMOOTH",
"433.333 1555 OFFCURVE",
"324.5 1513 OFFCURVE",
"254.5 1433 CURVE SMOOTH",
"184.5 1353 OFFCURVE",
"152 1236 OFFCURVE",
"152 1084 CURVE SMOOTH",
"152 1068.642 OFFCURVE",
"154 969.892 OFFCURVE",
"154 956 CURVE SMOOTH",
"154 801.169 OFFCURVE",
"140.832 701 OFFCURVE",
"36 701 CURVE",
"14 534 LINE",
"74 534 OFFCURVE",
"96 492 OFFCURVE",
"96 432 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
60 58 51 49 27 25 20 18 5 4 3 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
39 1 0 1 1 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 4 5 1 0 36 0 5 5 16 5 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
39 1 0 1 1 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"430 278 LINE SMOOTH",
"430 436.123 OFFCURVE",
"442.865 534 OFFCURVE",
"548 534 CURVE",
"568 701 LINE",
"508 701 OFFCURVE",
"488 743 OFFCURVE",
"488 803 CURVE SMOOTH",
"488 875 OFFCURVE",
"509 946.667 OFFCURVE",
"529 1020 CURVE SMOOTH",
"549 1093.333 OFFCURVE",
"570 1171 OFFCURVE",
"570 1255 CURVE SMOOTH",
"570 1344.333 OFFCURVE",
"544.833 1419.833 OFFCURVE",
"489.5 1472.5 CURVE SMOOTH",
"434.167 1525.167 OFFCURVE",
"349.333 1555 OFFCURVE",
"232 1555 CURVE SMOOTH",
"184 1555 LINE",
"180 1524 LINE",
"180 1510.674 OFFCURVE",
"168 1431.052 OFFCURVE",
"168 1418 CURVE SMOOTH",
"168 1385.703 OFFCURVE",
"198.081 1370 OFFCURVE",
"222 1370 CURVE SMOOTH",
"284.667 1368.667 OFFCURVE",
"312 1321.667 OFFCURVE",
"312 1251 CURVE SMOOTH",
"312 1104.355 OFFCURVE",
"236 949.051 OFFCURVE",
"236 809 CURVE SMOOTH",
"236 722.333 OFFCURVE",
"276 646.333 OFFCURVE",
"360 617 CURVE",
"260.899 585.705 OFFCURVE",
"194.855 495.122 OFFCURVE",
"184 392 CURVE SMOOTH",
"171.861 285.177 OFFCURVE",
"178.308 144.805 OFFCURVE",
"162 19 CURVE SMOOTH",
"150 -75.667 OFFCURVE",
"112.667 -132.667 OFFCURVE",
"38 -134 CURVE SMOOTH",
"15.333 -134 OFFCURVE",
"-23.333 -152 OFFCURVE",
"-30 -192 CURVE SMOOTH",
"-48 -320 LINE",
"0 -320 LINE SMOOTH",
"149.333 -320 OFFCURVE",
"257.5 -278 OFFCURVE",
"327.5 -198 CURVE SMOOTH",
"397.5 -118 OFFCURVE",
"430 -1 OFFCURVE",
"430 151 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
61 60 59 58 47 45 35 33 11 9 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
44 1 2 3 23 1 5 4 2 30 0 3 0 2 4 3 2 1 0 38 0 4 0 5 1 4 5 1 0 38 0 1 1 0 1 0 36 0 0 0 16 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
44 1 2 3 23 1 5 4 2 30 0 3 0 2 4 3 2 1 0 38 0 4 0 5 1 4 5 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"398 -320 LINE",
"401.562 -289.367 OFFCURVE",
"413 -198.06 OFFCURVE",
"413 -198 CURVE SMOOTH",
"413 -162 OFFCURVE",
"386 -134 OFFCURVE",
"346 -134 CURVE SMOOTH",
"249 -134 LINE",
"435 1370 LINE",
"528 1370 LINE SMOOTH",
"572 1370 OFFCURVE",
"608.667 1402.333 OFFCURVE",
"614 1441 CURVE SMOOTH",
"628 1555 LINE",
"208 1555 LINE",
"-22 -320 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 17 0 17 10 8 7 5 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 2 3 0 0 36 4 1 3 3 16 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 3 3 2 1 0 35 0 2 2 3 0 0 36 4 1 3 2 3 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-46 -320 LINE",
"374 -320 LINE",
"606 1555 LINE",
"186 1555 LINE",
"170 1441 LINE",
"170 1439.667 OFFCURVE",
"169.833 1438.167 OFFCURVE",
"169.5 1436.5 CURVE SMOOTH",
"169.167 1434.833 OFFCURVE",
"169 1433.333 OFFCURVE",
"169 1432 CURVE SMOOTH",
"169 1397.333 OFFCURVE",
"196.667 1370 OFFCURVE",
"238 1370 CURVE SMOOTH",
"335 1370 LINE",
"149 -134 LINE",
"54 -134 LINE SMOOTH",
"10 -134 OFFCURVE",
"-23.333 -167 OFFCURVE",
"-30 -207 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
16 15 14 13 7 5 4 2 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
12 1 1 2 1 30 0 2 0 1 0 2 1 1 0 38 0 0 0 3 0 0 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
12 1 1 2 1 30 0 2 0 1 0 2 1 1 0 38 0 0 3 3 0 1 0 35 0 0 0 3 0 0 36 0 3 0 3 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"92 486 LINE",
"592 486 LINE",
"624 728 LINE",
"122 728 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"92 486 LINE",
"592 486 LINE",
"624 728 LINE",
"122 728 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"160 503 LINE",
"916 503 LINE",
"942 708 LINE",
"186 708 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1072;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"160 503 LINE",
"1436 503 LINE",
"1462 708 LINE",
"186 708 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1592;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = underscore;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-74 -114 LINE",
"-98 -300 LINE",
"628 -300 LINE",
"652 -114 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 1 1 0 0 0 36 0 0 0 16 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 726;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"110 257 LINE SMOOTH",
"78 246.333 OFFCURVE",
"58 225 OFFCURVE",
"58 201 CURVE SMOOTH",
"58 193.667 OFFCURVE",
"59.333 187.333 OFFCURVE",
"62 182 CURVE SMOOTH",
"84.667 132.667 OFFCURVE",
"94 88.333 OFFCURVE",
"94 47 CURVE SMOOTH",
"94 -43.711 OFFCURVE",
"44.792 -129.208 OFFCURVE",
"10 -164 CURVE",
"-8.667 -186.667 OFFCURVE",
"-18 -196.333 OFFCURVE",
"-18 -215 CURVE SMOOTH",
"-18 -228.333 OFFCURVE",
"-11 -242.333 OFFCURVE",
"1 -249 CURVE",
"86 -303 LINE",
"256.667 -180.333 OFFCURVE",
"345 -29.333 OFFCURVE",
"345 128 CURVE SMOOTH",
"345 193.333 OFFCURVE",
"330 258.667 OFFCURVE",
"298 324 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 488;
}
);
note = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"110 257 LINE SMOOTH",
"78 246.333 OFFCURVE",
"58 225 OFFCURVE",
"58 201 CURVE SMOOTH",
"58 193.667 OFFCURVE",
"59.333 187.333 OFFCURVE",
"62 182 CURVE SMOOTH",
"84.667 132.667 OFFCURVE",
"94 88.333 OFFCURVE",
"94 47 CURVE SMOOTH",
"94 -43.711 OFFCURVE",
"44.792 -129.208 OFFCURVE",
"10 -164 CURVE",
"-8.667 -186.667 OFFCURVE",
"-18 -196.333 OFFCURVE",
"-18 -215 CURVE SMOOTH",
"-18 -228.333 OFFCURVE",
"-11 -242.333 OFFCURVE",
"1 -249 CURVE",
"86 -303 LINE",
"256.667 -180.333 OFFCURVE",
"345 -29.333 OFFCURVE",
"345 128 CURVE SMOOTH",
"345 193.333 OFFCURVE",
"330 258.667 OFFCURVE",
"298 324 CURVE"
);
},
{
closed = 1;
nodes = (
"446 257 LINE SMOOTH",
"414 246.333 OFFCURVE",
"394 225 OFFCURVE",
"394 201 CURVE SMOOTH",
"394 193.667 OFFCURVE",
"395.333 187.333 OFFCURVE",
"398 182 CURVE SMOOTH",
"420.667 132.667 OFFCURVE",
"430 88.333 OFFCURVE",
"430 47 CURVE SMOOTH",
"430 -43.711 OFFCURVE",
"380.792 -129.208 OFFCURVE",
"346 -164 CURVE",
"327.333 -186.667 OFFCURVE",
"318 -196.333 OFFCURVE",
"318 -215 CURVE SMOOTH",
"318 -228.333 OFFCURVE",
"325 -242.333 OFFCURVE",
"337 -249 CURVE",
"422 -303 LINE",
"592.667 -180.333 OFFCURVE",
"681 -29.333 OFFCURVE",
"681 128 CURVE SMOOTH",
"681 193.333 OFFCURVE",
"666 258.667 OFFCURVE",
"634 324 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
27 33 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 774;
}
);
note = quotedblbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"394 1022 LINE SMOOTH",
"426 1032.667 OFFCURVE",
"446 1054 OFFCURVE",
"446 1078 CURVE SMOOTH",
"446 1085.333 OFFCURVE",
"444.667 1091.667 OFFCURVE",
"442 1097 CURVE SMOOTH",
"419.333 1146.333 OFFCURVE",
"410 1190.667 OFFCURVE",
"410 1232 CURVE SMOOTH",
"410 1328.98 OFFCURVE",
"458.4 1400.712 OFFCURVE",
"493 1443 CURVE",
"513 1465.667 OFFCURVE",
"522 1475.333 OFFCURVE",
"522 1494 CURVE SMOOTH",
"522 1507.333 OFFCURVE",
"515 1521.333 OFFCURVE",
"503 1528 CURVE",
"418 1582 LINE",
"247.333 1459.333 OFFCURVE",
"159 1308.333 OFFCURVE",
"159 1151 CURVE SMOOTH",
"159 1085.667 OFFCURVE",
"174 1020.333 OFFCURVE",
"206 955 CURVE"
);
},
{
closed = 1;
nodes = (
"730 1022 LINE SMOOTH",
"762 1032.667 OFFCURVE",
"782 1054 OFFCURVE",
"782 1078 CURVE SMOOTH",
"782 1085.333 OFFCURVE",
"780.667 1091.667 OFFCURVE",
"778 1097 CURVE SMOOTH",
"755.333 1146.333 OFFCURVE",
"746 1190.667 OFFCURVE",
"746 1232 CURVE SMOOTH",
"746 1328.98 OFFCURVE",
"794.4 1400.712 OFFCURVE",
"829 1443 CURVE",
"849 1465.667 OFFCURVE",
"858 1475.333 OFFCURVE",
"858 1494 CURVE SMOOTH",
"858 1507.333 OFFCURVE",
"851 1521.333 OFFCURVE",
"839 1528 CURVE",
"754 1582 LINE",
"583.333 1459.333 OFFCURVE",
"495 1308.333 OFFCURVE",
"495 1151 CURVE SMOOTH",
"495 1085.667 OFFCURVE",
"510 1020.333 OFFCURVE",
"542 955 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
33 27 6 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 774;
}
);
note = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"248 1476 LINE SMOOTH",
"216 1465.333 OFFCURVE",
"196 1444 OFFCURVE",
"196 1420 CURVE SMOOTH",
"196 1412.667 OFFCURVE",
"197.333 1406.333 OFFCURVE",
"200 1401 CURVE SMOOTH",
"222.667 1351.667 OFFCURVE",
"232 1307.333 OFFCURVE",
"232 1266 CURVE SMOOTH",
"232 1175.289 OFFCURVE",
"182.792 1089.792 OFFCURVE",
"148 1055 CURVE",
"129.333 1032.333 OFFCURVE",
"120 1022.667 OFFCURVE",
"120 1004 CURVE SMOOTH",
"120 990.667 OFFCURVE",
"127 976.667 OFFCURVE",
"139 970 CURVE",
"224 916 LINE",
"394.667 1038.667 OFFCURVE",
"483 1189.667 OFFCURVE",
"483 1347 CURVE SMOOTH",
"483 1412.333 OFFCURVE",
"468 1477.667 OFFCURVE",
"436 1543 CURVE"
);
},
{
closed = 1;
nodes = (
"582 1476 LINE SMOOTH",
"550 1465.333 OFFCURVE",
"530 1444 OFFCURVE",
"530 1420 CURVE SMOOTH",
"530 1412.667 OFFCURVE",
"531.333 1406.333 OFFCURVE",
"534 1401 CURVE SMOOTH",
"556.667 1351.667 OFFCURVE",
"566 1307.333 OFFCURVE",
"566 1266 CURVE SMOOTH",
"566 1175.289 OFFCURVE",
"516.792 1089.792 OFFCURVE",
"482 1055 CURVE",
"463.333 1032.333 OFFCURVE",
"454 1022.667 OFFCURVE",
"454 1004 CURVE SMOOTH",
"454 990.667 OFFCURVE",
"461 976.667 OFFCURVE",
"473 970 CURVE",
"558 916 LINE",
"728.667 1038.667 OFFCURVE",
"817 1189.667 OFFCURVE",
"817 1347 CURVE SMOOTH",
"817 1412.333 OFFCURVE",
"802 1477.667 OFFCURVE",
"770 1543 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
27 33 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 774;
}
);
note = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"394 1022 LINE SMOOTH",
"426 1032.667 OFFCURVE",
"446 1054 OFFCURVE",
"446 1078 CURVE SMOOTH",
"446 1085.333 OFFCURVE",
"444.667 1091.667 OFFCURVE",
"442 1097 CURVE SMOOTH",
"419.333 1146.333 OFFCURVE",
"410 1190.667 OFFCURVE",
"410 1232 CURVE SMOOTH",
"410 1328.98 OFFCURVE",
"458.4 1400.712 OFFCURVE",
"493 1443 CURVE",
"513 1465.667 OFFCURVE",
"522 1475.333 OFFCURVE",
"522 1494 CURVE SMOOTH",
"522 1507.333 OFFCURVE",
"515 1521.333 OFFCURVE",
"503 1528 CURVE",
"418 1582 LINE",
"247.333 1459.333 OFFCURVE",
"159 1308.333 OFFCURVE",
"159 1151 CURVE SMOOTH",
"159 1085.667 OFFCURVE",
"174 1020.333 OFFCURVE",
"206 955 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 438;
}
);
note = quoteleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"248 1476 LINE SMOOTH",
"216 1465.333 OFFCURVE",
"196 1444 OFFCURVE",
"196 1420 CURVE SMOOTH",
"196 1412.667 OFFCURVE",
"197.333 1406.333 OFFCURVE",
"200 1401 CURVE SMOOTH",
"222.667 1351.667 OFFCURVE",
"232 1307.333 OFFCURVE",
"232 1266 CURVE SMOOTH",
"232 1175.289 OFFCURVE",
"182.792 1089.792 OFFCURVE",
"148 1055 CURVE",
"129.333 1032.333 OFFCURVE",
"120 1022.667 OFFCURVE",
"120 1004 CURVE SMOOTH",
"120 990.667 OFFCURVE",
"127 976.667 OFFCURVE",
"139 970 CURVE",
"224 916 LINE",
"394.667 1038.667 OFFCURVE",
"483 1189.667 OFFCURVE",
"483 1347 CURVE SMOOTH",
"483 1412.333 OFFCURVE",
"468 1477.667 OFFCURVE",
"436 1543 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 438;
}
);
note = quoteright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"305 123 LINE",
"409 167 LINE SMOOTH",
"444.333 183 OFFCURVE",
"462 206.667 OFFCURVE",
"462 238 CURVE SMOOTH",
"462 251.333 OFFCURVE",
"458.333 264.333 OFFCURVE",
"453 279 CURVE SMOOTH",
"373 498 LINE SMOOTH",
"366.333 516.667 OFFCURVE",
"354.667 531 OFFCURVE",
"344 543 CURVE",
"358.667 553.667 OFFCURVE",
"373 569 OFFCURVE",
"385 589 CURVE SMOOTH",
"517 808 LINE SMOOTH",
"530.333 829.333 OFFCURVE",
"539 847.333 OFFCURVE",
"539 866 CURVE SMOOTH",
"539 888.667 OFFCURVE",
"526.333 906 OFFCURVE",
"501 918 CURVE SMOOTH",
"409 962 LINE",
"117 562 LINE",
"111 525 LINE"
);
},
{
closed = 1;
nodes = (
"643 123 LINE",
"747 167 LINE SMOOTH",
"782.333 183 OFFCURVE",
"800 206.667 OFFCURVE",
"800 238 CURVE SMOOTH",
"800 251.333 OFFCURVE",
"796.333 264.333 OFFCURVE",
"791 279 CURVE SMOOTH",
"711 498 LINE SMOOTH",
"704.333 516.667 OFFCURVE",
"692.667 531 OFFCURVE",
"682 543 CURVE",
"696.667 553.667 OFFCURVE",
"711 569 OFFCURVE",
"723 589 CURVE SMOOTH",
"855 808 LINE SMOOTH",
"868.333 829.333 OFFCURVE",
"877 847.333 OFFCURVE",
"877 866 CURVE SMOOTH",
"877 888.667 OFFCURVE",
"864.333 906 OFFCURVE",
"839 918 CURVE SMOOTH",
"747 962 LINE",
"455 562 LINE",
"449 525 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 45 2 22 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 964;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"340 962 LINE",
"236 918 LINE SMOOTH",
"198.667 903.333 OFFCURVE",
"182 876.667 OFFCURVE",
"182 846 CURVE SMOOTH",
"182 834.667 OFFCURVE",
"184.667 822 OFFCURVE",
"190 808 CURVE SMOOTH",
"272 589 LINE SMOOTH",
"278.667 569.667 OFFCURVE",
"288 554 OFFCURVE",
"300 542 CURVE",
"285.333 531.333 OFFCURVE",
"270.667 516.667 OFFCURVE",
"260 498 CURVE SMOOTH",
"126 279 LINE SMOOTH",
"112.667 257.667 OFFCURVE",
"105 239.667 OFFCURVE",
"105 221 CURVE SMOOTH",
"105 197.667 OFFCURVE",
"118 179.667 OFFCURVE",
"144 167 CURVE SMOOTH",
"236 123 LINE",
"528 525 LINE",
"532 562 LINE"
);
},
{
closed = 1;
nodes = (
"678 962 LINE",
"574 918 LINE SMOOTH",
"536.667 903.333 OFFCURVE",
"520 876.667 OFFCURVE",
"520 846 CURVE SMOOTH",
"520 834.667 OFFCURVE",
"522.667 822 OFFCURVE",
"528 808 CURVE SMOOTH",
"610 589 LINE SMOOTH",
"616.667 569.667 OFFCURVE",
"626 554 OFFCURVE",
"638 542 CURVE",
"623.333 531.333 OFFCURVE",
"608.667 516.667 OFFCURVE",
"598 498 CURVE SMOOTH",
"464 279 LINE SMOOTH",
"450.667 257.667 OFFCURVE",
"443 239.667 OFFCURVE",
"443 221 CURVE SMOOTH",
"443 197.667 OFFCURVE",
"456 179.667 OFFCURVE",
"482 167 CURVE SMOOTH",
"574 123 LINE",
"866 525 LINE",
"870 562 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
43 24 21 2 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 964;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"305 123 LINE",
"409 167 LINE SMOOTH",
"444.333 183 OFFCURVE",
"462 206.667 OFFCURVE",
"462 238 CURVE SMOOTH",
"462 251.333 OFFCURVE",
"458.333 264.333 OFFCURVE",
"453 279 CURVE SMOOTH",
"373 498 LINE SMOOTH",
"366.333 516.667 OFFCURVE",
"354.667 531 OFFCURVE",
"344 543 CURVE",
"358.667 553.667 OFFCURVE",
"373 569 OFFCURVE",
"385 589 CURVE SMOOTH",
"517 808 LINE SMOOTH",
"530.333 829.333 OFFCURVE",
"539 847.333 OFFCURVE",
"539 866 CURVE SMOOTH",
"539 888.667 OFFCURVE",
"526.333 906 OFFCURVE",
"501 918 CURVE SMOOTH",
"409 962 LINE",
"117 562 LINE",
"111 525 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
2 22 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 626;
}
);
note = guilsinglleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"340 962 LINE",
"236 918 LINE SMOOTH",
"198.667 903.333 OFFCURVE",
"182 876.667 OFFCURVE",
"182 846 CURVE SMOOTH",
"182 834.667 OFFCURVE",
"184.667 822 OFFCURVE",
"190 808 CURVE SMOOTH",
"272 589 LINE SMOOTH",
"278.667 569.667 OFFCURVE",
"288 554 OFFCURVE",
"300 542 CURVE",
"285.333 531.333 OFFCURVE",
"270.667 516.667 OFFCURVE",
"260 498 CURVE SMOOTH",
"126 279 LINE SMOOTH",
"112.667 257.667 OFFCURVE",
"105 239.667 OFFCURVE",
"105 221 CURVE SMOOTH",
"105 197.667 OFFCURVE",
"118 179.667 OFFCURVE",
"144 167 CURVE SMOOTH",
"236 123 LINE",
"528 525 LINE",
"532 562 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
21 2 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 626;
}
);
note = guilsinglright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"216 1455 LINE",
"180 1169 LINE",
"188 1011 LINE SMOOTH",
"192 941.667 OFFCURVE",
"217.333 904 OFFCURVE",
"276 904 CURVE SMOOTH",
"344 904 OFFCURVE",
"374 941.667 OFFCURVE",
"394 1011 CURVE SMOOTH",
"440 1169 LINE",
"476 1455 LINE"
);
},
{
closed = 1;
nodes = (
"592 1455 LINE",
"556 1169 LINE",
"564 1011 LINE SMOOTH",
"568 941.667 OFFCURVE",
"593.333 904 OFFCURVE",
"652 904 CURVE SMOOTH",
"720 904 OFFCURVE",
"750 941.667 OFFCURVE",
"770 1011 CURVE SMOOTH",
"816 1169 LINE",
"852 1455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 11 0 0 11 21 11 21 17 15 0 10 0 10 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
20 9 2 0 1 1 30 2 1 0 0 1 0 0 36 5 3 4 3 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
20 9 2 0 1 1 30 5 3 4 3 1 0 0 1 0 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
20 9 2 2 3 1 30 4 1 1 3 0 1 0 0 35 5 1 3 0 2 0 3 2 1 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 828;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"216 1455 LINE",
"180 1169 LINE",
"188 1011 LINE SMOOTH",
"192 941.667 OFFCURVE",
"217.333 904 OFFCURVE",
"276 904 CURVE SMOOTH",
"344 904 OFFCURVE",
"374 941.667 OFFCURVE",
"394 1011 CURVE SMOOTH",
"440 1169 LINE",
"476 1455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 10 0 10 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
9 1 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
9 1 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 454;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = CR;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 0;
}
);
note = CR;
},
{
glyphname = .notdef;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"312 1025 LINE",
"325.333 1001 OFFCURVE",
"346.333 989 OFFCURVE",
"375 989 CURVE SMOOTH",
"421.282 989 OFFCURVE",
"452.1 1022 OFFCURVE",
"525 1022 CURVE SMOOTH",
"573 1022 OFFCURVE",
"587 998.667 OFFCURVE",
"587 968 CURVE SMOOTH",
"587 914.881 OFFCURVE",
"543.69 875.713 OFFCURVE",
"500.5 845 CURVE SMOOTH",
"456.631 813.804 OFFCURVE",
"414 771.112 OFFCURVE",
"414 714 CURVE SMOOTH",
"414 704 OFFCURVE",
"415 693.667 OFFCURVE",
"417 683 CURVE SMOOTH",
"439 571 LINE",
"651 571 LINE",
"678 661 LINE SMOOTH",
"689.147 700.015 OFFCURVE",
"744.062 735.97 OFFCURVE",
"785.5 773 CURVE SMOOTH",
"825.755 808.973 OFFCURVE",
"874 908.846 OFFCURVE",
"874 987 CURVE SMOOTH",
"874 1069.667 OFFCURVE",
"845.667 1139 OFFCURVE",
"791 1187 CURVE SMOOTH",
"736.333 1235 OFFCURVE",
"657 1263 OFFCURVE",
"553 1263 CURVE SMOOTH",
"413 1263 OFFCURVE",
"312.667 1216 OFFCURVE",
"230 1152 CURVE"
);
},
{
closed = 1;
nodes = (
"374 242.901 OFFCURVE",
"442.969 175 OFFCURVE",
"535 175 CURVE SMOOTH",
"623.043 175 OFFCURVE",
"694 243 OFFCURVE",
"694 331 CURVE SMOOTH",
"694 419 OFFCURVE",
"623.043 487 OFFCURVE",
"535 487 CURVE SMOOTH",
"442.969 487 OFFCURVE",
"374 419.099 OFFCURVE",
"374 331 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"40 0 LINE",
"1083 0 LINE",
"1083 1457 LINE",
"40 1457 LINE"
);
},
{
closed = 1;
nodes = (
"117 1377 LINE",
"996 1377 LINE",
"996 80 LINE",
"117 80 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
65 64 63 62 61 60 59 58 54 52 44 42 36 34 31 29 17 16 4 2 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 1 2 0 1 30 0 1 2 4 2 1 4 50 0 0 3 1 2 1 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 7 7 8 0 0 35 0 8 8 7 0 0 36 0 7 8 7 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1123;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 386;
}
);
note = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 386;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = at;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1146.667 182 OFFCURVE",
"1263 249.833 OFFCURVE",
"1347 358.5 CURVE SMOOTH",
"1431 467.167 OFFCURVE",
"1482 618.333 OFFCURVE",
"1482 785 CURVE SMOOTH",
"1482 970.333 OFFCURVE",
"1416 1122.333 OFFCURVE",
"1308 1229 CURVE SMOOTH",
"1200 1335.667 OFFCURVE",
"1051.333 1396 OFFCURVE",
"886 1396 CURVE SMOOTH",
"808.667 1396 OFFCURVE",
"734.167 1384.667 OFFCURVE",
"662.5 1362 CURVE SMOOTH",
"519.167 1316.667 OFFCURVE",
"394.667 1234.5 OFFCURVE",
"292 1120.5 CURVE SMOOTH",
"240.667 1063.5 OFFCURVE",
"196.833 1000.833 OFFCURVE",
"160.5 932.5 CURVE SMOOTH",
"87.833 795.833 OFFCURVE",
"46 638.333 OFFCURVE",
"46 473 CURVE SMOOTH",
"46 257 OFFCURVE",
"113.167 78.167 OFFCURVE",
"232.5 -46.5 CURVE SMOOTH",
"351.833 -171.167 OFFCURVE",
"523.333 -242 OFFCURVE",
"734 -242 CURVE SMOOTH",
"847.333 -242 OFFCURVE",
"949.5 -226 OFFCURVE",
"1039.5 -198 CURVE SMOOTH",
"1129.5 -170 OFFCURVE",
"1207.333 -132 OFFCURVE",
"1274 -88 CURVE",
"1252 -7 LINE SMOOTH",
"1245.333 19.667 OFFCURVE",
"1226.667 43 OFFCURVE",
"1192 43 CURVE SMOOTH",
"1176 43 OFFCURVE",
"1156.667 39.333 OFFCURVE",
"1134 26 CURVE",
"1104.667 7.333 OFFCURVE",
"1058.667 -13 OFFCURVE",
"996 -29 CURVE SMOOTH",
"933.333 -45 OFFCURVE",
"853.333 -56 OFFCURVE",
"756 -56 CURVE SMOOTH",
"605.333 -56 OFFCURVE",
"482.5 -8.667 OFFCURVE",
"396.5 82 CURVE SMOOTH",
"310.5 172.667 OFFCURVE",
"262 307 OFFCURVE",
"262 483 CURVE SMOOTH",
"262 688.333 OFFCURVE",
"325.5 870.167 OFFCURVE",
"431.5 1001.5 CURVE SMOOTH",
"537.5 1132.833 OFFCURVE",
"687.333 1212 OFFCURVE",
"862 1212 CURVE SMOOTH",
"991.333 1212 OFFCURVE",
"1094.5 1174.167 OFFCURVE",
"1164.5 1101.5 CURVE SMOOTH",
"1234.5 1028.833 OFFCURVE",
"1272 922.333 OFFCURVE",
"1272 785 CURVE SMOOTH",
"1272 667.667 OFFCURVE",
"1250.667 562.167 OFFCURVE",
"1216 485.5 CURVE SMOOTH",
"1181.333 408.833 OFFCURVE",
"1134 361 OFFCURVE",
"1082 361 CURVE SMOOTH",
"1043.333 361 OFFCURVE",
"1017 378.333 OFFCURVE",
"1017 429 CURVE SMOOTH",
"1017 457 OFFCURVE",
"1025.333 496 OFFCURVE",
"1044 548 CURVE SMOOTH",
"1182 926 LINE",
"1112.516 958.069 OFFCURVE",
"1043.333 973 OFFCURVE",
"942 973 CURVE SMOOTH",
"879.333 973 OFFCURVE",
"821.833 965.333 OFFCURVE",
"769.5 950 CURVE SMOOTH",
"664.833 919.333 OFFCURVE",
"580.667 864.833 OFFCURVE",
"518 793.5 CURVE SMOOTH",
"486.667 757.833 OFFCURVE",
"460.5 720 OFFCURVE",
"439.5 680 CURVE SMOOTH",
"397.5 600 OFFCURVE",
"376 511.333 OFFCURVE",
"376 430 CURVE SMOOTH",
"376 288.476 OFFCURVE",
"446.383 183 OFFCURVE",
"586 183 CURVE SMOOTH",
"678 183 OFFCURVE",
"762 216.333 OFFCURVE",
"846 303 CURVE",
"869.166 218.059 OFFCURVE",
"936.797 182 OFFCURVE",
"1016 182 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"628.667 369 OFFCURVE",
"608 399.667 OFFCURVE",
"608 461 CURVE SMOOTH",
"608 547.667 OFFCURVE",
"641.667 631.667 OFFCURVE",
"691 693 CURVE SMOOTH",
"740.333 754.333 OFFCURVE",
"806 794 OFFCURVE",
"870 794 CURVE SMOOTH",
"884 794 OFFCURVE",
"898 793 OFFCURVE",
"912 791 CURVE",
"812 517 LINE SMOOTH",
"776.64 417.993 OFFCURVE",
"727.589 369 OFFCURVE",
"670 369 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
92 91 1 0 100 98 91 105 92 105 82 80 70 68 61 59 53 51 43 41 33 31 21 19 9 7 0 90 1 90 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
25 1 10 2 97 1 3 10 5 1 0 3 64 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 3 2 10 1 0 38 12 9 2 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
25 1 10 2 97 1 9 10 5 1 0 3 64 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 3 0 9 1 0 35 0 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 91 values pushed */
25 1 10 2 97 1 9 10 5 1 1 3 64 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 0 1 0 9 1 1 0 38 0 3 11 1 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1486;
}
);
note = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"593.333 1471 OFFCURVE",
"481.333 1421.667 OFFCURVE",
"404 1343 CURVE SMOOTH",
"326.667 1264.333 OFFCURVE",
"284 1157 OFFCURVE",
"284 1041 CURVE SMOOTH",
"284 969 OFFCURVE",
"297.667 888.333 OFFCURVE",
"335 807 CURVE",
"247 763 OFFCURVE",
"168.667 701.833 OFFCURVE",
"114 626.5 CURVE SMOOTH",
"59.333 551.167 OFFCURVE",
"26 462.333 OFFCURVE",
"26 361 CURVE SMOOTH",
"26 246.333 OFFCURVE",
"62.5 152.5 OFFCURVE",
"132.5 86.5 CURVE SMOOTH",
"202.5 20.5 OFFCURVE",
"307.333 -16 OFFCURVE",
"442 -16 CURVE SMOOTH",
"583.333 -16 OFFCURVE",
"716.667 27.333 OFFCURVE",
"834 106 CURVE",
"852 83 LINE SMOOTH",
"900.595 20.906 OFFCURVE",
"939.473 0 OFFCURVE",
"1030 0 CURVE SMOOTH",
"1290 0 LINE",
"1051 315 LINE",
"1152.333 452.333 OFFCURVE",
"1222.667 623 OFFCURVE",
"1248 819 CURVE",
"1036 819 LINE SMOOTH",
"997.333 819 OFFCURVE",
"979.667 794 OFFCURVE",
"973 758 CURVE SMOOTH",
"957 673.333 OFFCURVE",
"930.667 594.333 OFFCURVE",
"894 521 CURVE",
"622 880 LINE",
"578 948 OFFCURVE",
"562 1005.667 OFFCURVE",
"562 1059 CURVE SMOOTH",
"562 1161.352 OFFCURVE",
"612.39 1251 OFFCURVE",
"704 1251 CURVE SMOOTH",
"761.333 1251 OFFCURVE",
"801.333 1215.667 OFFCURVE",
"824 1145 CURVE SMOOTH",
"834.667 1111.667 OFFCURVE",
"850.333 1099 OFFCURVE",
"881 1099 CURVE SMOOTH",
"889 1099 OFFCURVE",
"898.667 1100 OFFCURVE",
"910 1102 CURVE SMOOTH",
"1090 1137 LINE",
"1090 1226.333 OFFCURVE",
"1059.833 1310.833 OFFCURVE",
"1000.5 1371.5 CURVE SMOOTH",
"941.167 1432.167 OFFCURVE",
"852 1471 OFFCURVE",
"732 1471 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"334 488.333 OFFCURVE",
"360.333 570.333 OFFCURVE",
"443 641 CURVE",
"704 284 LINE",
"642.667 238.667 OFFCURVE",
"575.333 214 OFFCURVE",
"506 214 CURVE SMOOTH",
"383.654 214 OFFCURVE",
"334 285.405 OFFCURVE",
"334 399 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 66 64 43 41 34 32 28 26 14 12 9 7 0 59 1 59 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
5 1 1 2 69 68 52 31 22 5 6 3 39 1 4 6 3 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 5 1 4 4 12 31 0 6 6 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
5 1 1 2 69 68 52 31 22 5 6 3 39 1 4 6 3 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 0 4 4 12 31 0 6 6 5 1 0 36 0 5 5 18 5 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
5 1 1 2 69 68 52 31 22 5 6 3 39 1 4 6 3 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 6 4 5 6 1 0 35 0 3 0 4 5 3 4 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1334;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"604 1457 LINE SMOOTH",
"449.333 1457 OFFCURVE",
"319.833 1402 OFFCURVE",
"228.5 1314 CURVE SMOOTH",
"137.167 1226 OFFCURVE",
"84 1107 OFFCURVE",
"84 979 CURVE SMOOTH",
"84 872.333 OFFCURVE",
"124 779.667 OFFCURVE",
"196 713 CURVE SMOOTH",
"268 646.333 OFFCURVE",
"372.333 606 OFFCURVE",
"499 606 CURVE",
"398 -216 LINE",
"668 -216 LINE",
"843 1206 LINE",
"1039 1206 LINE",
"864 -216 LINE",
"1134 -216 LINE",
"1309 1206 LINE",
"1518 1206 LINE",
"1550 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 19 0 18 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 2 1 0 0 5 1 0 36 6 1 5 5 11 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 6 1 5 0 0 5 1 0 35 6 1 5 5 0 0 0 36 2 1 0 5 0 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 2 5 0 0 2 42 0 4 0 3 0 4 3 50 0 3 1 0 3 1 48 0 1 1 51 6 1 5 2 0 5 1 2 35 6 1 5 5 0 0 0 36 0 0 5 0 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1458;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"940 1337 LINE",
"873.973 1417.381 OFFCURVE",
"756.356 1469 OFFCURVE",
"624 1469 CURVE SMOOTH",
"484 1469 OFFCURVE",
"378 1426.833 OFFCURVE",
"306 1359.5 CURVE SMOOTH",
"234 1292.167 OFFCURVE",
"198 1201.333 OFFCURVE",
"198 1104 CURVE SMOOTH",
"198 1021.333 OFFCURVE",
"225.667 963.667 OFFCURVE",
"267 917 CURVE",
"145.667 861 OFFCURVE",
"86 762.333 OFFCURVE",
"86 641 CURVE SMOOTH",
"86 589 OFFCURVE",
"96.833 546 OFFCURVE",
"118.5 512 CURVE SMOOTH",
"161.833 444 OFFCURVE",
"230 399.833 OFFCURVE",
"306 368.5 CURVE SMOOTH",
"344 352.833 OFFCURVE",
"379.333 337.333 OFFCURVE",
"412 322 CURVE SMOOTH",
"477.333 291.333 OFFCURVE",
"526 255.667 OFFCURVE",
"526 197 CURVE SMOOTH",
"526 125 OFFCURVE",
"476.667 84 OFFCURVE",
"394 84 CURVE SMOOTH",
"295.037 84 OFFCURVE",
"235.905 160 OFFCURVE",
"176 160 CURVE SMOOTH",
"137.333 160 OFFCURVE",
"114.667 146.667 OFFCURVE",
"96 120 CURVE",
"12 9 LINE",
"78.713 -66.052 OFFCURVE",
"220.024 -117 OFFCURVE",
"342 -117 CURVE SMOOTH",
"487.333 -117 OFFCURVE",
"599.833 -76.167 OFFCURVE",
"676.5 -7.5 CURVE SMOOTH",
"753.167 61.167 OFFCURVE",
"794 156.667 OFFCURVE",
"794 266 CURVE SMOOTH",
"794 338 OFFCURVE",
"767 392.333 OFFCURVE",
"727 435 CURVE",
"853.667 497.667 OFFCURVE",
"906 601.667 OFFCURVE",
"906 719 CURVE SMOOTH",
"906 766.333 OFFCURVE",
"895.167 806.667 OFFCURVE",
"873.5 840 CURVE SMOOTH",
"830.167 906.667 OFFCURVE",
"762 954 OFFCURVE",
"686 990 CURVE SMOOTH",
"604.29 1028.705 OFFCURVE",
"466 1088.052 OFFCURVE",
"466 1150 CURVE SMOOTH",
"466 1215.644 OFFCURVE",
"516.769 1259 OFFCURVE",
"602 1259 CURVE SMOOTH",
"687.742 1259 OFFCURVE",
"740.166 1197 OFFCURVE",
"798 1197 CURVE SMOOTH",
"824.667 1197 OFFCURVE",
"841.333 1206.667 OFFCURVE",
"860 1232 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"358 756.667 OFFCURVE",
"373 788.333 OFFCURVE",
"413 815 CURVE",
"517.17 762.915 OFFCURVE",
"636 724.488 OFFCURVE",
"636 635 CURVE SMOOTH",
"636 595 OFFCURVE",
"621.667 559.667 OFFCURVE",
"583 533 CURVE",
"478.878 585.061 OFFCURVE",
"358 627.973 OFFCURVE",
"358 714 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
67 65 46 44 41 39 32 30 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
71 1 1 5 85 77 58 23 4 3 0 36 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 4 0 2 4 2 1 0 37 0 1 1 5 1 0 36 0 5 5 17 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
71 1 1 5 85 77 58 23 4 3 0 36 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 934;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"968.684 539.734 OFFCURVE",
"918.738 486 OFFCURVE",
"830 486 CURVE SMOOTH",
"715.829 486 OFFCURVE",
"648 582.703 OFFCURVE",
"648 732 CURVE SMOOTH",
"648 884 OFFCURVE",
"717.333 979 OFFCURVE",
"852 979 CURVE SMOOTH",
"933.766 979 OFFCURVE",
"988.01 921 OFFCURVE",
"1034 921 CURVE SMOOTH",
"1060.667 921 OFFCURVE",
"1076.667 938 OFFCURVE",
"1086 950 CURVE SMOOTH",
"1168 1059 LINE",
"1100 1139 OFFCURVE",
"989.333 1199 OFFCURVE",
"836 1199 CURVE SMOOTH",
"706.667 1199 OFFCURVE",
"591.833 1150.833 OFFCURVE",
"508.5 1067.5 CURVE SMOOTH",
"425.167 984.167 OFFCURVE",
"374 868 OFFCURVE",
"374 732 CURVE SMOOTH",
"374 601.333 OFFCURVE",
"417 485.167 OFFCURVE",
"493 400.5 CURVE SMOOTH",
"569 315.833 OFFCURVE",
"679.333 264 OFFCURVE",
"814 264 CURVE SMOOTH",
"967.333 264 OFFCURVE",
"1086 316 OFFCURVE",
"1158 416 CURVE",
"1056 521 LINE",
"1045.333 533 OFFCURVE",
"1030 542 OFFCURVE",
"1014 542 CURVE"
);
},
{
closed = 1;
nodes = (
"70 660.333 OFFCURVE",
"78.833 594.5 OFFCURVE",
"96.5 531.5 CURVE SMOOTH",
"131.833 405.5 OFFCURVE",
"197.333 294.667 OFFCURVE",
"288 204 CURVE SMOOTH",
"333.333 158.667 OFFCURVE",
"383.667 119.833 OFFCURVE",
"439 87.5 CURVE SMOOTH",
"549.667 22.833 OFFCURVE",
"676.667 -14 OFFCURVE",
"814 -14 CURVE SMOOTH",
"882.667 -14 OFFCURVE",
"948.833 -5.167 OFFCURVE",
"1012.5 12.5 CURVE SMOOTH",
"1139.833 47.833 OFFCURVE",
"1250.167 113.333 OFFCURVE",
"1341.5 204 CURVE SMOOTH",
"1387.167 249.333 OFFCURVE",
"1426.167 299.5 OFFCURVE",
"1458.5 354.5 CURVE SMOOTH",
"1523.167 464.5 OFFCURVE",
"1560 593 OFFCURVE",
"1560 729 CURVE SMOOTH",
"1560 797.667 OFFCURVE",
"1551.167 863.667 OFFCURVE",
"1533.5 927 CURVE SMOOTH",
"1498.167 1053.667 OFFCURVE",
"1432.833 1164.333 OFFCURVE",
"1341.5 1255 CURVE SMOOTH",
"1295.833 1300.333 OFFCURVE",
"1245.5 1339.167 OFFCURVE",
"1190.5 1371.5 CURVE SMOOTH",
"1080.5 1436.167 OFFCURVE",
"951.333 1473 OFFCURVE",
"814 1473 CURVE SMOOTH",
"745.333 1473 OFFCURVE",
"679.5 1464.167 OFFCURVE",
"616.5 1446.5 CURVE SMOOTH",
"490.5 1411.167 OFFCURVE",
"378.667 1345.667 OFFCURVE",
"288 1255 CURVE SMOOTH",
"242.667 1209.667 OFFCURVE",
"203.833 1159.5 OFFCURVE",
"171.5 1104.5 CURVE SMOOTH",
"106.833 994.5 OFFCURVE",
"70 866.333 OFFCURVE",
"70 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"236 898.333 OFFCURVE",
"299 1050.5 OFFCURVE",
"403 1160.5 CURVE SMOOTH",
"507 1270.5 OFFCURVE",
"651.333 1337 OFFCURVE",
"814 1337 CURVE SMOOTH",
"868.667 1337 OFFCURVE",
"921 1329.833 OFFCURVE",
"971 1315.5 CURVE SMOOTH",
"1071 1286.833 OFFCURVE",
"1158.333 1234.5 OFFCURVE",
"1229 1160.5 CURVE SMOOTH",
"1264.333 1123.5 OFFCURVE",
"1294.5 1082.5 OFFCURVE",
"1319.5 1037.5 CURVE SMOOTH",
"1369.5 947.5 OFFCURVE",
"1398 842.333 OFFCURVE",
"1398 729 CURVE SMOOTH",
"1398 559.667 OFFCURVE",
"1334.333 409.167 OFFCURVE",
"1229 300.5 CURVE SMOOTH",
"1123.667 191.833 OFFCURVE",
"978 126 OFFCURVE",
"814 126 CURVE SMOOTH",
"651.333 126 OFFCURVE",
"507 191.833 OFFCURVE",
"403 300.5 CURVE SMOOTH",
"299 409.167 OFFCURVE",
"236 559.667 OFFCURVE",
"236 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 88 86 76 74 64 62 50 48 38 36 30 28 25 23 18 16 8 6 0 41 1 41 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
20 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 18 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
20 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 7 7 8 1 0 35 0 8 8 7 1 0 36 0 7 8 7 1 0 33 9 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1570;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"64 660.333 OFFCURVE",
"72.833 594.5 OFFCURVE",
"90.5 531.5 CURVE SMOOTH",
"125.833 405.5 OFFCURVE",
"191.333 294.667 OFFCURVE",
"282 204 CURVE SMOOTH",
"327.333 158.667 OFFCURVE",
"377.667 119.833 OFFCURVE",
"433 87.5 CURVE SMOOTH",
"543.667 22.833 OFFCURVE",
"670.667 -14 OFFCURVE",
"808 -14 CURVE SMOOTH",
"876.667 -14 OFFCURVE",
"942.833 -5.167 OFFCURVE",
"1006.5 12.5 CURVE SMOOTH",
"1133.833 47.833 OFFCURVE",
"1244.167 113.333 OFFCURVE",
"1335.5 204 CURVE SMOOTH",
"1381.167 249.333 OFFCURVE",
"1420.167 299.5 OFFCURVE",
"1452.5 354.5 CURVE SMOOTH",
"1517.167 464.5 OFFCURVE",
"1554 593 OFFCURVE",
"1554 729 CURVE SMOOTH",
"1554 797.667 OFFCURVE",
"1545.167 863.667 OFFCURVE",
"1527.5 927 CURVE SMOOTH",
"1492.167 1053.667 OFFCURVE",
"1426.833 1164.333 OFFCURVE",
"1335.5 1255 CURVE SMOOTH",
"1289.833 1300.333 OFFCURVE",
"1239.5 1339.167 OFFCURVE",
"1184.5 1371.5 CURVE SMOOTH",
"1074.5 1436.167 OFFCURVE",
"945.333 1473 OFFCURVE",
"808 1473 CURVE SMOOTH",
"739.333 1473 OFFCURVE",
"673.5 1464.167 OFFCURVE",
"610.5 1446.5 CURVE SMOOTH",
"484.5 1411.167 OFFCURVE",
"372.667 1345.667 OFFCURVE",
"282 1255 CURVE SMOOTH",
"236.667 1209.667 OFFCURVE",
"197.833 1159.5 OFFCURVE",
"165.5 1104.5 CURVE SMOOTH",
"100.833 994.5 OFFCURVE",
"64 866.333 OFFCURVE",
"64 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"230 898.333 OFFCURVE",
"293 1050.5 OFFCURVE",
"397 1160.5 CURVE SMOOTH",
"501 1270.5 OFFCURVE",
"645.333 1337 OFFCURVE",
"808 1337 CURVE SMOOTH",
"862.667 1337 OFFCURVE",
"915 1329.833 OFFCURVE",
"965 1315.5 CURVE SMOOTH",
"1065 1286.833 OFFCURVE",
"1152.333 1234.5 OFFCURVE",
"1223 1160.5 CURVE SMOOTH",
"1258.333 1123.5 OFFCURVE",
"1288.5 1082.5 OFFCURVE",
"1313.5 1037.5 CURVE SMOOTH",
"1363.5 947.5 OFFCURVE",
"1392 842.333 OFFCURVE",
"1392 729 CURVE SMOOTH",
"1392 562.333 OFFCURVE",
"1331.333 417 OFFCURVE",
"1230 309 CURVE",
"1106 566 LINE SMOOTH",
"1084.667 610 OFFCURVE",
"1059.667 641 OFFCURVE",
"1021 661 CURVE",
"1137.204 704.899 OFFCURVE",
"1192 798.927 OFFCURVE",
"1192 914 CURVE SMOOTH",
"1192 999.333 OFFCURVE",
"1163.5 1066.667 OFFCURVE",
"1101.5 1112 CURVE SMOOTH",
"1039.5 1157.333 OFFCURVE",
"943.333 1182 OFFCURVE",
"810 1182 CURVE SMOOTH",
"458 1182 LINE",
"458 281 LINE",
"726 281 LINE",
"726 583 LINE",
"758 583 LINE SMOOTH",
"790 583 OFFCURVE",
"807.333 575 OFFCURVE",
"818 551 CURVE",
"910 320 LINE",
"924 294 OFFCURVE",
"949.333 281 OFFCURVE",
"986 281 CURVE SMOOTH",
"1202 281 LINE",
"1098 183.667 OFFCURVE",
"961.333 126 OFFCURVE",
"808 126 CURVE SMOOTH",
"645.333 126 OFFCURVE",
"501 191.833 OFFCURVE",
"397 300.5 CURVE SMOOTH",
"293 409.167 OFFCURVE",
"230 559.667 OFFCURVE",
"230 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"726 986 LINE",
"810 986 LINE SMOOTH",
"908.428 986 OFFCURVE",
"928 956.738 OFFCURVE",
"928 880 CURVE SMOOTH",
"928 797.139 OFFCURVE",
"907.873 767 OFFCURVE",
"790 767 CURVE SMOOTH",
"726 767 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
89 87 79 77 73 71 49 47 46 45 44 42 38 36 34 32 22 20 8 6 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
58 1 4 8 62 1 3 4 2 30 5 1 3 4 2 4 3 2 50 0 6 0 9 8 6 9 1 0 38 0 8 0 4 3 8 4 1 0 38 0 7 7 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
58 1 4 8 62 1 3 4 2 30 5 1 3 4 2 4 3 2 50 0 0 0 7 6 0 7 1 0 38 0 6 0 9 8 6 9 1 0 38 0 8 0 4 3 8 4 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
58 1 4 8 62 1 5 4 2 30 0 5 4 3 4 5 3 50 0 3 2 4 3 2 48 0 0 0 7 6 0 7 1 0 38 0 6 0 9 8 6 9 1 0 38 0 8 0 4 5 8 4 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1570;
}
);
note = registered;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"916 1425 LINE SMOOTH",
"909.333 1454.333 OFFCURVE",
"882.333 1455 OFFCURVE",
"849 1455 CURVE SMOOTH",
"676 1455 LINE",
"602 844 LINE",
"780 844 LINE",
"810 1106 LINE SMOOTH",
"812.667 1127.333 OFFCURVE",
"813 1166.667 OFFCURVE",
"813 1204 CURVE",
"884 940 LINE SMOOTH",
"890.667 913.333 OFFCURVE",
"917.333 898 OFFCURVE",
"948 898 CURVE SMOOTH",
"976 898 LINE SMOOTH",
"1008 898 OFFCURVE",
"1037.333 912 OFFCURVE",
"1052 940 CURVE SMOOTH",
"1193 1211 LINE",
"1168 1106 LINE",
"1136 844 LINE",
"1316 844 LINE",
"1390 1455 LINE",
"1208 1455 LINE SMOOTH",
"1177.333 1455 OFFCURVE",
"1158.667 1455.667 OFFCURVE",
"1144 1425 CURVE SMOOTH",
"1032 1199 LINE",
"1014.667 1168.333 OFFCURVE",
"1001 1137.667 OFFCURVE",
"989 1111 CURVE",
"985.667 1124.333 OFFCURVE",
"982.333 1139 OFFCURVE",
"979 1155 CURVE SMOOTH",
"975.667 1171 OFFCURVE",
"972 1185.667 OFFCURVE",
"968 1199 CURVE"
);
},
{
closed = 1;
nodes = (
"164 1455 LINE",
"142 1292 LINE",
"275 1292 LINE",
"222 844 LINE",
"424 844 LINE",
"479 1292 LINE",
"614 1292 LINE",
"636 1455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
35 35 35 42 35 42 41 40 39 38 37 36 32 30 29 28 21 18 13 12 11 9 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
24 15 3 3 2 5 1 30 0 2 5 1 5 2 1 50 7 1 5 5 0 1 0 36 9 8 4 3 0 0 11 31 6 3 2 1 1 0 1 0 36 9 8 4 3 0 0 11 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
24 15 3 3 2 5 1 30 0 2 5 1 5 2 1 50 9 8 4 3 0 7 1 5 2 0 5 0 0 38 9 8 4 3 0 0 1 0 0 36 6 3 2 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
24 15 3 3 2 5 1 30 0 7 8 5 5 7 42 0 2 5 6 5 2 6 50 0 6 3 5 6 3 48 0 0 4 1 0 1 0 35 9 1 8 0 5 2 8 5 0 0 38 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1348;
}
);
note = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"112 1023 OFFCURVE",
"151.667 934 OFFCURVE",
"217 870 CURVE SMOOTH",
"282.333 806 OFFCURVE",
"373.333 765 OFFCURVE",
"476 765 CURVE SMOOTH",
"578.667 765 OFFCURVE",
"670.5 806 OFFCURVE",
"736.5 870 CURVE SMOOTH",
"802.5 934 OFFCURVE",
"842 1023 OFFCURVE",
"842 1119 CURVE SMOOTH",
"842 1217.667 OFFCURVE",
"802.5 1307 OFFCURVE",
"736.5 1371 CURVE SMOOTH",
"670.5 1435 OFFCURVE",
"578.667 1475 OFFCURVE",
"476 1475 CURVE SMOOTH",
"373.333 1475 OFFCURVE",
"282.333 1435 OFFCURVE",
"217 1371 CURVE SMOOTH",
"151.667 1307 OFFCURVE",
"112 1217.667 OFFCURVE",
"112 1119 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"326 1207.088 OFFCURVE",
"387.422 1278 OFFCURVE",
"476 1278 CURVE SMOOTH",
"564.578 1278 OFFCURVE",
"626 1207.088 OFFCURVE",
"626 1117 CURVE SMOOTH",
"626 1028.703 OFFCURVE",
"563.428 960 OFFCURVE",
"476 960 CURVE SMOOTH",
"388.572 960 OFFCURVE",
"326 1028.703 OFFCURVE",
"326 1117 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 794;
}
);
note = degree;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"120 -329 LINE",
"360 -329 LINE",
"360 1557 LINE",
"120 1557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 0 0 36 0 1 1 16 1 32 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"120 738 LINE",
"360 738 LINE",
"360 1557 LINE",
"120 1557 LINE"
);
},
{
closed = 1;
nodes = (
"120 -329 LINE",
"360 -329 LINE",
"360 490 LINE",
"120 490 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 2 3 0 0 36 0 3 3 16 3 32 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"86 851 LINE",
"466 851 LINE",
"424 499 LINE",
"286 -316 LINE",
"324.667 -341.333 OFFCURVE",
"375.333 -353 OFFCURVE",
"434 -353 CURVE SMOOTH",
"492.667 -353 OFFCURVE",
"547.333 -341.333 OFFCURVE",
"594 -316 CURVE",
"656 499 LINE",
"698 851 LINE",
"1078 851 LINE",
"1090 947 LINE",
"1090.667 950.333 OFFCURVE",
"1091 953.167 OFFCURVE",
"1091 955.5 CURVE SMOOTH",
"1091 957.833 OFFCURVE",
"1091 960.667 OFFCURVE",
"1091 964 CURVE SMOOTH",
"1091 1025.956 OFFCURVE",
"1048.548 1070 OFFCURVE",
"968 1070 CURVE SMOOTH",
"904.593 1070 OFFCURVE",
"804.221 1039.313 OFFCURVE",
"720 1024 CURVE",
"812 1475 LINE",
"773.333 1497.667 OFFCURVE",
"722.667 1512 OFFCURVE",
"664 1512 CURVE SMOOTH",
"605.333 1512 OFFCURVE",
"550 1497.667 OFFCURVE",
"506 1475 CURVE",
"488 1024 LINE",
"409.272 1039.238 OFFCURVE",
"313.137 1070 OFFCURVE",
"252 1070 CURVE SMOOTH",
"162.748 1070 OFFCURVE",
"106.587 1015.696 OFFCURVE",
"98 947 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
44 43 39 37 33 32 24 22 15 13 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
41 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
17 11 2 0 1 18 10 2 3 0 41 1 4 3 3 30 0 1 1 19 31 5 1 3 3 0 1 0 36 2 1 0 0 20 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
17 11 2 0 1 18 10 2 3 0 41 1 4 3 3 30 0 4 3 4 53 0 1 1 19 31 5 1 3 3 0 1 0 36 2 1 0 0 20 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
17 11 2 0 1 18 10 2 3 0 41 1 4 3 3 30 0 4 3 4 53 2 1 0 5 1 3 4 0 3 0 2 38 0 1 1 19 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
17 11 2 0 1 18 10 2 3 0 41 1 4 3 3 30 0 1 0 1 52 0 4 3 4 53 2 1 0 3 3 0 1 0 35 2 1 0 0 3 0 2 36 5 1 3 0 3 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
17 11 2 0 1 18 10 2 5 2 41 1 4 3 3 30 0 1 0 1 52 0 4 3 4 53 0 2 5 3 2 1 0 35 0 0 0 5 3 0 5 0 0 38 0 2 2 3 0 2 36 0 3 2 3 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1068;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"8 212 LINE",
"7.333 208.667 OFFCURVE",
"7 205.667 OFFCURVE",
"7 203 CURVE SMOOTH",
"7 200.333 OFFCURVE",
"7 197.333 OFFCURVE",
"7 194 CURVE SMOOTH",
"7 135.333 OFFCURVE",
"43.333 87 OFFCURVE",
"130 87 CURVE SMOOTH",
"193.294 87 OFFCURVE",
"293.895 117.89 OFFCURVE",
"377 133 CURVE",
"286 -316 LINE",
"324.667 -341.333 OFFCURVE",
"375.333 -353 OFFCURVE",
"434 -353 CURVE SMOOTH",
"492.667 -353 OFFCURVE",
"547.333 -341.333 OFFCURVE",
"594 -316 CURVE",
"609 133 LINE",
"690.116 117.3 OFFCURVE",
"784.368 87 OFFCURVE",
"846 87 CURVE SMOOTH",
"936.346 87 OFFCURVE",
"991.187 141.498 OFFCURVE",
"1000 212 CURVE SMOOTH",
"1012 308 LINE",
"630 308 LINE",
"697 851 LINE",
"1078 851 LINE",
"1090 947 LINE",
"1090.667 950.333 OFFCURVE",
"1091 953.167 OFFCURVE",
"1091 955.5 CURVE SMOOTH",
"1091 957.833 OFFCURVE",
"1091 960.667 OFFCURVE",
"1091 964 CURVE SMOOTH",
"1091 1025.956 OFFCURVE",
"1048.548 1070 OFFCURVE",
"968 1070 CURVE SMOOTH",
"904.593 1070 OFFCURVE",
"804.221 1039.313 OFFCURVE",
"720 1024 CURVE",
"812 1475 LINE",
"773.333 1497.667 OFFCURVE",
"722.667 1512 OFFCURVE",
"664 1512 CURVE SMOOTH",
"605.333 1512 OFFCURVE",
"550 1497.667 OFFCURVE",
"506 1475 CURVE",
"488 1024 LINE",
"409.272 1039.238 OFFCURVE",
"313.137 1070 OFFCURVE",
"252 1070 CURVE SMOOTH",
"162.748 1070 OFFCURVE",
"106.587 1015.696 OFFCURVE",
"98 947 CURVE SMOOTH",
"86 851 LINE",
"467 851 LINE",
"400 308 LINE",
"20 308 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
64 62 55 53 46 44 39 38 37 36 28 26 19 17 10 8 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
41 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 15 2 2 3 22 14 2 1 2 58 50 2 7 0 57 51 2 8 7 4 30 6 1 0 9 1 7 8 0 7 1 0 38 0 3 3 19 31 5 1 1 1 2 1 0 36 4 1 2 2 20 31 0 8 8 16 8 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 15 2 2 3 22 14 2 1 2 58 50 2 7 0 57 51 2 8 7 4 30 0 8 7 8 53 6 1 0 9 1 7 8 0 7 1 0 38 0 3 3 19 31 5 1 1 1 2 1 0 36 4 1 2 2 20 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
110 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
21 15 2 2 3 22 14 2 1 2 58 50 2 7 0 57 51 2 8 7 4 30 0 8 7 8 53 4 1 2 5 1 1 0 2 1 0 2 38 6 1 0 9 1 7 8 0 7 1 0 38 0 3 3 19 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
21 15 2 2 3 22 14 2 1 2 58 50 2 7 0 57 51 2 8 7 4 30 0 3 2 3 52 0 8 7 8 53 4 1 2 5 1 1 0 2 1 0 2 38 6 1 0 7 7 0 0 0 35 6 1 0 0 7 1 0 36 9 1 7 0 7 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
21 15 2 2 3 22 14 2 5 4 58 50 2 9 6 57 51 2 8 7 4 30 0 3 2 3 52 0 8 7 8 53 0 4 0 5 1 4 5 0 2 38 0 2 0 1 0 2 1 0 0 38 0 6 9 7 6 0 0 35 0 0 0 9 7 0 9 1 0 38 0 6 6 7 1 0 36 0 7 6 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1068;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = cent;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"416 -213 LINE",
"526 -213 LINE SMOOTH",
"570 -213 OFFCURVE",
"606 -178.333 OFFCURVE",
"614 -141 CURVE SMOOTH",
"642 -12 LINE",
"780.58 -0.914 OFFCURVE",
"921.101 47.666 OFFCURVE",
"1034 158 CURVE",
"964 261 LINE",
"954.667 276.333 OFFCURVE",
"937.333 284 OFFCURVE",
"912 284 CURVE SMOOTH",
"862.185 284 OFFCURVE",
"783.165 216.152 OFFCURVE",
"690 204 CURVE",
"825 817 LINE",
"877.426 799.525 OFFCURVE",
"925.728 766 OFFCURVE",
"960 766 CURVE SMOOTH",
"990.667 766 OFFCURVE",
"1005.333 775.333 OFFCURVE",
"1024 798 CURVE SMOOTH",
"1114 900 LINE",
"1050 968 OFFCURVE",
"973 1012.667 OFFCURVE",
"873 1034 CURVE",
"924 1263 LINE",
"814 1263 LINE SMOOTH",
"772.327 1263 OFFCURVE",
"734.049 1226.877 OFFCURVE",
"726 1192 CURVE SMOOTH",
"694 1048 LINE",
"510 1040 OFFCURVE",
"364 970.833 OFFCURVE",
"264 863.5 CURVE SMOOTH",
"164 756.167 OFFCURVE",
"110 610 OFFCURVE",
"110 446 CURVE SMOOTH",
"110 320.667 OFFCURVE",
"146.333 217.167 OFFCURVE",
"209 140.5 CURVE SMOOTH",
"271.667 63.833 OFFCURVE",
"358.333 13 OFFCURVE",
"461 -7 CURVE"
);
},
{
closed = 1;
nodes = (
"404 560 OFFCURVE",
"422.333 645.167 OFFCURVE",
"461 708.5 CURVE SMOOTH",
"499.667 771.833 OFFCURVE",
"561 812.333 OFFCURVE",
"645 827 CURVE",
"513 228 LINE",
"441 266.667 OFFCURVE",
"404 346.667 OFFCURVE",
"404 460 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
49 47 37 35 26 24 17 15 10 9 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 51 0 0 0 20 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 51 0 0 0 14 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 51 0 0 0 20 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
15 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 51 0 0 0 14 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 51 0 0 0 20 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
54 21 18 3 2 0 53 39 31 0 4 4 3 2 30 0 1 0 1 52 0 0 2 0 52 0 2 3 2 52 0 3 4 3 52 0 4 4 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"238 606 OFFCURVE",
"255.333 542.667 OFFCURVE",
"286 488 CURVE",
"134 338 LINE",
"288 188 LINE",
"441 338 LINE",
"494.333 311.333 OFFCURVE",
"554 296 OFFCURVE",
"618 296 CURVE SMOOTH",
"684.667 296 OFFCURVE",
"746.333 312.667 OFFCURVE",
"801 342 CURVE",
"952 194 LINE",
"1108 343 LINE",
"953 495 LINE",
"982.333 548.333 OFFCURVE",
"998 608.667 OFFCURVE",
"998 674 CURVE SMOOTH",
"998 742 OFFCURVE",
"979.667 804.333 OFFCURVE",
"949 859 CURVE",
"1102 1010 LINE",
"948 1160 LINE",
"795 1008 LINE",
"741.667 1036 OFFCURVE",
"682 1052 OFFCURVE",
"618 1052 CURVE SMOOTH",
"550 1052 OFFCURVE",
"488.667 1035.333 OFFCURVE",
"434 1006 CURVE",
"284 1154 LINE",
"128 1006 LINE",
"282 853 LINE",
"254 799.667 OFFCURVE",
"238 739.333 OFFCURVE",
"238 674 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"466 762.943 OFFCURVE",
"533.41 835 OFFCURVE",
"618 835 CURVE SMOOTH",
"703.751 835 OFFCURVE",
"772 762.963 OFFCURVE",
"772 674 CURVE SMOOTH",
"772 587.527 OFFCURVE",
"703.259 515 OFFCURVE",
"618 515 CURVE SMOOTH",
"533.925 515 OFFCURVE",
"466 587.548 OFFCURVE",
"466 674 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
52 50 42 40 28 26 10 8 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
15 14 12 6 4 3 6 3 0 33 32 30 24 22 21 6 1 2 2 30 13 5 2 0 28 31 23 2 1 27 0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 20 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
15 14 12 6 4 3 6 3 0 33 32 30 24 22 21 6 1 2 2 30 13 5 2 0 28 31 23 2 1 27 0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"330 -213 LINE",
"440 -213 LINE SMOOTH",
"484 -213 OFFCURVE",
"521.333 -178.667 OFFCURVE",
"528 -144 CURVE SMOOTH",
"556 -13 LINE",
"725.333 -1 OFFCURVE",
"860.5 61.667 OFFCURVE",
"954.5 155 CURVE SMOOTH",
"1048.5 248.333 OFFCURVE",
"1100 372.667 OFFCURVE",
"1100 506 CURVE SMOOTH",
"1100 615.333 OFFCURVE",
"1053.833 687.167 OFFCURVE",
"986.5 738.5 CURVE SMOOTH",
"919.167 789.833 OFFCURVE",
"829.333 820.333 OFFCURVE",
"744 847 CURVE",
"824 1215 LINE",
"890.232 1195.771 OFFCURVE",
"971.839 1144 OFFCURVE",
"1008 1144 CURVE SMOOTH",
"1040 1144 OFFCURVE",
"1061.333 1156.667 OFFCURVE",
"1088 1190 CURVE SMOOTH",
"1174 1297 LINE",
"1110 1366.333 OFFCURVE",
"1018.333 1429.333 OFFCURVE",
"877 1456 CURVE",
"920 1652 LINE",
"810 1652 LINE SMOOTH",
"766 1652 OFFCURVE",
"730 1618.333 OFFCURVE",
"722 1581 CURVE SMOOTH",
"697 1468 LINE",
"531.667 1460 OFFCURVE",
"398.167 1400.167 OFFCURVE",
"305.5 1311.5 CURVE SMOOTH",
"212.833 1222.833 OFFCURVE",
"162 1106 OFFCURVE",
"162 986 CURVE SMOOTH",
"162 866 OFFCURVE",
"207.333 788.333 OFFCURVE",
"274 735 CURVE SMOOTH",
"340.667 681.667 OFFCURVE",
"427.667 651 OFFCURVE",
"513 627 CURVE",
"428 235 LINE",
"332.22 260.541 OFFCURVE",
"245.485 348 OFFCURVE",
"190 348 CURVE SMOOTH",
"159.333 348 OFFCURVE",
"130.667 331.667 OFFCURVE",
"112 309 CURVE SMOOTH",
"2 176 LINE",
"84.978 84.992 OFFCURVE",
"235.281 16.455 OFFCURVE",
"375 -6 CURVE"
);
},
{
closed = 1;
nodes = (
"808 318.667 OFFCURVE",
"742.333 248 OFFCURVE",
"609 228 CURVE",
"685 574 LINE",
"757 544.667 OFFCURVE",
"808 506.667 OFFCURVE",
"808 436 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"450 1143.39 OFFCURVE",
"512.786 1204.802 OFFCURVE",
"643 1222 CURVE",
"574 906 LINE",
"500.667 938 OFFCURVE",
"450 979 OFFCURVE",
"450 1051 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
59 57 54 53 39 37 30 28 25 24 10 8 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
71 34 31 3 3 1 70 63 44 15 4 0 3 64 5 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 11 31 0 4 4 12 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
71 34 31 3 3 1 70 63 44 15 4 0 3 64 5 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 11 31 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
71 34 31 3 3 1 70 63 44 15 4 0 3 64 5 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 11 31 0 4 4 12 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
71 34 31 3 3 1 70 63 44 15 4 0 3 64 5 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 11 31 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 69 values pushed */
71 34 31 3 3 1 70 63 44 15 4 0 3 64 5 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 3 4 1 1 0 35 0 1 1 4 1 0 36 0 4 1 4 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"76 787 LINE",
"175 787 LINE",
"169.667 755 OFFCURVE",
"166.667 723.333 OFFCURVE",
"164 690 CURVE",
"64 690 LINE",
"44 531 LINE",
"161 531 LINE",
"170.333 372.333 OFFCURVE",
"213.833 236.167 OFFCURVE",
"294.5 139.5 CURVE SMOOTH",
"375.167 42.833 OFFCURVE",
"492 -14 OFFCURVE",
"648 -14 CURVE SMOOTH",
"837.333 -14 OFFCURVE",
"999.333 64.667 OFFCURVE",
"1110 214 CURVE",
"994 331 LINE",
"982 345.667 OFFCURVE",
"972.667 348 OFFCURVE",
"954 348 CURVE SMOOTH",
"922.505 348 OFFCURVE",
"897.007 317.874 OFFCURVE",
"864.5 291.5 CURVE SMOOTH",
"829.167 262.833 OFFCURVE",
"780.667 235 OFFCURVE",
"694 235 CURVE SMOOTH",
"568.667 235 OFFCURVE",
"487 335 OFFCURVE",
"471 531 CURVE",
"766 531 LINE SMOOTH",
"811.872 531 OFFCURVE",
"850.219 564.423 OFFCURVE",
"856 602 CURVE SMOOTH",
"868 690 LINE",
"470 690 LINE",
"472.667 723.333 OFFCURVE",
"476 756.333 OFFCURVE",
"480 787 CURVE",
"892 787 LINE SMOOTH",
"939.372 787 OFFCURVE",
"978.266 821.595 OFFCURVE",
"984 856 CURVE",
"994 946 LINE",
"517 946 LINE",
"577 1124.667 OFFCURVE",
"688.667 1220 OFFCURVE",
"826 1220 CURVE SMOOTH",
"891.827 1220 OFFCURVE",
"942.321 1198.679 OFFCURVE",
"970 1171 CURVE SMOOTH",
"992.313 1148.687 OFFCURVE",
"1017.586 1122 OFFCURVE",
"1044 1122 CURVE SMOOTH",
"1076 1122 OFFCURVE",
"1091.333 1136.667 OFFCURVE",
"1110 1154 CURVE SMOOTH",
"1230 1265 LINE",
"1195.333 1326.333 OFFCURVE",
"1146 1377 OFFCURVE",
"1082 1413 CURVE SMOOTH",
"1018 1449 OFFCURVE",
"939.333 1469 OFFCURVE",
"846 1469 CURVE SMOOTH",
"702 1469 OFFCURVE",
"569.5 1418.667 OFFCURVE",
"459.5 1328 CURVE SMOOTH",
"349.5 1237.333 OFFCURVE",
"264 1107.333 OFFCURVE",
"212 946 CURVE",
"96 946 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
71 70 67 66 65 64 60 58 53 51 48 46 44 42 37 36 33 31 26 25 23 21 16 14 7 5 1 0 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
11 1 3 1 56 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 8 8 10 1 0 36 0 10 10 18 10 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
11 1 3 1 56 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 99 values pushed */
11 1 3 1 56 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 0 0 0 13 5 0 13 0 0 38 0 4 0 5 6 4 5 1 0 38 0 12 0 11 7 12 11 0 0 38 0 6 0 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1052 730 LINE",
"1078 935 LINE",
"802 935 LINE",
"836 1064 LINE SMOOTH",
"870.667 1193.333 OFFCURVE",
"937.333 1241 OFFCURVE",
"1036 1241 CURVE SMOOTH",
"1100 1241 OFFCURVE",
"1132 1262.667 OFFCURVE",
"1140 1324 CURVE SMOOTH",
"1160 1483 LINE",
"981.333 1483 OFFCURVE",
"844.833 1448.333 OFFCURVE",
"745.5 1379 CURVE SMOOTH",
"646.167 1309.667 OFFCURVE",
"583.333 1207.667 OFFCURVE",
"550 1073 CURVE SMOOTH",
"516 935 LINE",
"324 935 LINE",
"310 817 LINE",
"309.333 814.333 OFFCURVE",
"309 810.333 OFFCURVE",
"309 805 CURVE SMOOTH",
"309 773.667 OFFCURVE",
"328 754 OFFCURVE",
"366 746 CURVE SMOOTH",
"464 726 LINE",
"306 78 LINE SMOOTH",
"274 -54 OFFCURVE",
"211.333 -100 OFFCURVE",
"114 -100 CURVE SMOOTH",
"50 -100 OFFCURVE",
"18 -128.667 OFFCURVE",
"10 -190 CURVE SMOOTH",
"-10 -341 LINE",
"167.333 -341 OFFCURVE",
"303.167 -310.5 OFFCURVE",
"402.5 -244.5 CURVE SMOOTH",
"501.833 -178.5 OFFCURVE",
"565.333 -76 OFFCURVE",
"600 68 CURVE SMOOTH",
"760 730 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 37 0 37 36 35 32 30 27 26 21 20 11 9 6 5 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
14 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 4 4 3 1 0 36 0 3 3 17 31 0 1 1 0 1 0 36 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
14 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 0 1 0 37 0 4 4 3 1 0 36 0 3 3 17 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
14 1 1 6 1 30 0 3 0 4 2 3 4 1 0 38 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
14 1 1 6 1 30 0 2 4 5 4 2 5 50 0 3 0 4 2 3 4 1 0 38 0 5 7 1 6 1 5 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"929 662 LINE",
"943 779 LINE",
"519 779 LINE",
"546 1002 LINE SMOOTH",
"563.333 1147.333 OFFCURVE",
"647.333 1228 OFFCURVE",
"762 1228 CURVE SMOOTH",
"844.512 1228 OFFCURVE",
"872.314 1205.727 OFFCURVE",
"922 1145 CURVE SMOOTH",
"942 1121 OFFCURVE",
"967.333 1109 OFFCURVE",
"998 1109 CURVE SMOOTH",
"1020.667 1109 OFFCURVE",
"1045.333 1112.333 OFFCURVE",
"1068 1127 CURVE",
"1198 1204 LINE",
"1168.667 1281.333 OFFCURVE",
"1126.333 1349.333 OFFCURVE",
"1061 1396 CURVE SMOOTH",
"995.667 1442.667 OFFCURVE",
"909.333 1471 OFFCURVE",
"792 1471 CURVE SMOOTH",
"632 1471 OFFCURVE",
"501.5 1416.5 OFFCURVE",
"407.5 1330.5 CURVE SMOOTH",
"313.5 1244.5 OFFCURVE",
"256 1126.667 OFFCURVE",
"240 1000 CURVE SMOOTH",
"213 779 LINE",
"149 779 LINE SMOOTH",
"103.987 779 OFFCURVE",
"64.434 743.319 OFFCURVE",
"59 708 CURVE SMOOTH",
"44 591 LINE",
"190 591 LINE",
"160 346 LINE SMOOTH",
"148 246 OFFCURVE",
"102.667 198.667 OFFCURVE",
"12 180 CURVE",
"-12 0 LINE",
"944 0 LINE SMOOTH",
"1015.672 0 OFFCURVE",
"1077.647 63.746 OFFCURVE",
"1086 125 CURVE SMOOTH",
"1102 245 LINE",
"584 245 LINE SMOOTH",
"520 245 OFFCURVE",
"455.333 235.667 OFFCURVE",
"390 221 CURVE",
"440.667 278.333 OFFCURVE",
"467.333 342 OFFCURVE",
"478 426 CURVE SMOOTH",
"497 591 LINE",
"839 591 LINE SMOOTH",
"884.872 591 OFFCURVE",
"923.219 624.423 OFFCURVE",
"929 662 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
61 60 57 55 50 48 41 39 34 32 27 26 21 19 14 12 6 4 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
45 1 6 7 0 1 0 4 10 1 2 1 3 30 0 6 7 4 7 6 4 50 8 1 4 3 1 0 1 4 0 1 0 38 0 7 7 5 1 0 36 0 5 5 17 31 0 1 1 2 1 0 36 0 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
45 1 6 7 0 1 0 4 10 1 2 1 3 30 0 6 7 4 7 6 4 50 0 5 0 7 6 5 7 1 0 38 8 1 4 3 1 0 1 4 0 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
45 1 6 7 0 1 3 8 10 1 2 1 3 30 0 6 7 4 7 6 4 50 0 5 0 7 6 5 7 1 0 38 0 4 0 3 0 4 3 0 0 38 0 8 0 0 1 8 0 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"122 477 LINE",
"426 477 LINE",
"415 389 LINE",
"112 389 LINE",
"90 230 LINE",
"396 230 LINE",
"368 0 LINE",
"666 0 LINE",
"694 230 LINE",
"996 230 LINE",
"1016 389 LINE",
"714 389 LINE",
"725 477 LINE",
"1028 477 LINE",
"1048 637 LINE",
"793 637 LINE",
"1288 1455 LINE",
"1036 1455 LINE SMOOTH",
"981.333 1455 OFFCURVE",
"940.667 1421.333 OFFCURVE",
"922 1384 CURVE SMOOTH",
"696 945 LINE SMOOTH",
"661.333 877 OFFCURVE",
"633.667 822 OFFCURVE",
"615 766 CURVE",
"608.333 822 OFFCURVE",
"594.667 877 OFFCURVE",
"576 945 CURVE SMOOTH",
"452 1384 LINE SMOOTH",
"440 1426.667 OFFCURVE",
"408.667 1455 OFFCURVE",
"354 1455 CURVE SMOOTH",
"104 1455 LINE",
"395 637 LINE",
"142 637 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 4 2 1 0 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 2 1 1 1 11 31 0 7 7 12 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 7 6 7 53 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 6 6 5 0 0 35 9 1 5 5 6 0 0 36 8 1 6 5 6 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 7 6 7 53 0 0 0 10 4 0 10 0 2 38 0 3 0 4 5 3 4 0 2 38 0 5 9 6 5 0 0 35 0 9 0 8 6 9 8 0 0 38 0 5 5 6 0 0 36 0 6 5 6 0 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"542 1177 LINE",
"492 779 LINE",
"122 779 LINE",
"94 565 LINE",
"466 565 LINE",
"416 165 LINE",
"660 165 LINE",
"709 565 LINE",
"1082 565 LINE",
"1110 779 LINE",
"735 779 LINE",
"784 1177 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 5 0 5 52 0 2 1 2 53 4 1 0 1 1 0 0 0 35 4 1 0 0 1 0 2 36 3 1 1 0 1 0 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
6 1 5 0 5 52 0 2 1 2 53 0 0 4 1 0 0 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 2 36 0 1 0 1 0 2 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"136 565 LINE",
"1040 565 LINE",
"1068 779 LINE",
"162 779 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = minus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"968 1137 LINE",
"620 827 LINE",
"346 1139 LINE",
"170 987 LINE",
"446 672 LINE",
"72 339 LINE",
"210 188 LINE",
"581 518 LINE",
"870 190 LINE",
"1046 341 LINE",
"755 673 LINE",
"1106 985 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
9 5 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"94 565 LINE",
"1082 565 LINE",
"1110 779 LINE",
"122 779 LINE"
);
},
{
closed = 1;
nodes = (
"472 924.246 OFFCURVE",
"534.503 861 OFFCURVE",
"624 861 CURVE SMOOTH",
"726.839 861 OFFCURVE",
"818 941.39 OFFCURVE",
"818 1045 CURVE SMOOTH",
"818 1130.074 OFFCURVE",
"752.646 1195 OFFCURVE",
"666 1195 CURVE SMOOTH",
"560.856 1195 OFFCURVE",
"472 1112.055 OFFCURVE",
"472 1008 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"384 212.246 OFFCURVE",
"446.503 149 OFFCURVE",
"536 149 CURVE SMOOTH",
"638.839 149 OFFCURVE",
"730 229.39 OFFCURVE",
"730 333 CURVE SMOOTH",
"730 418.074 OFFCURVE",
"664.646 483 OFFCURVE",
"578 483 CURVE SMOOTH",
"472.856 483 OFFCURVE",
"384 400.055 OFFCURVE",
"384 296 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
40 38 30 28 20 18 10 8 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 43 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 4 0 1 0 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 5 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"112 383 LINE",
"1018 383 LINE",
"1046 597 LINE",
"140 597 LINE"
);
},
{
closed = 1;
nodes = (
"158 745 LINE",
"1064 745 LINE",
"1090 960 LINE",
"186 960 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"158 745 LINE",
"554 745 LINE",
"459 597 LINE",
"140 597 LINE",
"112 383 LINE",
"321 383 LINE",
"176 158 LINE",
"388 158 LINE",
"533 383 LINE",
"1018 383 LINE",
"1046 597 LINE",
"671 597 LINE",
"766 745 LINE",
"1064 745 LINE",
"1090 960 LINE",
"905 960 LINE",
"1040 1168 LINE",
"828 1168 LINE",
"693 960 LINE",
"186 960 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 1 0 0 1 40 0 6 5 5 6 41 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 1 0 0 1 40 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 1 0 1 52 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 0 1 52 0 6 5 6 53 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 2 38 0 4 8 5 4 0 0 35 0 8 0 7 5 8 7 0 0 38 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = notequal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"976 736 LINE",
"219 1159 LINE",
"191 944 LINE",
"190.333 941.333 OFFCURVE",
"190 937.333 OFFCURVE",
"190 932 CURVE SMOOTH",
"190 905.333 OFFCURVE",
"203.667 884.333 OFFCURVE",
"231 869 CURVE SMOOTH",
"498 715 LINE SMOOTH",
"530 696.333 OFFCURVE",
"566.333 686.667 OFFCURVE",
"609 676 CURVE",
"565 665.333 OFFCURVE",
"524 653.667 OFFCURVE",
"488 635 CURVE SMOOTH",
"186 482 LINE SMOOTH",
"147.333 463.333 OFFCURVE",
"130 436.667 OFFCURVE",
"126 406 CURVE SMOOTH",
"99 191 LINE",
"961 615 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
18 1 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"136 614 LINE",
"893 191 LINE",
"921 406 LINE",
"921.667 408.667 OFFCURVE",
"922 412.667 OFFCURVE",
"922 418 CURVE SMOOTH",
"922 444.667 OFFCURVE",
"908.333 465.667 OFFCURVE",
"881 481 CURVE SMOOTH",
"614 635 LINE SMOOTH",
"582 653.667 OFFCURVE",
"545.667 663.333 OFFCURVE",
"503 674 CURVE",
"547 684.667 OFFCURVE",
"588 696.333 OFFCURVE",
"624 715 CURVE SMOOTH",
"926 868 LINE SMOOTH",
"964.667 886.667 OFFCURVE",
"982 913.333 OFFCURVE",
"986 944 CURVE SMOOTH",
"1013 1159 LINE",
"151 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
1 18 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"925 302 LINE",
"115 302 LINE",
"86 80 LINE",
"896 80 LINE"
);
},
{
closed = 1;
nodes = (
"996 878 LINE",
"233 1262 LINE",
"223.646 1188.106 OFFCURVE",
"212.267 1099.239 OFFCURVE",
"209.5 1076 CURVE SMOOTH",
"207.735 1061.172 OFFCURVE",
"206 1045.343 OFFCURVE",
"206 1044 CURVE SMOOTH",
"206 1017.333 OFFCURVE",
"218.333 995 OFFCURVE",
"261 975 CURVE SMOOTH",
"517 854 LINE",
"555.667 838.667 OFFCURVE",
"597.333 826 OFFCURVE",
"642 816 CURVE",
"593.333 806 OFFCURVE",
"548.667 794 OFFCURVE",
"508 780 CURVE",
"224 663 LINE SMOOTH",
"170.667 640.333 OFFCURVE",
"154 612.667 OFFCURVE",
"150 582 CURVE SMOOTH",
"124 376 LINE",
"980 757 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 29 values pushed */
23 12 5 3 1 28 0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"153 757 LINE",
"916 373 LINE",
"925.354 446.894 OFFCURVE",
"936.733 535.761 OFFCURVE",
"939.5 559 CURVE SMOOTH",
"941.156 572.909 OFFCURVE",
"943 589.045 OFFCURVE",
"943 591 CURVE SMOOTH",
"943 617.667 OFFCURVE",
"930.667 640 OFFCURVE",
"888 660 CURVE SMOOTH",
"632 781 LINE",
"593.333 796.333 OFFCURVE",
"551.667 809 OFFCURVE",
"507 819 CURVE",
"555.667 829 OFFCURVE",
"600.333 841 OFFCURVE",
"641 855 CURVE",
"925 972 LINE SMOOTH",
"978.333 994.667 OFFCURVE",
"995 1022.333 OFFCURVE",
"999 1053 CURVE SMOOTH",
"1025 1259 LINE",
"169 878 LINE"
);
},
{
closed = 1;
nodes = (
"69 80 LINE",
"879 80 LINE",
"908 302 LINE",
"98 302 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
24 23 22 21 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 29 values pushed */
19 8 1 3 0 28 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"554 1266 LINE",
"512 926 LINE",
"140 926 LINE",
"114 712 LINE",
"486 712 LINE",
"446 388 LINE",
"688 388 LINE",
"728 712 LINE",
"1100 712 LINE",
"1128 926 LINE",
"754 926 LINE",
"796 1266 LINE"
);
},
{
closed = 1;
nodes = (
"36 80 LINE",
"1022 80 LINE",
"1050 295 LINE",
"62 295 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 15 14 13 12 0 11 0 11 10 9 8 7 6 5 4 3 2 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
8 1 5 0 5 52 0 2 1 6 1 2 42 4 1 0 3 1 1 2 0 1 0 2 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
8 1 5 0 5 52 0 2 1 6 1 2 6 50 4 1 0 3 1 1 2 0 1 0 2 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
8 1 5 0 5 52 0 2 1 6 1 2 6 50 0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 2 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"733.908 921 OFFCURVE",
"597.405 1014 OFFCURVE",
"462 1014 CURVE SMOOTH",
"362 1014 OFFCURVE",
"260.667 982.333 OFFCURVE",
"194 905 CURVE",
"214 727 LINE",
"236.867 756.4 OFFCURVE",
"334.486 798 OFFCURVE",
"414 798 CURVE SMOOTH",
"528.305 798 OFFCURVE",
"667.2 702 OFFCURVE",
"802 702 CURVE SMOOTH",
"894 702 OFFCURVE",
"992 730 OFFCURVE",
"1056 802 CURVE",
"1046 985 LINE",
"1018.181 960.659 OFFCURVE",
"927.571 921 OFFCURVE",
"850 921 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"689.695 552 OFFCURVE",
"550.8 648 OFFCURVE",
"416 648 CURVE SMOOTH",
"316 648 OFFCURVE",
"214 614.333 OFFCURVE",
"150 537 CURVE",
"168 361 LINE",
"190.48 389.903 OFFCURVE",
"290.979 429 OFFCURVE",
"368 429 CURVE SMOOTH",
"485.211 429 OFFCURVE",
"618.977 336 OFFCURVE",
"756 336 CURVE SMOOTH",
"848 336 OFFCURVE",
"946 363.667 OFFCURVE",
"1010 433 CURVE",
"1000 617 LINE",
"975.234 592.234 OFFCURVE",
"879.846 552 OFFCURVE",
"804 552 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
29 28 1 0 52 50 43 41 38 36 28 55 29 55 24 22 15 13 10 8 0 27 1 27 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
43 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
5 1 0 3 20 6 2 2 0 19 1 1 2 33 1 4 7 48 34 2 6 4 47 1 5 6 6 30 8 1 0 0 1 7 0 1 1 0 38 0 7 0 6 5 7 6 1 0 38 9 1 4 0 5 4 5 1 0 37 0 2 2 3 1 0 36 0 3 3 14 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 84 values pushed */
5 1 0 3 20 6 2 2 0 19 1 1 2 33 1 4 7 48 34 2 6 4 47 1 5 6 6 30 0 3 0 2 1 3 2 1 0 38 8 1 0 0 1 7 0 1 1 0 38 9 1 4 6 5 4 1 0 35 0 7 0 6 5 7 6 1 0 38 9 1 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"595.1 677 OFFCURVE",
"471.9 752 OFFCURVE",
"350 752 CURVE SMOOTH",
"246 752 OFFCURVE",
"163 716.833 OFFCURVE",
"107 653.5 CURVE SMOOTH",
"51 590.167 OFFCURVE",
"20 498.333 OFFCURVE",
"20 385 CURVE",
"270 385 LINE",
"270 465 OFFCURVE",
"306 507 OFFCURVE",
"370 507 CURVE SMOOTH",
"444.9 507 OFFCURVE",
"568.1 432 OFFCURVE",
"690 432 CURVE SMOOTH",
"794 432 OFFCURVE",
"877 467.167 OFFCURVE",
"933 530.5 CURVE SMOOTH",
"989 593.833 OFFCURVE",
"1020 685.667 OFFCURVE",
"1020 799 CURVE",
"770 799 LINE",
"770 719 OFFCURVE",
"734 677 OFFCURVE",
"670 677 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 45 values pushed */
0 1 5 1 52 0 4 2 4 53 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"136 565 LINE",
"789 565 LINE",
"754 286 LINE",
"1006 286 LINE",
"1068 779 LINE",
"162 779 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 2 1 41 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 1 2 1 53 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"728 1457 LINE",
"526 1457 LINE",
"140 768 LINE",
"380 768 LINE SMOOTH",
"420 768 OFFCURVE",
"443.333 789.333 OFFCURVE",
"458 816 CURVE SMOOTH",
"578 1053 LINE SMOOTH",
"600.667 1095.667 OFFCURVE",
"617.667 1133.333 OFFCURVE",
"631 1172 CURVE",
"645.667 1133.333 OFFCURVE",
"665.333 1095.667 OFFCURVE",
"688 1053 CURVE SMOOTH",
"812 816 LINE SMOOTH",
"826.667 788 OFFCURVE",
"850 768 OFFCURVE",
"886 768 CURVE SMOOTH",
"1114 768 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 0 2 1 30 1 1 0 2 0 53 0 2 2 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"978.333 214 OFFCURVE",
"1073.5 263.333 OFFCURVE",
"1143.5 342 CURVE SMOOTH",
"1213.5 420.667 OFFCURVE",
"1259 530.333 OFFCURVE",
"1259 649 CURVE SMOOTH",
"1259 743.667 OFFCURVE",
"1228.833 824 OFFCURVE",
"1177.5 880 CURVE SMOOTH",
"1126.167 936 OFFCURVE",
"1055 969 OFFCURVE",
"975 969 CURVE SMOOTH",
"846.722 969 OFFCURVE",
"750.86 900.585 OFFCURVE",
"674 810 CURVE",
"617.592 903.074 OFFCURVE",
"539.604 969 OFFCURVE",
"412 969 CURVE SMOOTH",
"314.667 969 OFFCURVE",
"221.5 919.667 OFFCURVE",
"151.5 841 CURVE SMOOTH",
"81.5 762.333 OFFCURVE",
"36 653.667 OFFCURVE",
"36 535 CURVE SMOOTH",
"36 440.333 OFFCURVE",
"66.333 360.167 OFFCURVE",
"117 303.5 CURVE SMOOTH",
"167.667 246.833 OFFCURVE",
"238 214 OFFCURVE",
"318 214 CURVE SMOOTH",
"447.529 214 OFFCURVE",
"542.869 282.096 OFFCURVE",
"620 373 CURVE",
"676.677 279.482 OFFCURVE",
"753.375 214 OFFCURVE",
"881 214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"317.667 456 OFFCURVE",
"279 484 OFFCURVE",
"279 560 CURVE SMOOTH",
"279 656.574 OFFCURVE",
"327.492 728 OFFCURVE",
"395 728 CURVE SMOOTH",
"454.97 728 OFFCURVE",
"492.708 664.206 OFFCURVE",
"523 591 CURVE",
"471 513.667 OFFCURVE",
"423 456 OFFCURVE",
"363 456 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"838.349 456 OFFCURVE",
"802.21 519.993 OFFCURVE",
"772 593 CURVE",
"822.667 670.333 OFFCURVE",
"872 728 OFFCURVE",
"932 728 CURVE SMOOTH",
"976 728 OFFCURVE",
"1016 700.333 OFFCURVE",
"1016 623 CURVE SMOOTH",
"1016 525.251 OFFCURVE",
"967.508 456 OFFCURVE",
"900 456 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
57 56 41 40 1 0 65 63 56 71 57 71 49 47 40 55 41 55 31 29 21 19 11 9 0 39 1 39 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
25 1 5 2 67 43 2 4 5 5 1 0 4 3 30 3 1 2 7 1 5 4 2 5 1 0 38 10 6 9 3 4 0 0 4 1 0 35 10 6 9 3 4 4 0 1 0 36 1 8 2 0 4 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
25 1 7 3 67 43 2 4 5 5 1 1 6 3 30 0 3 0 7 5 3 7 1 0 38 0 2 0 5 4 2 5 1 0 38 10 1 6 1 0 6 1 0 35 9 1 4 0 1 0 4 1 1 0 38 10 1 6 6 0 1 0 36 8 1 0 6 0 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1267;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"204 63 LINE SMOOTH",
"176.12 -65.249 OFFCURVE",
"146.486 -110 OFFCURVE",
"10 -110 CURVE SMOOTH",
"-45.137 -110 OFFCURVE",
"-54.191 -127.717 OFFCURVE",
"-66 -172 CURVE SMOOTH",
"-98 -298 LINE",
"-48.667 -326 OFFCURVE",
"9.333 -336 OFFCURVE",
"56 -336 CURVE SMOOTH",
"161.333 -336 OFFCURVE",
"255 -304.833 OFFCURVE",
"331 -237.5 CURVE SMOOTH",
"407 -170.167 OFFCURVE",
"463.333 -68 OFFCURVE",
"498 72 CURVE SMOOTH",
"736 1057 LINE SMOOTH",
"762.983 1164.934 OFFCURVE",
"789.057 1219 OFFCURVE",
"901 1219 CURVE SMOOTH",
"944.238 1219 OFFCURVE",
"959.071 1256.388 OFFCURVE",
"965 1289 CURVE",
"998 1436 LINE",
"950 1462.667 OFFCURVE",
"889.667 1473 OFFCURVE",
"843 1473 CURVE SMOOTH",
"733.667 1473 OFFCURVE",
"648.5 1436.333 OFFCURVE",
"582.5 1371 CURVE SMOOTH",
"516.5 1305.667 OFFCURVE",
"471.667 1211.667 OFFCURVE",
"445 1097 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
35 33 26 24 15 13 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
8 1 1 0 28 1 2 3 2 30 0 1 1 0 1 0 36 0 0 0 17 31 0 3 3 2 1 0 36 0 2 2 16 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
140 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
8 1 1 0 28 1 2 3 2 30 0 0 0 1 3 0 1 1 0 38 0 3 3 2 1 0 36 0 2 2 16 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
8 1 1 0 28 1 2 3 2 30 0 0 0 1 3 0 1 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 0 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 791;
}
);
note = integral;
unicode = 222B;
},
{
glyphname = Ohm;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1130 0 LINE SMOOTH",
"1196.667 0 OFFCURVE",
"1243.333 39.333 OFFCURVE",
"1250 98 CURVE SMOOTH",
"1270 259 LINE",
"942 259 LINE",
"956 375 LINE",
"1085.333 413.667 OFFCURVE",
"1185.333 491.667 OFFCURVE",
"1252 593 CURVE SMOOTH",
"1318.667 694.333 OFFCURVE",
"1354 819.333 OFFCURVE",
"1354 950 CURVE SMOOTH",
"1354 1090 OFFCURVE",
"1302.833 1220.167 OFFCURVE",
"1207.5 1315.5 CURVE SMOOTH",
"1112.167 1410.833 OFFCURVE",
"971.333 1471 OFFCURVE",
"794 1471 CURVE SMOOTH",
"586 1471 OFFCURVE",
"411 1396 OFFCURVE",
"287 1276 CURVE SMOOTH",
"163 1156 OFFCURVE",
"92 991.333 OFFCURVE",
"92 814 CURVE SMOOTH",
"92 714 OFFCURVE",
"113.667 622 OFFCURVE",
"159 546 CURVE SMOOTH",
"204.333 470 OFFCURVE",
"273 411.333 OFFCURVE",
"365 378 CURVE",
"350 259 LINE",
"24 259 LINE",
"4 98 LINE",
"3.333 94.667 OFFCURVE",
"3 90 OFFCURVE",
"3 84 CURVE SMOOTH",
"3 33.333 OFFCURVE",
"38 0 OFFCURVE",
"98 0 CURVE SMOOTH",
"568 0 LINE",
"634 535 LINE",
"505.505 558.363 OFFCURVE",
"424 652.499 OFFCURVE",
"424 815 CURVE SMOOTH",
"424 940.333 OFFCURVE",
"452 1041.5 OFFCURVE",
"508 1111.5 CURVE SMOOTH",
"564 1181.5 OFFCURVE",
"648.667 1220 OFFCURVE",
"762 1220 CURVE SMOOTH",
"934 1220 OFFCURVE",
"1018 1114.333 OFFCURVE",
"1018 937 CURVE SMOOTH",
"1018 805 OFFCURVE",
"984.333 711 OFFCURVE",
"931 647 CURVE SMOOTH",
"877.667 583 OFFCURVE",
"805.333 548.333 OFFCURVE",
"728 535 CURVE",
"660 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 55 0 54 51 50 40 38 28 27 22 20 10 8 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
29 19 2 2 0 1 30 0 0 0 3 1 0 36 0 3 3 17 31 4 1 2 2 1 1 0 36 6 5 2 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
29 19 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 1 1 2 0 0 35 4 1 2 2 1 1 0 36 6 5 2 1 2 1 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
29 19 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 0 2 4 1 2 0 0 35 0 4 6 1 5 1 4 5 1 0 38 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1348;
}
);
note = Omega;
unicode = 2126;
},
{
glyphname = increment;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"980 1455 LINE",
"684 1455 LINE",
"-52 0 LINE",
"1356 0 LINE"
);
},
{
closed = 1;
nodes = (
"718 969 LINE",
"733.938 1000.875 OFFCURVE",
"771.503 1101.007 OFFCURVE",
"794 1155 CURVE",
"804.615 1091.308 OFFCURVE",
"813.081 1014.677 OFFCURVE",
"824 971 CURVE",
"970 249 LINE",
"397 249 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
11 1 2 1 1 30 0 1 1 11 31 0 2 2 0 0 2 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
11 1 2 1 1 30 0 1 2 1 52 0 2 0 0 2 0 0 35 0 2 2 0 0 2 36 0 0 2 0 0 2 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1426;
}
);
note = Delta;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"160 1455 LINE",
"130 1214 LINE",
"284 1214 LINE",
"94 -331 LINE",
"402 -331 LINE",
"592 1214 LINE",
"960 1214 LINE",
"772 -331 LINE",
"1080 -331 LINE",
"1270 1214 LINE",
"1422 1214 LINE",
"1452 1455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 2 2 0 0 5 0 0 36 6 1 5 5 11 31 3 1 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
236 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
6 1 5 4 2 2 0 1 5 0 0 0 38 3 1 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
3 1 1 0 1 53 6 1 5 0 0 5 0 0 35 6 1 5 5 0 0 0 36 4 2 2 0 5 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 4 5 2 2 4 42 0 0 2 3 2 0 42 0 3 1 2 3 1 48 0 1 1 51 6 1 5 4 2 5 0 2 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1376;
}
);
note = product;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"201 1457 LINE",
"195.568 1412.456 OFFCURVE",
"187 1347.214 OFFCURVE",
"187 1338 CURVE SMOOTH",
"187 1312.667 OFFCURVE",
"193.333 1285.667 OFFCURVE",
"208 1263 CURVE SMOOTH",
"633 568 LINE",
"38 -138 LINE SMOOTH",
"15.333 -164.667 OFFCURVE",
"-2 -196.667 OFFCURVE",
"-6 -226 CURVE SMOOTH",
"-19 -329 LINE",
"1103 -329 LINE",
"1135 -79 LINE",
"477 -79 LINE",
"964 520 LINE",
"976 608 LINE",
"635 1206 LINE",
"1291 1206 LINE",
"1323 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 22 0 22 8 7 6 5 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
13 1 1 0 1 30 0 0 0 3 0 0 36 4 1 3 3 11 31 0 1 1 2 0 0 36 0 2 2 16 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
13 1 1 0 1 30 4 1 3 0 0 1 3 0 0 0 38 0 1 1 2 0 0 36 0 2 2 16 2 32 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1268;
}
);
note = summation;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"1428 1703 LINE",
"1230 1703 LINE SMOOTH",
"1190 1703 OFFCURVE",
"1155.333 1679.667 OFFCURVE",
"1142 1649 CURVE SMOOTH",
"654 501 LINE SMOOTH",
"631.333 445 OFFCURVE",
"611.667 393.667 OFFCURVE",
"597 343 CURVE",
"597 409.667 OFFCURVE",
"590.667 473 OFFCURVE",
"580 537 CURVE SMOOTH",
"542 785 LINE SMOOTH",
"538 814.333 OFFCURVE",
"508.667 837 OFFCURVE",
"466 837 CURVE SMOOTH",
"100 837 LINE",
"88 745 LINE",
"86.667 737 OFFCURVE",
"86 728.667 OFFCURVE",
"86 722 CURVE SMOOTH",
"86 655.695 OFFCURVE",
"127.975 628 OFFCURVE",
"186 628 CURVE SMOOTH",
"268 628 LINE",
"420 0 LINE",
"672 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
28 26 14 12 4 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
20 1 0 1 1 30 0 3 2 3 52 0 2 0 1 0 2 1 1 0 38 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
20 1 0 1 1 30 0 3 2 3 52 0 0 1 0 53 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1178;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = micro;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"158 1035 LINE",
"4 -211 LINE",
"3.333 -214.333 OFFCURVE",
"3 -217.5 OFFCURVE",
"3 -220.5 CURVE SMOOTH",
"3 -223.5 OFFCURVE",
"3 -226.667 OFFCURVE",
"3 -230 CURVE SMOOTH",
"3 -294 OFFCURVE",
"44 -331 OFFCURVE",
"120 -331 CURVE SMOOTH",
"268 -331 LINE",
"294 -114 LINE SMOOTH",
"296.667 -83.333 OFFCURVE",
"300 -50.667 OFFCURVE",
"300 -16 CURVE SMOOTH",
"300 12.667 OFFCURVE",
"298 40 OFFCURVE",
"294 66 CURVE",
"330 36.667 OFFCURVE",
"375.333 20 OFFCURVE",
"430 20 CURVE SMOOTH",
"515.102 20 OFFCURVE",
"568.812 45.384 OFFCURVE",
"642 111 CURVE",
"652 50 LINE",
"660 16.667 OFFCURVE",
"682 0 OFFCURVE",
"718 0 CURVE SMOOTH",
"904 0 LINE",
"1032 1035 LINE",
"734 1035 LINE",
"640 286 LINE",
"586.667 239.333 OFFCURVE",
"532.667 210 OFFCURVE",
"474 210 CURVE SMOOTH",
"406 210 OFFCURVE",
"372 255.333 OFFCURVE",
"372 338 CURVE SMOOTH",
"372 344 OFFCURVE",
"372 350.167 OFFCURVE",
"372 356.5 CURVE SMOOTH",
"372 362.833 OFFCURVE",
"372.667 369.667 OFFCURVE",
"374 377 CURVE",
"456 1035 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 39 0 39 33 31 23 21 15 13 12 11 8 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
25 17 2 2 0 1 30 6 5 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
25 17 2 3 0 1 30 6 5 2 1 1 14 31 0 0 0 3 1 2 36 0 3 3 12 31 0 2 2 12 31 0 4 4 16 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
25 17 2 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 5 2 1 1 14 31 0 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
25 17 2 3 0 1 30 0 0 0 3 2 0 3 1 2 38 0 2 2 1 0 0 36 6 5 2 1 1 14 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
236 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
25 17 2 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 5 2 1 0 2 4 1 2 1 0 38 0 4 4 16 4 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
25 17 2 3 0 1 30 0 4 2 4 53 6 5 2 1 0 2 1 0 0 35 0 0 0 3 2 0 3 1 2 38 6 5 2 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
25 17 2 3 0 1 30 6 1 5 1 0 1 5 0 50 0 4 2 4 53 0 1 5 2 1 0 0 35 0 0 0 3 2 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1072;
}
);
note = mu;
unicode = 00B5;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"395 1218 LINE SMOOTH",
"413.667 1179.333 OFFCURVE",
"434.333 1170 OFFCURVE",
"457 1170 CURVE SMOOTH",
"506.097 1170 OFFCURVE",
"596.114 1234 OFFCURVE",
"667 1234 CURVE SMOOTH",
"766.144 1234 OFFCURVE",
"821 1142.427 OFFCURVE",
"821 997 CURVE SMOOTH",
"821 969 OFFCURVE",
"819 938.667 OFFCURVE",
"815 906 CURVE SMOOTH",
"812 883 LINE",
"765.333 940.333 OFFCURVE",
"695.667 973 OFFCURVE",
"589 973 CURVE SMOOTH",
"540.333 973 OFFCURVE",
"492.833 965.5 OFFCURVE",
"446.5 950.5 CURVE SMOOTH",
"353.833 920.5 OFFCURVE",
"269.5 866 OFFCURVE",
"199.5 790 CURVE SMOOTH",
"164.5 752 OFFCURVE",
"134.5 710 OFFCURVE",
"109.5 664 CURVE SMOOTH",
"59.5 572 OFFCURVE",
"29 466 OFFCURVE",
"29 354 CURVE SMOOTH",
"29 239.333 OFFCURVE",
"65.833 147 OFFCURVE",
"130.5 83 CURVE SMOOTH",
"195.167 19 OFFCURVE",
"287 -16 OFFCURVE",
"395 -16 CURVE SMOOTH",
"592.333 -16 OFFCURVE",
"750 74 OFFCURVE",
"866 234 CURVE SMOOTH",
"982 394 OFFCURVE",
"1058.333 625.333 OFFCURVE",
"1093 908 CURVE SMOOTH",
"1098.333 946.667 OFFCURVE",
"1100 984.333 OFFCURVE",
"1100 1019 CURVE SMOOTH",
"1100 1160.333 OFFCURVE",
"1062.667 1272.667 OFFCURVE",
"1000 1350 CURVE SMOOTH",
"937.333 1427.333 OFFCURVE",
"846.333 1470 OFFCURVE",
"741 1470 CURVE SMOOTH",
"574.986 1470 OFFCURVE",
"462.783 1420.076 OFFCURVE",
"342 1333 CURVE"
);
},
{
closed = 1;
nodes = (
"392.705 216 OFFCURVE",
"348 279.867 OFFCURVE",
"348 352 CURVE SMOOTH",
"348 453.333 OFFCURVE",
"368 551 OFFCURVE",
"408 623 CURVE SMOOTH",
"448 695 OFFCURVE",
"509.333 741 OFFCURVE",
"592 741 CURVE SMOOTH",
"693.235 741 OFFCURVE",
"726.909 664.043 OFFCURVE",
"738 567 CURVE",
"700.667 433.667 OFFCURVE",
"655.167 346.667 OFFCURVE",
"606.5 292 CURVE SMOOTH",
"557.833 237.333 OFFCURVE",
"506.667 216 OFFCURVE",
"460 216 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
51 50 61 59 50 69 51 69 47 45 42 40 31 29 19 17 6 4 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 1 3 0 33 1 6 2 2 30 0 4 3 2 3 4 2 50 0 2 0 6 5 2 6 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 7 1 5 5 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 3 0 33 1 6 2 2 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 1 1 5 1 0 35 7 1 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = partialdiff;
unicode = 2202;
},
{
glyphname = percent;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"772 1248.333 OFFCURVE",
"744.5 1327.167 OFFCURVE",
"694.5 1382.5 CURVE SMOOTH",
"644.5 1437.833 OFFCURVE",
"573.333 1469 OFFCURVE",
"488 1469 CURVE SMOOTH",
"384 1469 OFFCURVE",
"290.667 1427.333 OFFCURVE",
"224 1354 CURVE SMOOTH",
"157.333 1280.667 OFFCURVE",
"116 1177 OFFCURVE",
"116 1053 CURVE SMOOTH",
"116 961 OFFCURVE",
"143.667 883.667 OFFCURVE",
"193 829 CURVE SMOOTH",
"242.333 774.333 OFFCURVE",
"312.667 743 OFFCURVE",
"398 743 CURVE SMOOTH",
"491.333 743 OFFCURVE",
"584.5 784 OFFCURVE",
"654.5 856 CURVE SMOOTH",
"724.5 928 OFFCURVE",
"772 1031 OFFCURVE",
"772 1155 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"542 1006.351 OFFCURVE",
"504.1 930 OFFCURVE",
"422 930 CURVE SMOOTH",
"375.333 930 OFFCURVE",
"346 961 OFFCURVE",
"346 1053 CURVE SMOOTH",
"346 1199.616 OFFCURVE",
"381.403 1284 OFFCURVE",
"464 1284 CURVE SMOOTH",
"510.667 1284 OFFCURVE",
"542 1249 OFFCURVE",
"542 1153 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"34 0 LINE",
"256 0 LINE SMOOTH",
"298.667 0 OFFCURVE",
"327.333 19.333 OFFCURVE",
"350 42 CURVE",
"1540 1455 LINE",
"1322 1455 LINE SMOOTH",
"1271.333 1455 OFFCURVE",
"1244.667 1432.333 OFFCURVE",
"1222 1411 CURVE"
);
},
{
closed = 1;
nodes = (
"1454 487.333 OFFCURVE",
"1426.5 567.333 OFFCURVE",
"1376.5 622 CURVE SMOOTH",
"1326.5 676.667 OFFCURVE",
"1255.333 709 OFFCURVE",
"1170 709 CURVE SMOOTH",
"1066 709 OFFCURVE",
"972.667 667.333 OFFCURVE",
"906 594 CURVE SMOOTH",
"839.333 520.667 OFFCURVE",
"798 416.333 OFFCURVE",
"798 291 CURVE SMOOTH",
"798 200.333 OFFCURVE",
"825.667 122.667 OFFCURVE",
"875 68 CURVE SMOOTH",
"924.333 13.333 OFFCURVE",
"994.667 -18 OFFCURVE",
"1080 -18 CURVE SMOOTH",
"1173.333 -18 OFFCURVE",
"1266.5 23 OFFCURVE",
"1336.5 95 CURVE SMOOTH",
"1406.5 167 OFFCURVE",
"1454 270 OFFCURVE",
"1454 394 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1224 244.888 OFFCURVE",
"1185.524 168 OFFCURVE",
"1104 168 CURVE SMOOTH",
"1057.333 168 OFFCURVE",
"1028 200.333 OFFCURVE",
"1028 291 CURVE SMOOTH",
"1028 439.216 OFFCURVE",
"1062.901 521 OFFCURVE",
"1146 521 CURVE SMOOTH",
"1192.667 521 OFFCURVE",
"1224 489.333 OFFCURVE",
"1224 392 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
78 76 70 68 62 60 52 50 45 43 40 38 32 30 24 22 16 14 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 9 9 5 1 0 36 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 69 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 5 6 9 1 0 35 0 9 9 6 1 0 36 0 6 9 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"772 1248.333 OFFCURVE",
"744.5 1327.167 OFFCURVE",
"694.5 1382.5 CURVE SMOOTH",
"644.5 1437.833 OFFCURVE",
"573.333 1469 OFFCURVE",
"488 1469 CURVE SMOOTH",
"384 1469 OFFCURVE",
"290.667 1427.333 OFFCURVE",
"224 1354 CURVE SMOOTH",
"157.333 1280.667 OFFCURVE",
"116 1177 OFFCURVE",
"116 1053 CURVE SMOOTH",
"116 961 OFFCURVE",
"143.667 883.667 OFFCURVE",
"193 829 CURVE SMOOTH",
"242.333 774.333 OFFCURVE",
"312.667 743 OFFCURVE",
"398 743 CURVE SMOOTH",
"491.333 743 OFFCURVE",
"584.5 784 OFFCURVE",
"654.5 856 CURVE SMOOTH",
"724.5 928 OFFCURVE",
"772 1031 OFFCURVE",
"772 1155 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"542 1006.351 OFFCURVE",
"504.1 930 OFFCURVE",
"422 930 CURVE SMOOTH",
"375.333 930 OFFCURVE",
"346 961 OFFCURVE",
"346 1053 CURVE SMOOTH",
"346 1199.616 OFFCURVE",
"381.403 1284 OFFCURVE",
"464 1284 CURVE SMOOTH",
"510.667 1284 OFFCURVE",
"542 1249 OFFCURVE",
"542 1153 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"34 0 LINE",
"256 0 LINE SMOOTH",
"298.667 0 OFFCURVE",
"327.333 19.333 OFFCURVE",
"350 42 CURVE",
"1540 1455 LINE",
"1322 1455 LINE SMOOTH",
"1271.333 1455 OFFCURVE",
"1244.667 1432.333 OFFCURVE",
"1222 1411 CURVE"
);
},
{
closed = 1;
nodes = (
"1454 487.333 OFFCURVE",
"1426.5 567.333 OFFCURVE",
"1376.5 622 CURVE SMOOTH",
"1326.5 676.667 OFFCURVE",
"1255.333 709 OFFCURVE",
"1170 709 CURVE SMOOTH",
"1066 709 OFFCURVE",
"972.667 667.333 OFFCURVE",
"906 594 CURVE SMOOTH",
"839.333 520.667 OFFCURVE",
"798 416.333 OFFCURVE",
"798 291 CURVE SMOOTH",
"798 200.333 OFFCURVE",
"825.667 122.667 OFFCURVE",
"875 68 CURVE SMOOTH",
"924.333 13.333 OFFCURVE",
"994.667 -18 OFFCURVE",
"1080 -18 CURVE SMOOTH",
"1173.333 -18 OFFCURVE",
"1266.5 23 OFFCURVE",
"1336.5 95 CURVE SMOOTH",
"1406.5 167 OFFCURVE",
"1454 270 OFFCURVE",
"1454 394 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1224 244.888 OFFCURVE",
"1185.524 168 OFFCURVE",
"1104 168 CURVE SMOOTH",
"1057.333 168 OFFCURVE",
"1028 200.333 OFFCURVE",
"1028 291 CURVE SMOOTH",
"1028 439.216 OFFCURVE",
"1062.901 521 OFFCURVE",
"1146 521 CURVE SMOOTH",
"1192.667 521 OFFCURVE",
"1224 489.333 OFFCURVE",
"1224 392 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2144 487.333 OFFCURVE",
"2115.5 567.333 OFFCURVE",
"2065.5 622 CURVE SMOOTH",
"2015.5 676.667 OFFCURVE",
"1945.333 709 OFFCURVE",
"1860 709 CURVE SMOOTH",
"1756 709 OFFCURVE",
"1662.667 667.333 OFFCURVE",
"1596 594 CURVE SMOOTH",
"1529.333 520.667 OFFCURVE",
"1488 416.333 OFFCURVE",
"1488 291 CURVE SMOOTH",
"1488 200.333 OFFCURVE",
"1515.667 122.667 OFFCURVE",
"1565 68 CURVE SMOOTH",
"1614.333 13.333 OFFCURVE",
"1684.667 -18 OFFCURVE",
"1770 -18 CURVE SMOOTH",
"1863.333 -18 OFFCURVE",
"1956.5 23 OFFCURVE",
"2026.5 95 CURVE SMOOTH",
"2096.5 167 OFFCURVE",
"2144 270 OFFCURVE",
"2144 394 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1914 245.199 OFFCURVE",
"1874.959 168 OFFCURVE",
"1794 168 CURVE SMOOTH",
"1747.333 168 OFFCURVE",
"1718 200.333 OFFCURVE",
"1718 291 CURVE SMOOTH",
"1718 439.216 OFFCURVE",
"1752.901 521 OFFCURVE",
"1836 521 CURVE SMOOTH",
"1882.667 521 OFFCURVE",
"1914 489.333 OFFCURVE",
"1914 392 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
114 112 106 104 98 96 88 86 78 76 70 68 62 60 52 50 45 43 40 38 32 30 24 22 16 14 6 4 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 13 1 9 9 5 1 0 36 10 6 2 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 13 1 9 5 6 9 1 0 35 13 1 9 9 6 1 0 36 10 1 6 9 6 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 4 1 2 1 4 2 50 0 5 13 10 13 5 10 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 11 0 12 8 11 12 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 13 6 9 1 0 35 0 13 0 10 6 13 10 1 0 38 0 9 9 6 1 0 36 0 6 9 6 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2202;
}
);
note = perthousand;
unicode = 2030;
},
{
glyphname = lozenge;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"492 -70 LINE",
"708 -70 LINE",
"1080 734 LINE",
"708 1538 LINE",
"492 1538 LINE",
"120 734 LINE"
);
},
{
closed = 1;
nodes = (
"560 1171 LINE SMOOTH",
"576 1211 OFFCURVE",
"589.333 1244.667 OFFCURVE",
"600 1278 CURVE",
"610 1244.667 OFFCURVE",
"623.333 1209 OFFCURVE",
"640 1171 CURVE SMOOTH",
"834 734 LINE",
"640 298 LINE SMOOTH",
"621.333 258 OFFCURVE",
"610.667 223.333 OFFCURVE",
"600 190 CURVE",
"589.333 223.333 OFFCURVE",
"577.333 258 OFFCURVE",
"560 298 CURVE SMOOTH",
"372 734 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
5 4 2 1 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = "quarternote-musical";
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-116 -500 LINE",
"126 1500 LINE",
"124 1500 LINE",
"-118 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 52 2 1 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 0;
}
);
note = uni2669;
unicode = 2669;
},
{
glyphname = dieresis;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"376 1404.497 OFFCURVE",
"301.309 1476 OFFCURVE",
"212 1476 CURVE SMOOTH",
"127.569 1476 OFFCURVE",
"54 1403.959 OFFCURVE",
"54 1317 CURVE SMOOTH",
"54 1232.528 OFFCURVE",
"127.824 1164 OFFCURVE",
"212 1164 CURVE SMOOTH",
"301.076 1164 OFFCURVE",
"376 1231.965 OFFCURVE",
"376 1317 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"762 1404.886 OFFCURVE",
"690.078 1476 OFFCURVE",
"600 1476 CURVE SMOOTH",
"511.581 1476 OFFCURVE",
"440 1404.637 OFFCURVE",
"440 1317 CURVE SMOOTH",
"440 1231.835 OFFCURVE",
"511.814 1164 OFFCURVE",
"600 1164 CURVE SMOOTH",
"689.845 1164 OFFCURVE",
"762 1231.59 OFFCURVE",
"762 1317 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
2 1 0 0 1 1 0 36 3 1 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"598 1421.806 OFFCURVE",
"511.9 1504 OFFCURVE",
"408 1504 CURVE SMOOTH",
"307.081 1504 OFFCURVE",
"224 1420.728 OFFCURVE",
"224 1322 CURVE SMOOTH",
"224 1222.594 OFFCURVE",
"307.181 1142 OFFCURVE",
"408 1142 CURVE SMOOTH",
"511.375 1142 OFFCURVE",
"598 1221.931 OFFCURVE",
"598 1322 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 19 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"-2 1471 LINE",
"208 1208 LINE SMOOTH",
"232 1178.667 OFFCURVE",
"254 1168 OFFCURVE",
"298 1168 CURVE SMOOTH",
"468 1168 LINE",
"374 1413 LINE SMOOTH",
"359.333 1451.667 OFFCURVE",
"336.667 1471 OFFCURVE",
"278 1471 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 1 1 0 1 0 36 2 1 0 0 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 0 1 1 0 1 0 35 2 1 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"514 1471 LINE SMOOTH",
"454 1471 OFFCURVE",
"426 1450.333 OFFCURVE",
"402 1413 CURVE SMOOTH",
"248 1168 LINE",
"426 1168 LINE SMOOTH",
"470 1168 OFFCURVE",
"496 1177.333 OFFCURVE",
"528 1208 CURVE SMOOTH",
"802 1471 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 9 0 8 5 3 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 1 0 53 2 1 1 1 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"370 1471 LINE SMOOTH",
"310 1471 OFFCURVE",
"282 1450.333 OFFCURVE",
"258 1413 CURVE",
"122 1168 LINE",
"244 1168 LINE SMOOTH",
"288 1168 OFFCURVE",
"318 1174.667 OFFCURVE",
"346 1208 CURVE SMOOTH",
"562 1471 LINE"
);
},
{
closed = 1;
nodes = (
"706 1471 LINE SMOOTH",
"651.976 1471 OFFCURVE",
"622.76 1450.388 OFFCURVE",
"594 1413 CURVE SMOOTH",
"402 1168 LINE",
"544 1168 LINE SMOOTH",
"588 1168 OFFCURVE",
"613.333 1177.333 OFFCURVE",
"644 1208 CURVE SMOOTH",
"918 1471 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 21 10 20 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
2 1 0 0 1 1 0 36 5 3 4 3 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"566 1455 LINE",
"284 1455 LINE",
"32 1168 LINE",
"238 1168 LINE SMOOTH",
"262 1168 OFFCURVE",
"286 1177.333 OFFCURVE",
"298 1188 CURVE SMOOTH",
"382 1263 LINE SMOOTH",
"390 1269.667 OFFCURVE",
"398.333 1276.667 OFFCURVE",
"409 1286 CURVE",
"415.667 1276.667 OFFCURVE",
"423.333 1269.667 OFFCURVE",
"430 1263 CURVE",
"494 1188 LINE",
"502 1177.333 OFFCURVE",
"525.333 1168 OFFCURVE",
"548 1168 CURVE SMOOTH",
"746 1168 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
8 1 0 2 1 30 1 1 0 0 2 0 0 36 0 2 2 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
8 1 0 2 1 30 0 2 0 0 2 0 0 35 0 2 2 0 1 0 36 1 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
8 1 1 2 1 30 0 1 2 0 2 1 0 50 0 2 1 0 2 0 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"248 1168 LINE",
"530 1168 LINE",
"782 1455 LINE",
"584 1455 LINE SMOOTH",
"560 1455 OFFCURVE",
"534.667 1446.667 OFFCURVE",
"524 1436 CURVE SMOOTH",
"442 1358 LINE SMOOTH",
"438 1354 OFFCURVE",
"433.5 1349.667 OFFCURVE",
"428.5 1345 CURVE SMOOTH",
"423.5 1340.333 OFFCURVE",
"418.667 1335.333 OFFCURVE",
"414 1330 CURVE",
"407.333 1340.667 OFFCURVE",
"398.667 1351.333 OFFCURVE",
"392 1358 CURVE",
"328 1436 LINE",
"317.333 1446.667 OFFCURVE",
"296.667 1455 OFFCURVE",
"274 1455 CURVE SMOOTH",
"68 1455 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 0 1 30 0 2 2 0 1 0 36 1 1 0 0 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
8 1 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
8 1 2 1 1 30 0 1 0 2 0 1 2 50 0 0 1 2 0 1 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"507.333 1159 OFFCURVE",
"588.5 1192.5 OFFCURVE",
"642.5 1246.5 CURVE SMOOTH",
"696.5 1300.5 OFFCURVE",
"723.333 1375 OFFCURVE",
"734 1455 CURVE",
"526 1455 LINE",
"517.883 1379.242 OFFCURVE",
"493.829 1341 OFFCURVE",
"414 1341 CURVE SMOOTH",
"346 1341 OFFCURVE",
"325 1366.333 OFFCURVE",
"325 1417 CURVE SMOOTH",
"325 1428.333 OFFCURVE",
"326 1441 OFFCURVE",
"328 1455 CURVE",
"120 1455 LINE",
"117.333 1436.333 OFFCURVE",
"116 1416.667 OFFCURVE",
"116 1398 CURVE SMOOTH",
"116 1331.333 OFFCURVE",
"133.333 1270.667 OFFCURVE",
"176 1228 CURVE SMOOTH",
"218.667 1185.333 OFFCURVE",
"287.333 1159 OFFCURVE",
"390 1159 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 20 19 15 13 9 8 0 24 1 24 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 4 1 0 2 0 1 2 37 3 1 1 1 11 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 4 1 0 2 0 1 2 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 4 1 0 2 0 1 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"164 1205.715 OFFCURVE",
"277.542 1119 OFFCURVE",
"406 1119 CURVE SMOOTH",
"538.889 1119 OFFCURVE",
"654 1205.414 OFFCURVE",
"654 1334 CURVE SMOOTH",
"654 1466.156 OFFCURVE",
"539.108 1554 OFFCURVE",
"406 1554 CURVE SMOOTH",
"276.874 1554 OFFCURVE",
"164 1466.319 OFFCURVE",
"164 1334 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"330 1384.667 OFFCURVE",
"355.333 1416 OFFCURVE",
"410 1416 CURVE SMOOTH",
"458 1416 OFFCURVE",
"488 1384.667 OFFCURVE",
"488 1334 CURVE SMOOTH",
"488 1287.333 OFFCURVE",
"458 1254 OFFCURVE",
"410 1254 CURVE SMOOTH",
"355.333 1254 OFFCURVE",
"330 1287.333 OFFCURVE",
"330 1334 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"472.139 1381 OFFCURVE",
"380.976 1457 OFFCURVE",
"322 1457 CURVE SMOOTH",
"197.325 1457 OFFCURVE",
"89.759 1342.761 OFFCURVE",
"72 1188 CURVE",
"254 1188 LINE",
"260.667 1242.667 OFFCURVE",
"280 1258 OFFCURVE",
"308 1258 CURVE SMOOTH",
"351.622 1258 OFFCURVE",
"439.755 1182 OFFCURVE",
"500 1182 CURVE SMOOTH",
"629.88 1182 OFFCURVE",
"729.68 1294.058 OFFCURVE",
"750 1449 CURVE",
"570 1449 LINE",
"562 1394.333 OFFCURVE",
"542 1381 OFFCURVE",
"514 1381 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
6 1 0 4 1 2 0 2 1 0 37 0 3 3 1 1 0 36 5 1 1 1 11 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
6 1 0 4 1 2 0 2 1 0 37 0 1 1 11 31 0 3 3 5 1 0 36 0 5 5 11 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 3 2 3 4 2 50 6 1 0 0 2 0 2 1 0 37 0 1 1 11 31 0 3 3 5 1 0 36 0 5 5 11 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"108 1203 LINE",
"682 1203 LINE",
"706 1387 LINE",
"132 1387 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"77.333 -214 OFFCURVE",
"68.667 -224.333 OFFCURVE",
"62 -239 CURVE SMOOTH",
"22 -329 LINE",
"68.667 -342.333 OFFCURVE",
"107.333 -347 OFFCURVE",
"158 -347 CURVE SMOOTH",
"305.219 -347 OFFCURVE",
"430 -288.846 OFFCURVE",
"430 -178 CURVE SMOOTH",
"430 -123.333 OFFCURVE",
"398.667 -75 OFFCURVE",
"304 -47 CURVE",
"328 17 LINE",
"142 17 LINE",
"82 -136 LINE",
"124 -142 OFFCURVE",
"153.5 -148.5 OFFCURVE",
"170.5 -155.5 CURVE SMOOTH",
"187.5 -162.5 OFFCURVE",
"196 -172.667 OFFCURVE",
"196 -186 CURVE SMOOTH",
"196 -204.667 OFFCURVE",
"182.667 -224 OFFCURVE",
"152 -224 CURVE SMOOTH",
"140 -224 OFFCURVE",
"130.167 -222.333 OFFCURVE",
"122.5 -219 CURVE SMOOTH",
"114.833 -215.667 OFFCURVE",
"106 -214 OFFCURVE",
"96 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 21 19 11 10 4 2 0 26 1 26 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
12 9 2 0 2 23 1 3 0 2 30 0 2 0 0 2 40 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
12 9 2 0 2 23 1 3 0 2 30 0 2 0 2 52 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
12 9 2 0 2 23 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 1 3 1 2 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
12 9 2 0 2 23 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 3 3 1 1 0 35 0 1 1 3 1 2 36 0 3 1 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"350 -171 OFFCURVE",
"344.333 -172.5 OFFCURVE",
"339 -175.5 CURVE SMOOTH",
"333.667 -178.5 OFFCURVE",
"322 -180 OFFCURVE",
"304 -180 CURVE SMOOTH",
"277.333 -180 OFFCURVE",
"264 -160.667 OFFCURVE",
"264 -134 CURVE SMOOTH",
"264 -76.667 OFFCURVE",
"308 -30.667 OFFCURVE",
"364 0 CURVE",
"212 12 LINE",
"85.333 -56 OFFCURVE",
"34 -134 OFFCURVE",
"34 -214 CURVE SMOOTH",
"34 -290 OFFCURVE",
"94.667 -347 OFFCURVE",
"220 -347 CURVE SMOOTH",
"292 -347 OFFCURVE",
"363.333 -325 OFFCURVE",
"410 -297 CURVE",
"380 -190 LINE",
"378 -177.333 OFFCURVE",
"370 -171 OFFCURVE",
"356 -171 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
1 0 20 18 7 5 0 21 1 21 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
53 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
3 1 1 0 1 30 13 12 2 0 28 2 3 2 0 1 0 52 0 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
3 1 1 2 1 30 13 12 2 0 28 3 1 0 2 0 52 0 2 1 2 52 0 1 1 16 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
3 1 1 2 1 30 13 12 2 0 28 3 1 0 2 0 52 0 2 1 2 52 0 1 1 43 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = dieresis.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"380 1741.381 OFFCURVE",
"316.462 1804 OFFCURVE",
"238 1804 CURVE SMOOTH",
"164.502 1804 OFFCURVE",
"102 1740.438 OFFCURVE",
"102 1666 CURVE SMOOTH",
"102 1592.167 OFFCURVE",
"165.508 1534 OFFCURVE",
"238 1534 CURVE SMOOTH",
"315.831 1534 OFFCURVE",
"380 1590.828 OFFCURVE",
"380 1666 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"738 1741.359 OFFCURVE",
"675.241 1804 OFFCURVE",
"598 1804 CURVE SMOOTH",
"521.973 1804 OFFCURVE",
"460 1741.338 OFFCURVE",
"460 1666 CURVE SMOOTH",
"460 1590.87 OFFCURVE",
"522.547 1534 OFFCURVE",
"598 1534 CURVE SMOOTH",
"674.637 1534 OFFCURVE",
"738 1590.849 OFFCURVE",
"738 1666 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = dieresis.case;
},
{
glyphname = dotaccent.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"618 1797.944 OFFCURVE",
"534.124 1877 OFFCURVE",
"436 1877 CURVE SMOOTH",
"342.507 1877 OFFCURVE",
"262 1796.497 OFFCURVE",
"262 1702 CURVE SMOOTH",
"262 1611.51 OFFCURVE",
"342.531 1532 OFFCURVE",
"436 1532 CURVE SMOOTH",
"534.118 1532 OFFCURVE",
"618 1610.063 OFFCURVE",
"618 1702 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = dotaccent.case;
},
{
glyphname = grave.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"24 1796 LINE",
"256 1592 LINE SMOOTH",
"285.333 1565.333 OFFCURVE",
"304 1551 OFFCURVE",
"348 1551 CURVE SMOOTH",
"604 1551 LINE",
"462 1752 LINE",
"428.319 1788.488 OFFCURVE",
"411.782 1796 OFFCURVE",
"354 1796 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 8 6 0 11 1 11 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 25 values pushed */
2 1 0 1 1 0 1 0 35 2 1 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = grave.case;
},
{
glyphname = acute.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"558 1796 LINE SMOOTH",
"497.916 1796 OFFCURVE",
"479.558 1788.017 OFFCURVE",
"438 1752 CURVE",
"246 1551 LINE",
"491 1551 LINE SMOOTH",
"532.333 1551 OFFCURVE",
"561.333 1561.333 OFFCURVE",
"604 1592 CURVE SMOOTH",
"886 1796 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 11 0 10 5 3 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = acute.case;
},
{
glyphname = hungarumlaut.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"418 1779 LINE SMOOTH",
"358 1779 OFFCURVE",
"320 1755 OFFCURVE",
"292 1719 CURVE SMOOTH",
"160 1551 LINE",
"300 1551 LINE SMOOTH",
"342.207 1551 OFFCURVE",
"366.224 1566.019 OFFCURVE",
"400 1592 CURVE",
"610 1779 LINE"
);
},
{
closed = 1;
nodes = (
"752 1779 LINE SMOOTH",
"693.333 1779 OFFCURVE",
"654.667 1751 OFFCURVE",
"620 1719 CURVE SMOOTH",
"438 1551 LINE",
"598 1551 LINE SMOOTH",
"642 1551 OFFCURVE",
"670.667 1565.333 OFFCURVE",
"708 1592 CURVE SMOOTH",
"974 1779 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
12 12 0 0 12 21 12 20 17 15 0 11 0 10 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = hungarumlaut.case;
},
{
glyphname = circumflex.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"610 1776 LINE",
"310 1776 LINE",
"58 1551 LINE",
"282 1551 LINE SMOOTH",
"306 1551 OFFCURVE",
"336.667 1557 OFFCURVE",
"354 1569 CURVE SMOOTH",
"442 1632 LINE",
"514 1569 LINE SMOOTH",
"528.667 1555.667 OFFCURVE",
"559.333 1551 OFFCURVE",
"582 1551 CURVE SMOOTH",
"808 1551 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
12 11 10 8 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 1 0 2 1 30 0 2 0 0 2 0 0 35 0 2 2 0 1 0 36 1 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
5 1 1 2 1 30 0 1 2 0 2 1 0 50 0 2 1 0 2 0 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = circumflex.case;
},
{
glyphname = caron.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"286 1551 LINE",
"586 1551 LINE",
"840 1776 LINE",
"570 1776 LINE",
"474 1709 LINE",
"467.333 1705 OFFCURVE",
"462.667 1701.333 OFFCURVE",
"456 1696 CURVE",
"450.667 1701.333 OFFCURVE",
"445.333 1705 OFFCURVE",
"440 1709 CURVE",
"358 1776 LINE",
"88 1776 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
12 11 10 9 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
5 1 2 0 1 30 1 1 0 2 2 0 0 0 35 1 1 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
5 1 2 1 1 30 0 1 0 2 0 1 42 0 0 1 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = caron.case;
},
{
glyphname = breve.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"531.333 1528 OFFCURVE",
"614 1553.167 OFFCURVE",
"674 1596.5 CURVE SMOOTH",
"734 1639.833 OFFCURVE",
"771.333 1702 OFFCURVE",
"782 1778 CURVE",
"592 1778 LINE",
"585.333 1718 OFFCURVE",
"538.667 1699 OFFCURVE",
"456 1699 CURVE SMOOTH",
"378.667 1699 OFFCURVE",
"335 1715.667 OFFCURVE",
"335 1765 CURVE SMOOTH",
"335 1770.333 OFFCURVE",
"335.333 1774.667 OFFCURVE",
"336 1778 CURVE",
"148 1778 LINE",
"146 1764 OFFCURVE",
"145 1750.333 OFFCURVE",
"145 1737 CURVE SMOOTH",
"145 1594.333 OFFCURVE",
"254 1528 OFFCURVE",
"434 1528 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 15 14 12 10 6 5 0 19 1 19 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 2 2 1 40 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 4 1 0 2 0 1 2 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 4 1 0 2 0 1 2 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 4 1 0 2 0 1 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = breve.case;
},
{
glyphname = ring.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"206 1583.504 OFFCURVE",
"310.855 1504 OFFCURVE",
"428 1504 CURVE SMOOTH",
"550.046 1504 OFFCURVE",
"656 1582.944 OFFCURVE",
"656 1701 CURVE SMOOTH",
"656 1822.438 OFFCURVE",
"550.955 1904 OFFCURVE",
"428 1904 CURVE SMOOTH",
"309.931 1904 OFFCURVE",
"206 1821.878 OFFCURVE",
"206 1701 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"352 1751.667 OFFCURVE",
"377.333 1783 OFFCURVE",
"432 1783 CURVE SMOOTH",
"480 1783 OFFCURVE",
"510 1751.667 OFFCURVE",
"510 1701 CURVE SMOOTH",
"510 1654.333 OFFCURVE",
"480 1621 OFFCURVE",
"432 1621 CURVE SMOOTH",
"377.333 1621 OFFCURVE",
"352 1654.333 OFFCURVE",
"352 1701 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = ring.case;
},
{
glyphname = tilde.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"525.109 1723 OFFCURVE",
"414.958 1784 OFFCURVE",
"356 1784 CURVE SMOOTH",
"233 1784 OFFCURVE",
"146.143 1680.963 OFFCURVE",
"128 1541 CURVE",
"292 1541 LINE",
"296 1579.667 OFFCURVE",
"316 1598 OFFCURVE",
"340 1598 CURVE SMOOTH",
"386.22 1598 OFFCURVE",
"497.035 1535 OFFCURVE",
"556 1535 CURVE SMOOTH",
"681.315 1535 OFFCURVE",
"765.975 1636.954 OFFCURVE",
"784 1776 CURVE",
"622 1776 LINE",
"618 1738.667 OFFCURVE",
"596 1723 OFFCURVE",
"572 1723 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = tilde.case;
},
{
glyphname = macron.case;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
paths = (
{
closed = 1;
nodes = (
"124 1556 LINE",
"748 1556 LINE",
"770 1721 LINE",
"146 1721 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 612;
}
);
note = macron.case;
},
{
glyphname = firsttonechinese;
layers = (
{
components = (
{
alignment = -1;
name = macron;
}
);
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 612;
}
);
note = uni02C9;
unicode = 02C9;
},
{
glyphname = NULL;
layers = (
{
layerId = "10974C74-6ED2-4F66-BD25-910E45086E66";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
isBold = 1;
isItalic = 1;
name = "Bold Italic";
weightClass = Bold;
}
);
kerning = {
"10974C74-6ED2-4F66-BD25-910E45086E66" = {
A = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Aacute = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Acircumflex = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Adieresis = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Agrave = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Aogonek = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Aring = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
Atilde = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
C = {
bullet = -100;
emdash = -100;
endash = -100;
guillemetleft = -100;
guillemetright = -100;
guilsinglleft = -100;
guilsinglright = -100;
hyphen = -100;
periodcentered = -100;
softhyphen = -100;
};
Cacute = {
bullet = -100;
emdash = -100;
endash = -100;
guillemetleft = -100;
guillemetright = -100;
guilsinglleft = -100;
guilsinglright = -100;
hyphen = -100;
periodcentered = -100;
softhyphen = -100;
};
Ccedilla = {
bullet = -100;
emdash = -100;
endash = -100;
guillemetleft = -100;
guillemetright = -100;
guilsinglleft = -100;
guilsinglright = -100;
hyphen = -100;
periodcentered = -100;
softhyphen = -100;
};
D = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Eth = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
F = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
J = -180;
a = -60;
aacute = -60;
acircumflex = -60;
adieresis = -60;
ae = -60;
agrave = -60;
ampersand = -160;
aogonek = -60;
aring = -60;
atilde = -60;
c = -60;
cacute = -60;
ccedilla = -60;
colon = -60;
comma = -180;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
ellipsis = -180;
eogonek = -60;
eth = -60;
increment = -160;
m = -60;
micro = -60;
n = -60;
nacute = -60;
ntilde = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
p = -60;
period = -180;
q = -60;
question = 20;
quotedblbase = -180;
quotesinglbase = -180;
r = -60;
semicolon = -60;
slash = -160;
u = -60;
uacute = -60;
ucircumflex = -60;
udieresis = -60;
ugrave = -60;
};
J = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
K = {
C = -120;
Cacute = -120;
Ccedilla = -120;
G = -120;
O = -120;
OE = -120;
Oacute = -120;
Ocircumflex = -120;
Odieresis = -120;
Ograve = -120;
Oslash = -120;
Otilde = -120;
Q = -120;
asterisk = 40;
at = -120;
bullet = -70;
copyright = -120;
degree = 40;
emdash = -70;
endash = -70;
f = -60;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
ordfeminine = 40;
ordmasculine = 40;
periodcentered = -70;
quotedbl = 40;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesingle = 40;
registered = -120;
softhyphen = -70;
t = -140;
v = -80;
w = -50;
y = -80;
yacute = -80;
ydieresis = -80;
};
L = {
C = -100;
Cacute = -100;
Ccedilla = -100;
G = -100;
O = -100;
OE = -100;
Oacute = -100;
Ocircumflex = -100;
Odieresis = -100;
Ograve = -100;
Oslash = -100;
Otilde = -100;
Q = -100;
T = -200;
V = -200;
W = -180;
Y = -240;
Yacute = -240;
Ydieresis = -240;
asterisk = -220;
at = -100;
backslash = -200;
bullet = -160;
copyright = -100;
degree = -220;
emdash = -160;
endash = -160;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
onesuperior = -240;
ordfeminine = -220;
ordmasculine = -220;
periodcentered = -160;
quotedbl = -220;
quotedblleft = -220;
quotedblright = -220;
quoteleft = -220;
quoteright = -220;
quotesingle = -220;
registered = -100;
softhyphen = -160;
threesuperior = -240;
twosuperior = -240;
v = -130;
w = -90;
y = -130;
yacute = -130;
ydieresis = -130;
};
Lslash = {
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -160;
backslash = -180;
bullet = -80;
degree = -160;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -140;
ordfeminine = -160;
ordmasculine = -160;
periodcentered = -80;
quotedbl = -160;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesingle = -160;
softhyphen = -80;
threesuperior = -140;
twosuperior = -140;
v = -80;
w = -60;
y = -80;
yacute = -80;
ydieresis = -80;
};
O = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Oacute = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Ocircumflex = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Odieresis = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Ograve = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
Otilde = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
P = {
A = -170;
AE = -170;
Aacute = -170;
Acircumflex = -170;
Adieresis = -170;
Agrave = -170;
Aogonek = -170;
Aring = -170;
Atilde = -170;
J = -200;
a = -30;
aacute = -30;
acircumflex = -30;
adieresis = -30;
ae = -30;
agrave = -30;
ampersand = -170;
aogonek = -30;
aring = -30;
atilde = -30;
c = -30;
cacute = -30;
ccedilla = -30;
comma = -180;
d = -30;
e = -30;
eacute = -30;
ecircumflex = -30;
edieresis = -30;
egrave = -30;
ellipsis = -180;
eogonek = -30;
eth = -30;
increment = -170;
o = -30;
oacute = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
oslash = -30;
otilde = -30;
period = -180;
q = -30;
quotedblbase = -180;
quotesinglbase = -180;
slash = -170;
};
Q = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
R = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
T = -60;
U = -60;
Uacute = -60;
Ucircumflex = -60;
Udieresis = -60;
Ugrave = -60;
at = -40;
copyright = -40;
registered = -40;
};
T = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -200;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -200;
aacute = -200;
acircumflex = -200;
adieresis = -200;
ae = -200;
agrave = -200;
ampersand = -160;
aogonek = -200;
aring = -200;
at = -60;
atilde = -200;
bullet = -180;
c = -200;
cacute = -200;
ccedilla = -200;
colon = -140;
comma = -180;
copyright = -60;
d = -200;
e = -200;
eacute = -200;
ecircumflex = -200;
edieresis = -200;
egrave = -200;
ellipsis = -180;
emdash = -180;
endash = -180;
eogonek = -200;
eth = -200;
g = -180;
guillemetleft = -180;
guillemetright = -180;
guilsinglleft = -180;
guilsinglright = -180;
hyphen = -180;
increment = -160;
m = -140;
micro = -140;
n = -140;
nacute = -140;
ntilde = -140;
o = -200;
oacute = -200;
ocircumflex = -200;
odieresis = -200;
oe = -200;
ograve = -200;
oslash = -200;
otilde = -200;
p = -140;
period = -180;
periodcentered = -180;
q = -200;
question = 30;
quotedblbase = -180;
quotesinglbase = -180;
r = -140;
registered = -60;
s = -175;
sacute = -175;
scaron = -175;
semicolon = -140;
slash = -160;
softhyphen = -180;
u = -140;
uacute = -140;
ucircumflex = -140;
udieresis = -140;
ugrave = -140;
v = -160;
w = -120;
x = -180;
y = -180;
yacute = -160;
ydieresis = -160;
z = -170;
zacute = -170;
zcaron = -170;
zdotaccent = -170;
};
Thorn = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
U = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Uacute = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Ucircumflex = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Udieresis = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Ugrave = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
V = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
J = -160;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -140;
aacute = -140;
acircumflex = -140;
adieresis = -140;
ae = -140;
agrave = -140;
ampersand = -160;
aogonek = -140;
aring = -140;
asterisk = 40;
at = -40;
atilde = -140;
bullet = -140;
c = -140;
cacute = -140;
ccedilla = -140;
colon = -90;
comma = -200;
copyright = -40;
d = -140;
degree = 40;
e = -140;
eacute = -140;
ecircumflex = -140;
edieresis = -140;
egrave = -140;
ellipsis = -200;
emdash = -140;
endash = -140;
eogonek = -140;
eth = -140;
guillemetleft = -140;
guillemetright = -140;
guilsinglleft = -140;
guilsinglright = -140;
hyphen = -140;
increment = -160;
m = -90;
micro = -90;
n = -90;
nacute = -90;
ntilde = -90;
o = -140;
oacute = -140;
ocircumflex = -140;
odieresis = -140;
oe = -140;
ograve = -140;
onesuperior = 80;
ordfeminine = 40;
ordmasculine = 40;
oslash = -140;
otilde = -140;
p = -90;
period = -200;
periodcentered = -140;
q = -140;
question = 40;
quotedbl = 40;
quotedblbase = -200;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -200;
quotesingle = 40;
r = -90;
registered = -40;
s = -140;
sacute = -140;
scaron = -140;
semicolon = -90;
slash = -160;
softhyphen = -140;
threesuperior = 80;
twosuperior = 80;
u = -90;
uacute = -90;
ucircumflex = -90;
udieresis = -90;
ugrave = -90;
v = -50;
w = -50;
y = -50;
yacute = -50;
ydieresis = -50;
z = -100;
zacute = -100;
zcaron = -100;
zdotaccent = -100;
};
W = {
A = -100;
AE = -100;
Aacute = -100;
Acircumflex = -100;
Adieresis = -100;
Agrave = -100;
Aogonek = -100;
Aring = -100;
Atilde = -100;
J = -120;
a = -135;
aacute = -135;
acircumflex = -135;
adieresis = -135;
ae = -135;
agrave = -135;
ampersand = -100;
aogonek = -135;
aring = -135;
asterisk = 40;
atilde = -135;
c = -135;
cacute = -135;
ccedilla = -135;
colon = -80;
comma = -100;
d = -135;
degree = 40;
e = -135;
eacute = -135;
ecircumflex = -135;
edieresis = -135;
egrave = -135;
ellipsis = -100;
eogonek = -135;
eth = -135;
g = -95;
increment = -100;
m = -80;
micro = -80;
n = -80;
nacute = -80;
ntilde = -80;
o = -135;
oacute = -135;
ocircumflex = -135;
odieresis = -135;
oe = -135;
ograve = -135;
onesuperior = 60;
ordfeminine = 40;
ordmasculine = 40;
oslash = -135;
otilde = -135;
p = -80;
period = -100;
q = -135;
quotedbl = 40;
quotedblbase = -100;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -100;
quotesingle = 40;
r = -80;
s = -100;
sacute = -100;
scaron = -100;
semicolon = -80;
slash = -100;
threesuperior = 60;
twosuperior = 60;
u = -80;
uacute = -80;
ucircumflex = -80;
udieresis = -80;
ugrave = -80;
};
X = {
C = -120;
Cacute = -120;
Ccedilla = -120;
G = -120;
O = -120;
OE = -120;
Oacute = -120;
Ocircumflex = -120;
Odieresis = -120;
Ograve = -120;
Oslash = -120;
Otilde = -120;
Q = -120;
asterisk = 40;
at = -120;
bullet = -70;
copyright = -120;
degree = 40;
emdash = -70;
endash = -70;
f = -60;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
ordfeminine = 40;
ordmasculine = 40;
periodcentered = -70;
quotedbl = 40;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesingle = 40;
registered = -120;
softhyphen = -70;
t = -140;
v = -80;
w = -50;
y = -80;
yacute = -80;
ydieresis = -80;
};
Y = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -200;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -200;
aacute = -200;
acircumflex = -200;
adieresis = -200;
ae = -200;
agrave = -200;
ampersand = -160;
aogonek = -200;
aring = -200;
asterisk = 60;
at = -60;
atilde = -200;
bullet = -200;
c = -200;
cacute = -200;
ccedilla = -200;
colon = -110;
comma = -300;
copyright = -60;
d = -200;
degree = 60;
e = -200;
eacute = -200;
ecircumflex = -200;
edieresis = -200;
egrave = -200;
ellipsis = -300;
emdash = -200;
endash = -200;
eogonek = -200;
eth = -200;
g = -180;
guillemetleft = -200;
guillemetright = -200;
guilsinglleft = -200;
guilsinglright = -200;
hyphen = -200;
increment = -160;
m = -110;
micro = -110;
n = -110;
nacute = -110;
ntilde = -110;
o = -200;
oacute = -200;
ocircumflex = -200;
odieresis = -200;
oe = -200;
ograve = -200;
onesuperior = 80;
ordfeminine = 60;
ordmasculine = 60;
oslash = -200;
otilde = -200;
p = -110;
period = -300;
periodcentered = -200;
q = -200;
question = 50;
quotedbl = 60;
quotedblbase = -300;
quotedblleft = 60;
quotedblright = 60;
quoteleft = 60;
quoteright = 60;
quotesinglbase = -300;
quotesingle = 60;
r = -110;
registered = -60;
s = -200;
sacute = -200;
scaron = -200;
semicolon = -110;
slash = -160;
softhyphen = -200;
threesuperior = 80;
twosuperior = 80;
u = -110;
uacute = -110;
ucircumflex = -110;
udieresis = -110;
ugrave = -110;
z = -130;
zacute = -130;
zcaron = -130;
zdotaccent = -130;
};
Yacute = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -200;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -200;
aacute = -200;
acircumflex = -200;
adieresis = -200;
ae = -200;
agrave = -200;
ampersand = -160;
aogonek = -200;
aring = -200;
asterisk = 60;
at = -60;
atilde = -200;
bullet = -200;
c = -200;
cacute = -200;
ccedilla = -200;
colon = -110;
comma = -300;
copyright = -60;
d = -200;
degree = 60;
e = -200;
eacute = -200;
ecircumflex = -200;
edieresis = -200;
egrave = -200;
ellipsis = -300;
emdash = -200;
endash = -200;
eogonek = -200;
eth = -200;
g = -180;
guillemetleft = -200;
guillemetright = -200;
guilsinglleft = -200;
guilsinglright = -200;
hyphen = -200;
increment = -160;
m = -110;
micro = -110;
n = -110;
nacute = -110;
ntilde = -110;
o = -200;
oacute = -200;
ocircumflex = -200;
odieresis = -200;
oe = -200;
ograve = -200;
onesuperior = 80;
ordfeminine = 60;
ordmasculine = 60;
oslash = -200;
otilde = -200;
p = -110;
period = -300;
periodcentered = -200;
q = -200;
question = 50;
quotedbl = 60;
quotedblbase = -300;
quotedblleft = 60;
quotedblright = 60;
quoteleft = 60;
quoteright = 60;
quotesinglbase = -300;
quotesingle = 60;
r = -110;
registered = -60;
s = -200;
sacute = -200;
scaron = -200;
semicolon = -110;
slash = -160;
softhyphen = -200;
threesuperior = 80;
twosuperior = 80;
u = -110;
uacute = -110;
ucircumflex = -110;
udieresis = -110;
ugrave = -110;
z = -130;
zacute = -130;
zcaron = -130;
zdotaccent = -130;
};
Ydieresis = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -200;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -200;
aacute = -200;
acircumflex = -200;
adieresis = -200;
ae = -200;
agrave = -200;
ampersand = -160;
aogonek = -200;
aring = -200;
asterisk = 60;
at = -60;
atilde = -200;
bullet = -200;
c = -200;
cacute = -200;
ccedilla = -200;
colon = -110;
comma = -300;
copyright = -60;
d = -200;
degree = 60;
e = -200;
eacute = -200;
ecircumflex = -200;
edieresis = -200;
egrave = -200;
ellipsis = -300;
emdash = -200;
endash = -200;
eogonek = -200;
eth = -200;
g = -180;
guillemetleft = -200;
guillemetright = -200;
guilsinglleft = -200;
guilsinglright = -200;
hyphen = -200;
increment = -160;
m = -110;
micro = -110;
n = -110;
nacute = -110;
ntilde = -110;
o = -200;
oacute = -200;
ocircumflex = -200;
odieresis = -200;
oe = -200;
ograve = -200;
onesuperior = 80;
ordfeminine = 60;
ordmasculine = 60;
oslash = -200;
otilde = -200;
p = -110;
period = -300;
periodcentered = -200;
q = -200;
question = 50;
quotedbl = 60;
quotedblbase = -300;
quotedblleft = 60;
quotedblright = 60;
quoteleft = 60;
quoteright = 60;
quotesinglbase = -300;
quotesingle = 60;
r = -110;
registered = -60;
s = -200;
sacute = -200;
scaron = -200;
semicolon = -110;
slash = -160;
softhyphen = -200;
threesuperior = 80;
twosuperior = 80;
u = -110;
uacute = -110;
ucircumflex = -110;
udieresis = -110;
ugrave = -110;
z = -130;
zacute = -130;
zcaron = -130;
zdotaccent = -130;
};
Z = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -80;
copyright = -40;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
periodcentered = -80;
question = 40;
registered = -40;
softhyphen = -80;
};
Zacute = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -80;
copyright = -40;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
periodcentered = -80;
question = 40;
registered = -40;
softhyphen = -80;
};
Zcaron = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -80;
copyright = -40;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
periodcentered = -80;
question = 40;
registered = -40;
softhyphen = -80;
};
Zdotaccent = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -80;
copyright = -40;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
periodcentered = -80;
question = 40;
registered = -40;
softhyphen = -80;
};
ae = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
asterisk = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
at = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
b = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
backslash = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
braceleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
aogonek = -40;
aring = -40;
at = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
copyright = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
registered = -40;
};
bracketleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
aogonek = -40;
aring = -40;
at = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
copyright = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
registered = -40;
};
bullet = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
comma = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -222;
V = -240;
W = -108;
Y = -262;
Yacute = -262;
Ydieresis = -262;
at = -50;
backslash = -240;
bullet = -220;
copyright = -50;
emdash = -220;
endash = -220;
guillemetleft = -220;
guillemetright = -220;
guilsinglleft = -220;
guilsinglright = -220;
hyphen = -220;
periodcentered = -220;
registered = -50;
softhyphen = -220;
v = -160;
w = -100;
y = -160;
yacute = -160;
ydieresis = -160;
};
copyright = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
degree = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
e = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
eacute = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
ecircumflex = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
edieresis = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
egrave = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
ellipsis = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -222;
V = -240;
W = -108;
Y = -262;
Yacute = -262;
Ydieresis = -262;
at = -50;
backslash = -240;
bullet = -220;
copyright = -50;
emdash = -220;
endash = -220;
guillemetleft = -220;
guillemetright = -220;
guilsinglleft = -220;
guilsinglright = -220;
hyphen = -220;
periodcentered = -220;
registered = -50;
softhyphen = -220;
v = -160;
w = -100;
y = -160;
yacute = -160;
ydieresis = -160;
};
emdash = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
endash = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
eogonek = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
f = {
asterisk = 60;
comma = -120;
degree = 60;
ellipsis = -120;
onesuperior = 100;
ordfeminine = 60;
ordmasculine = 60;
period = -120;
quotedbl = 60;
quotedblbase = -120;
quotedblleft = 60;
quotedblright = 60;
quoteleft = 60;
quoteright = 60;
quotesinglbase = -120;
quotesingle = 60;
threesuperior = 100;
twosuperior = 100;
};
guillemetleft = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
guillemetright = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
guilsinglleft = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
guilsinglright = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
h = {
asterisk = -60;
degree = -60;
onesuperior = -140;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -140;
twosuperior = -140;
v = -40;
y = -60;
yacute = -40;
ydieresis = -40;
};
hyphen = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
increment = {
C = -70;
Cacute = -70;
Ccedilla = -70;
G = -70;
J = 80;
O = -70;
OE = -70;
Oacute = -70;
Ocircumflex = -70;
Odieresis = -70;
Ograve = -70;
Oslash = -70;
Otilde = -70;
Q = -70;
T = -160;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -160;
W = -120;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -70;
backslash = -160;
bullet = -80;
copyright = -70;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
registered = -70;
softhyphen = -80;
t = -80;
threesuperior = -220;
twosuperior = -220;
v = -70;
w = -60;
y = -70;
yacute = -70;
ydieresis = -70;
};
k = {
a = -60;
aacute = -60;
acircumflex = -60;
adieresis = -60;
ae = -60;
agrave = -60;
aogonek = -60;
aring = -60;
atilde = -60;
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
m = {
asterisk = -60;
degree = -60;
onesuperior = -140;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -140;
twosuperior = -140;
v = -40;
y = -60;
yacute = -40;
ydieresis = -40;
};
n = {
asterisk = -60;
degree = -60;
onesuperior = -140;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -140;
twosuperior = -140;
v = -40;
y = -60;
yacute = -40;
ydieresis = -40;
};
nacute = {
asterisk = -60;
degree = -60;
onesuperior = -140;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -140;
twosuperior = -140;
v = -40;
y = -60;
yacute = -40;
ydieresis = -40;
};
ntilde = {
asterisk = -60;
degree = -60;
onesuperior = -140;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -140;
twosuperior = -140;
v = -40;
y = -60;
yacute = -40;
ydieresis = -40;
};
o = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
oacute = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
ocircumflex = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
odieresis = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
oe = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
ograve = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
onesuperior = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -200;
backslash = 40;
increment = -200;
slash = -200;
};
ordfeminine = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
ordmasculine = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
oslash = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
otilde = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
p = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
parenleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
aogonek = -40;
aring = -40;
at = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
copyright = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
registered = -40;
};
period = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -222;
V = -240;
W = -108;
Y = -262;
Yacute = -262;
Ydieresis = -262;
at = -50;
backslash = -240;
bullet = -220;
copyright = -50;
emdash = -220;
endash = -220;
guillemetleft = -220;
guillemetright = -220;
guilsinglleft = -220;
guilsinglright = -220;
hyphen = -220;
periodcentered = -220;
registered = -50;
softhyphen = -220;
v = -160;
w = -100;
y = -160;
yacute = -160;
ydieresis = -160;
};
periodcentered = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
quotedbl = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
quotedblbase = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -222;
V = -240;
W = -108;
Y = -262;
Yacute = -262;
Ydieresis = -262;
at = -50;
backslash = -240;
bullet = -220;
copyright = -50;
emdash = -220;
endash = -220;
guillemetleft = -220;
guillemetright = -220;
guilsinglleft = -220;
guilsinglright = -220;
hyphen = -220;
periodcentered = -220;
registered = -50;
softhyphen = -220;
v = -160;
w = -100;
y = -160;
yacute = -160;
ydieresis = -160;
};
quotedblleft = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
quotedblright = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
quoteleft = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
quoteright = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
quotesinglbase = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -222;
V = -240;
W = -108;
Y = -262;
Yacute = -262;
Ydieresis = -262;
at = -50;
backslash = -240;
bullet = -220;
copyright = -50;
emdash = -220;
endash = -220;
guillemetleft = -220;
guillemetright = -220;
guilsinglleft = -220;
guilsinglright = -220;
hyphen = -220;
periodcentered = -220;
registered = -50;
softhyphen = -220;
v = -160;
w = -100;
y = -160;
yacute = -160;
ydieresis = -160;
};
quotesingle = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
r = {
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -180;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -180;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -180;
q = -40;
quotedblbase = -180;
quotesinglbase = -180;
};
registered = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
T = -60;
V = -60;
X = -100;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -50;
asterisk = -50;
backslash = -60;
braceright = -40;
bracketright = -40;
degree = -50;
increment = -50;
ordfeminine = -50;
ordmasculine = -50;
parenright = -40;
quotedbl = -50;
quotedblleft = -50;
quotedblright = -50;
quoteleft = -50;
quoteright = -50;
quotesingle = -50;
slash = -50;
};
slash = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
J = -160;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -140;
aacute = -140;
acircumflex = -140;
adieresis = -140;
ae = -140;
agrave = -140;
ampersand = -160;
aogonek = -140;
aring = -140;
asterisk = 40;
at = -40;
atilde = -140;
bullet = -140;
c = -140;
cacute = -140;
ccedilla = -140;
colon = -90;
comma = -200;
copyright = -40;
d = -140;
degree = 40;
e = -140;
eacute = -140;
ecircumflex = -140;
edieresis = -140;
egrave = -140;
ellipsis = -200;
emdash = -140;
endash = -140;
eogonek = -140;
eth = -140;
guillemetleft = -140;
guillemetright = -140;
guilsinglleft = -140;
guilsinglright = -140;
hyphen = -140;
increment = -160;
m = -90;
micro = -90;
n = -90;
nacute = -90;
ntilde = -90;
o = -140;
oacute = -140;
ocircumflex = -140;
odieresis = -140;
oe = -140;
ograve = -140;
onesuperior = 80;
ordfeminine = 40;
ordmasculine = 40;
oslash = -140;
otilde = -140;
p = -90;
period = -200;
periodcentered = -140;
q = -140;
question = 40;
quotedbl = 40;
quotedblbase = -200;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -200;
quotesingle = 40;
r = -90;
registered = -40;
s = -140;
sacute = -140;
scaron = -140;
semicolon = -90;
slash = -160;
softhyphen = -140;
threesuperior = 80;
twosuperior = 80;
u = -90;
uacute = -90;
ucircumflex = -90;
udieresis = -90;
ugrave = -90;
v = -50;
w = -50;
y = -50;
yacute = -50;
ydieresis = -50;
z = -100;
zacute = -100;
zcaron = -100;
zdotaccent = -100;
};
softhyphen = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -200;
V = -140;
X = -70;
Y = -220;
Yacute = -220;
Ydieresis = -220;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -80;
backslash = -140;
comma = -180;
ellipsis = -180;
increment = -80;
period = -180;
quotedblbase = -180;
quotesinglbase = -180;
slash = -80;
};
thorn = {
asterisk = -80;
braceright = -40;
bracketright = -40;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -40;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -60;
};
threesuperior = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -200;
backslash = 40;
increment = -200;
slash = -200;
};
trademark = {
A = -180;
AE = -180;
Aacute = -180;
Acircumflex = -180;
Adieresis = -180;
Agrave = -180;
Aogonek = -180;
Aring = -180;
Atilde = -180;
V = 40;
W = 20;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -100;
aacute = -100;
acircumflex = -100;
adieresis = -100;
ae = -100;
agrave = -100;
ampersand = -180;
aogonek = -100;
aring = -100;
atilde = -100;
backslash = 40;
c = -100;
cacute = -100;
ccedilla = -100;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
eogonek = -100;
eth = -100;
increment = -180;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
q = -100;
slash = -180;
};
twosuperior = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -200;
backslash = 40;
increment = -200;
slash = -200;
};
v = {
A = -70;
AE = -70;
Aacute = -70;
Acircumflex = -70;
Adieresis = -70;
Agrave = -70;
Aogonek = -70;
Aring = -70;
Atilde = -70;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
ampersand = -70;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -160;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -160;
eogonek = -40;
eth = -40;
increment = -70;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -160;
q = -40;
quotedblbase = -160;
quotesinglbase = -160;
slash = -70;
};
w = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
ampersand = -60;
comma = -120;
ellipsis = -120;
increment = -60;
period = -120;
quotedblbase = -120;
quotesinglbase = -120;
slash = -60;
};
x = {
a = -60;
aacute = -60;
acircumflex = -60;
adieresis = -60;
ae = -60;
agrave = -60;
aogonek = -60;
aring = -60;
atilde = -60;
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
y = {
A = -70;
AE = -70;
Aacute = -70;
Acircumflex = -70;
Adieresis = -70;
Agrave = -70;
Aogonek = -70;
Aring = -70;
Atilde = -70;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
ampersand = -70;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -180;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -180;
eogonek = -40;
eth = -40;
increment = -70;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -180;
q = -40;
quotedblbase = -180;
quotesinglbase = -180;
slash = -70;
};
yacute = {
A = -70;
AE = -70;
Aacute = -70;
Acircumflex = -70;
Adieresis = -70;
Agrave = -70;
Aogonek = -70;
Aring = -70;
Atilde = -70;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
ampersand = -70;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -160;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -160;
eogonek = -40;
eth = -40;
increment = -70;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -160;
q = -40;
quotedblbase = -160;
quotesinglbase = -160;
slash = -70;
};
ydieresis = {
A = -70;
AE = -70;
Aacute = -70;
Acircumflex = -70;
Adieresis = -70;
Agrave = -70;
Aogonek = -70;
Aring = -70;
Atilde = -70;
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
ampersand = -70;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -160;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -160;
eogonek = -40;
eth = -40;
increment = -70;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -160;
q = -40;
quotedblbase = -160;
quotesinglbase = -160;
slash = -70;
};
};
};
manufacturer = Truebase;
manufacturerURL = "http://www.truebase.com/";
unitsPerEm = 2000;
versionMajor = 1;
versionMinor = 104;
}
