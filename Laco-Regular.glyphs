{
.appVersion = "99";
DisplayStrings = (
"this.a*a._*//`as\"df`",
","
);
copyright = "Copyright (c) 2010-2011 by tyPoland Lukasz Dziedzic with Reserved Font Name \"Lato\". Licensed under the SIL Open Font License, Version 1.1.";
date = "2011-09-12 07:00:00 +0000";
designer = "Paul Go";
designerURL = "http://www.github.com/paul-go";
familyName = "Lato Code";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub three slash four by threequarters;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub f i by fi;\012sub f l by fl;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 1610;
capHeight = 1433;
customParameters = (
{
name = "Prep Table Assembly";
value = "PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012SWAP[ ]	/* SwapTopStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01240 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0129 10 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01211 16 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01217 22 3 2 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\0124 40 6 \012RCVT[ ]	/* ReadCVT */\012GT[ ]	/* GreaterThan */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\01211 16 4 2 \012CALL[ ]	/* CallFunction */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RCVT[ ]	/* ReadCVT */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01222 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\0126 4 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0129 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 4 values pushed */\01211 11 1 0 \012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0126 2 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01211 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01218 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01212 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01216 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01231 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
184,
139,
184,
184,
139,
140,
1433,
0,
1466,
1013,
0,
-343,
1449,
-16,
1466,
1029,
-14,
-364
);
}
);
descender = -390;
id = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
weightValue = 400;
widthValue = 5;
xHeight = 1013;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"780 1433 LINE",
"583 1433 LINE",
"10 0 LINE",
"160 0 LINE SMOOTH",
"193.333 0 OFFCURVE",
"216.667 22 OFFCURVE",
"226 46 CURVE SMOOTH",
"360 392 LINE",
"1003 392 LINE",
"1137 46 LINE SMOOTH",
"1147.667 19.333 OFFCURVE",
"1168.333 0 OFFCURVE",
"1203 0 CURVE SMOOTH",
"1353 0 LINE"
);
},
{
closed = 1;
nodes = (
"639 1114 LINE SMOOTH",
"652.333 1148.667 OFFCURVE",
"666.333 1195.333 OFFCURVE",
"681 1250 CURVE",
"695 1196 OFFCURVE",
"709.333 1151 OFFCURVE",
"724 1115 CURVE SMOOTH",
"949 532 LINE",
"414 532 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 14 13 12 11 9 6 5 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
18 1 4 3 1 30 0 4 0 1 0 4 1 0 2 38 0 3 3 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
18 1 4 3 1 30 0 3 4 3 52 0 4 0 1 0 4 1 0 2 38 2 1 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
18 1 4 3 1 30 0 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
18 1 4 3 1 30 0 3 4 3 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1360;
}
);
note = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 363, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Aacute;
unicode = 00C1;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 374, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Acircumflex;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 374, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Adieresis;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 363, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Agrave;
unicode = 00C0;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1369.525 -211 OFFCURVE",
"1322.408 -235 OFFCURVE",
"1289 -235 CURVE SMOOTH",
"1233 -235 OFFCURVE",
"1198 -204.667 OFFCURVE",
"1198 -154 CURVE SMOOTH",
"1198 -85.611 OFFCURVE",
"1260.328 -30.62 OFFCURVE",
"1316 0 CURVE",
"1353 0 LINE",
"780 1433 LINE",
"583 1433 LINE",
"10 0 LINE",
"160 0 LINE SMOOTH",
"193.333 0 OFFCURVE",
"216.667 22 OFFCURVE",
"226 46 CURVE SMOOTH",
"360 392 LINE",
"1003 392 LINE",
"1137 46 LINE SMOOTH",
"1147.667 19.333 OFFCURVE",
"1168.667 0 OFFCURVE",
"1202 0 CURVE",
"1122 -50.667 OFFCURVE",
"1063 -119.667 OFFCURVE",
"1063 -197 CURVE SMOOTH",
"1063 -285 OFFCURVE",
"1134.667 -342 OFFCURVE",
"1252 -342 CURVE SMOOTH",
"1320 -342 OFFCURVE",
"1386 -320.667 OFFCURVE",
"1426 -290 CURVE",
"1398 -224 LINE SMOOTH",
"1395.333 -217.333 OFFCURVE",
"1389.333 -211 OFFCURVE",
"1380 -211 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"639 1114 LINE SMOOTH",
"652.333 1148.667 OFFCURVE",
"666.333 1195.333 OFFCURVE",
"681 1250 CURVE",
"695 1196 OFFCURVE",
"709.333 1151 OFFCURVE",
"724 1115 CURVE SMOOTH",
"949 532 LINE",
"414 532 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 41 40 36 34 27 26 25 24 23 21 18 17 14 13 8 6 0 39 1 39 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
44 1 8 5 4 1 1 0 2 30 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 7 9 2 0 0 1 1 0 36 0 1 1 16 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
44 1 8 5 4 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 0 7 7 1 1 0 36 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
44 1 8 5 4 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 7 0 1 7 1 1 0 37 0 5 5 11 31 6 4 2 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
44 1 8 5 4 1 1 7 2 30 0 5 8 5 52 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 7 0 1 7 1 1 0 37 6 4 2 2 2 15 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
44 1 8 5 4 1 1 7 2 30 0 5 8 5 52 6 4 2 2 3 0 3 2 0 50 9 1 0 7 3 0 7 48 0 8 0 3 2 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
44 1 8 5 4 1 1 7 2 30 0 5 8 5 52 0 6 3 4 3 6 4 50 0 4 2 3 4 2 48 0 2 0 3 2 0 48 9 1 0 7 3 0 7 48 0 8 0 3 6 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1360;
}
);
note = Aogonek;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.case;
transform = "{1, 0, 0, 1, 371, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Aring;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 374, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1360;
}
);
note = Atilde;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"-24 0 LINE",
"124 0 LINE SMOOTH",
"158.667 0 OFFCURVE",
"183.333 18.333 OFFCURVE",
"198 45 CURVE SMOOTH",
"377 392 LINE",
"933 392 LINE",
"982 0 LINE",
"1754 0 LINE",
"1754 158 LINE",
"1145 158 LINE",
"1084 647 LINE",
"1624 647 LINE",
"1624 799 LINE",
"1065 799 LINE",
"1005 1275 LINE",
"1754 1275 LINE",
"1754 1433 LINE",
"733 1433 LINE"
);
},
{
closed = 1;
nodes = (
"766 1144 LINE",
"784.667 1185.333 OFFCURVE",
"805 1230.333 OFFCURVE",
"821 1285 CURVE",
"915 532 LINE",
"450 532 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
20 19 18 16 13 12 11 10 9 8 7 6 5 4 3 2 1 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
21 1 1 0 1 30 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 1 1 0 0 0 36 0 0 0 11 31 0 4 4 5 1 0 36 7 1 5 5 12 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
21 1 1 0 1 30 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 4 5 1 0 36 7 1 5 5 15 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 1 1 0 1 30 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 5 5 4 0 0 35 0 4 4 5 1 0 36 7 1 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
21 1 1 0 1 30 0 7 4 5 4 7 5 50 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 7 5 4 0 0 35 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1858;
}
);
note = AE;
unicode = 00C6;
},
{
glyphname = B;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"681 0 LINE SMOOTH",
"841 0 OFFCURVE",
"966.5 41 OFFCURVE",
"1052.5 113 CURVE SMOOTH",
"1138.5 185 OFFCURVE",
"1184 286.667 OFFCURVE",
"1184 408 CURVE SMOOTH",
"1184 586.667 OFFCURVE",
"1076.333 695.667 OFFCURVE",
"867 737 CURVE",
"957.667 765 OFFCURVE",
"1024.833 810 OFFCURVE",
"1069.5 866 CURVE SMOOTH",
"1114.167 922 OFFCURVE",
"1136 988.333 OFFCURVE",
"1136 1059 CURVE SMOOTH",
"1136 1175 OFFCURVE",
"1097.5 1269 OFFCURVE",
"1015.5 1333 CURVE SMOOTH",
"933.5 1397 OFFCURVE",
"807 1433 OFFCURVE",
"631 1433 CURVE SMOOTH",
"174 1433 LINE",
"174 0 LINE"
);
},
{
closed = 1;
nodes = (
"677 653 LINE SMOOTH",
"889 653 OFFCURVE",
"993 561 OFFCURVE",
"993 413 CURVE SMOOTH",
"993 337 OFFCURVE",
"969.833 272.5 OFFCURVE",
"918.5 226.5 CURVE SMOOTH",
"867.167 180.5 OFFCURVE",
"788.667 154 OFFCURVE",
"678 154 CURVE SMOOTH",
"368 154 LINE",
"368 653 LINE"
);
},
{
closed = 1;
nodes = (
"368 1280 LINE",
"631 1280 LINE SMOOTH",
"844.333 1280 OFFCURVE",
"943 1204 OFFCURVE",
"943 1036 CURVE SMOOTH",
"943 964 OFFCURVE",
"918.167 901.667 OFFCURVE",
"865.5 859 CURVE SMOOTH",
"812.833 816.333 OFFCURVE",
"733.333 791 OFFCURVE",
"624 791 CURVE SMOOTH",
"368 791 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
21 21 0 0 42 40 34 32 21 31 21 30 24 22 0 20 0 19 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 4 1 30 0 4 7 1 3 2 4 3 1 0 38 0 5 5 0 1 0 36 0 0 0 11 31 0 2 2 1 1 0 36 6 1 1 1 12 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 2 1 1 0 36 6 1 1 1 15 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 6 1 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1294;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1173.333 296 OFFCURVE",
"1162.333 291 OFFCURVE",
"1151 281 CURVE SMOOTH",
"1045.825 186.896 OFFCURVE",
"949.527 151 OFFCURVE",
"785 151 CURVE SMOOTH",
"645 151 OFFCURVE",
"520.167 202.833 OFFCURVE",
"431.5 299.5 CURVE SMOOTH",
"342.833 396.167 OFFCURVE",
"288 537.333 OFFCURVE",
"288 716 CURVE SMOOTH",
"288 889.333 OFFCURVE",
"342 1031.667 OFFCURVE",
"434 1129 CURVE SMOOTH",
"526 1226.333 OFFCURVE",
"655.667 1281 OFFCURVE",
"809 1281 CURVE SMOOTH",
"851.667 1281 OFFCURVE",
"889.333 1277.833 OFFCURVE",
"922 1271.5 CURVE SMOOTH",
"987.333 1258.833 OFFCURVE",
"1036 1239.333 OFFCURVE",
"1072 1218 CURVE SMOOTH",
"1111.784 1194.424 OFFCURVE",
"1158.574 1155 OFFCURVE",
"1181 1155 CURVE SMOOTH",
"1203.667 1155 OFFCURVE",
"1213.667 1164.667 OFFCURVE",
"1223 1178 CURVE SMOOTH",
"1286 1267 LINE",
"1167.333 1379 OFFCURVE",
"1020.667 1449 OFFCURVE",
"810 1449 CURVE SMOOTH",
"596.667 1449 OFFCURVE",
"416.667 1374.333 OFFCURVE",
"290 1245 CURVE SMOOTH",
"163.333 1115.667 OFFCURVE",
"90 932 OFFCURVE",
"90 716 CURVE SMOOTH",
"90 500 OFFCURVE",
"158.333 316.167 OFFCURVE",
"277 187.5 CURVE SMOOTH",
"395.667 58.833 OFFCURVE",
"566.333 -16 OFFCURVE",
"773 -16 CURVE SMOOTH",
"1009 -16 OFFCURVE",
"1171.667 64 OFFCURVE",
"1289 200 CURVE",
"1213 283 LINE",
"1204.333 291.667 OFFCURVE",
"1194.667 296 OFFCURVE",
"1184 296 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 41 39 31 29 24 22 17 15 7 5 0 46 1 46 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
19 1 3 4 3 1 5 0 2 30 0 3 4 0 4 3 0 50 6 1 0 5 4 0 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
19 1 3 4 3 1 5 0 2 30 0 3 4 0 4 3 0 50 6 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 5 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
19 1 3 4 3 1 5 0 2 30 0 3 4 0 4 3 0 50 6 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 1 1 5 1 0 35 0 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1370;
}
);
note = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 489, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1370;
}
);
note = Cacute;
unicode = 0106;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"631.667 -247 OFFCURVE",
"624 -253 OFFCURVE",
"620 -265 CURVE SMOOTH",
"603 -320 LINE",
"644.333 -338.667 OFFCURVE",
"694.333 -351 OFFCURVE",
"749 -351 CURVE SMOOTH",
"868.58 -351 OFFCURVE",
"966 -303.305 OFFCURVE",
"966 -213 CURVE SMOOTH",
"966 -141 OFFCURVE",
"915 -96.667 OFFCURVE",
"795 -70 CURVE",
"811 -15 LINE",
"1027 -7 OFFCURVE",
"1178.333 70.667 OFFCURVE",
"1289 200 CURVE",
"1213 283 LINE",
"1204.333 291.667 OFFCURVE",
"1194.667 296 OFFCURVE",
"1184 296 CURVE SMOOTH",
"1173.333 296 OFFCURVE",
"1162.333 291 OFFCURVE",
"1151 281 CURVE SMOOTH",
"1045.825 186.896 OFFCURVE",
"949.527 151 OFFCURVE",
"785 151 CURVE SMOOTH",
"645 151 OFFCURVE",
"520.167 202.833 OFFCURVE",
"431.5 299.5 CURVE SMOOTH",
"342.833 396.167 OFFCURVE",
"288 537.333 OFFCURVE",
"288 716 CURVE SMOOTH",
"288 889.333 OFFCURVE",
"342 1031.667 OFFCURVE",
"434 1129 CURVE SMOOTH",
"526 1226.333 OFFCURVE",
"655.667 1281 OFFCURVE",
"809 1281 CURVE SMOOTH",
"851.667 1281 OFFCURVE",
"889.333 1277.833 OFFCURVE",
"922 1271.5 CURVE SMOOTH",
"987.333 1258.833 OFFCURVE",
"1036 1239.333 OFFCURVE",
"1072 1218 CURVE SMOOTH",
"1111.784 1194.424 OFFCURVE",
"1158.574 1155 OFFCURVE",
"1181 1155 CURVE SMOOTH",
"1203.667 1155 OFFCURVE",
"1213.667 1164.667 OFFCURVE",
"1223 1178 CURVE SMOOTH",
"1286 1267 LINE",
"1167.333 1379 OFFCURVE",
"1020.667 1449 OFFCURVE",
"810 1449 CURVE SMOOTH",
"596.667 1449 OFFCURVE",
"416.667 1374.333 OFFCURVE",
"290 1245 CURVE SMOOTH",
"163.333 1115.667 OFFCURVE",
"90 932 OFFCURVE",
"90 716 CURVE SMOOTH",
"90 512 OFFCURVE",
"149.5 338.833 OFFCURVE",
"255.5 211.5 CURVE SMOOTH",
"361.5 84.167 OFFCURVE",
"514.667 3 OFFCURVE",
"700 -13 CURVE",
"664 -131 LINE",
"753.328 -142.754 OFFCURVE",
"825 -157.177 OFFCURVE",
"825 -211 CURVE SMOOTH",
"825 -245.667 OFFCURVE",
"796 -270 OFFCURVE",
"740 -270 CURVE SMOOTH",
"707.037 -270 OFFCURVE",
"655.748 -247 OFFCURVE",
"643 -247 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 71 69 61 60 56 54 49 47 39 37 32 30 25 23 6 4 0 75 1 75 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 18 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 82 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 31 0 1 1 8 1 0 36 0 8 8 16 8 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 1 0 8 1 8 1 0 37 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 2 0 4 3 2 4 1 0 38 0 1 0 8 1 8 1 0 37 0 5 5 7 1 0 36 0 7 7 21 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 87 values pushed */
27 1 3 4 58 1 5 6 62 14 13 3 0 7 73 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 2 0 4 3 2 4 1 0 38 0 5 0 7 0 5 7 1 0 38 0 1 8 8 1 1 0 35 0 1 1 8 1 0 36 0 8 1 8 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1370;
}
);
note = Ccedilla;
unicode = 00C7;
},
{
glyphname = D;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1416 930.667 OFFCURVE",
"1345 1109.5 OFFCURVE",
"1221 1235.5 CURVE SMOOTH",
"1097 1361.5 OFFCURVE",
"920.667 1433 OFFCURVE",
"710 1433 CURVE SMOOTH",
"174 1433 LINE",
"174 0 LINE",
"710 0 LINE SMOOTH",
"920.667 0 OFFCURVE",
"1097 71.667 OFFCURVE",
"1221 197 CURVE SMOOTH",
"1345 322.333 OFFCURVE",
"1416 501.333 OFFCURVE",
"1416 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1217 540 OFFCURVE",
"1167 399.833 OFFCURVE",
"1079 304.5 CURVE SMOOTH",
"991 209.167 OFFCURVE",
"863.333 157 OFFCURVE",
"710 157 CURVE SMOOTH",
"369 157 LINE",
"369 1276 LINE",
"710 1276 LINE SMOOTH",
"863.333 1276 OFFCURVE",
"991 1224 OFFCURVE",
"1079 1128 CURVE SMOOTH",
"1167 1032 OFFCURVE",
"1217 892 OFFCURVE",
"1217 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 20 19 17 9 7 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 11 31 0 3 3 0 1 0 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 3 0 1 0 36 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1506;
}
);
note = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"50 666 LINE",
"247 666 LINE",
"247 0 LINE",
"782 0 LINE SMOOTH",
"992.667 0 OFFCURVE",
"1170 71.667 OFFCURVE",
"1294 197 CURVE SMOOTH",
"1418 322.333 OFFCURVE",
"1489 501.333 OFFCURVE",
"1489 716 CURVE SMOOTH",
"1489 930.667 OFFCURVE",
"1418 1109.5 OFFCURVE",
"1294 1235.5 CURVE SMOOTH",
"1170 1361.5 OFFCURVE",
"992.667 1433 OFFCURVE",
"782 1433 CURVE SMOOTH",
"247 1433 LINE",
"247 780 LINE",
"50 780 LINE"
);
},
{
closed = 1;
nodes = (
"1290 540 OFFCURVE",
"1240 399.833 OFFCURVE",
"1152 304.5 CURVE SMOOTH",
"1064 209.167 OFFCURVE",
"936.667 157 OFFCURVE",
"782 157 CURVE SMOOTH",
"441 157 LINE",
"441 666 LINE",
"822 666 LINE",
"822 780 LINE",
"441 780 LINE",
"441 1276 LINE",
"782 1276 LINE SMOOTH",
"936.667 1276 OFFCURVE",
"1064 1224 OFFCURVE",
"1152 1128 CURVE SMOOTH",
"1240 1032 OFFCURVE",
"1290 892 OFFCURVE",
"1290 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
30 28 27 26 25 24 23 21 16 15 14 12 4 2 1 0 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
5 1 0 6 1 3 7 0 3 0 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 7 7 2 1 0 36 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 7 2 1 0 36 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 1 0 4 0 1 4 1 0 38 0 5 0 6 3 5 6 0 0 38 0 0 0 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1578;
}
);
note = Eth;
unicode = 00D0;
},
{
glyphname = E;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"174 1433 LINE",
"174 0 LINE",
"1057 0 LINE",
"1057 158 LINE",
"369 158 LINE",
"369 647 LINE",
"926 647 LINE",
"926 799 LINE",
"369 799 LINE",
"369 1275 LINE",
"1057 1275 LINE",
"1057 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 5 0 0 36 6 1 5 5 11 31 0 3 3 4 0 0 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
6 1 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 4 0 0 36 0 4 4 15 4 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
6 1 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1162;
}
);
note = E;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 311, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1162;
}
);
note = Eacute;
unicode = 00C9;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 322, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1162;
}
);
note = Ecircumflex;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 322, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1162;
}
);
note = Edieresis;
unicode = 00CB;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 311, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1162;
}
);
note = Egrave;
unicode = 00C8;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1019.525 -211 OFFCURVE",
"972.408 -235 OFFCURVE",
"939 -235 CURVE SMOOTH",
"883 -235 OFFCURVE",
"848 -204.667 OFFCURVE",
"848 -154 CURVE SMOOTH",
"848 -85.611 OFFCURVE",
"910.328 -30.62 OFFCURVE",
"966 0 CURVE",
"1057 0 LINE",
"1057 158 LINE",
"369 158 LINE",
"369 647 LINE",
"926 647 LINE",
"926 799 LINE",
"369 799 LINE",
"369 1275 LINE",
"1057 1275 LINE",
"1057 1433 LINE",
"174 1433 LINE",
"174 0 LINE",
"852 0 LINE",
"772 -50.667 OFFCURVE",
"713 -119.667 OFFCURVE",
"713 -197 CURVE SMOOTH",
"713 -285 OFFCURVE",
"784.667 -342 OFFCURVE",
"902 -342 CURVE SMOOTH",
"970 -342 OFFCURVE",
"1036 -320.667 OFFCURVE",
"1076 -290 CURVE",
"1048 -224 LINE SMOOTH",
"1045.333 -217.333 OFFCURVE",
"1039.333 -211 OFFCURVE",
"1030 -211 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 35 33 26 25 24 23 22 21 20 19 18 17 16 15 14 13 8 6 0 38 1 38 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
4 1 1 0 1 30 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 9 10 2 0 0 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
4 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 0 9 9 1 1 0 36 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
4 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 5 0 6 7 5 6 0 0 38 0 9 0 1 9 1 1 0 37 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
4 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 9 0 1 9 1 1 0 37 0 7 7 2 0 0 36 8 1 2 2 15 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
4 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 8 1 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
4 1 1 9 1 30 0 8 7 2 2 8 42 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 0 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1188;
}
);
note = Eogonek;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"174 1433 LINE",
"174 0 LINE",
"369 0 LINE",
"369 616 LINE",
"957 616 LINE",
"957 774 LINE",
"369 774 LINE",
"369 1275 LINE",
"1057 1275 LINE",
"1057 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 9 0 9 8 7 6 5 4 3 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 4 0 0 36 5 1 4 4 11 31 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
5 1 4 0 0 1 4 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 3 2 3 53 5 1 4 0 0 1 4 0 0 0 38 0 1 2 2 1 0 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1132;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"658.333 141 OFFCURVE",
"528.333 194.333 OFFCURVE",
"435 293 CURVE SMOOTH",
"341.667 391.667 OFFCURVE",
"288 534.667 OFFCURVE",
"288 716 CURVE SMOOTH",
"288 889.333 OFFCURVE",
"339 1030.5 OFFCURVE",
"431 1128.5 CURVE SMOOTH",
"523 1226.5 OFFCURVE",
"655.667 1281 OFFCURVE",
"817 1281 CURVE SMOOTH",
"927.667 1281 OFFCURVE",
"1006.167 1261.167 OFFCURVE",
"1065.5 1236.5 CURVE SMOOTH",
"1112.02 1217.16 OFFCURVE",
"1169.152 1179.595 OFFCURVE",
"1197 1164 CURVE SMOOTH",
"1209.667 1156.667 OFFCURVE",
"1221.333 1153 OFFCURVE",
"1232 1153 CURVE SMOOTH",
"1250 1153 OFFCURVE",
"1264.667 1162 OFFCURVE",
"1276 1180 CURVE SMOOTH",
"1331 1268 LINE",
"1269.667 1324 OFFCURVE",
"1199.833 1369.167 OFFCURVE",
"1116.5 1400.5 CURVE SMOOTH",
"1033.167 1431.833 OFFCURVE",
"936.333 1449 OFFCURVE",
"823 1449 CURVE SMOOTH",
"599 1449 OFFCURVE",
"415.833 1375.167 OFFCURVE",
"288.5 1246.5 CURVE SMOOTH",
"161.167 1117.833 OFFCURVE",
"90 934.667 OFFCURVE",
"90 716 CURVE SMOOTH",
"90 500 OFFCURVE",
"163.667 316.167 OFFCURVE",
"289 187.5 CURVE SMOOTH",
"414.333 58.833 OFFCURVE",
"591 -16 OFFCURVE",
"799 -16 CURVE SMOOTH",
"917.667 -16 OFFCURVE",
"1017.833 -3.5 OFFCURVE",
"1106.5 22.5 CURVE SMOOTH",
"1195.167 48.5 OFFCURVE",
"1272 87 OFFCURVE",
"1344 139 CURVE",
"1344 689 LINE",
"904 689 LINE",
"904 579 LINE SMOOTH",
"904 557.667 OFFCURVE",
"920.667 541 OFFCURVE",
"946 541 CURVE SMOOTH",
"1168 541 LINE",
"1168 225 LINE",
"1062.11 169.268 OFFCURVE",
"959.672 141 OFFCURVE",
"813 141 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 44 42 37 35 29 27 19 17 12 11 8 6 0 52 1 52 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
33 1 5 6 5 1 0 1 13 1 3 0 3 30 0 5 6 2 6 5 2 50 0 2 0 1 0 2 1 1 0 38 0 6 6 4 1 0 36 0 4 4 17 31 7 1 0 0 3 1 0 36 0 3 3 18 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
33 1 5 6 5 1 0 1 13 1 3 0 3 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 0 3 1 0 36 0 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
33 1 5 6 5 1 0 1 13 1 3 0 3 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 3 3 0 1 0 35 7 1 0 0 3 1 0 36 0 3 0 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1468;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1336 1433 LINE",
"1141 1433 LINE",
"1141 794 LINE",
"369 794 LINE",
"369 1433 LINE",
"174 1433 LINE",
"174 0 LINE",
"369 0 LINE",
"369 652 LINE",
"1141 652 LINE",
"1141 0 LINE",
"1336 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 4 0 1 0 4 1 0 0 38 5 1 3 3 11 31 2 1 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 4 0 1 0 4 1 0 0 38 5 1 3 3 0 0 0 36 2 1 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
5 1 3 4 0 3 0 0 35 0 4 0 1 0 4 1 0 0 38 5 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 4 0 5 0 0 35 0 4 0 1 2 4 1 0 0 38 0 3 0 2 0 3 2 0 0 38 0 5 5 0 0 0 36 0 0 5 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"404 1433 LINE",
"210 1433 LINE",
"210 0 LINE",
"404 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 0 0 36 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = I;
unicode = 0049;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, -8, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 614;
}
);
note = Iacute;
unicode = 00CD;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 3, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 614;
}
);
note = Icircumflex;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 2, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 614;
}
);
note = Idieresis;
unicode = 00CF;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, -8, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 614;
}
);
note = Igrave;
unicode = 00CC;
},
{
glyphname = J;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"713 1433 LINE",
"520 1433 LINE",
"520 491 LINE SMOOTH",
"520 371 OFFCURVE",
"494.833 284 OFFCURVE",
"447.5 228 CURVE SMOOTH",
"400.167 172 OFFCURVE",
"331 146 OFFCURVE",
"243 146 CURVE SMOOTH",
"209.667 146 OFFCURVE",
"183 149 OFFCURVE",
"163 155 CURVE SMOOTH",
"143 161 OFFCURVE",
"127 164 OFFCURVE",
"115 164 CURVE SMOOTH",
"87 164 OFFCURVE",
"73.667 148.667 OFFCURVE",
"71 126 CURVE SMOOTH",
"67 88.667 OFFCURVE",
"62.667 50.667 OFFCURVE",
"60 12 CURVE",
"130 -6.667 OFFCURVE",
"197.333 -16 OFFCURVE",
"262 -16 CURVE SMOOTH",
"407.333 -16 OFFCURVE",
"519.833 32.167 OFFCURVE",
"596.5 119.5 CURVE SMOOTH",
"673.167 206.833 OFFCURVE",
"713 335 OFFCURVE",
"713 495 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
23 22 17 15 14 12 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
7 1 0 1 1 30 0 3 3 11 31 2 1 1 1 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
7 1 0 2 1 30 0 1 3 2 3 1 2 50 0 3 3 11 31 0 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
7 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 2 0 1 0 36 0 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
7 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 888;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"387 1433 LINE",
"194 1433 LINE",
"194 0 LINE",
"387 0 LINE",
"387 656 LINE",
"475 656 LINE SMOOTH",
"535.144 656 OFFCURVE",
"555.516 644.346 OFFCURVE",
"587 610 CURVE SMOOTH",
"1082 41 LINE SMOOTH",
"1106.137 13.846 OFFCURVE",
"1123.228 0 OFFCURVE",
"1170 0 CURVE SMOOTH",
"1338 0 LINE",
"768 679 LINE SMOOTH",
"737.333 715 OFFCURVE",
"712.333 739 OFFCURVE",
"675 751 CURVE",
"703 764.333 OFFCURVE",
"726 785.333 OFFCURVE",
"754 816 CURVE SMOOTH",
"1300 1433 LINE",
"1135 1433 LINE SMOOTH",
"1092.333 1433 OFFCURVE",
"1069.333 1420.333 OFFCURVE",
"1040 1387 CURVE SMOOTH",
"563 847 LINE SMOOTH",
"536.333 816.333 OFFCURVE",
"510.667 805 OFFCURVE",
"460 805 CURVE SMOOTH",
"387 805 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
34 33 32 31 30 28 19 17 9 7 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 5 1 1 1 11 31 4 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 5 1 1 1 2 1 0 36 4 1 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
13 1 3 0 1 30 5 1 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 5 1 1 1 2 1 0 36 4 1 2 1 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
13 1 3 0 1 30 0 1 5 2 1 1 0 35 0 0 0 3 4 0 3 1 0 38 0 5 0 4 2 5 4 0 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1362;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"368 1433 LINE",
"174 1433 LINE",
"174 0 LINE",
"988 0 LINE",
"988 163 LINE",
"368 163 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 2 52 0 0 0 1 0 2 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1028;
}
);
note = L;
unicode = 004C;
},
{
glyphname = Lslash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"425 1433 LINE",
"231 1433 LINE",
"231 717 LINE",
"69 631 LINE SMOOTH",
"52.333 622.333 OFFCURVE",
"44 609.333 OFFCURVE",
"44 592 CURVE SMOOTH",
"44 459 LINE",
"231 554 LINE",
"231 0 LINE",
"1045 0 LINE",
"1045 163 LINE",
"425 163 LINE",
"425 641 LINE",
"782 829 LINE SMOOTH",
"800 838.333 OFFCURVE",
"809 852.667 OFFCURVE",
"809 872 CURVE SMOOTH",
"809 1001 LINE",
"425 805 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 16 9 8 7 6 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
15 11 10 5 1 0 6 0 2 1 30 0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
15 11 10 5 1 0 6 0 2 1 30 0 2 0 2 52 0 0 0 1 0 2 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
15 11 10 5 1 0 6 0 2 1 30 0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1086;
}
);
note = Lslash;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"879 518 LINE",
"384 1400 LINE SMOOTH",
"366.667 1430.667 OFFCURVE",
"351.667 1433 OFFCURVE",
"317 1433 CURVE SMOOTH",
"174 1433 LINE",
"174 0 LINE",
"344 0 LINE",
"344 1053 LINE SMOOTH",
"344 1081 OFFCURVE",
"342 1115.333 OFFCURVE",
"338 1150 CURVE",
"840 251 LINE SMOOTH",
"856.667 221 OFFCURVE",
"880 206 OFFCURVE",
"910 206 CURVE SMOOTH",
"938 206 LINE SMOOTH",
"968 206 OFFCURVE",
"991.333 221 OFFCURVE",
"1008 251 CURVE SMOOTH",
"1499 1147 LINE",
"1496.333 1113.667 OFFCURVE",
"1495 1081 OFFCURVE",
"1495 1053 CURVE SMOOTH",
"1495 0 LINE",
"1665 0 LINE",
"1665 1433 LINE",
"1522 1433 LINE SMOOTH",
"1487.333 1433 OFFCURVE",
"1472.333 1430.667 OFFCURVE",
"1455 1400 CURVE SMOOTH",
"970 519 LINE SMOOTH",
"951.333 484.333 OFFCURVE",
"937.333 451.333 OFFCURVE",
"924 414 CURVE",
"910.667 450 OFFCURVE",
"897.667 486 OFFCURVE",
"879 518 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
32 30 29 28 22 19 13 12 11 9 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
3 1 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 0 11 31 3 1 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 0 1 0 0 36 3 1 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
3 1 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 2 1 0 1 0 35 4 1 0 0 1 0 0 36 3 1 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
3 1 2 4 1 30 0 2 4 3 4 2 3 50 0 0 4 1 0 1 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1840;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"274 1433 LINE",
"174 1433 LINE",
"174 0 LINE",
"344 0 LINE",
"344 1021 LINE SMOOTH",
"344 1047.667 OFFCURVE",
"342.667 1080.667 OFFCURVE",
"340 1114 CURVE",
"1169 35 LINE SMOOTH",
"1189 9.667 OFFCURVE",
"1207.333 0 OFFCURVE",
"1238 0 CURVE SMOOTH",
"1336 0 LINE",
"1336 1433 LINE",
"1166 1433 LINE",
"1166 418 LINE SMOOTH",
"1166 387.333 OFFCURVE",
"1167 354.667 OFFCURVE",
"1171 320 CURVE",
"341 1400 LINE SMOOTH",
"319.667 1426.667 OFFCURVE",
"308.667 1433 OFFCURVE",
"274 1433 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
22 21 20 19 12 10 9 8 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
4 1 2 0 0 11 31 3 1 2 2 12 2 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
4 1 2 0 0 2 1 0 36 3 1 2 2 15 2 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
4 1 2 0 2 2 0 0 0 35 4 1 2 0 0 2 1 0 36 3 1 2 0 2 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 4 0 40 0 1 4 2 1 0 0 35 0 4 0 3 2 4 3 0 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
note = N;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 464, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1512;
}
);
note = Nacute;
unicode = 0143;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 474, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1512;
}
);
note = Ntilde;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1505 930.667 OFFCURVE",
"1434 1113.5 OFFCURVE",
"1310 1243.5 CURVE SMOOTH",
"1186 1373.5 OFFCURVE",
"1008.667 1449 OFFCURVE",
"798 1449 CURVE SMOOTH",
"587.333 1449 OFFCURVE",
"411 1373.5 OFFCURVE",
"287 1243.5 CURVE SMOOTH",
"163 1113.5 OFFCURVE",
"92 930.667 OFFCURVE",
"92 716 CURVE SMOOTH",
"92 501.333 OFFCURVE",
"163 318.333 OFFCURVE",
"287 189 CURVE SMOOTH",
"411 59.667 OFFCURVE",
"587.333 -15 OFFCURVE",
"798 -15 CURVE SMOOTH",
"1008.667 -15 OFFCURVE",
"1186 59.667 OFFCURVE",
"1310 189 CURVE SMOOTH",
"1434 318.333 OFFCURVE",
"1505 501.333 OFFCURVE",
"1505 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1306 540 OFFCURVE",
"1256 399.167 OFFCURVE",
"1168 302.5 CURVE SMOOTH",
"1080 205.833 OFFCURVE",
"952.667 153 OFFCURVE",
"798 153 CURVE SMOOTH",
"644.667 153 OFFCURVE",
"517.167 205.833 OFFCURVE",
"428.5 302.5 CURVE SMOOTH",
"339.833 399.167 OFFCURVE",
"290 540 OFFCURVE",
"290 716 CURVE SMOOTH",
"290 892 OFFCURVE",
"339.833 1033.833 OFFCURVE",
"428.5 1130.5 CURVE SMOOTH",
"517.167 1227.167 OFFCURVE",
"644.667 1281 OFFCURVE",
"798 1281 CURVE SMOOTH",
"952.667 1281 OFFCURVE",
"1080 1227.167 OFFCURVE",
"1168 1130.5 CURVE SMOOTH",
"1256 1033.833 OFFCURVE",
"1306 892 OFFCURVE",
"1306 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 3 0 1 0 36 0 0 0 21 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1596;
}
);
note = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 483, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1596;
}
);
note = Oacute;
unicode = 00D3;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 494, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1596;
}
);
note = Ocircumflex;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 494, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1596;
}
);
note = Odieresis;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 483, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1596;
}
);
note = Ograve;
unicode = 00D2;
},
{
glyphname = Oslash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1505 944 OFFCURVE",
"1427.333 1132.333 OFFCURVE",
"1290 1263 CURVE",
"1462 1498 LINE",
"1362 1498 LINE SMOOTH",
"1319.333 1498 OFFCURVE",
"1304.667 1484 OFFCURVE",
"1278 1448 CURVE SMOOTH",
"1196 1337 LINE",
"1085.333 1409 OFFCURVE",
"951.333 1449 OFFCURVE",
"798 1449 CURVE SMOOTH",
"587.333 1449 OFFCURVE",
"411 1373.5 OFFCURVE",
"287 1243.5 CURVE SMOOTH",
"163 1113.5 OFFCURVE",
"92 930.667 OFFCURVE",
"92 716 CURVE SMOOTH",
"92 477.333 OFFCURVE",
"177.667 281.667 OFFCURVE",
"327 151 CURVE",
"136 -109 LINE",
"214 -109 LINE SMOOTH",
"252.667 -109 OFFCURVE",
"293.667 -92.667 OFFCURVE",
"323 -54 CURVE SMOOTH",
"423 82 LINE",
"528.333 18 OFFCURVE",
"654 -15 OFFCURVE",
"798 -15 CURVE SMOOTH",
"1008.667 -15 OFFCURVE",
"1186 59.667 OFFCURVE",
"1310 189 CURVE SMOOTH",
"1434 318.333 OFFCURVE",
"1505 501.333 OFFCURVE",
"1505 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"290 892 OFFCURVE",
"339.833 1033.833 OFFCURVE",
"428.5 1130.5 CURVE SMOOTH",
"517.167 1227.167 OFFCURVE",
"644.667 1281 OFFCURVE",
"798 1281 CURVE SMOOTH",
"914 1281 OFFCURVE",
"1013 1252 OFFCURVE",
"1093 1196 CURVE",
"434 297 LINE",
"342 394.333 OFFCURVE",
"290 536 OFFCURVE",
"290 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1306 540 OFFCURVE",
"1256 399.167 OFFCURVE",
"1168 302.5 CURVE SMOOTH",
"1080 205.833 OFFCURVE",
"952.667 153 OFFCURVE",
"798 153 CURVE SMOOTH",
"694 153 OFFCURVE",
"603.333 176.333 OFFCURVE",
"526 223 CURVE",
"1181 1115 LINE",
"1261 1019 OFFCURVE",
"1306 884 OFFCURVE",
"1306 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
53 51 42 40 30 28 23 21 13 11 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
25 1 4 2 50 49 38 37 31 5 5 4 14 8 2 0 5 3 30 0 1 0 1 53 0 3 3 13 31 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
25 1 4 2 50 49 38 37 31 5 5 4 14 8 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
25 1 4 2 50 49 38 37 31 5 5 4 14 8 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 5 0 1 0 36 0 0 0 21 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
25 1 4 2 50 49 38 37 31 5 5 4 14 8 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 0 36 0 0 5 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1596;
}
);
note = Oslash;
unicode = 00D8;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 494, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1596;
}
);
note = Otilde;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1227 1433 LINE",
"1227 1193 LINE",
"1115 1354.333 OFFCURVE",
"942.667 1449 OFFCURVE",
"728 1449 CURVE SMOOTH",
"538.667 1449 OFFCURVE",
"380 1373.5 OFFCURVE",
"268 1243.5 CURVE SMOOTH",
"156 1113.5 OFFCURVE",
"92 930.667 OFFCURVE",
"92 716 CURVE SMOOTH",
"92 501.333 OFFCURVE",
"156 318.167 OFFCURVE",
"268 189.5 CURVE SMOOTH",
"380 60.833 OFFCURVE",
"538.667 -14 OFFCURVE",
"728 -14 CURVE SMOOTH",
"942.667 -14 OFFCURVE",
"1115 80 OFFCURVE",
"1227 240 CURVE",
"1227 0 LINE",
"2087 0 LINE",
"2087 158 LINE",
"1399 158 LINE",
"1399 647 LINE",
"1956 647 LINE",
"1956 799 LINE",
"1399 799 LINE",
"1399 1275 LINE",
"2087 1275 LINE",
"2087 1433 LINE"
);
},
{
closed = 1;
nodes = (
"1204 540 OFFCURVE",
"1159.833 397.5 OFFCURVE",
"1080.5 299.5 CURVE SMOOTH",
"1001.167 201.5 OFFCURVE",
"886.667 148 OFFCURVE",
"748 148 CURVE SMOOTH",
"609.333 148 OFFCURVE",
"495 201.5 OFFCURVE",
"415 299.5 CURVE SMOOTH",
"335 397.5 OFFCURVE",
"290 540 OFFCURVE",
"290 716 CURVE SMOOTH",
"290 892 OFFCURVE",
"335 1034.333 OFFCURVE",
"415 1133 CURVE SMOOTH",
"495 1231.667 OFFCURVE",
"609.333 1286 OFFCURVE",
"748 1286 CURVE SMOOTH",
"886.667 1286 OFFCURVE",
"1001.167 1231.667 OFFCURVE",
"1080.5 1133 CURVE SMOOTH",
"1159.833 1034.333 OFFCURVE",
"1204 892 OFFCURVE",
"1204 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
0 0 45 43 35 33 0 28 0 28 25 23 15 13 10 9 8 7 6 5 4 3 2 1 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
27 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 10 7 2 6 6 17 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
27 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 0 6 6 17 31 8 1 0 0 7 0 0 36 10 1 7 7 11 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
44 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 0 6 6 17 31 8 1 0 0 7 0 0 36 10 1 7 7 11 31 9 1 3 3 4 0 0 36 0 4 4 12 31 9 1 3 3 5 1 0 36 0 5 5 21 5 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
48 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
27 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 9 1 3 3 4 0 0 36 0 4 4 12 31 9 1 3 3 5 1 0 36 0 5 5 21 5 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
27 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 0 3 3 4 0 0 36 0 4 4 12 31 0 9 9 5 1 0 36 0 5 5 21 5 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
27 1 1 0 11 1 3 2 2 30 0 6 0 8 0 6 8 1 0 38 10 1 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 4 0 0 36 0 4 4 15 31 0 9 9 5 1 0 36 0 5 5 21 5 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
27 1 1 0 11 1 3 2 2 30 0 6 0 8 0 6 8 1 0 38 10 1 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 9 4 5 9 1 0 35 0 3 0 4 5 3 4 0 0 38 0 9 9 5 1 0 36 0 5 9 5 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2192;
}
);
note = OE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"617 536 LINE SMOOTH",
"789 536 OFFCURVE",
"923.5 583 OFFCURVE",
"1013.5 663 CURVE SMOOTH",
"1103.5 743 OFFCURVE",
"1151 855.667 OFFCURVE",
"1151 989 CURVE SMOOTH",
"1151 1123.667 OFFCURVE",
"1108 1234.667 OFFCURVE",
"1020 1312 CURVE SMOOTH",
"932 1389.333 OFFCURVE",
"798.333 1433 OFFCURVE",
"617 1433 CURVE SMOOTH",
"194 1433 LINE",
"194 0 LINE",
"387 0 LINE",
"387 536 LINE"
);
},
{
closed = 1;
nodes = (
"387 1280 LINE",
"617 1280 LINE SMOOTH",
"845 1280 OFFCURVE",
"957 1171.667 OFFCURVE",
"957 989 CURVE SMOOTH",
"957 901 OFFCURVE",
"927.333 826.167 OFFCURVE",
"870 773.5 CURVE SMOOTH",
"812.667 720.833 OFFCURVE",
"727.667 690 OFFCURVE",
"617 690 CURVE SMOOTH",
"387 690 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 25 23 17 15 0 14 0 13 5 3 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 3 5 1 2 0 3 2 1 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 0 4 3 1 4 1 0 38 0 3 5 1 2 0 3 2 1 0 38 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 2 0 53 0 1 0 4 3 1 4 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 5 1 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1222;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"617 272 LINE SMOOTH",
"789 272 OFFCURVE",
"923.5 319 OFFCURVE",
"1013.5 399 CURVE SMOOTH",
"1103.5 479 OFFCURVE",
"1151 591.667 OFFCURVE",
"1151 725 CURVE SMOOTH",
"1151 859.667 OFFCURVE",
"1108 970.667 OFFCURVE",
"1020 1048 CURVE SMOOTH",
"932 1125.333 OFFCURVE",
"798.333 1169 OFFCURVE",
"617 1169 CURVE SMOOTH",
"387 1169 LINE",
"387 1433 LINE",
"194 1433 LINE",
"194 0 LINE",
"387 0 LINE",
"387 272 LINE"
);
},
{
closed = 1;
nodes = (
"387 1016 LINE",
"617 1016 LINE SMOOTH",
"845 1016 OFFCURVE",
"957 907.667 OFFCURVE",
"957 725 CURVE SMOOTH",
"957 637 OFFCURVE",
"927.333 562.167 OFFCURVE",
"870 509.5 CURVE SMOOTH",
"812.667 456.833 OFFCURVE",
"727.667 426 OFFCURVE",
"617 426 CURVE SMOOTH",
"387 426 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 27 25 19 17 0 16 0 15 7 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 5 4 2 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
0 2 0 5 4 2 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 0 1 1 0 0 0 36 0 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 1 2 0 1 0 0 35 0 2 0 5 4 2 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 0 1 1 0 0 0 36 0 0 1 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1222;
}
);
note = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1505 930.667 OFFCURVE",
"1434 1113.5 OFFCURVE",
"1310 1243.5 CURVE SMOOTH",
"1186 1373.5 OFFCURVE",
"1008.667 1449 OFFCURVE",
"798 1449 CURVE SMOOTH",
"587.333 1449 OFFCURVE",
"411 1373.5 OFFCURVE",
"287 1243.5 CURVE SMOOTH",
"163 1113.5 OFFCURVE",
"92 930.667 OFFCURVE",
"92 716 CURVE SMOOTH",
"92 501.333 OFFCURVE",
"163 318.333 OFFCURVE",
"287 189 CURVE SMOOTH",
"411 59.667 OFFCURVE",
"587.333 -15 OFFCURVE",
"798 -15 CURVE SMOOTH",
"887.333 -15 OFFCURVE",
"969 -1 OFFCURVE",
"1045 23 CURVE",
"1297 -251 LINE SMOOTH",
"1327.667 -284.333 OFFCURVE",
"1364 -296 OFFCURVE",
"1412 -296 CURVE SMOOTH",
"1572 -296 LINE",
"1204 101 LINE",
"1297.333 163.667 OFFCURVE",
"1373 249.833 OFFCURVE",
"1425 354.5 CURVE SMOOTH",
"1477 459.167 OFFCURVE",
"1505 581.333 OFFCURVE",
"1505 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1306 540 OFFCURVE",
"1256 399.167 OFFCURVE",
"1168 302.5 CURVE SMOOTH",
"1080 205.833 OFFCURVE",
"952.667 153 OFFCURVE",
"798 153 CURVE SMOOTH",
"644.667 153 OFFCURVE",
"517.167 205.833 OFFCURVE",
"428.5 302.5 CURVE SMOOTH",
"339.833 399.167 OFFCURVE",
"290 540 OFFCURVE",
"290 716 CURVE SMOOTH",
"290 892 OFFCURVE",
"339.833 1033.833 OFFCURVE",
"428.5 1130.5 CURVE SMOOTH",
"517.167 1227.167 OFFCURVE",
"644.667 1281 OFFCURVE",
"798 1281 CURVE SMOOTH",
"952.667 1281 OFFCURVE",
"1080 1227.167 OFFCURVE",
"1168 1130.5 CURVE SMOOTH",
"1256 1033.833 OFFCURVE",
"1306 892 OFFCURVE",
"1306 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
45 43 35 33 25 23 15 13 8 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 4 1 1 0 36 0 1 1 21 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1596;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"534 598 LINE SMOOTH",
"587.333 598 OFFCURVE",
"608.333 585 OFFCURVE",
"631 553 CURVE SMOOTH",
"1003 41 LINE",
"1019.667 13.667 OFFCURVE",
"1045.667 0 OFFCURVE",
"1081 0 CURVE SMOOTH",
"1253 0 LINE",
"835 569 LINE SMOOTH",
"816.333 595.667 OFFCURVE",
"795 616 OFFCURVE",
"771 630 CURVE",
"881.667 655.333 OFFCURVE",
"969.833 705.5 OFFCURVE",
"1030.5 775.5 CURVE SMOOTH",
"1091.167 845.5 OFFCURVE",
"1124 934.667 OFFCURVE",
"1124 1036 CURVE SMOOTH",
"1124 1157.333 OFFCURVE",
"1083.5 1256.667 OFFCURVE",
"997.5 1326 CURVE SMOOTH",
"911.5 1395.333 OFFCURVE",
"780.333 1433 OFFCURVE",
"599 1433 CURVE SMOOTH",
"194 1433 LINE",
"194 0 LINE",
"387 0 LINE",
"387 598 LINE"
);
},
{
closed = 1;
nodes = (
"387 1280 LINE",
"599 1280 LINE SMOOTH",
"821.667 1280 OFFCURVE",
"935 1192.667 OFFCURVE",
"935 1022 CURVE SMOOTH",
"935 938 OFFCURVE",
"905.5 867.5 OFFCURVE",
"847.5 817.5 CURVE SMOOTH",
"789.5 767.5 OFFCURVE",
"703.333 739 OFFCURVE",
"590 739 CURVE SMOOTH",
"387 739 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 35 33 27 25 0 24 0 23 19 17 5 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
14 1 3 4 1 30 0 4 6 1 3 0 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 11 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 4 1 30 0 1 0 5 4 1 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 2 1 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
14 1 3 4 1 30 2 1 0 3 0 53 0 1 0 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
14 1 3 4 1 30 0 2 3 0 3 2 0 50 0 0 0 51 0 1 0 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1288;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"955 1301 LINE",
"856.333 1397 OFFCURVE",
"723 1449 OFFCURVE",
"563 1449 CURVE SMOOTH",
"420.333 1449 OFFCURVE",
"309.667 1401.333 OFFCURVE",
"235 1328 CURVE SMOOTH",
"160.333 1254.667 OFFCURVE",
"120 1156.333 OFFCURVE",
"120 1055 CURVE SMOOTH",
"120 928.333 OFFCURVE",
"163 845.333 OFFCURVE",
"227 788 CURVE SMOOTH",
"291 730.667 OFFCURVE",
"376.5 697.833 OFFCURVE",
"462.5 670.5 CURVE SMOOTH",
"537.218 646.752 OFFCURVE",
"640.073 616.791 OFFCURVE",
"698 583 CURVE SMOOTH",
"762 545.667 OFFCURVE",
"805 493.667 OFFCURVE",
"805 407 CURVE SMOOTH",
"805 328.333 OFFCURVE",
"777.5 263.5 OFFCURVE",
"727.5 217.5 CURVE SMOOTH",
"677.5 171.5 OFFCURVE",
"605 145 OFFCURVE",
"513 145 CURVE SMOOTH",
"402.333 145 OFFCURVE",
"328.5 181 OFFCURVE",
"274.5 217 CURVE SMOOTH",
"232.356 245.096 OFFCURVE",
"184.779 289 OFFCURVE",
"159 289 CURVE SMOOTH",
"140.333 289 OFFCURVE",
"124.667 277.667 OFFCURVE",
"114 263 CURVE",
"58 171 LINE",
"166 56.333 OFFCURVE",
"321.667 -16 OFFCURVE",
"507 -16 CURVE SMOOTH",
"659 -16 OFFCURVE",
"779.5 33.667 OFFCURVE",
"861.5 115 CURVE SMOOTH",
"943.5 196.333 OFFCURVE",
"987 309.667 OFFCURVE",
"987 435 CURVE SMOOTH",
"987 553.667 OFFCURVE",
"944.167 632 OFFCURVE",
"879.5 688 CURVE SMOOTH",
"814.833 744 OFFCURVE",
"729.5 777.667 OFFCURVE",
"643.5 807 CURVE SMOOTH",
"569.983 832.076 OFFCURVE",
"464.984 864.813 OFFCURVE",
"407.5 898 CURVE SMOOTH",
"342.833 935.333 OFFCURVE",
"300 985 OFFCURVE",
"300 1065 CURVE SMOOTH",
"300 1197.331 OFFCURVE",
"401.753 1288 OFFCURVE",
"566 1288 CURVE SMOOTH",
"658 1288 OFFCURVE",
"720.5 1260.833 OFFCURVE",
"766.5 1233.5 CURVE SMOOTH",
"801.764 1212.546 OFFCURVE",
"842.348 1179 OFFCURVE",
"863 1179 CURVE SMOOTH",
"884.333 1179 OFFCURVE",
"896 1189 OFFCURVE",
"908 1209 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
59 57 40 38 35 33 28 26 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
61 1 1 5 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 17 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
61 1 1 5 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 4 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
61 1 1 5 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1060;
}
);
note = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 262, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1096;
}
);
note = Sacute;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 272, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1060;
}
);
note = Scaron;
unicode = 0160;
},
{
glyphname = T;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"28 1433 LINE",
"28 1270 LINE",
"493 1270 LINE",
"493 0 LINE",
"687 0 LINE",
"687 1270 LINE",
"1150 1270 LINE",
"1150 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 7 0 7 6 5 4 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
2 1 0 0 3 0 0 36 4 1 3 3 11 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
4 1 3 2 1 0 1 3 0 0 0 38 0 1 1 15 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 1 53 4 1 3 0 0 3 0 0 35 4 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 3 0 0 2 42 0 1 0 1 53 4 1 3 2 0 3 0 2 35 4 1 3 3 0 0 0 36 0 0 3 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1180;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"612.333 154 OFFCURVE",
"517.167 197 OFFCURVE",
"452.5 269 CURVE SMOOTH",
"387.833 341 OFFCURVE",
"353 443 OFFCURVE",
"353 563 CURVE SMOOTH",
"353 1433 LINE",
"160 1433 LINE",
"160 562 LINE SMOOTH",
"160 396.667 OFFCURVE",
"214.333 251.833 OFFCURVE",
"313 148.5 CURVE SMOOTH",
"411.667 45.167 OFFCURVE",
"555 -17 OFFCURVE",
"731 -17 CURVE SMOOTH",
"907 -17 OFFCURVE",
"1050.5 45.167 OFFCURVE",
"1148.5 148.5 CURVE SMOOTH",
"1246.5 251.833 OFFCURVE",
"1301 396.667 OFFCURVE",
"1301 562 CURVE SMOOTH",
"1301 1433 LINE",
"1108 1433 LINE",
"1108 562 LINE SMOOTH",
"1108 442 OFFCURVE",
"1073.167 340 OFFCURVE",
"1008.5 268 CURVE SMOOTH",
"943.833 196 OFFCURVE",
"849.667 154 OFFCURVE",
"731 154 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 20 19 14 12 7 6 0 25 1 25 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 1 11 31 4 1 0 0 2 1 0 36 0 2 2 18 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 0 1 52 4 1 0 0 2 1 0 36 0 2 2 21 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 0 1 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 1 52 0 3 0 3 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1460;
}
);
note = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 413, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1460;
}
);
note = Uacute;
unicode = 00DA;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1460;
}
);
note = Ucircumflex;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 424, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1460;
}
);
note = Udieresis;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 413, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1460;
}
);
note = Ugrave;
unicode = 00D9;
},
{
glyphname = V;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"592 0 LINE",
"767 0 LINE",
"1351 1433 LINE",
"1195 1433 LINE SMOOTH",
"1161.667 1433 OFFCURVE",
"1138.333 1409.667 OFFCURVE",
"1129 1387 CURVE SMOOTH",
"726 376 LINE SMOOTH",
"707.333 330.667 OFFCURVE",
"694 276.333 OFFCURVE",
"682 219 CURVE",
"667.333 276.333 OFFCURVE",
"652.667 330.667 OFFCURVE",
"634 376 CURVE SMOOTH",
"229 1387 LINE SMOOTH",
"218.333 1413.667 OFFCURVE",
"197.667 1433 OFFCURVE",
"163 1433 CURVE SMOOTH",
"8 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 11 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1360;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"461 0 LINE",
"635 0 LINE",
"1000 1093 LINE SMOOTH",
"1003.333 1103 OFFCURVE",
"1006.5 1114.167 OFFCURVE",
"1009.5 1126.5 CURVE SMOOTH",
"1012.5 1138.833 OFFCURVE",
"1015.667 1151.667 OFFCURVE",
"1019 1165 CURVE",
"1025 1137.667 OFFCURVE",
"1031.667 1113.667 OFFCURVE",
"1039 1093 CURVE SMOOTH",
"1402 0 LINE",
"1576 0 LINE",
"2023 1433 LINE",
"1872 1433 LINE SMOOTH",
"1838.667 1433 OFFCURVE",
"1813.667 1411 OFFCURVE",
"1807 1387 CURVE SMOOTH",
"1510 391 LINE SMOOTH",
"1504.667 373.667 OFFCURVE",
"1500.333 355 OFFCURVE",
"1497 335 CURVE SMOOTH",
"1493.667 315 OFFCURVE",
"1490 294 OFFCURVE",
"1486 272 CURVE",
"1476.667 316.667 OFFCURVE",
"1466 356.333 OFFCURVE",
"1454 391 CURVE SMOOTH",
"1119 1387 LINE SMOOTH",
"1109.667 1413.667 OFFCURVE",
"1087.667 1433 OFFCURVE",
"1053 1433 CURVE SMOOTH",
"997 1433 LINE SMOOTH",
"963.667 1433 OFFCURVE",
"939 1409.667 OFFCURVE",
"931 1387 CURVE SMOOTH",
"594 391 LINE SMOOTH",
"582 356.333 OFFCURVE",
"573.333 313.333 OFFCURVE",
"564 268 CURVE",
"556 313.333 OFFCURVE",
"547.667 355 OFFCURVE",
"537 391 CURVE SMOOTH",
"241 1387 LINE SMOOTH",
"233 1413.667 OFFCURVE",
"209.667 1433 OFFCURVE",
"175 1433 CURVE SMOOTH",
"14 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
40 39 32 31 30 28 17 14 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
35 22 8 3 3 0 1 30 2 1 2 0 0 11 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
35 22 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
35 22 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
35 22 8 3 4 2 1 30 0 0 1 0 52 0 1 2 1 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2038;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"14 0 LINE",
"194 0 LINE SMOOTH",
"222 0 OFFCURVE",
"235 18.333 OFFCURVE",
"247 37 CURVE SMOOTH",
"621 598 LINE",
"628.333 610.667 OFFCURVE",
"634.333 624 OFFCURVE",
"639 638 CURVE",
"1023 37 LINE",
"1033.667 18.333 OFFCURVE",
"1048.667 0 OFFCURVE",
"1078 0 CURVE SMOOTH",
"1270 0 LINE",
"779 745 LINE",
"1254 1433 LINE",
"1069 1433 LINE SMOOTH",
"1049 1433 OFFCURVE",
"1036 1420.667 OFFCURVE",
"1024 1402 CURVE SMOOTH",
"671 878 LINE",
"661.667 861.333 OFFCURVE",
"654.667 846 OFFCURVE",
"650 832 CURVE",
"276 1406 LINE SMOOTH",
"265.333 1423.333 OFFCURVE",
"255 1433 OFFCURVE",
"227 1433 CURVE SMOOTH",
"34 1433 LINE",
"507 736 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
27 25 17 15 13 11 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
14 0 2 2 0 1 30 1 1 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
14 0 2 2 0 1 30 1 1 0 0 2 1 0 36 3 1 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
14 0 2 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
14 0 2 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1286;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1252 1433 LINE",
"1080 1433 LINE SMOOTH",
"1046.667 1433 OFFCURVE",
"1027 1409.333 OFFCURVE",
"1015 1388 CURVE SMOOTH",
"688 831 LINE SMOOTH",
"661.333 785.667 OFFCURVE",
"645.667 745.333 OFFCURVE",
"631 704 CURVE",
"616.333 744 OFFCURVE",
"599.667 784.333 OFFCURVE",
"573 831 CURVE SMOOTH",
"245 1388 LINE SMOOTH",
"230.333 1413.333 OFFCURVE",
"212.667 1433 OFFCURVE",
"178 1433 CURVE SMOOTH",
"8 1433 LINE",
"533 570 LINE",
"533 0 LINE",
"726 0 LINE",
"726 570 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
20 18 6 4 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
12 3 0 3 0 1 1 30 2 1 1 1 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
12 3 0 3 0 1 1 30 2 1 1 0 1 52 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
12 3 0 3 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
12 3 0 3 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1258;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 313, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1258;
}
);
note = Yacute;
unicode = 00DD;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 324, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1258;
}
);
note = Ydieresis;
unicode = 0178;
},
{
glyphname = Z;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"124 1433 LINE",
"124 1275 LINE",
"917 1275 LINE",
"105 133 LINE SMOOTH",
"92.333 115 OFFCURVE",
"86 96 OFFCURVE",
"86 76 CURVE SMOOTH",
"86 0 LINE",
"1158 0 LINE",
"1158 158 LINE",
"340 158 LINE",
"1151 1297 LINE SMOOTH",
"1165 1317 OFFCURVE",
"1172 1338.333 OFFCURVE",
"1172 1361 CURVE SMOOTH",
"1172 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 13 0 13 12 11 7 6 5 4 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 0 0 36 4 1 3 3 11 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 0 1 0 0 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1248;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 334, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1248;
}
);
note = Zacute;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 344, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1248;
}
);
note = Zcaron;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent.case;
transform = "{1, 0, 0, 1, 344, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1248;
}
);
note = Zdotaccent;
unicode = 017B;
},
{
glyphname = a;
lastChange = "2020-02-16 18:56:30 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"890 648 LINE SMOOTH",
"890 761.333 OFFCURVE",
"859 858.333 OFFCURVE",
"799 925 CURVE SMOOTH",
"739 991.667 OFFCURVE",
"650.333 1031 OFFCURVE",
"537 1031 CURVE SMOOTH",
"379.667 1031 OFFCURVE",
"253 978 OFFCURVE",
"141 870 CURVE",
"173 813 LINE SMOOTH",
"183.667 794.333 OFFCURVE",
"202 780 OFFCURVE",
"226 780 CURVE SMOOTH",
"254.338 780 OFFCURVE",
"291.691 810.282 OFFCURVE",
"328.5 833.5 CURVE SMOOTH",
"371.833 860.833 OFFCURVE",
"428.333 887 OFFCURVE",
"515 887 CURVE SMOOTH",
"647 887 OFFCURVE",
"715 805.333 OFFCURVE",
"715 648 CURVE SMOOTH",
"715 569 LINE",
"485.667 563.667 OFFCURVE",
"329.5 524.333 OFFCURVE",
"231.5 467 CURVE SMOOTH",
"133.5 409.667 OFFCURVE",
"92 333 OFFCURVE",
"92 253 CURVE SMOOTH",
"92 161 OFFCURVE",
"124.333 94 OFFCURVE",
"175 50 CURVE SMOOTH",
"225.667 6 OFFCURVE",
"296.333 -16 OFFCURVE",
"375 -16 CURVE SMOOTH",
"529.518 -16 OFFCURVE",
"618.422 37.38 OFFCURVE",
"728 136 CURVE",
"748 42 LINE SMOOTH",
"754.667 7.333 OFFCURVE",
"776.333 0 OFFCURVE",
"811 0 CURVE SMOOTH",
"890 0 LINE"
);
},
{
closed = 1;
nodes = (
"332 109 OFFCURVE",
"263 156.349 OFFCURVE",
"263 261 CURVE SMOOTH",
"263 317 OFFCURVE",
"294 362.667 OFFCURVE",
"366 396 CURVE SMOOTH",
"438 429.333 OFFCURVE",
"551 450.667 OFFCURVE",
"715 456 CURVE",
"715 245 LINE",
"635.434 160.13 OFFCURVE",
"547.413 109 OFFCURVE",
"428 109 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
43 42 49 48 42 57 43 57 37 35 30 28 25 23 20 19 11 9 2 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
33 1 4 3 47 5 2 6 7 2 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 20 31 8 1 6 6 0 1 0 36 1 1 0 0 12 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
33 1 4 3 47 5 2 6 7 2 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 20 31 0 0 0 12 31 8 1 6 6 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
33 1 4 3 47 5 2 6 7 2 30 0 4 3 2 3 4 2 50 0 5 0 3 4 5 3 1 0 38 0 2 0 7 6 2 7 1 0 38 0 0 0 15 31 8 1 6 6 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
33 1 4 3 47 5 2 6 7 2 30 0 4 3 2 3 4 2 50 0 0 6 1 6 0 1 50 0 5 0 3 4 5 3 1 0 38 0 2 0 7 6 2 7 1 0 38 8 1 6 0 1 6 1 0 35 8 1 6 6 1 1 0 36 0 1 6 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1014;
}
);
note = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = aacute;
unicode = 00E1;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = acircumflex;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = adieresis;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = agrave;
unicode = 00E0;
},
{
glyphname = aogonek;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"890 648 LINE SMOOTH",
"890 761.333 OFFCURVE",
"859 858.333 OFFCURVE",
"799 925 CURVE SMOOTH",
"739 991.667 OFFCURVE",
"650.333 1031 OFFCURVE",
"537 1031 CURVE SMOOTH",
"379.667 1031 OFFCURVE",
"253 978 OFFCURVE",
"141 870 CURVE",
"173 813 LINE",
"185 794.333 OFFCURVE",
"202 780 OFFCURVE",
"226 780 CURVE SMOOTH",
"254.338 780 OFFCURVE",
"291.691 810.282 OFFCURVE",
"328.5 833.5 CURVE SMOOTH",
"371.833 860.833 OFFCURVE",
"428.333 887 OFFCURVE",
"515 887 CURVE SMOOTH",
"647 887 OFFCURVE",
"715 805.333 OFFCURVE",
"715 648 CURVE SMOOTH",
"715 569 LINE",
"485.667 563.667 OFFCURVE",
"329.5 524.333 OFFCURVE",
"231.5 467 CURVE SMOOTH",
"133.5 409.667 OFFCURVE",
"92 333 OFFCURVE",
"92 253 CURVE SMOOTH",
"92 161 OFFCURVE",
"124.333 94 OFFCURVE",
"175 50 CURVE SMOOTH",
"225.667 6 OFFCURVE",
"296.333 -16 OFFCURVE",
"375 -16 CURVE SMOOTH",
"529.518 -16 OFFCURVE",
"618.422 37.38 OFFCURVE",
"728 136 CURVE",
"748 42 LINE",
"754.667 20.667 OFFCURVE",
"766 7.667 OFFCURVE",
"782 3 CURVE",
"702.664 -45.625 OFFCURVE",
"637 -117.097 OFFCURVE",
"637 -197 CURVE SMOOTH",
"637 -285 OFFCURVE",
"708.667 -342 OFFCURVE",
"826 -342 CURVE SMOOTH",
"894 -342 OFFCURVE",
"960 -320.667 OFFCURVE",
"1000 -290 CURVE",
"972 -224 LINE SMOOTH",
"969.333 -217.333 OFFCURVE",
"963.333 -211 OFFCURVE",
"954 -211 CURVE SMOOTH",
"943.525 -211 OFFCURVE",
"896.408 -235 OFFCURVE",
"863 -235 CURVE SMOOTH",
"807 -235 OFFCURVE",
"772 -204.667 OFFCURVE",
"772 -154 CURVE SMOOTH",
"772 -85.611 OFFCURVE",
"834.328 -30.62 OFFCURVE",
"890 0 CURVE"
);
},
{
closed = 1;
nodes = (
"332 109 OFFCURVE",
"263 156.349 OFFCURVE",
"263 261 CURVE SMOOTH",
"263 317 OFFCURVE",
"294 362.667 OFFCURVE",
"366 396 CURVE SMOOTH",
"438 429.333 OFFCURVE",
"551 450.667 OFFCURVE",
"715 456 CURVE",
"715 245 LINE",
"635.434 160.13 OFFCURVE",
"547.413 109 OFFCURVE",
"428 109 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
69 68 75 74 68 83 69 83 63 61 56 54 51 49 46 45 37 35 21 19 14 12 9 7 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
59 1 6 5 73 31 2 8 9 28 0 2 3 8 17 1 2 0 4 30 0 6 5 4 5 6 4 50 0 4 0 9 8 4 9 1 0 38 0 5 5 7 1 0 36 0 7 7 20 31 10 1 8 8 3 1 0 36 0 3 3 18 31 1 1 0 0 2 1 0 36 0 2 2 16 2 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
59 1 6 5 73 31 2 8 9 28 0 2 3 8 17 1 2 0 4 30 0 6 5 4 5 6 4 50 0 1 3 0 3 1 0 50 0 4 0 9 8 4 9 1 0 38 0 5 5 7 1 0 36 0 7 7 20 31 10 1 8 8 3 1 0 36 0 3 3 18 31 0 0 0 2 1 0 36 0 2 2 16 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 82 values pushed */
59 1 6 5 73 31 2 8 9 28 0 2 3 8 17 1 2 0 4 30 0 6 5 4 5 6 4 50 0 1 3 0 3 1 0 50 0 4 0 9 8 4 9 1 0 38 0 0 0 2 0 2 1 0 37 0 5 5 7 1 0 36 0 7 7 20 31 10 1 8 8 3 1 0 36 0 3 3 18 3 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
59 1 6 5 73 31 2 8 9 28 0 2 3 8 17 1 2 0 4 30 0 6 5 4 5 6 4 50 0 1 3 0 3 1 0 50 0 7 0 5 6 7 5 1 0 38 0 4 0 9 8 4 9 1 0 38 0 0 0 2 0 2 1 0 37 10 1 8 8 3 1 0 36 0 3 3 21 3 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 90 values pushed */
59 1 6 5 73 31 2 8 9 28 0 2 3 8 17 1 2 0 4 30 0 6 5 4 5 6 4 50 0 1 3 0 3 1 0 50 0 7 0 5 6 7 5 1 0 38 0 4 0 9 8 4 9 1 0 38 10 1 8 0 3 1 8 3 1 0 38 0 0 2 2 0 1 0 35 0 0 0 2 1 0 36 0 2 0 2 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1014;
}
);
note = aogonek;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 222, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = aring;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1014;
}
);
note = atilde;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1004.667 1029 OFFCURVE",
"890 955.333 OFFCURVE",
"818 838 CURVE",
"774 959.333 OFFCURVE",
"679 1031 OFFCURVE",
"519 1031 CURVE SMOOTH",
"368.333 1031 OFFCURVE",
"253 978 OFFCURVE",
"141 870 CURVE",
"173 813 LINE SMOOTH",
"183.667 794.333 OFFCURVE",
"202 780 OFFCURVE",
"226 780 CURVE SMOOTH",
"254.315 780 OFFCURVE",
"291.671 812.203 OFFCURVE",
"328.5 836 CURVE SMOOTH",
"371.833 864 OFFCURVE",
"428.333 892 OFFCURVE",
"515 892 CURVE SMOOTH",
"647 892 OFFCURVE",
"715 805.333 OFFCURVE",
"715 648 CURVE SMOOTH",
"715 598 LINE",
"485.667 592.667 OFFCURVE",
"329.5 550.333 OFFCURVE",
"231.5 489 CURVE SMOOTH",
"133.5 427.667 OFFCURVE",
"92 347 OFFCURVE",
"92 267 CURVE SMOOTH",
"92 171 OFFCURVE",
"123.167 100.667 OFFCURVE",
"178.5 54 CURVE SMOOTH",
"233.833 7.333 OFFCURVE",
"311 -16 OFFCURVE",
"403 -16 CURVE SMOOTH",
"481.667 -16 OFFCURVE",
"563.333 -0.333 OFFCURVE",
"634 37 CURVE SMOOTH",
"704.667 74.333 OFFCURVE",
"765 132.333 OFFCURVE",
"801 215 CURVE",
"874.333 60.333 OFFCURVE",
"1008 -14 OFFCURVE",
"1164 -14 CURVE SMOOTH",
"1302.605 -14 OFFCURVE",
"1453.886 36.407 OFFCURVE",
"1541 142 CURVE",
"1494 203 LINE SMOOTH",
"1486 213.667 OFFCURVE",
"1474.667 220 OFFCURVE",
"1456 220 CURVE SMOOTH",
"1437.708 220 OFFCURVE",
"1401.901 190.942 OFFCURVE",
"1371.5 173 CURVE SMOOTH",
"1330.833 149 OFFCURVE",
"1272 126 OFFCURVE",
"1180 126 CURVE SMOOTH",
"1093.333 126 OFFCURVE",
"1022.833 155 OFFCURVE",
"971.5 215 CURVE SMOOTH",
"920.167 275 OFFCURVE",
"888.333 364.667 OFFCURVE",
"883 486 CURVE",
"1510 486 LINE SMOOTH",
"1543.333 486 OFFCURVE",
"1551 501.333 OFFCURVE",
"1551 556 CURVE SMOOTH",
"1551 705.333 OFFCURVE",
"1509.167 822.667 OFFCURVE",
"1440.5 904 CURVE SMOOTH",
"1371.833 985.333 OFFCURVE",
"1275.333 1029 OFFCURVE",
"1166 1029 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"715 403 LINE SMOOTH",
"715 304.333 OFFCURVE",
"685.167 231.333 OFFCURVE",
"636.5 182 CURVE SMOOTH",
"587.833 132.667 OFFCURVE",
"520 109 OFFCURVE",
"444 109 CURVE SMOOTH",
"336 109 OFFCURVE",
"263 160 OFFCURVE",
"263 276 CURVE SMOOTH",
"263 332 OFFCURVE",
"294 380.667 OFFCURVE",
"366 418 CURVE SMOOTH",
"438 455.333 OFFCURVE",
"551 479.333 OFFCURVE",
"715 486 CURVE"
);
},
{
closed = 1;
nodes = (
"1311.227 898 OFFCURVE",
"1393 767.554 OFFCURVE",
"1393 597 CURVE",
"885 597 LINE",
"894.333 690.333 OFFCURVE",
"921.5 766 OFFCURVE",
"967.5 818 CURVE SMOOTH",
"1013.5 870 OFFCURVE",
"1077.667 898 OFFCURVE",
"1159 898 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
83 82 1 0 88 87 82 92 83 92 77 75 69 68 63 61 56 54 51 49 46 45 37 35 29 27 20 18 15 13 9 7 0 67 1 67 16 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 11 1 2 2 4 1 0 36 5 1 4 4 18 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 11 1 2 2 4 1 0 36 5 1 4 4 21 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 21 31 0 11 11 4 1 0 36 5 1 4 4 21 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 97 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 1 12 12 0 1 0 36 9 14 2 0 0 20 31 0 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 21 31 0 11 11 4 1 0 36 5 1 4 4 21 4 32 12 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 89 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 15 1 12 7 0 12 1 0 35 9 14 2 0 0 7 8 0 7 1 0 38 13 1 6 10 1 1 3 6 1 1 0 38 0 2 2 4 1 0 36 5 1 4 4 21 31 0 11 11 4 1 0 36 5 1 4 4 21 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 93 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 15 1 12 7 0 12 1 0 35 9 14 2 0 0 7 8 0 7 1 0 38 13 1 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
199 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 100 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 10 2 10 3 2 50 15 1 12 7 0 12 1 0 35 9 14 2 0 0 7 8 0 7 1 0 38 0 1 10 6 1 1 0 35 13 1 6 0 10 3 6 10 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 11 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 102 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 10 2 10 3 2 50 14 1 0 15 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 0 1 10 6 1 1 0 35 13 1 6 0 10 3 6 10 1 0 38 0 11 4 5 11 1 0 35 0 2 0 4 5 2 4 1 0 38 0 11 11 5 1 0 36 0 5 11 5 1 0 33 11 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 103 values pushed */
65 59 2 8 7 31 23 2 2 3 2 30 0 8 7 13 7 8 13 50 0 3 10 2 10 3 2 50 14 1 0 15 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 0 13 0 1 10 13 1 1 0 38 0 6 0 10 3 6 10 1 0 38 0 11 4 5 11 1 0 35 0 2 0 4 5 2 4 1 0 38 0 11 11 5 1 0 36 0 5 11 5 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1632;
}
);
note = ae;
unicode = 00E6;
},
{
glyphname = b;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"267 0 LINE SMOOTH",
"292.333 0 OFFCURVE",
"307.667 12.667 OFFCURVE",
"313 38 CURVE",
"322 130 LINE",
"390 39.333 OFFCURVE",
"477.333 -14 OFFCURVE",
"608 -14 CURVE SMOOTH",
"744 -14 OFFCURVE",
"854.167 43.5 OFFCURVE",
"929.5 137.5 CURVE SMOOTH",
"1004.833 231.5 OFFCURVE",
"1046 363.667 OFFCURVE",
"1046 513 CURVE SMOOTH",
"1046 681 OFFCURVE",
"1008.667 810.167 OFFCURVE",
"942 897.5 CURVE SMOOTH",
"875.333 984.833 OFFCURVE",
"779.333 1029 OFFCURVE",
"662 1029 CURVE SMOOTH",
"522 1029 OFFCURVE",
"415 964.333 OFFCURVE",
"331 867 CURVE",
"331 1473 LINE",
"152 1473 LINE",
"152 0 LINE"
);
},
{
closed = 1;
nodes = (
"685.333 887 OFFCURVE",
"750 860.167 OFFCURVE",
"794 799.5 CURVE SMOOTH",
"838 738.833 OFFCURVE",
"862 645 OFFCURVE",
"862 513 CURVE SMOOTH",
"862 263.667 OFFCURVE",
"757.333 124 OFFCURVE",
"568 124 CURVE SMOOTH",
"472 124 OFFCURVE",
"395 156 OFFCURVE",
"331 244 CURVE",
"331 734 LINE",
"404.333 831.333 OFFCURVE",
"488 887 OFFCURVE",
"604 887 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
24 23 0 0 31 29 23 37 24 37 0 22 0 21 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
27 26 19 3 4 5 4 1 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 6 3 2 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
27 26 19 3 4 5 4 1 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 6 3 2 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
27 26 19 3 4 5 4 1 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 12 31 0 5 5 2 1 0 36 0 2 2 21 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
27 26 19 3 4 5 4 1 30 0 1 7 1 4 5 1 4 1 0 38 0 0 0 13 31 6 1 3 3 15 31 0 5 5 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
27 26 19 3 4 5 4 1 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 5 2 1 0 37 6 1 3 3 0 0 0 36 0 0 0 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
27 26 19 3 4 5 4 1 30 0 1 7 1 4 5 1 4 1 0 38 0 5 3 2 5 1 0 35 0 0 6 1 3 2 0 3 1 0 38 0 5 5 2 1 0 36 0 2 5 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1118;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"884 897 LINE",
"800 981 OFFCURVE",
"692.333 1029 OFFCURVE",
"551 1029 CURVE SMOOTH",
"397.667 1029 OFFCURVE",
"278.167 974.167 OFFCURVE",
"197.5 881.5 CURVE SMOOTH",
"116.833 788.833 OFFCURVE",
"74 657.667 OFFCURVE",
"74 507 CURVE SMOOTH",
"74 341.667 OFFCURVE",
"123 211.167 OFFCURVE",
"203 122.5 CURVE SMOOTH",
"283 33.833 OFFCURVE",
"394.333 -14 OFFCURVE",
"521 -14 CURVE SMOOTH",
"667.667 -14 OFFCURVE",
"807 34 OFFCURVE",
"895 142 CURVE",
"845 207 LINE",
"837.667 218.333 OFFCURVE",
"826.333 224 OFFCURVE",
"811 224 CURVE SMOOTH",
"789.777 224 OFFCURVE",
"758.312 193.89 OFFCURVE",
"729 174 CURVE SMOOTH",
"691.667 148.667 OFFCURVE",
"638.667 124 OFFCURVE",
"552 124 CURVE SMOOTH",
"461.333 124 OFFCURVE",
"387.667 158.833 OFFCURVE",
"337 223.5 CURVE SMOOTH",
"286.333 288.167 OFFCURVE",
"257 384.333 OFFCURVE",
"257 507 CURVE SMOOTH",
"257 624.333 OFFCURVE",
"283.167 720.333 OFFCURVE",
"334.5 787 CURVE SMOOTH",
"385.833 853.667 OFFCURVE",
"462.333 890 OFFCURVE",
"561 890 CURVE SMOOTH",
"635.667 890 OFFCURVE",
"685 870 OFFCURVE",
"721 850 CURVE SMOOTH",
"747.992 835.004 OFFCURVE",
"780.857 810 OFFCURVE",
"798 810 CURVE SMOOTH",
"818 810 OFFCURVE",
"826.333 818.333 OFFCURVE",
"837 833 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
40 38 30 28 24 22 19 17 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
42 1 1 5 26 1 2 3 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 1 1 5 1 0 36 0 5 5 20 31 0 2 2 4 1 0 36 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
42 1 1 5 26 1 2 3 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 1 1 5 1 0 36 0 5 5 20 31 0 2 2 4 1 0 36 0 4 4 21 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
42 1 1 5 26 1 2 3 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 5 0 1 0 5 1 1 0 38 0 2 2 4 1 0 36 0 4 4 21 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
42 1 1 5 26 1 2 3 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 5 0 1 0 5 1 1 0 38 0 2 4 4 2 1 0 35 0 2 2 4 1 0 36 0 4 2 4 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 934;
}
);
note = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 243, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 934;
}
);
note = cacute;
unicode = 0107;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"388.667 -247 OFFCURVE",
"381 -253 OFFCURVE",
"377 -265 CURVE SMOOTH",
"360 -320 LINE",
"401.333 -338.667 OFFCURVE",
"451.333 -351 OFFCURVE",
"506 -351 CURVE SMOOTH",
"625.58 -351 OFFCURVE",
"723 -303.305 OFFCURVE",
"723 -213 CURVE SMOOTH",
"723 -141 OFFCURVE",
"672 -96.667 OFFCURVE",
"552 -70 CURVE",
"569 -12 LINE",
"698.333 -1.333 OFFCURVE",
"816.333 46 OFFCURVE",
"895 142 CURVE",
"845 207 LINE SMOOTH",
"837 217.667 OFFCURVE",
"825.667 224 OFFCURVE",
"811 224 CURVE SMOOTH",
"789.777 224 OFFCURVE",
"758.312 193.89 OFFCURVE",
"729 174 CURVE SMOOTH",
"691.667 148.667 OFFCURVE",
"638.667 124 OFFCURVE",
"552 124 CURVE SMOOTH",
"461.333 124 OFFCURVE",
"387.667 158.833 OFFCURVE",
"337 223.5 CURVE SMOOTH",
"286.333 288.167 OFFCURVE",
"257 384.333 OFFCURVE",
"257 507 CURVE SMOOTH",
"257 624.333 OFFCURVE",
"283.167 720.333 OFFCURVE",
"334.5 787 CURVE SMOOTH",
"385.833 853.667 OFFCURVE",
"462.333 890 OFFCURVE",
"561 890 CURVE SMOOTH",
"635.667 890 OFFCURVE",
"685 870 OFFCURVE",
"721 850 CURVE SMOOTH",
"747.992 835.004 OFFCURVE",
"780.857 810 OFFCURVE",
"798 810 CURVE SMOOTH",
"818 810 OFFCURVE",
"826.333 818.333 OFFCURVE",
"837 833 CURVE SMOOTH",
"884 897 LINE",
"800 981 OFFCURVE",
"692.333 1029 OFFCURVE",
"551 1029 CURVE SMOOTH",
"397.667 1029 OFFCURVE",
"278.167 974.167 OFFCURVE",
"197.5 881.5 CURVE SMOOTH",
"116.833 788.833 OFFCURVE",
"74 657.667 OFFCURVE",
"74 507 CURVE SMOOTH",
"74 356.333 OFFCURVE",
"115 234 OFFCURVE",
"183 146 CURVE SMOOTH",
"251 58 OFFCURVE",
"347.333 4.667 OFFCURVE",
"458 -10 CURVE",
"421 -131 LINE",
"510.328 -142.754 OFFCURVE",
"582 -157.177 OFFCURVE",
"582 -211 CURVE SMOOTH",
"582 -245.667 OFFCURVE",
"553 -270 OFFCURVE",
"497 -270 CURVE SMOOTH",
"464.037 -270 OFFCURVE",
"412.748 -247 OFFCURVE",
"400 -247 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 68 66 52 50 47 45 37 35 32 30 25 23 6 4 0 72 1 72 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
27 1 4 2 55 1 5 6 59 14 13 3 0 5 70 1 7 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 0 4 4 2 1 0 36 0 2 2 20 31 1 8 2 0 0 7 1 2 36 0 7 7 16 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
27 1 4 2 55 1 5 6 59 14 13 3 0 5 70 1 7 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 4 4 2 1 0 36 0 2 2 20 31 0 1 1 7 1 2 36 0 7 7 16 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
27 1 4 2 55 1 5 6 59 14 13 3 0 5 70 1 7 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 1 0 7 1 7 1 2 37 0 4 4 2 1 0 36 0 2 2 20 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 83 values pushed */
27 1 4 2 55 1 5 6 59 14 13 3 0 5 70 1 7 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 2 0 4 3 2 4 1 0 38 0 1 7 7 1 1 0 35 0 1 1 7 1 2 36 0 7 1 7 1 2 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 934;
}
);
note = ccedilla;
unicode = 00E7;
},
{
glyphname = d;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"965 0 LINE",
"965 1473 LINE",
"787 1473 LINE",
"787 911 LINE",
"717.667 987 OFFCURVE",
"634 1031 OFFCURVE",
"510 1031 CURVE SMOOTH",
"372.667 1031 OFFCURVE",
"263.833 973.667 OFFCURVE",
"188.5 879 CURVE SMOOTH",
"113.167 784.333 OFFCURVE",
"72 652.333 OFFCURVE",
"72 503 CURVE SMOOTH",
"72 335 OFFCURVE",
"109.333 204.667 OFFCURVE",
"176 118 CURVE SMOOTH",
"242.667 31.333 OFFCURVE",
"339 -14 OFFCURVE",
"455 -14 CURVE SMOOTH",
"599 -14 OFFCURVE",
"708.333 54.667 OFFCURVE",
"795 160 CURVE",
"811 37 LINE",
"817.667 12.333 OFFCURVE",
"833.667 0 OFFCURVE",
"859 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"431.333 130 OFFCURVE",
"367 156.833 OFFCURVE",
"323 217.5 CURVE SMOOTH",
"279 278.167 OFFCURVE",
"256 371 OFFCURVE",
"256 503 CURVE SMOOTH",
"256 752.333 OFFCURVE",
"360.667 892 OFFCURVE",
"550 892 CURVE SMOOTH",
"644.667 892 OFFCURVE",
"721.667 861 OFFCURVE",
"787 773 CURVE",
"787 283 LINE",
"713.667 185.667 OFFCURVE",
"630 130 OFFCURVE",
"514 130 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
24 23 1 0 31 29 23 37 24 37 21 20 17 15 7 5 0 22 1 22 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 1 6 2 0 0 12 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 12 31 7 1 4 4 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 2 0 5 4 2 5 1 0 38 0 3 3 13 31 6 1 0 0 15 31 7 1 4 4 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 1 0 37 6 1 0 0 3 0 0 36 0 3 3 13 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 0 35 0 3 6 1 0 1 3 0 1 0 38 7 1 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1118;
}
);
note = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"450 1009 LINE",
"634 1144 LINE",
"759.333 1058.667 OFFCURVE",
"838.333 935.333 OFFCURVE",
"865 754 CURVE",
"778.333 870 OFFCURVE",
"656.333 927 OFFCURVE",
"523 927 CURVE SMOOTH",
"384.333 927 OFFCURVE",
"273.333 874 OFFCURVE",
"196 790 CURVE SMOOTH",
"118.667 706 OFFCURVE",
"76 591.333 OFFCURVE",
"76 466 CURVE SMOOTH",
"76 316.667 OFFCURVE",
"127.167 196.5 OFFCURVE",
"210.5 114.5 CURVE SMOOTH",
"293.833 32.5 OFFCURVE",
"410.333 -13 OFFCURVE",
"541 -13 CURVE SMOOTH",
"701 -13 OFFCURVE",
"823.5 46.333 OFFCURVE",
"905.5 153 CURVE SMOOTH",
"987.5 259.667 OFFCURVE",
"1029 413.333 OFFCURVE",
"1029 604 CURVE SMOOTH",
"1029 750.667 OFFCURVE",
"1001.667 873.167 OFFCURVE",
"955 976.5 CURVE SMOOTH",
"908.333 1079.833 OFFCURVE",
"841 1161.667 OFFCURVE",
"761 1227 CURVE",
"858 1294 LINE SMOOTH",
"872.667 1304.667 OFFCURVE",
"880 1317 OFFCURVE",
"880 1331 CURVE SMOOTH",
"880 1338.333 OFFCURVE",
"877.333 1346.333 OFFCURVE",
"872 1355 CURVE SMOOTH",
"837 1412 LINE",
"670 1290 LINE",
"562 1354 OFFCURVE",
"441 1392.667 OFFCURVE",
"313 1414 CURVE",
"293 1352 LINE SMOOTH",
"289.667 1342.667 OFFCURVE",
"288 1333 OFFCURVE",
"288 1323 CURVE SMOOTH",
"288 1292.333 OFFCURVE",
"307 1274.667 OFFCURVE",
"331 1268 CURVE SMOOTH",
"407 1249.333 OFFCURVE",
"474 1226.667 OFFCURVE",
"534 1200 CURVE",
"431 1128 LINE SMOOTH",
"415.667 1118 OFFCURVE",
"408 1105.667 OFFCURVE",
"408 1091 CURVE SMOOTH",
"408 1083 OFFCURVE",
"411.667 1074.333 OFFCURVE",
"417 1065 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"465 125 OFFCURVE",
"393.333 155.667 OFFCURVE",
"340 213 CURVE SMOOTH",
"286.667 270.333 OFFCURVE",
"254 356 OFFCURVE",
"254 464 CURVE SMOOTH",
"254 554.667 OFFCURVE",
"280.333 636.5 OFFCURVE",
"331 694.5 CURVE SMOOTH",
"381.667 752.5 OFFCURVE",
"457 788 OFFCURVE",
"557 788 CURVE SMOOTH",
"715.442 788 OFFCURVE",
"814.442 689.125 OFFCURVE",
"861 564 CURVE",
"857 416 OFFCURVE",
"825.5 306.167 OFFCURVE",
"771.5 233.5 CURVE SMOOTH",
"717.5 160.833 OFFCURVE",
"639.667 125 OFFCURVE",
"545 125 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
54 53 64 62 53 72 54 72 46 44 36 34 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
58 48 2 2 3 1 30 52 51 25 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 2 0 1 0 36 0 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
58 48 2 2 3 1 30 52 51 25 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 0 0 2 1 0 35 4 1 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1106;
}
);
note = eth;
unicode = 00F0;
},
{
glyphname = e;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"400.333 1029 OFFCURVE",
"281.333 974.5 OFFCURVE",
"200 884.5 CURVE SMOOTH",
"118.667 794.5 OFFCURVE",
"74 668.333 OFFCURVE",
"74 527 CURVE SMOOTH",
"74 352.333 OFFCURVE",
"124.5 216.833 OFFCURVE",
"210.5 125.5 CURVE SMOOTH",
"296.5 34.167 OFFCURVE",
"417 -14 OFFCURVE",
"557 -14 CURVE SMOOTH",
"699.733 -14 OFFCURVE",
"866.367 35.779 OFFCURVE",
"954 142 CURVE",
"904 207 LINE",
"896 218.333 OFFCURVE",
"884.667 224 OFFCURVE",
"870 224 CURVE SMOOTH",
"849.195 224 OFFCURVE",
"806.836 193.43 OFFCURVE",
"771 175 CURVE SMOOTH",
"724.333 151 OFFCURVE",
"661.333 126 OFFCURVE",
"572 126 CURVE SMOOTH",
"476 126 OFFCURVE",
"398 157.167 OFFCURVE",
"342 220.5 CURVE SMOOTH",
"286 283.833 OFFCURVE",
"252.667 378 OFFCURVE",
"250 506 CURVE",
"924 506 LINE SMOOTH",
"957.333 506 OFFCURVE",
"967 520 OFFCURVE",
"967 576 CURVE SMOOTH",
"967 720 OFFCURVE",
"922.667 833.833 OFFCURVE",
"848 910.5 CURVE SMOOTH",
"773.333 987.167 OFFCURVE",
"668.333 1029 OFFCURVE",
"547 1029 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"713.412 898 OFFCURVE",
"807 782.743 OFFCURVE",
"807 617 CURVE",
"256 617 LINE",
"280 793 OFFCURVE",
"379 898 OFFCURVE",
"551 898 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
38 37 1 0 41 40 37 45 38 45 28 26 20 18 15 13 9 7 0 36 1 36 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
22 1 2 3 1 30 0 3 1 2 1 3 2 50 0 6 0 1 3 6 1 1 0 38 8 1 5 5 0 1 0 36 7 1 0 0 20 31 0 2 2 4 1 0 36 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
22 1 2 3 1 30 0 3 1 2 1 3 2 50 0 6 0 1 3 6 1 1 0 38 8 1 5 5 0 1 0 36 7 1 0 0 20 31 0 2 2 4 1 0 36 0 4 4 21 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
22 1 2 3 1 30 0 3 1 2 1 3 2 50 7 1 0 8 1 5 6 0 5 1 0 38 0 6 0 1 3 6 1 1 0 38 0 2 2 4 1 0 36 0 4 4 21 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
22 1 2 3 1 30 0 3 1 2 1 3 2 50 7 1 0 8 1 5 6 0 5 1 0 38 0 6 0 1 3 6 1 1 0 38 0 2 4 4 2 1 0 35 0 2 2 4 1 0 36 0 4 2 4 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1048;
}
);
note = e;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 244, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1048;
}
);
note = eacute;
unicode = 00E9;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 244, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1048;
}
);
note = ecircumflex;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 244, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1048;
}
);
note = edieresis;
unicode = 00EB;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 244, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1048;
}
);
note = egrave;
unicode = 00E8;
},
{
glyphname = eogonek;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"734.525 -211 OFFCURVE",
"687.408 -235 OFFCURVE",
"654 -235 CURVE SMOOTH",
"598 -235 OFFCURVE",
"563 -204.667 OFFCURVE",
"563 -154 CURVE SMOOTH",
"563 -88.784 OFFCURVE",
"620.296 -33.087 OFFCURVE",
"675 -3 CURVE",
"784.333 15.667 OFFCURVE",
"887.333 62 OFFCURVE",
"954 142 CURVE",
"904 207 LINE",
"896 218.333 OFFCURVE",
"884.667 224 OFFCURVE",
"870 224 CURVE SMOOTH",
"849.195 224 OFFCURVE",
"806.836 193.43 OFFCURVE",
"771 175 CURVE SMOOTH",
"724.333 151 OFFCURVE",
"661.333 126 OFFCURVE",
"572 126 CURVE SMOOTH",
"476 126 OFFCURVE",
"398 157.167 OFFCURVE",
"342 220.5 CURVE SMOOTH",
"286 283.833 OFFCURVE",
"252.667 378 OFFCURVE",
"250 506 CURVE",
"924 506 LINE SMOOTH",
"957.333 506 OFFCURVE",
"967 520 OFFCURVE",
"967 576 CURVE SMOOTH",
"967 720 OFFCURVE",
"922.667 833.833 OFFCURVE",
"848 910.5 CURVE SMOOTH",
"773.333 987.167 OFFCURVE",
"668.333 1029 OFFCURVE",
"547 1029 CURVE SMOOTH",
"400.333 1029 OFFCURVE",
"281.333 974.5 OFFCURVE",
"200 884.5 CURVE SMOOTH",
"118.667 794.5 OFFCURVE",
"74 668.333 OFFCURVE",
"74 527 CURVE SMOOTH",
"74 355 OFFCURVE",
"123 221 OFFCURVE",
"207 129 CURVE SMOOTH",
"291 37 OFFCURVE",
"408.667 -11.333 OFFCURVE",
"546 -14 CURVE",
"476.667 -63.333 OFFCURVE",
"428 -126.333 OFFCURVE",
"428 -197 CURVE SMOOTH",
"428 -285 OFFCURVE",
"499.667 -342 OFFCURVE",
"617 -342 CURVE SMOOTH",
"685 -342 OFFCURVE",
"751 -320.667 OFFCURVE",
"791 -290 CURVE",
"763 -224 LINE SMOOTH",
"760.333 -217.333 OFFCURVE",
"754.333 -211 OFFCURVE",
"745 -211 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"713.412 898 OFFCURVE",
"807 782.743 OFFCURVE",
"807 617 CURVE",
"256 617 LINE",
"280 793 OFFCURVE",
"379 898 OFFCURVE",
"551 898 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
62 61 1 0 65 64 61 69 62 69 57 55 43 41 38 36 32 30 24 22 14 13 8 6 0 60 1 60 12 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
45 1 5 6 4 1 1 0 2 30 0 6 4 5 4 6 5 50 0 9 0 4 6 9 4 1 0 38 11 1 8 8 3 1 0 36 0 3 3 20 31 0 5 5 2 1 0 36 0 2 2 21 31 7 10 2 0 0 1 1 0 36 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
45 1 5 6 4 1 1 7 2 30 0 6 4 5 4 6 5 50 10 1 0 2 7 2 0 7 50 0 9 0 4 6 9 4 1 0 38 11 1 8 8 3 1 0 36 0 3 3 20 31 0 5 5 2 1 0 36 0 2 2 21 31 0 7 7 1 1 0 36 0 1 1 16 1 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
45 1 5 6 4 1 1 7 2 30 0 6 4 5 4 6 5 50 10 1 0 2 7 2 0 7 50 0 9 0 4 6 9 4 1 0 38 0 7 0 1 7 1 1 0 37 11 1 8 8 3 1 0 36 0 3 3 20 31 0 5 5 2 1 0 36 0 2 2 21 2 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
45 1 5 6 4 1 1 7 2 30 0 6 4 5 4 6 5 50 10 1 0 2 7 2 0 7 50 0 3 11 1 8 9 3 8 1 0 38 0 9 0 4 6 9 4 1 0 38 0 7 0 1 7 1 1 0 37 0 5 5 2 1 0 36 0 2 2 21 2 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 81 values pushed */
45 1 5 6 4 1 1 7 2 30 0 6 4 5 4 6 5 50 10 1 0 2 7 2 0 7 50 0 3 11 1 8 9 3 8 1 0 38 0 9 0 4 6 9 4 1 0 38 0 5 0 2 0 5 2 1 0 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1048;
}
);
note = eogonek;
unicode = 0119;
},
{
glyphname = f;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"365 0 LINE",
"365 864 LINE",
"652 864 LINE",
"652 993 LINE",
"359 993 LINE",
"359 1086 LINE SMOOTH",
"359 1247.816 OFFCURVE",
"430.467 1317 OFFCURVE",
"563 1317 CURVE SMOOTH",
"594 1317 LINE SMOOTH",
"632.667 1317 OFFCURVE",
"654.667 1318.333 OFFCURVE",
"656 1345 CURVE SMOOTH",
"660 1434 LINE",
"621.333 1447.333 OFFCURVE",
"579.333 1454 OFFCURVE",
"534 1454 CURVE SMOOTH",
"427.333 1454 OFFCURVE",
"341.167 1421.5 OFFCURVE",
"280.5 1359.5 CURVE SMOOTH",
"219.833 1297.5 OFFCURVE",
"186 1207 OFFCURVE",
"186 1091 CURVE SMOOTH",
"186 993 LINE",
"26 993 LINE",
"26 920 LINE SMOOTH",
"26 893.333 OFFCURVE",
"46 880.667 OFFCURVE",
"74 874 CURVE",
"186 861 LINE",
"186 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 30 0 30 29 28 27 26 21 18 14 12 7 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
15 1 2 1 1 1 5 4 2 30 0 2 2 1 1 0 36 0 1 1 17 31 0 4 4 0 0 0 36 3 1 0 0 14 31 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
15 1 2 1 1 1 5 4 2 30 3 1 0 0 4 5 0 4 0 0 38 0 2 2 1 1 0 36 0 1 1 17 31 6 1 5 5 12 5 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
15 1 2 1 1 1 5 4 2 30 0 1 0 2 0 1 2 1 0 38 3 1 0 0 4 5 0 4 0 0 38 6 1 5 5 15 5 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
15 1 2 1 1 1 5 4 2 30 6 1 5 4 5 53 0 1 0 2 0 1 2 1 0 38 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 0 36 0 4 0 4 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
15 1 2 1 1 1 5 4 2 30 0 0 2 3 2 0 3 50 6 1 5 4 5 53 0 1 0 2 0 1 2 1 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 674;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"375 1030 OFFCURVE",
"279 998.167 OFFCURVE",
"211 941.5 CURVE SMOOTH",
"143 884.833 OFFCURVE",
"103 802.667 OFFCURVE",
"103 704 CURVE SMOOTH",
"103 580 OFFCURVE",
"163 486 OFFCURVE",
"263 430 CURVE",
"184.136 390.568 OFFCURVE",
"134 319.609 OFFCURVE",
"134 257 CURVE SMOOTH",
"134 182.333 OFFCURVE",
"170.667 140.667 OFFCURVE",
"228 114 CURVE",
"117.333 72.667 OFFCURVE",
"50 3 OFFCURVE",
"50 -97 CURVE SMOOTH",
"50 -167.667 OFFCURVE",
"86.667 -234.667 OFFCURVE",
"160 -284 CURVE SMOOTH",
"233.333 -333.333 OFFCURVE",
"345 -365 OFFCURVE",
"493 -365 CURVE SMOOTH",
"641 -365 OFFCURVE",
"759.667 -323.833 OFFCURVE",
"841 -260.5 CURVE SMOOTH",
"922.333 -197.167 OFFCURVE",
"967 -112.667 OFFCURVE",
"967 -26 CURVE SMOOTH",
"967 155.554 OFFCURVE",
"808.472 195.675 OFFCURVE",
"627.5 208.5 CURVE SMOOTH",
"477.1 219.158 OFFCURVE",
"288 205.863 OFFCURVE",
"288 306 CURVE SMOOTH",
"288 335.333 OFFCURVE",
"310.333 367.333 OFFCURVE",
"353 394 CURVE",
"395 382.667 OFFCURVE",
"439.667 377 OFFCURVE",
"487 377 CURVE SMOOTH",
"597.667 377 OFFCURVE",
"692.167 408.667 OFFCURVE",
"759.5 466 CURVE SMOOTH",
"826.833 523.333 OFFCURVE",
"867 605.333 OFFCURVE",
"867 704 CURVE SMOOTH",
"867 757.333 OFFCURVE",
"855.667 805.667 OFFCURVE",
"833 849 CURVE",
"948 865 LINE",
"976 871 OFFCURVE",
"990 885 OFFCURVE",
"990 907 CURVE SMOOTH",
"990 973 LINE",
"715 973 LINE",
"652.333 1010.333 OFFCURVE",
"575 1030 OFFCURVE",
"487 1030 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"803 -108.333 OFFCURVE",
"774.167 -153 OFFCURVE",
"721.5 -185 CURVE SMOOTH",
"668.833 -217 OFFCURVE",
"592 -235 OFFCURVE",
"496 -235 CURVE SMOOTH",
"397.333 -235 OFFCURVE",
"325 -217.167 OFFCURVE",
"277 -188.5 CURVE SMOOTH",
"229 -159.833 OFFCURVE",
"206 -119.333 OFFCURVE",
"206 -74 CURVE SMOOTH",
"206 -2 OFFCURVE",
"258 49 OFFCURVE",
"334 85 CURVE",
"366.667 79.667 OFFCURVE",
"401 76 OFFCURVE",
"437 74 CURVE SMOOTH",
"495.65 70.742 OFFCURVE",
"589.745 66.671 OFFCURVE",
"642 60 CURVE SMOOTH",
"709.605 51.37 OFFCURVE",
"803 4.833 OFFCURVE",
"803 -55 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"349.876 495 OFFCURVE",
"267 575.268 OFFCURVE",
"267 699 CURVE SMOOTH",
"267 823 OFFCURVE",
"344.333 902 OFFCURVE",
"487 902 CURVE SMOOTH",
"631 902 OFFCURVE",
"708 823 OFFCURVE",
"708 699 CURVE SMOOTH",
"708 574.512 OFFCURVE",
"627.355 495 OFFCURVE",
"487 495 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
79 78 1 0 87 85 78 93 79 93 74 72 64 62 35 33 25 23 16 14 4 3 0 57 1 57 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
8 1 7 8 50 17 2 2 7 65 42 2 5 3 3 30 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 1 1 14 31 0 8 8 0 1 0 36 9 1 0 0 20 31 0 6 6 4 1 0 36 0 4 4 22 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
8 1 7 8 50 17 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 8 8 0 1 0 36 9 1 0 0 20 31 0 6 6 4 1 0 36 0 4 4 22 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
8 1 7 8 50 17 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 6 0 4 6 4 1 0 37 0 8 8 0 1 0 36 9 1 0 0 20 8 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
8 1 7 8 50 17 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 9 1 0 0 8 7 0 8 1 0 38 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 6 4 4 6 1 0 35 0 6 6 4 1 0 36 0 4 6 4 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1022;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 0 LINE",
"324 746 LINE",
"401.333 832.667 OFFCURVE",
"492.667 887 OFFCURVE",
"598 887 CURVE SMOOTH",
"742 887 OFFCURVE",
"811 798.333 OFFCURVE",
"811 645 CURVE SMOOTH",
"811 0 LINE",
"989 0 LINE",
"989 645 LINE SMOOTH",
"989 759.667 OFFCURVE",
"959.167 856.167 OFFCURVE",
"902.5 923.5 CURVE SMOOTH",
"845.833 990.833 OFFCURVE",
"760.667 1029 OFFCURVE",
"650 1029 CURVE SMOOTH",
"512.667 1029 OFFCURVE",
"410.667 969 OFFCURVE",
"324 877 CURVE",
"324 1473 LINE",
"146 1473 LINE",
"146 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 21 0 21 18 16 13 12 7 5 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
20 3 2 2 3 1 30 0 0 0 13 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
20 3 2 2 3 1 30 0 1 0 3 2 1 3 1 0 38 0 0 0 13 31 5 4 2 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
20 3 2 2 3 1 30 0 1 0 3 2 1 3 1 0 38 5 4 2 2 2 0 0 0 36 0 0 0 13 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
20 3 2 2 3 1 30 0 0 1 2 0 0 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 0 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
20 3 2 4 3 1 30 0 2 4 2 53 0 0 1 4 0 0 0 35 0 1 0 3 4 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"166 1013 LINE",
"166 0 LINE",
"344 0 LINE",
"344 1013 LINE"
);
},
{
closed = 1;
nodes = (
"384 1400.842 OFFCURVE",
"324.327 1459 OFFCURVE",
"256 1459 CURVE SMOOTH",
"187.36 1459 OFFCURVE",
"130 1400.452 OFFCURVE",
"130 1331 CURVE SMOOTH",
"130 1262.765 OFFCURVE",
"187.765 1205 OFFCURVE",
"256 1205 CURVE SMOOTH",
"323.535 1205 OFFCURVE",
"384 1262.798 OFFCURVE",
"384 1331 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 20 18 10 8 0 3 0 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 17 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 13 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 1 0 36 0 3 3 13 31 4 1 1 1 0 0 0 36 0 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
4 1 1 0 0 1 0 0 0 37 0 2 2 3 1 0 36 0 3 3 13 2 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 3 0 2 1 3 2 1 0 38 4 1 1 0 0 1 0 0 35 4 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 512;
}
);
note = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"166 1013 LINE",
"166 0 LINE",
"344 0 LINE",
"344 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 14 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 1 1 0 0 0 36 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 512;
}
);
note = dotlessi;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, -45, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 512;
}
);
note = iacute;
unicode = 00ED;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -46, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 512;
}
);
note = icircumflex;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -45, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 512;
}
);
note = idieresis;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, -45, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 512;
}
);
note = igrave;
unicode = 00EC;
},
{
glyphname = j;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"166 1013 LINE",
"166 -75 LINE SMOOTH",
"166 -183 OFFCURVE",
"126 -229 OFFCURVE",
"22 -229 CURVE SMOOTH",
"13.333 -229 OFFCURVE",
"6 -228.833 OFFCURVE",
"0 -228.5 CURVE SMOOTH",
"-6 -228.167 OFFCURVE",
"-11.667 -228 OFFCURVE",
"-17 -228 CURVE SMOOTH",
"-37 -228 OFFCURVE",
"-45.333 -230.667 OFFCURVE",
"-48 -248 CURVE",
"-56 -344 LINE",
"-20 -357.333 OFFCURVE",
"14 -364 OFFCURVE",
"58 -364 CURVE SMOOTH",
"159.333 -364 OFFCURVE",
"231.5 -332 OFFCURVE",
"277.5 -280 CURVE SMOOTH",
"323.5 -228 OFFCURVE",
"344 -156.333 OFFCURVE",
"344 -75 CURVE SMOOTH",
"344 1013 LINE"
);
},
{
closed = 1;
nodes = (
"384 1400.842 OFFCURVE",
"324.327 1459 OFFCURVE",
"256 1459 CURVE SMOOTH",
"187.36 1459 OFFCURVE",
"130 1400.452 OFFCURVE",
"130 1331 CURVE SMOOTH",
"130 1262.765 OFFCURVE",
"187.765 1205 OFFCURVE",
"256 1205 CURVE SMOOTH",
"323.535 1205 OFFCURVE",
"384 1262.798 OFFCURVE",
"384 1331 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 37 35 27 25 0 20 0 20 17 12 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 0 3 3 4 1 0 36 0 4 4 17 31 5 1 2 2 14 31 0 1 1 0 1 0 36 0 0 0 22 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 0 3 3 4 1 0 36 0 4 4 13 31 5 1 2 2 14 31 0 1 1 0 1 0 36 0 0 0 22 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
9 1 0 1 1 30 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 13 31 5 1 2 2 14 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 4 0 3 2 4 3 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 508;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"152 1473 LINE",
"152 0 LINE",
"331 0 LINE",
"331 484 LINE",
"381 484 LINE SMOOTH",
"421 484 OFFCURVE",
"436 478 OFFCURVE",
"456 450 CURVE",
"789 35 LINE SMOOTH",
"807.667 11 OFFCURVE",
"826.667 0 OFFCURVE",
"856 0 CURVE SMOOTH",
"1016 0 LINE",
"620 500 LINE",
"602.667 526.667 OFFCURVE",
"584 547 OFFCURVE",
"560 563 CURVE",
"582.667 576.333 OFFCURVE",
"599.333 593.333 OFFCURVE",
"618 616 CURVE",
"991 1013 LINE",
"829 1013 LINE SMOOTH",
"795.667 1013 OFFCURVE",
"779 998.333 OFFCURVE",
"759 977 CURVE SMOOTH",
"439 634 LINE SMOOTH",
"417.667 611.333 OFFCURVE",
"403.667 606 OFFCURVE",
"377 606 CURVE SMOOTH",
"331 606 LINE",
"331 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 30 0 30 29 28 27 25 20 18 10 8 3 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 6 1 5 5 13 31 0 1 1 14 31 4 1 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 6 1 5 5 13 31 0 1 1 2 1 0 36 4 1 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
14 1 3 0 1 30 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 4 1 2 2 5 0 0 36 6 1 5 5 13 5 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
14 1 3 0 1 30 6 1 5 1 2 5 0 0 35 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 4 1 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
14 1 3 0 1 30 0 1 0 2 1 1 0 35 0 0 0 3 4 0 3 1 0 38 6 1 5 0 4 2 5 4 0 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1048;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"166 1473 LINE",
"166 0 LINE",
"344 0 LINE",
"344 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 13 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 13 31 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 0 0 1 0 0 36 2 1 1 1 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 512;
}
);
note = l;
unicode = 006C;
},
{
glyphname = lslash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"231 1473 LINE",
"231 834 LINE",
"79 766 LINE SMOOTH",
"62.333 758.667 OFFCURVE",
"54 745.333 OFFCURVE",
"54 726 CURVE SMOOTH",
"54 621 LINE",
"231 697 LINE",
"231 0 LINE",
"409 0 LINE",
"409 763 LINE",
"560 830 LINE SMOOTH",
"580 839.333 OFFCURVE",
"587 852.667 OFFCURVE",
"587 874 CURVE SMOOTH",
"587 976 LINE",
"409 899 LINE",
"409 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 16 0 16 9 8 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
15 11 10 7 2 1 6 0 1 1 30 2 1 1 1 13 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
15 11 10 7 2 1 6 0 1 1 30 2 1 1 1 13 31 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
15 11 10 7 2 1 6 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 13 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
15 11 10 7 2 1 6 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 642;
}
);
note = lslash;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 0 LINE",
"324 755 LINE",
"386.667 836.333 OFFCURVE",
"462 887 OFFCURVE",
"550 887 CURVE SMOOTH",
"675.333 887 OFFCURVE",
"742 807.667 OFFCURVE",
"742 645 CURVE SMOOTH",
"742 0 LINE",
"920 0 LINE",
"920 645 LINE SMOOTH",
"920 796.009 OFFCURVE",
"1011.962 887 OFFCURVE",
"1138 887 CURVE SMOOTH",
"1270 887 OFFCURVE",
"1341 803.667 OFFCURVE",
"1341 645 CURVE SMOOTH",
"1341 0 LINE",
"1519 0 LINE",
"1519 645 LINE SMOOTH",
"1519 767.667 OFFCURVE",
"1487.5 863.667 OFFCURVE",
"1429.5 929 CURVE SMOOTH",
"1371.5 994.333 OFFCURVE",
"1287.667 1029 OFFCURVE",
"1181 1029 CURVE SMOOTH",
"1043.416 1029 OFFCURVE",
"912.59 960.975 OFFCURVE",
"858 818 CURVE",
"820.667 947.333 OFFCURVE",
"737.333 1029 OFFCURVE",
"600 1029 CURVE SMOOTH",
"477.333 1029 OFFCURVE",
"387.667 964 OFFCURVE",
"313 872 CURVE",
"300 976 LINE",
"293.333 1000.667 OFFCURVE",
"277.333 1013 OFFCURVE",
"252 1013 CURVE SMOOTH",
"146 1013 LINE",
"146 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 42 0 42 39 37 34 33 28 26 23 22 17 15 9 7 3 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
41 11 5 3 3 4 1 30 6 1 4 4 0 1 0 36 2 1 2 0 0 14 31 8 7 5 3 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
41 11 5 3 3 4 1 30 0 0 0 14 31 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
41 11 5 3 3 4 1 30 2 1 1 6 1 4 3 1 4 1 0 38 0 0 0 3 0 0 36 8 7 5 3 3 3 15 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
41 11 5 3 3 4 1 30 0 0 4 3 0 1 0 35 2 1 1 6 1 4 3 1 4 1 0 38 0 0 0 3 0 0 36 8 7 5 3 3 0 3 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
41 11 5 3 7 4 1 30 0 5 7 3 7 5 3 50 0 3 3 51 0 0 6 7 0 1 0 35 0 1 0 6 4 1 6 1 0 38 0 2 0 4 7 2 4 1 0 38 0 0 0 7 0 0 36 8 1 7 0 7 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1642;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 0 LINE",
"324 746 LINE",
"401.333 832.667 OFFCURVE",
"492.667 887 OFFCURVE",
"598 887 CURVE SMOOTH",
"742 887 OFFCURVE",
"811 798.333 OFFCURVE",
"811 645 CURVE SMOOTH",
"811 0 LINE",
"989 0 LINE",
"989 645 LINE SMOOTH",
"989 759.667 OFFCURVE",
"959.167 856.167 OFFCURVE",
"902.5 923.5 CURVE SMOOTH",
"845.833 990.833 OFFCURVE",
"760.667 1029 OFFCURVE",
"650 1029 CURVE SMOOTH",
"507.333 1029 OFFCURVE",
"402 963.333 OFFCURVE",
"314 866 CURVE",
"300 976 LINE",
"293.333 1000.667 OFFCURVE",
"277.333 1013 OFFCURVE",
"252 1013 CURVE SMOOTH",
"146 1013 LINE",
"146 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 23 0 23 20 18 15 14 9 7 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
22 5 2 2 3 1 30 0 3 3 0 1 0 36 1 1 0 0 14 31 5 4 2 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
22 5 2 2 3 1 30 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
22 5 2 2 3 1 30 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
22 5 2 2 3 1 30 0 0 3 2 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 0 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
22 5 2 4 3 1 30 0 2 4 2 53 0 0 3 4 0 1 0 35 0 1 0 3 4 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = n;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 262, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = nacute;
unicode = 0144;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 258, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = ntilde;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"408 1029 OFFCURVE",
"287 977.667 OFFCURVE",
"203 887 CURVE SMOOTH",
"119 796.333 OFFCURVE",
"72 665.667 OFFCURVE",
"72 507 CURVE SMOOTH",
"72 347 OFFCURVE",
"119 217.667 OFFCURVE",
"203 127 CURVE SMOOTH",
"287 36.333 OFFCURVE",
"408 -14 OFFCURVE",
"556 -14 CURVE SMOOTH",
"704 -14 OFFCURVE",
"825.167 36.333 OFFCURVE",
"908.5 127 CURVE SMOOTH",
"991.833 217.667 OFFCURVE",
"1038 347 OFFCURVE",
"1038 507 CURVE SMOOTH",
"1038 665.667 OFFCURVE",
"991.833 796.333 OFFCURVE",
"908.5 887 CURVE SMOOTH",
"825.167 977.667 OFFCURVE",
"704 1029 OFFCURVE",
"556 1029 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"454.667 125 OFFCURVE",
"380.5 160.833 OFFCURVE",
"330.5 225.5 CURVE SMOOTH",
"280.5 290.167 OFFCURVE",
"256 386 OFFCURVE",
"256 506 CURVE SMOOTH",
"256 626 OFFCURVE",
"280.5 722.667 OFFCURVE",
"330.5 788 CURVE SMOOTH",
"380.5 853.333 OFFCURVE",
"454.667 889 OFFCURVE",
"556 889 CURVE SMOOTH",
"756 889 OFFCURVE",
"854 747.333 OFFCURVE",
"854 506 CURVE SMOOTH",
"854 266 OFFCURVE",
"756 125 OFFCURVE",
"556 125 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 27 25 20 35 21 35 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 20 31 5 1 2 2 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 20 31 5 1 2 2 1 1 0 36 0 1 1 21 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 2 1 1 0 36 0 1 1 21 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = oacute;
unicode = 00F3;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = ocircumflex;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = odieresis;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = ograve;
unicode = 00F2;
},
{
glyphname = oslash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1069 1097 LINE",
"979 1097 LINE SMOOTH",
"936.333 1097 OFFCURVE",
"921.667 1083 OFFCURVE",
"895 1047 CURVE SMOOTH",
"827 956 LINE",
"752.333 1002.667 OFFCURVE",
"662.333 1029 OFFCURVE",
"557 1029 CURVE SMOOTH",
"409 1029 OFFCURVE",
"288 977.667 OFFCURVE",
"204 887 CURVE SMOOTH",
"120 796.333 OFFCURVE",
"73 665.667 OFFCURVE",
"73 507 CURVE SMOOTH",
"73 341.667 OFFCURVE",
"121 212 OFFCURVE",
"209 120 CURVE",
"64 -76 LINE",
"131 -76 LINE SMOOTH",
"169.667 -76 OFFCURVE",
"211.667 -60.667 OFFCURVE",
"241 -22 CURVE SMOOTH",
"296 52 LINE",
"368 9.333 OFFCURVE",
"455.667 -14 OFFCURVE",
"557 -14 CURVE SMOOTH",
"705 -14 OFFCURVE",
"826.167 36.333 OFFCURVE",
"909.5 127 CURVE SMOOTH",
"992.833 217.667 OFFCURVE",
"1039 347 OFFCURVE",
"1039 507 CURVE SMOOTH",
"1039 664.333 OFFCURVE",
"993.333 793.333 OFFCURVE",
"912 884 CURVE"
);
},
{
closed = 1;
nodes = (
"246 626 OFFCURVE",
"272.833 724.333 OFFCURVE",
"325.5 791 CURVE SMOOTH",
"378.167 857.667 OFFCURVE",
"455.667 895 OFFCURVE",
"557 895 CURVE SMOOTH",
"631 895 OFFCURVE",
"692.333 876.333 OFFCURVE",
"741 839 CURVE",
"305 249 LINE",
"265.667 313.667 OFFCURVE",
"246 399.333 OFFCURVE",
"246 506 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"486.333 120 OFFCURVE",
"427.667 136 OFFCURVE",
"381 168 CURVE",
"814 753 LINE",
"848.667 689 OFFCURVE",
"866 606.667 OFFCURVE",
"866 506 CURVE SMOOTH",
"866 386 OFFCURVE",
"839.167 289.667 OFFCURVE",
"786.5 223 CURVE SMOOTH",
"733.833 156.333 OFFCURVE",
"657 120 OFFCURVE",
"557 120 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
45 44 44 53 45 53 40 38 33 31 26 24 16 14 9 7 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
28 1 4 2 52 51 37 36 0 5 5 4 11 1 0 5 3 30 17 1 5 1 29 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 20 31 6 1 5 5 0 1 0 36 0 0 0 18 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
28 1 4 2 52 51 37 36 0 5 5 4 11 1 0 5 3 30 17 1 5 1 29 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 20 31 6 1 5 5 0 1 0 36 0 0 0 21 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
28 1 4 2 52 51 37 36 0 5 5 4 11 1 0 5 3 30 17 1 5 1 29 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 6 1 5 5 0 1 0 36 0 0 0 21 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 68 values pushed */
28 1 4 2 52 51 37 36 0 5 5 4 11 1 0 5 3 30 17 1 5 1 29 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 6 1 5 0 0 5 1 0 35 6 1 5 5 0 1 0 36 0 0 5 0 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = oslash;
unicode = 00F8;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 251, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = otilde;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1090.667 1029 OFFCURVE",
"964.667 938 OFFCURVE",
"898 798 CURVE",
"827.333 944.667 OFFCURVE",
"698.667 1029 OFFCURVE",
"524 1029 CURVE SMOOTH",
"388 1029 OFFCURVE",
"274.833 977.667 OFFCURVE",
"195.5 887 CURVE SMOOTH",
"116.167 796.333 OFFCURVE",
"72 665.667 OFFCURVE",
"72 507 CURVE SMOOTH",
"72 347 OFFCURVE",
"116.5 217.667 OFFCURVE",
"194.5 127 CURVE SMOOTH",
"272.5 36.333 OFFCURVE",
"383.667 -14 OFFCURVE",
"517 -14 CURVE SMOOTH",
"699.667 -14 OFFCURVE",
"829 70.667 OFFCURVE",
"901 220 CURVE",
"974.333 61.333 OFFCURVE",
"1107.333 -14 OFFCURVE",
"1266 -14 CURVE SMOOTH",
"1404.605 -14 OFFCURVE",
"1555.886 36.407 OFFCURVE",
"1643 142 CURVE",
"1592 207 LINE",
"1584 218.333 OFFCURVE",
"1573 224 OFFCURVE",
"1559 224 CURVE SMOOTH",
"1537.489 224 OFFCURVE",
"1497.053 193.592 OFFCURVE",
"1464 175 CURVE SMOOTH",
"1421.333 151 OFFCURVE",
"1363.333 126 OFFCURVE",
"1282 126 CURVE SMOOTH",
"1195.333 126 OFFCURVE",
"1124.833 155 OFFCURVE",
"1073.5 215 CURVE SMOOTH",
"1022.167 275 OFFCURVE",
"990.333 364.667 OFFCURVE",
"985 486 CURVE",
"1612 486 LINE SMOOTH",
"1645.333 486 OFFCURVE",
"1653 501.333 OFFCURVE",
"1653 556 CURVE SMOOTH",
"1653 705.333 OFFCURVE",
"1611.167 822.667 OFFCURVE",
"1542.5 904 CURVE SMOOTH",
"1473.833 985.333 OFFCURVE",
"1377.333 1029 OFFCURVE",
"1268 1029 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"346 125 OFFCURVE",
"256 266 OFFCURVE",
"256 506 CURVE SMOOTH",
"256 626 OFFCURVE",
"278.5 722.667 OFFCURVE",
"324.5 788 CURVE SMOOTH",
"370.5 853.333 OFFCURVE",
"439.333 889 OFFCURVE",
"534 889 CURVE SMOOTH",
"626 889 OFFCURVE",
"695.667 853.333 OFFCURVE",
"741 788 CURVE SMOOTH",
"786.333 722.667 OFFCURVE",
"809 626 OFFCURVE",
"809 506 CURVE SMOOTH",
"809 266 OFFCURVE",
"719.333 125 OFFCURVE",
"534 125 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1413.011 898 OFFCURVE",
"1495 767.405 OFFCURVE",
"1495 597 CURVE",
"987 597 LINE",
"996.333 690.333 OFFCURVE",
"1024.5 766 OFFCURVE",
"1070.5 818 CURVE SMOOTH",
"1116.5 870 OFFCURVE",
"1180.667 898 OFFCURVE",
"1262 898 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
66 65 50 49 1 0 71 70 65 75 66 75 58 56 49 64 50 64 44 42 34 32 28 26 20 18 15 13 9 7 0 48 1 48 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 0 10 0 1 3 10 1 1 0 38 13 9 2 8 8 0 1 0 36 6 11 2 0 0 20 31 12 7 2 2 2 4 1 0 36 5 1 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 0 10 0 1 3 10 1 1 0 38 13 9 2 8 8 0 1 0 36 6 11 2 0 0 20 31 12 7 2 2 2 4 1 0 36 5 1 4 4 21 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 0 10 0 1 3 10 1 1 0 38 13 1 9 9 0 1 0 36 6 11 2 0 0 20 31 0 8 8 0 1 0 36 6 11 2 0 0 20 31 12 7 2 2 2 4 1 0 36 5 1 4 4 21 4 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 13 1 9 8 0 9 1 0 35 6 11 2 0 0 8 10 0 8 1 0 38 0 10 0 1 3 10 1 1 0 38 12 7 2 2 2 4 1 0 36 5 1 4 4 21 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 13 1 9 8 0 9 1 0 35 6 11 2 0 0 8 10 0 8 1 0 38 0 10 0 1 3 10 1 1 0 38 12 7 2 2 4 4 2 1 0 35 12 7 2 2 2 4 1 0 36 5 1 4 2 4 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 13 1 9 8 0 9 1 0 35 6 11 2 0 0 8 10 0 8 1 0 38 0 10 0 1 3 10 1 1 0 38 0 2 7 4 2 1 0 35 12 1 7 4 4 7 1 0 35 12 1 7 7 4 1 0 36 5 1 4 7 4 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
46 1 10 8 30 22 2 2 3 2 30 0 3 1 2 1 3 2 50 11 1 0 13 1 9 8 0 9 1 0 38 0 6 0 8 10 6 8 1 0 38 0 10 0 1 3 10 1 1 0 38 0 2 7 4 2 1 0 35 12 1 7 0 5 4 7 5 1 0 38 0 2 2 4 1 0 36 0 4 2 4 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1734;
}
);
note = oe;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 -343 LINE",
"324 105 LINE",
"392 29 OFFCURVE",
"476.667 -14 OFFCURVE",
"602 -14 CURVE SMOOTH",
"738 -14 OFFCURVE",
"848.333 43.5 OFFCURVE",
"923 137.5 CURVE SMOOTH",
"997.667 231.5 OFFCURVE",
"1039 363.667 OFFCURVE",
"1039 513 CURVE SMOOTH",
"1039 681 OFFCURVE",
"1001.667 811.167 OFFCURVE",
"935 898.5 CURVE SMOOTH",
"868.333 985.833 OFFCURVE",
"772 1031 OFFCURVE",
"656 1031 CURVE SMOOTH",
"510.667 1031 OFFCURVE",
"401.667 961.333 OFFCURVE",
"315 856 CURVE",
"300 976 LINE",
"293.333 1000.667 OFFCURVE",
"277.333 1013 OFFCURVE",
"252 1013 CURVE SMOOTH",
"146 1013 LINE",
"146 -343 LINE"
);
},
{
closed = 1;
nodes = (
"678.333 887 OFFCURVE",
"743 860.167 OFFCURVE",
"787 799.5 CURVE SMOOTH",
"831 738.833 OFFCURVE",
"855 645 OFFCURVE",
"855 513 CURVE SMOOTH",
"855 263.667 OFFCURVE",
"750 124 OFFCURVE",
"562 124 CURVE SMOOTH",
"466 124 OFFCURVE",
"389.333 156 OFFCURVE",
"324 244 CURVE",
"324 734 LINE",
"397.333 831.333 OFFCURVE",
"481 887 OFFCURVE",
"597 887 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
24 23 0 0 31 29 23 37 24 37 0 22 0 22 19 17 9 7 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 7 1 4 4 0 1 0 36 1 1 0 0 14 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 7 1 4 4 0 1 0 36 1 1 0 0 14 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 0 0 0 14 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 0 1 0 36 0 0 0 14 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 0 1 7 1 4 5 1 4 1 0 38 0 0 6 1 3 0 3 0 0 37 0 5 5 2 1 0 36 0 2 2 21 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
27 26 5 3 5 4 21 1 2 5 2 30 0 0 4 3 0 1 0 35 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 3 0 0 36 6 1 3 0 3 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1104;
}
);
note = p;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 -343 LINE",
"324 118 LINE",
"392 34 OFFCURVE",
"475.333 -14 OFFCURVE",
"602 -14 CURVE SMOOTH",
"738 -14 OFFCURVE",
"848.333 43.5 OFFCURVE",
"923 137.5 CURVE SMOOTH",
"997.667 231.5 OFFCURVE",
"1039 363.667 OFFCURVE",
"1039 513 CURVE SMOOTH",
"1039 681 OFFCURVE",
"1001.667 810.167 OFFCURVE",
"935 897.5 CURVE SMOOTH",
"868.333 984.833 OFFCURVE",
"772 1029 OFFCURVE",
"656 1029 CURVE SMOOTH",
"516 1029 OFFCURVE",
"408 964.667 OFFCURVE",
"324 866 CURVE",
"324 1473 LINE",
"146 1473 LINE",
"146 -343 LINE"
);
},
{
closed = 1;
nodes = (
"678.333 887 OFFCURVE",
"743 860.167 OFFCURVE",
"787 799.5 CURVE SMOOTH",
"831 738.833 OFFCURVE",
"855 645 OFFCURVE",
"855 513 CURVE SMOOTH",
"855 263.667 OFFCURVE",
"750 124 OFFCURVE",
"562 124 CURVE SMOOTH",
"466 124 OFFCURVE",
"389.333 156 OFFCURVE",
"324 244 CURVE",
"324 734 LINE",
"397.333 831.333 OFFCURVE",
"481 887 OFFCURVE",
"597 887 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
22 21 0 0 29 27 21 35 22 35 0 20 0 20 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 0 0 0 36 0 0 0 13 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 0 1 7 1 4 5 1 4 1 0 38 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 0 0 0 36 0 0 0 13 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 6 1 3 3 0 0 0 36 0 0 0 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
25 24 3 3 5 4 19 1 2 5 2 30 0 0 1 3 0 0 0 35 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 3 0 0 36 6 1 3 0 3 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1104;
}
);
note = thorn;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"859 1013 LINE SMOOTH",
"833.667 1013 OFFCURVE",
"817.667 1000.667 OFFCURVE",
"811 976 CURVE",
"799 897 LINE",
"727 982.333 OFFCURVE",
"640.667 1031 OFFCURVE",
"510 1031 CURVE SMOOTH",
"372.667 1031 OFFCURVE",
"263.833 973.667 OFFCURVE",
"188.5 879 CURVE SMOOTH",
"113.167 784.333 OFFCURVE",
"72 652.333 OFFCURVE",
"72 503 CURVE SMOOTH",
"72 335 OFFCURVE",
"109.333 204.667 OFFCURVE",
"176 118 CURVE SMOOTH",
"242.667 31.333 OFFCURVE",
"339 -14 OFFCURVE",
"455 -14 CURVE SMOOTH",
"595 -14 OFFCURVE",
"701.667 51.333 OFFCURVE",
"787 150 CURVE",
"787 -343 LINE",
"965 -343 LINE",
"965 1013 LINE"
);
},
{
closed = 1;
nodes = (
"431.333 130 OFFCURVE",
"367 156.833 OFFCURVE",
"323 217.5 CURVE SMOOTH",
"279 278.167 OFFCURVE",
"256 371 OFFCURVE",
"256 503 CURVE SMOOTH",
"256 752.333 OFFCURVE",
"360.667 892 OFFCURVE",
"550 892 CURVE SMOOTH",
"644.667 892 OFFCURVE",
"723 858.333 OFFCURVE",
"787 773 CURVE",
"787 283 LINE",
"713.667 185.667 OFFCURVE",
"630 130 OFFCURVE",
"514 130 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
24 23 0 0 31 29 23 37 24 37 0 22 0 21 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 5 5 2 1 0 36 6 3 2 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
19 1 5 2 27 26 3 3 4 5 2 30 0 5 5 2 1 0 36 6 3 2 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 21 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
19 1 5 3 27 26 3 3 4 5 2 30 6 1 3 3 14 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 21 31 0 0 0 16 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
19 1 5 3 27 26 3 3 4 5 2 30 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 21 31 0 0 0 3 1 0 36 6 1 3 3 14 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
19 1 5 3 27 26 3 3 4 5 2 30 0 2 0 5 4 2 5 1 0 38 6 1 3 0 0 3 0 0 0 37 7 1 4 4 1 1 0 36 0 1 1 21 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
19 1 5 3 27 26 3 3 4 5 2 30 6 1 3 5 0 3 1 0 35 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 0 4 1 1 0 38 6 1 3 3 0 0 0 36 0 0 3 0 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1118;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"324 0 LINE",
"324 645 LINE",
"380 782.333 OFFCURVE",
"460 856 OFFCURVE",
"584 856 CURVE SMOOTH",
"618.667 856 OFFCURVE",
"645.667 852.833 OFFCURVE",
"665 846.5 CURVE SMOOTH",
"684.333 840.167 OFFCURVE",
"698.667 837 OFFCURVE",
"708 837 CURVE SMOOTH",
"724 837 OFFCURVE",
"734.333 845.333 OFFCURVE",
"739 862 CURVE",
"762 995 LINE",
"723.333 1017.667 OFFCURVE",
"679 1031 OFFCURVE",
"623 1031 CURVE SMOOTH",
"485.667 1031 OFFCURVE",
"384.333 947.333 OFFCURVE",
"315 806 CURVE",
"303 964 LINE",
"297.667 1000 OFFCURVE",
"286.667 1013 OFFCURVE",
"248 1013 CURVE SMOOTH",
"146 1013 LINE",
"146 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 22 0 22 19 17 16 14 10 8 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
26 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
12 1 2 0 21 6 2 4 2 2 30 3 1 2 2 0 1 0 36 1 1 0 0 14 31 5 1 4 4 12 4 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 0 21 6 2 4 2 2 30 0 2 3 4 3 2 4 50 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 0 21 6 2 4 2 2 30 0 2 3 4 3 2 4 50 0 1 0 3 2 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 4 15 4 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
12 1 3 0 21 6 2 4 2 2 30 0 2 3 4 3 2 4 50 0 0 3 4 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 806;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"766 911 LINE",
"688.667 984.333 OFFCURVE",
"582.333 1029 OFFCURVE",
"449 1029 CURVE SMOOTH",
"334.333 1029 OFFCURVE",
"244.333 994.5 OFFCURVE",
"183 940.5 CURVE SMOOTH",
"121.667 886.5 OFFCURVE",
"89 812.333 OFFCURVE",
"89 735 CURVE SMOOTH",
"89 567.309 OFFCURVE",
"208.481 506.552 OFFCURVE",
"352.5 460 CURVE SMOOTH",
"407.143 442.337 OFFCURVE",
"491.522 417.887 OFFCURVE",
"534 395.5 CURVE SMOOTH",
"583.333 369.5 OFFCURVE",
"616 335 OFFCURVE",
"616 279 CURVE SMOOTH",
"616 181.192 OFFCURVE",
"538.806 112 OFFCURVE",
"409 112 CURVE SMOOTH",
"327.667 112 OFFCURVE",
"276.5 134.333 OFFCURVE",
"238.5 157 CURVE SMOOTH",
"207.525 175.476 OFFCURVE",
"173.414 202 OFFCURVE",
"152 202 CURVE SMOOTH",
"128 202 OFFCURVE",
"114.667 192.333 OFFCURVE",
"104 175 CURVE SMOOTH",
"62 107 LINE",
"142 35 OFFCURVE",
"258.667 -16 OFFCURVE",
"400 -16 CURVE SMOOTH",
"524 -16 OFFCURVE",
"618.667 19.5 OFFCURVE",
"684 77.5 CURVE SMOOTH",
"749.333 135.5 OFFCURVE",
"783 216.667 OFFCURVE",
"783 310 CURVE SMOOTH",
"783 470.122 OFFCURVE",
"661.953 527.349 OFFCURVE",
"520.5 574.5 CURVE SMOOTH",
"395.783 616.072 OFFCURVE",
"258 643.939 OFFCURVE",
"258 749 CURVE SMOOTH",
"258 836.068 OFFCURVE",
"340.315 896 OFFCURVE",
"453 896 CURVE SMOOTH",
"522.333 896 OFFCURVE",
"571.833 877.5 OFFCURVE",
"608.5 859.5 CURVE SMOOTH",
"637.305 845.36 OFFCURVE",
"671.557 824 OFFCURVE",
"689 824 CURVE SMOOTH",
"705.667 824 OFFCURVE",
"718 831.333 OFFCURVE",
"726 846 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
58 56 39 37 34 32 27 25 8 6 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
60 1 1 5 29 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 20 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
60 1 1 5 29 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 4 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
60 1 1 5 29 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 868;
}
);
note = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 167, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 868;
}
);
note = sacute;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 151, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 868;
}
);
note = scaron;
unicode = 0161;
},
{
glyphname = germandbls;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"526.333 1454 OFFCURVE",
"404.333 1408.333 OFFCURVE",
"319 1327 CURVE SMOOTH",
"233.667 1245.667 OFFCURVE",
"186 1130.667 OFFCURVE",
"186 992 CURVE SMOOTH",
"186 0 LINE",
"365 0 LINE",
"365 986 LINE SMOOTH",
"365 1098 OFFCURVE",
"394.833 1182 OFFCURVE",
"447.5 1238 CURVE SMOOTH",
"500.167 1294 OFFCURVE",
"575.333 1322 OFFCURVE",
"666 1322 CURVE SMOOTH",
"818.175 1322 OFFCURVE",
"899 1239.838 OFFCURVE",
"899 1140 CURVE SMOOTH",
"899 1108 OFFCURVE",
"891.5 1080.167 OFFCURVE",
"876.5 1056.5 CURVE SMOOTH",
"846.5 1009.167 OFFCURVE",
"800 970 OFFCURVE",
"748 934 CURVE SMOOTH",
"722 916 OFFCURVE",
"697.833 896.5 OFFCURVE",
"675.5 875.5 CURVE SMOOTH",
"630.833 833.5 OFFCURVE",
"597 782.667 OFFCURVE",
"597 712 CURVE SMOOTH",
"597 668 OFFCURVE",
"606.333 632.167 OFFCURVE",
"625 604.5 CURVE SMOOTH",
"662.333 549.167 OFFCURVE",
"720.667 512 OFFCURVE",
"786 484 CURVE SMOOTH",
"818.667 470 OFFCURVE",
"849 454.5 OFFCURVE",
"877 437.5 CURVE SMOOTH",
"933 403.5 OFFCURVE",
"975 360.667 OFFCURVE",
"975 286 CURVE SMOOTH",
"975 184.941 OFFCURVE",
"899.962 112 OFFCURVE",
"786 112 CURVE SMOOTH",
"715.333 112 OFFCURVE",
"667.167 134.333 OFFCURVE",
"630.5 157 CURVE SMOOTH",
"600.287 175.677 OFFCURVE",
"566.613 202 OFFCURVE",
"545 202 CURVE SMOOTH",
"522.333 202 OFFCURVE",
"507.667 192.333 OFFCURVE",
"497 175 CURVE SMOOTH",
"456 107 LINE",
"536 35 OFFCURVE",
"641.667 -16 OFFCURVE",
"771 -16 CURVE SMOOTH",
"876.333 -16 OFFCURVE",
"968.333 14.833 OFFCURVE",
"1035 71.5 CURVE SMOOTH",
"1101.667 128.167 OFFCURVE",
"1142 210 OFFCURVE",
"1142 314 CURVE SMOOTH",
"1142 366 OFFCURVE",
"1133.167 409 OFFCURVE",
"1115.5 443 CURVE SMOOTH",
"1080.167 511 OFFCURVE",
"1024.5 556.167 OFFCURVE",
"962.5 587.5 CURVE SMOOTH",
"895.851 621.183 OFFCURVE",
"783 682.269 OFFCURVE",
"783 747 CURVE SMOOTH",
"783 801.259 OFFCURVE",
"874.239 867.493 OFFCURVE",
"927.5 903 CURVE SMOOTH",
"952.5 919.667 OFFCURVE",
"975.667 939 OFFCURVE",
"997 961 CURVE SMOOTH",
"1039.667 1005 OFFCURVE",
"1072 1060 OFFCURVE",
"1072 1140 CURVE SMOOTH",
"1072 1208 OFFCURVE",
"1041.333 1285.5 OFFCURVE",
"976 1347.5 CURVE SMOOTH",
"910.667 1409.5 OFFCURVE",
"810.333 1454 OFFCURVE",
"673 1454 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 67 66 61 59 37 35 32 30 25 23 0 72 1 72 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
27 1 1 3 1 30 0 2 4 3 4 2 3 50 0 4 4 0 1 0 36 6 1 0 0 17 31 0 3 3 1 1 0 36 5 1 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
27 1 5 3 1 30 0 2 4 3 4 2 3 50 0 4 4 0 1 0 36 6 1 0 0 17 31 0 5 5 12 31 0 3 3 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
27 1 5 3 1 30 0 2 4 3 4 2 3 50 6 1 0 0 4 2 0 4 1 0 38 0 5 5 15 31 0 3 3 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
27 1 5 3 1 30 0 2 4 3 4 2 3 50 0 5 3 1 3 5 1 50 6 1 0 0 4 2 0 4 1 0 38 0 3 5 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1218;
}
);
note = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"545 -16 OFFCURVE",
"636.667 18.667 OFFCURVE",
"698 76 CURVE",
"646 161 LINE SMOOTH",
"638.667 172.333 OFFCURVE",
"630.333 178 OFFCURVE",
"621 178 CURVE SMOOTH",
"601.686 178 OFFCURVE",
"535.341 130 OFFCURVE",
"493 130 CURVE SMOOTH",
"427.667 130 OFFCURVE",
"382 170.667 OFFCURVE",
"382 256 CURVE SMOOTH",
"382 864 LINE",
"672 864 LINE",
"672 993 LINE",
"382 993 LINE",
"382 1342 LINE",
"292 1342 LINE SMOOTH",
"269.333 1342 OFFCURVE",
"253.667 1328 OFFCURVE",
"251 1308 CURVE SMOOTH",
"210 995 LINE",
"44 974 LINE",
"44 903 LINE SMOOTH",
"44 876.333 OFFCURVE",
"60.667 864 OFFCURVE",
"82 864 CURVE SMOOTH",
"204 864 LINE",
"204 244 LINE SMOOTH",
"204 76 OFFCURVE",
"293 -16 OFFCURVE",
"453 -16 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 29 27 24 22 19 18 17 16 15 13 6 4 0 33 1 33 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
9 1 1 3 31 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 4 1 1 1 3 0 0 36 0 3 3 14 31 0 5 5 0 1 2 36 7 1 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
9 1 1 3 31 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 0 3 4 1 1 6 3 1 1 0 38 0 5 5 0 1 2 36 7 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
9 1 1 3 31 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 0 3 4 1 1 6 3 1 1 0 38 0 5 5 0 1 2 36 7 1 0 0 21 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
9 1 1 3 31 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 0 3 4 1 1 6 3 1 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 2 36 7 1 0 5 0 1 2 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
9 1 4 3 31 1 0 5 2 30 0 2 3 2 52 0 1 4 6 4 1 6 50 0 6 5 4 6 5 48 0 3 0 4 1 3 4 0 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 2 36 7 1 0 5 0 1 2 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 746;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"122 1013 LINE",
"122 367 LINE SMOOTH",
"122 252.333 OFFCURVE",
"150.667 155.667 OFFCURVE",
"208 89 CURVE SMOOTH",
"265.333 22.333 OFFCURVE",
"350.333 -16 OFFCURVE",
"461 -16 CURVE SMOOTH",
"602.333 -16 OFFCURVE",
"709 48.667 OFFCURVE",
"797 146 CURVE",
"811 37 LINE",
"817.667 12.333 OFFCURVE",
"833.667 0 OFFCURVE",
"859 0 CURVE SMOOTH",
"965 0 LINE",
"965 1013 LINE",
"787 1013 LINE",
"787 266 LINE",
"709.667 178 OFFCURVE",
"617 126 OFFCURVE",
"513 126 CURVE SMOOTH",
"370.333 126 OFFCURVE",
"300 213.667 OFFCURVE",
"300 367 CURVE SMOOTH",
"300 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 23 0 23 18 16 12 10 9 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
14 7 2 0 1 1 30 5 4 2 1 1 14 31 0 0 0 2 1 0 36 3 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
14 7 2 0 1 1 30 5 4 2 1 1 14 31 0 2 2 12 31 0 0 0 3 1 0 36 0 3 3 18 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 7 2 0 1 1 30 5 4 2 1 1 2 1 0 36 0 2 2 15 31 0 0 0 3 1 0 36 0 3 3 21 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
14 7 2 0 1 1 30 0 0 2 3 0 1 0 35 5 4 2 1 0 2 3 1 2 1 0 38 0 0 0 3 1 0 36 0 3 0 3 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
14 7 2 0 4 1 30 5 1 4 1 0 1 4 0 50 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 1 0 36 0 3 0 3 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = uacute;
unicode = 00FA;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = ucircumflex;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = udieresis;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 245, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1112;
}
);
note = ugrave;
unicode = 00F9;
},
{
glyphname = v;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"431 0 LINE",
"592 0 LINE",
"1005 1013 LINE",
"866 1013 LINE SMOOTH",
"839.333 1013 OFFCURVE",
"821 997.333 OFFCURVE",
"813 976 CURVE SMOOTH",
"553 324 LINE SMOOTH",
"534.333 276 OFFCURVE",
"523.667 227.667 OFFCURVE",
"513 181 CURVE",
"503.667 227.667 OFFCURVE",
"494.667 276 OFFCURVE",
"476 324 CURVE SMOOTH",
"219 976 LINE SMOOTH",
"211 996 OFFCURVE",
"192 1013 OFFCURVE",
"164 1013 CURVE SMOOTH",
"18 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 14 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"342 0 LINE",
"476 0 LINE SMOOTH",
"496 0 OFFCURVE",
"509.667 11.333 OFFCURVE",
"517 34 CURVE SMOOTH",
"744 720 LINE SMOOTH",
"749.333 735.333 OFFCURVE",
"753.667 751 OFFCURVE",
"757 767 CURVE SMOOTH",
"760.333 783 OFFCURVE",
"763.667 798.667 OFFCURVE",
"767 814 CURVE",
"770.333 798.667 OFFCURVE",
"773.667 783.167 OFFCURVE",
"777 767.5 CURVE SMOOTH",
"780.333 751.833 OFFCURVE",
"784.667 736.333 OFFCURVE",
"790 721 CURVE SMOOTH",
"1014 34 LINE SMOOTH",
"1020.667 11.333 OFFCURVE",
"1032.667 0 OFFCURVE",
"1050 0 CURVE SMOOTH",
"1191 0 LINE",
"1519 1013 LINE",
"1385 1013 LINE SMOOTH",
"1359.667 1013 OFFCURVE",
"1339.667 997.333 OFFCURVE",
"1333 976 CURVE SMOOTH",
"1135 324 LINE SMOOTH",
"1123 282.667 OFFCURVE",
"1111.667 232 OFFCURVE",
"1105 188 CURVE",
"1094.333 232 OFFCURVE",
"1083.667 277.333 OFFCURVE",
"1069 324 CURVE SMOOTH",
"860 980 LINE SMOOTH",
"853.333 1000 OFFCURVE",
"835.667 1015 OFFCURVE",
"809 1015 CURVE SMOOTH",
"732 1015 LINE SMOOTH",
"706.667 1015 OFFCURVE",
"689.667 1000 OFFCURVE",
"683 980 CURVE SMOOTH",
"469 324 LINE SMOOTH",
"454.333 276 OFFCURVE",
"440.667 232.333 OFFCURVE",
"430 187 CURVE",
"423.333 232.333 OFFCURVE",
"413.667 276 OFFCURVE",
"403 324 CURVE",
"209 976 LINE SMOOTH",
"202.333 996 OFFCURVE",
"183.333 1013 OFFCURVE",
"154 1013 CURVE SMOOTH",
"14 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
46 44 34 32 31 29 17 14 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 0 14 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
199 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
39 23 8 3 3 0 1 30 0 1 0 1 52 2 1 0 3 0 52 4 1 3 3 43 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
39 23 8 3 4 2 1 30 0 1 0 1 52 0 0 2 0 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1532;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"28 0 LINE",
"187 0 LINE SMOOTH",
"213.667 0 OFFCURVE",
"226.667 18.333 OFFCURVE",
"240 37 CURVE SMOOTH",
"476 382 LINE",
"485.333 397.333 OFFCURVE",
"492.333 414.667 OFFCURVE",
"497 434 CURVE",
"752 37 LINE",
"762.667 18.333 OFFCURVE",
"777.667 0 OFFCURVE",
"807 0 CURVE SMOOTH",
"978 0 LINE",
"623 529 LINE",
"964 1013 LINE",
"800 1013 LINE SMOOTH",
"780 1013 OFFCURVE",
"768.333 1000.667 OFFCURVE",
"755 982 CURVE SMOOTH",
"537 662 LINE",
"525.667 643.333 OFFCURVE",
"517 624.667 OFFCURVE",
"511 606 CURVE",
"263 986 LINE SMOOTH",
"252.333 1003.333 OFFCURVE",
"242.333 1013 OFFCURVE",
"213 1013 CURVE SMOOTH",
"42 1013 LINE",
"383 519 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
27 25 17 15 13 11 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
20 14 6 0 4 2 0 1 30 1 1 0 0 14 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
20 14 6 0 4 2 0 1 30 1 1 0 0 2 1 0 36 3 1 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
20 14 6 0 4 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
20 14 6 0 4 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1008;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1008 1013 LINE",
"866 1013 LINE SMOOTH",
"843.333 1013 OFFCURVE",
"822 997.333 OFFCURVE",
"814 976 CURVE SMOOTH",
"551 339 LINE SMOOTH",
"539 308.333 OFFCURVE",
"530.333 279.667 OFFCURVE",
"521 249 CURVE",
"514.333 279.667 OFFCURVE",
"506 308.667 OFFCURVE",
"494 338 CURVE SMOOTH",
"223 976 LINE SMOOTH",
"215 994.667 OFFCURVE",
"198.667 1013 OFFCURVE",
"168 1013 CURVE SMOOTH",
"14 1013 LINE",
"432 59 LINE",
"247 -343 LINE",
"379 -343 LINE SMOOTH",
"416.333 -343 OFFCURVE",
"431 -325.667 OFFCURVE",
"443 -299 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
22 20 8 6 4 2 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
14 5 2 0 1 1 30 2 1 1 1 14 31 0 0 0 16 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
14 5 2 0 1 1 30 0 0 1 0 53 2 1 1 1 14 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
14 5 2 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 22 values pushed */
14 5 2 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1024;
}
);
note = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 228, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1024;
}
);
note = yacute;
unicode = 00FD;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 228, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 1024;
}
);
note = ydieresis;
unicode = 00FF;
},
{
glyphname = z;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"853 1013 LINE",
"101 1013 LINE",
"101 873 LINE",
"646 873 LINE",
"95 138 LINE SMOOTH",
"79 116.667 OFFCURVE",
"70 91.333 OFFCURVE",
"70 74 CURVE SMOOTH",
"70 0 LINE",
"833 0 LINE",
"833 139 LINE",
"280 139 LINE",
"828 869 LINE SMOOTH",
"842.667 887.667 OFFCURVE",
"853 911.667 OFFCURVE",
"853 937 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
15 14 13 12 7 6 5 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 3 0 0 36 0 3 3 14 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 3 0 2 0 3 2 0 0 38 0 0 0 1 0 0 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 924;
}
);
note = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 180, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 924;
}
);
note = zacute;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 180, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 924;
}
);
note = zcaron;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 181, 0}";
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 924;
}
);
note = zdotaccent;
unicode = 017C;
},
{
glyphname = fi;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"365 0 LINE",
"365 864 LINE",
"793 864 LINE",
"793 0 LINE",
"971 0 LINE",
"971 993 LINE",
"359 993 LINE",
"359 1044 LINE SMOOTH",
"359 1241.333 OFFCURVE",
"461 1339 OFFCURVE",
"697 1339 CURVE SMOOTH",
"707 1339 OFFCURVE",
"716 1338.833 OFFCURVE",
"724 1338.5 CURVE SMOOTH",
"732 1338.167 OFFCURVE",
"739.667 1338 OFFCURVE",
"747 1338 CURVE SMOOTH",
"772.333 1338 OFFCURVE",
"785.333 1340.667 OFFCURVE",
"788 1358 CURVE",
"794 1451 LINE",
"755.333 1464.333 OFFCURVE",
"698.667 1471 OFFCURVE",
"648 1471 CURVE SMOOTH",
"494.667 1471 OFFCURVE",
"379.333 1427.667 OFFCURVE",
"302 1353 CURVE SMOOTH",
"224.667 1278.333 OFFCURVE",
"186 1173 OFFCURVE",
"186 1049 CURVE SMOOTH",
"186 993 LINE",
"26 993 LINE",
"26 920 LINE SMOOTH",
"26 893.333 OFFCURVE",
"46 880.667 OFFCURVE",
"74 874 CURVE",
"186 861 LINE",
"186 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 33 0 33 32 31 30 29 28 27 24 19 14 12 7 6 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
17 16 2 2 1 1 1 4 5 2 30 0 2 2 1 1 0 36 0 1 1 13 31 0 5 5 0 0 0 36 3 1 0 0 14 31 7 6 2 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
17 16 2 2 1 1 1 4 5 2 30 3 1 0 0 5 4 0 5 0 0 38 0 2 2 1 1 0 36 0 1 1 13 31 7 6 2 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
17 16 2 2 1 1 1 4 5 2 30 3 1 0 0 5 4 0 5 0 0 38 0 2 2 1 1 0 36 0 1 1 13 31 7 6 2 4 4 15 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
198 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
17 16 2 2 1 1 1 4 5 2 30 7 6 2 4 5 4 53 3 1 0 0 5 4 0 5 0 0 38 0 2 2 1 1 0 36 0 1 1 13 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
17 16 2 2 1 1 1 4 5 2 30 7 6 2 4 5 4 53 0 1 0 2 0 1 2 1 0 38 3 1 0 5 5 0 0 0 35 3 1 0 0 5 0 0 36 0 5 0 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
17 16 2 2 1 1 1 6 5 2 30 0 0 2 3 2 0 3 50 7 1 6 5 4 5 6 4 50 0 4 4 51 0 1 0 2 0 1 2 1 0 38 0 3 5 5 3 0 0 35 0 3 3 5 0 0 36 0 5 3 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1140;
}
);
note = fi;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"365 0 LINE",
"365 864 LINE",
"623 864 LINE",
"623 993 LINE",
"359 993 LINE",
"359 1047 LINE SMOOTH",
"359 1225.667 OFFCURVE",
"455.667 1330 OFFCURVE",
"629 1330 CURVE SMOOTH",
"655.667 1330 OFFCURVE",
"687.167 1329 OFFCURVE",
"723.5 1327 CURVE SMOOTH",
"759.833 1325 OFFCURVE",
"796 1323.333 OFFCURVE",
"832 1322 CURVE",
"832 0 LINE",
"1010 0 LINE",
"1010 1447 LINE",
"910 1447 LINE SMOOTH",
"862 1447 OFFCURVE",
"812.5 1449.167 OFFCURVE",
"761.5 1453.5 CURVE SMOOTH",
"710.5 1457.833 OFFCURVE",
"657.333 1460 OFFCURVE",
"602 1460 CURVE SMOOTH",
"463.333 1460 OFFCURVE",
"359.333 1412.667 OFFCURVE",
"290 1338 CURVE SMOOTH",
"220.667 1263.333 OFFCURVE",
"186 1159 OFFCURVE",
"186 1047 CURVE SMOOTH",
"186 993 LINE",
"26 993 LINE",
"26 920 LINE SMOOTH",
"26 893.333 OFFCURVE",
"46 880.667 OFFCURVE",
"74 874 CURVE",
"186 861 LINE",
"186 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 31 0 31 30 29 28 27 24 20 19 18 17 15 14 12 7 6 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
38 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
1 1 3 6 1 30 0 4 4 1 1 0 36 2 1 1 1 13 31 0 6 6 0 0 0 36 5 1 0 0 14 31 8 7 2 3 3 12 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
1 1 3 6 1 30 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 13 31 0 6 6 0 0 0 36 5 1 0 0 14 31 8 7 2 3 3 12 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
1 1 3 6 1 30 5 1 0 0 6 3 0 6 0 0 38 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 13 31 8 7 2 3 3 12 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
1 1 3 6 1 30 5 1 0 0 6 3 0 6 0 0 38 0 4 4 1 1 0 36 0 1 1 13 31 0 2 2 3 0 0 36 8 7 2 3 3 15 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
164 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
1 1 3 6 1 30 5 1 0 0 6 3 0 6 0 0 38 0 2 8 7 2 3 2 3 0 0 37 0 4 4 1 1 0 36 0 1 1 13 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
1 1 3 6 1 30 0 2 4 3 2 1 0 35 0 1 0 4 0 1 4 1 0 38 5 1 0 0 6 3 0 6 0 0 38 0 2 2 3 0 0 36 8 7 2 3 2 3 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
1 1 7 6 1 30 0 0 4 5 4 0 5 50 8 1 7 6 3 6 7 3 50 0 2 4 3 2 1 0 35 0 1 0 4 0 1 4 1 0 38 0 5 0 6 7 5 6 0 0 38 0 2 2 3 0 0 36 0 3 2 3 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1188;
}
);
note = fl;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"596 1221 LINE SMOOTH",
"596 1357.103 OFFCURVE",
"512.034 1450 OFFCURVE",
"370 1450 CURVE SMOOTH",
"272.667 1450 OFFCURVE",
"193.333 1420.333 OFFCURVE",
"124 1355 CURVE",
"146 1313 LINE SMOOTH",
"152.667 1299.667 OFFCURVE",
"166.333 1288 OFFCURVE",
"185 1288 CURVE SMOOTH",
"223.92 1288 OFFCURVE",
"289.469 1344 OFFCURVE",
"355 1344 CURVE SMOOTH",
"431 1344 OFFCURVE",
"470 1305 OFFCURVE",
"470 1221 CURVE SMOOTH",
"470 1184 LINE",
"327.333 1181.333 OFFCURVE",
"232.667 1155.833 OFFCURVE",
"174 1120.5 CURVE SMOOTH",
"115.333 1085.167 OFFCURVE",
"92 1038.333 OFFCURVE",
"92 993 CURVE SMOOTH",
"92 886.68 OFFCURVE",
"167.171 831 OFFCURVE",
"270 831 CURVE SMOOTH",
"358.25 831 OFFCURVE",
"415.554 861.609 OFFCURVE",
"480 918 CURVE",
"492 869 LINE",
"502.667 845 OFFCURVE",
"512 840 OFFCURVE",
"536 840 CURVE SMOOTH",
"596 840 LINE"
);
},
{
closed = 1;
nodes = (
"255.667 923 OFFCURVE",
"217 943 OFFCURVE",
"217 999 CURVE SMOOTH",
"217 1065.987 OFFCURVE",
"314.51 1096.557 OFFCURVE",
"470 1101 CURVE",
"470 996 LINE",
"422 949.333 OFFCURVE",
"377 923 OFFCURVE",
"309 923 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
43 42 47 46 42 53 43 53 37 35 30 28 25 23 20 19 11 9 2 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
33 1 3 5 45 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 8 1 6 1 1 0 6 0 1 0 37 0 3 3 5 1 0 36 0 5 5 17 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
33 1 3 5 45 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 0 0 6 1 6 0 1 50 0 2 0 7 6 2 7 1 0 38 8 1 6 0 1 6 1 1 0 37 0 3 3 5 1 0 36 0 5 5 17 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
33 1 3 5 45 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 0 0 6 1 6 0 1 50 0 5 0 3 4 5 3 1 0 38 0 2 0 7 6 2 7 1 0 38 8 1 6 0 1 6 1 0 35 8 1 6 6 1 1 0 36 0 1 6 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 684;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"287.333 1449 OFFCURVE",
"210.5 1419.333 OFFCURVE",
"156.5 1366 CURVE SMOOTH",
"102.5 1312.667 OFFCURVE",
"72 1234.667 OFFCURVE",
"72 1140 CURVE SMOOTH",
"72 1044 OFFCURVE",
"102.5 965.5 OFFCURVE",
"156.5 911.5 CURVE SMOOTH",
"210.5 857.5 OFFCURVE",
"287.333 828 OFFCURVE",
"382 828 CURVE SMOOTH",
"475.333 828 OFFCURVE",
"551.667 857.5 OFFCURVE",
"605 911.5 CURVE SMOOTH",
"658.333 965.5 OFFCURVE",
"689 1044 OFFCURVE",
"689 1140 CURVE SMOOTH",
"689 1234.667 OFFCURVE",
"658.333 1312.667 OFFCURVE",
"605 1366 CURVE SMOOTH",
"551.667 1419.333 OFFCURVE",
"475.333 1449 OFFCURVE",
"382 1449 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"266 934 OFFCURVE",
"212 1005.667 OFFCURVE",
"212 1139 CURVE SMOOTH",
"212 1272.333 OFFCURVE",
"266 1343 OFFCURVE",
"382 1343 CURVE SMOOTH",
"494 1343 OFFCURVE",
"549 1272.333 OFFCURVE",
"549 1139 CURVE SMOOTH",
"549 1005.667 OFFCURVE",
"494 934 OFFCURVE",
"382 934 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
5 1 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 4 1 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 762;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = pi;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"130 1013 LINE SMOOTH",
"88.015 1013 OFFCURVE",
"61 978.269 OFFCURVE",
"61 946 CURVE SMOOTH",
"61 882 LINE",
"250 882 LINE",
"250 246 LINE SMOOTH",
"250 158 OFFCURVE",
"215 118 OFFCURVE",
"127 118 CURVE SMOOTH",
"79.916 118 OFFCURVE",
"61.084 119.376 OFFCURVE",
"55 92 CURVE",
"48 17 LINE",
"89.333 -5.667 OFFCURVE",
"133.667 -12 OFFCURVE",
"179 -12 CURVE SMOOTH",
"351 -12 OFFCURVE",
"429 85.333 OFFCURVE",
"429 244 CURVE SMOOTH",
"429 882 LINE",
"826 882 LINE",
"826 0 LINE",
"1004 0 LINE",
"1004 882 LINE",
"1140 882 LINE SMOOTH",
"1178.667 882 OFFCURVE",
"1199 910.333 OFFCURVE",
"1199 941 CURVE SMOOTH",
"1199 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 33 0 32 27 26 23 20 14 12 9 8 7 6 5 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
16 1 1 4 1 30 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 4 4 1 1 0 36 3 1 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
16 1 1 4 1 30 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 1 1 12 31 0 4 4 3 1 0 36 0 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
16 1 1 4 1 30 7 1 6 5 2 2 0 4 6 0 0 0 38 0 1 1 15 31 0 4 4 3 1 0 36 0 3 3 21 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
16 1 1 4 1 30 0 1 4 3 4 1 3 50 7 1 6 5 2 2 0 4 6 0 0 0 38 0 4 1 3 4 1 0 35 0 4 4 3 1 0 36 0 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
16 1 1 4 1 30 0 5 6 2 2 5 42 0 0 2 4 2 0 42 0 1 4 3 4 1 3 50 7 1 6 0 2 0 6 2 0 0 38 0 4 1 3 4 1 0 35 0 4 4 3 1 0 36 0 3 4 3 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1236;
}
);
note = pi;
unicode = 03C0;
},
{
glyphname = zero;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1100 966.667 OFFCURVE",
"1042.333 1149.833 OFFCURVE",
"949 1270.5 CURVE SMOOTH",
"855.667 1391.167 OFFCURVE",
"724.333 1449 OFFCURVE",
"579 1449 CURVE SMOOTH",
"432.333 1449 OFFCURVE",
"303.333 1391.167 OFFCURVE",
"210 1270.5 CURVE SMOOTH",
"116.667 1149.833 OFFCURVE",
"60 966.667 OFFCURVE",
"60 716 CURVE SMOOTH",
"60 465.333 OFFCURVE",
"116.667 283 OFFCURVE",
"210 163 CURVE SMOOTH",
"303.333 43 OFFCURVE",
"432.333 -15 OFFCURVE",
"579 -15 CURVE SMOOTH",
"724.333 -15 OFFCURVE",
"855.667 43 OFFCURVE",
"949 163 CURVE SMOOTH",
"1042.333 283 OFFCURVE",
"1100 465.333 OFFCURVE",
"1100 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"915 497.333 OFFCURVE",
"875.5 352.667 OFFCURVE",
"813.5 262 CURVE SMOOTH",
"751.5 171.333 OFFCURVE",
"667 135 OFFCURVE",
"579 135 CURVE SMOOTH",
"491 135 OFFCURVE",
"406.333 171.333 OFFCURVE",
"345 262 CURVE SMOOTH",
"283.667 352.667 OFFCURVE",
"244 497.333 OFFCURVE",
"244 716 CURVE SMOOTH",
"244 934.667 OFFCURVE",
"283.667 1080.333 OFFCURVE",
"345 1171 CURVE SMOOTH",
"406.333 1261.667 OFFCURVE",
"491 1298 OFFCURVE",
"579 1298 CURVE SMOOTH",
"667 1298 OFFCURVE",
"751.5 1261.667 OFFCURVE",
"813.5 1171 CURVE SMOOTH",
"875.5 1080.333 OFFCURVE",
"915 934.667 OFFCURVE",
"915 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 3 0 1 0 36 0 0 0 21 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"287 0 LINE",
"1055 0 LINE",
"1055 136 LINE",
"773 136 LINE",
"773 1436 LINE",
"628 1436 LINE",
"202 1067 LINE",
"258 990 LINE",
"266 978 OFFCURVE",
"283 968 OFFCURVE",
"303 968 CURVE SMOOTH",
"315 968 OFFCURVE",
"328.667 972.333 OFFCURVE",
"342 983 CURVE SMOOTH",
"598 1202 LINE",
"596 1172 OFFCURVE",
"595 1142.333 OFFCURVE",
"595 1113 CURVE SMOOTH",
"595 136 LINE",
"287 136 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
18 17 16 15 14 13 9 7 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
12 4 2 1 2 1 30 0 1 2 0 2 1 0 50 0 2 2 11 31 3 1 0 0 4 0 2 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
12 4 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 0 4 0 2 36 0 4 4 15 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
12 4 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
12 4 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"478.333 1449 OFFCURVE",
"370.5 1413 OFFCURVE",
"288.5 1345 CURVE SMOOTH",
"206.5 1277 OFFCURVE",
"151.667 1175.667 OFFCURVE",
"133 1045 CURVE",
"226 1029 LINE SMOOTH",
"235.333 1027.667 OFFCURVE",
"242.333 1027 OFFCURVE",
"249 1027 CURVE SMOOTH",
"283.667 1027 OFFCURVE",
"304.333 1043.333 OFFCURVE",
"315 1082 CURVE",
"342.018 1208.983 OFFCURVE",
"451.992 1296 OFFCURVE",
"591 1296 CURVE SMOOTH",
"741.231 1296 OFFCURVE",
"849 1208.146 OFFCURVE",
"849 1045 CURVE SMOOTH",
"849 961 OFFCURVE",
"824.167 889 OFFCURVE",
"779.5 817 CURVE SMOOTH",
"734.833 745 OFFCURVE",
"671 675.333 OFFCURVE",
"595 598 CURVE SMOOTH",
"136 137 LINE SMOOTH",
"113.333 114.333 OFFCURVE",
"104 86.333 OFFCURVE",
"104 61 CURVE SMOOTH",
"104 0 LINE",
"1060 0 LINE",
"1060 108 LINE SMOOTH",
"1060 144 OFFCURVE",
"1035.667 169 OFFCURVE",
"997 169 CURVE SMOOTH",
"517 169 LINE SMOOTH",
"466.333 169 OFFCURVE",
"410.333 159.667 OFFCURVE",
"357 145 CURVE",
"734 531 LINE SMOOTH",
"814 612.333 OFFCURVE",
"887.333 688.167 OFFCURVE",
"942 771.5 CURVE SMOOTH",
"996.667 854.833 OFFCURVE",
"1031 943.333 OFFCURVE",
"1031 1050 CURVE SMOOTH",
"1031 1175.333 OFFCURVE",
"984.167 1274.833 OFFCURVE",
"907.5 1343.5 CURVE SMOOTH",
"830.833 1412.167 OFFCURVE",
"722.333 1449 OFFCURVE",
"601 1449 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 44 42 36 34 20 19 16 13 0 51 1 51 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
47 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 0 3 3 0 1 0 36 5 1 0 0 17 31 0 1 1 2 0 0 36 0 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
47 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 1 2 0 0 36 0 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
47 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"497.333 1449 OFFCURVE",
"389.5 1413 OFFCURVE",
"307.5 1345 CURVE SMOOTH",
"225.5 1277 OFFCURVE",
"170.667 1175.667 OFFCURVE",
"152 1045 CURVE",
"245 1029 LINE SMOOTH",
"254.333 1027.667 OFFCURVE",
"261.333 1027 OFFCURVE",
"268 1027 CURVE SMOOTH",
"301.333 1027 OFFCURVE",
"322.333 1043.333 OFFCURVE",
"333 1082 CURVE SMOOTH",
"366.157 1209.102 OFFCURVE",
"466.884 1296 OFFCURVE",
"610 1296 CURVE SMOOTH",
"759.044 1296 OFFCURVE",
"864 1212.273 OFFCURVE",
"864 1052 CURVE SMOOTH",
"864 977.333 OFFCURVE",
"840.667 915 OFFCURVE",
"786 871 CURVE SMOOTH",
"731.333 827 OFFCURVE",
"646.333 800.333 OFFCURVE",
"525 799 CURVE",
"525 670 LINE",
"674.333 670 OFFCURVE",
"766.5 641.667 OFFCURVE",
"820.5 595 CURVE SMOOTH",
"874.5 548.333 OFFCURVE",
"892 483.333 OFFCURVE",
"892 406 CURVE SMOOTH",
"892 343.333 OFFCURVE",
"866.5 276 OFFCURVE",
"816.5 224 CURVE SMOOTH",
"766.5 172 OFFCURVE",
"691 136 OFFCURVE",
"591 136 CURVE SMOOTH",
"491 136 OFFCURVE",
"426.333 169.333 OFFCURVE",
"381 212 CURVE SMOOTH",
"335.667 254.667 OFFCURVE",
"311.667 307.333 OFFCURVE",
"293 346 CURVE",
"290.333 352.667 OFFCURVE",
"287.667 358.667 OFFCURVE",
"285 364 CURVE",
"274.333 388 OFFCURVE",
"252.667 399 OFFCURVE",
"226 399 CURVE SMOOTH",
"212 399 OFFCURVE",
"198 396 OFFCURVE",
"184 390 CURVE SMOOTH",
"108 358 LINE",
"141.333 251.333 OFFCURVE",
"186.333 157.667 OFFCURVE",
"261 91 CURVE SMOOTH",
"335.667 24.333 OFFCURVE",
"441 -16 OFFCURVE",
"593 -16 CURVE SMOOTH",
"725 -16 OFFCURVE",
"843.333 24.5 OFFCURVE",
"930 98.5 CURVE SMOOTH",
"1016.667 172.5 OFFCURVE",
"1070 279 OFFCURVE",
"1070 411 CURVE SMOOTH",
"1070 585.667 OFFCURVE",
"975.667 703.667 OFFCURVE",
"789 753 CURVE",
"945.472 799.667 OFFCURVE",
"1038 905.406 OFFCURVE",
"1038 1082 CURVE SMOOTH",
"1038 1192.667 OFFCURVE",
"994.5 1285 OFFCURVE",
"920.5 1349 CURVE SMOOTH",
"846.5 1413 OFFCURVE",
"741.333 1449 OFFCURVE",
"620 1449 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 67 65 59 57 49 48 47 46 38 36 27 25 19 17 0 74 1 74 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
70 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 0 5 0 4 2 5 4 1 0 38 0 6 6 0 1 0 36 8 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
70 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 3 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
70 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"903 1433 LINE",
"737 1433 LINE",
"40 508 LINE",
"58 417 LINE",
"63.333 394.333 OFFCURVE",
"84.333 377 OFFCURVE",
"111 377 CURVE SMOOTH",
"746 377 LINE",
"746 0 LINE",
"903 0 LINE",
"903 377 LINE",
"1081 377 LINE SMOOTH",
"1107.667 377 OFFCURVE",
"1120 393.667 OFFCURVE",
"1120 415 CURVE SMOOTH",
"1120 517 LINE",
"903 517 LINE"
);
},
{
closed = 1;
nodes = (
"746 517 LINE",
"233 517 LINE",
"754 1226 LINE",
"747.333 1183.333 OFFCURVE",
"746 1142.667 OFFCURVE",
"746 1108 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
22 21 16 15 11 9 8 7 6 4 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
20 1 0 4 1 30 5 1 0 3 1 1 2 0 1 1 0 38 0 4 4 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
20 1 0 4 1 30 5 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 0 0 36 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
20 1 0 4 1 30 0 4 0 2 4 0 0 35 5 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 0 0 36 0 2 4 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
20 1 0 4 1 30 0 4 0 2 4 0 0 35 0 5 0 3 1 5 3 1 0 38 0 0 0 1 2 0 1 1 0 38 0 4 4 2 0 0 36 0 2 4 2 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"978 1433 LINE",
"299 1433 LINE",
"183 763 LINE",
"295 730 LINE",
"377.667 756.667 OFFCURVE",
"455 768 OFFCURVE",
"527 768 CURVE SMOOTH",
"632.333 768 OFFCURVE",
"710.833 738.667 OFFCURVE",
"763.5 688 CURVE SMOOTH",
"816.167 637.333 OFFCURVE",
"842 564.333 OFFCURVE",
"842 475 CURVE SMOOTH",
"842 372.333 OFFCURVE",
"810.167 288.833 OFFCURVE",
"753.5 229.5 CURVE SMOOTH",
"696.833 170.167 OFFCURVE",
"616 137 OFFCURVE",
"516 137 CURVE SMOOTH",
"426.667 137 OFFCURVE",
"364 161.667 OFFCURVE",
"316 187 CURVE SMOOTH",
"277.863 207.128 OFFCURVE",
"232.81 237 OFFCURVE",
"210 237 CURVE SMOOTH",
"190 237 OFFCURVE",
"174 228.333 OFFCURVE",
"162 211 CURVE SMOOTH",
"108 135 LINE",
"152 95 OFFCURVE",
"210.333 58 OFFCURVE",
"277 30 CURVE SMOOTH",
"343.667 2 OFFCURVE",
"422 -16 OFFCURVE",
"506 -16 CURVE SMOOTH",
"651.333 -16 OFFCURVE",
"779.833 32.167 OFFCURVE",
"872.5 119.5 CURVE SMOOTH",
"965.167 206.833 OFFCURVE",
"1022 331 OFFCURVE",
"1022 483 CURVE SMOOTH",
"1022 607 OFFCURVE",
"982.333 714.667 OFFCURVE",
"905 792 CURVE SMOOTH",
"827.667 869.333 OFFCURVE",
"713.333 916 OFFCURVE",
"564 916 CURVE SMOOTH",
"500.667 916 OFFCURVE",
"431.667 908 OFFCURVE",
"357 892 CURVE",
"423 1268 LINE",
"873 1268 LINE SMOOTH",
"949 1268 OFFCURVE",
"978 1304.333 OFFCURVE",
"978 1355 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
46 45 41 39 31 29 26 24 18 16 8 6 4 2 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
5 1 5 1 44 43 2 3 5 22 1 2 4 3 30 0 3 5 4 5 3 4 50 0 1 0 5 3 1 5 1 0 38 0 0 0 6 0 0 36 0 6 6 11 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
5 1 5 1 44 43 2 3 5 22 1 2 4 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 4 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
5 1 5 1 44 43 2 3 5 22 1 2 4 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"554 878 OFFCURVE",
"471 850.667 OFFCURVE",
"403 804 CURVE",
"900 1433 LINE",
"742 1433 LINE SMOOTH",
"699.333 1433 OFFCURVE",
"664.667 1414 OFFCURVE",
"646 1390 CURVE SMOOTH",
"283 901 LINE SMOOTH",
"161.667 738.333 OFFCURVE",
"108 598.333 OFFCURVE",
"108 473 CURVE SMOOTH",
"108 323.667 OFFCURVE",
"154.333 201.167 OFFCURVE",
"237 116.5 CURVE SMOOTH",
"319.667 31.833 OFFCURVE",
"438 -16 OFFCURVE",
"582 -16 CURVE SMOOTH",
"727.333 -16 OFFCURVE",
"851.5 35 OFFCURVE",
"937.5 119 CURVE SMOOTH",
"1023.5 203 OFFCURVE",
"1074 319 OFFCURVE",
"1074 451 CURVE SMOOTH",
"1074 587 OFFCURVE",
"1025.333 693.833 OFFCURVE",
"948 766.5 CURVE SMOOTH",
"870.667 839.167 OFFCURVE",
"764.667 878 OFFCURVE",
"650 878 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"280 520.667 OFFCURVE",
"309.5 596.167 OFFCURVE",
"363.5 651.5 CURVE SMOOTH",
"417.5 706.833 OFFCURVE",
"496 742 OFFCURVE",
"592 742 CURVE SMOOTH",
"681.333 742 OFFCURVE",
"757.667 713.167 OFFCURVE",
"811 660.5 CURVE SMOOTH",
"864.333 607.833 OFFCURVE",
"895 531.333 OFFCURVE",
"895 438 CURVE SMOOTH",
"895 350 OFFCURVE",
"863.833 273.667 OFFCURVE",
"808.5 219 CURVE SMOOTH",
"753.167 164.333 OFFCURVE",
"675 132 OFFCURVE",
"579 132 CURVE SMOOTH",
"484.333 132 OFFCURVE",
"409.833 163.333 OFFCURVE",
"358.5 218 CURVE SMOOTH",
"307.167 272.667 OFFCURVE",
"280 350 OFFCURVE",
"280 442 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 43 41 33 31 23 21 11 9 0 26 1 26 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
24 1 4 0 1 30 5 1 0 0 4 3 0 4 1 0 38 0 2 2 11 31 0 3 3 1 1 0 36 0 1 1 18 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
24 1 4 0 1 30 0 2 0 2 52 5 1 0 0 4 3 0 4 1 0 38 0 3 3 1 1 0 36 0 1 1 21 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
24 1 4 0 1 30 0 2 0 2 52 5 1 0 0 4 3 0 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"110 1433 LINE",
"110 1312 LINE SMOOTH",
"110 1289.333 OFFCURVE",
"131.333 1268 OFFCURVE",
"154 1268 CURVE SMOOTH",
"902 1268 LINE",
"879.333 1242.667 OFFCURVE",
"862.333 1215.333 OFFCURVE",
"845 1182 CURVE SMOOTH",
"243 0 LINE",
"370 0 LINE SMOOTH",
"422 0 OFFCURVE",
"450.667 28.333 OFFCURVE",
"468 63 CURVE SMOOTH",
"1061 1260 LINE SMOOTH",
"1071.667 1280 OFFCURVE",
"1084 1307.667 OFFCURVE",
"1084 1353 CURVE SMOOTH",
"1084 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
0 0 0 18 0 18 15 13 9 7 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
0 1 1 2 0 0 36 3 1 2 2 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
3 1 2 0 1 0 2 1 1 0 38 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
0 0 1 0 53 3 1 2 1 1 2 0 0 35 3 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"721.667 -16 OFFCURVE",
"842.833 23.333 OFFCURVE",
"927.5 94 CURVE SMOOTH",
"1012.167 164.667 OFFCURVE",
"1062 266.667 OFFCURVE",
"1062 392 CURVE SMOOTH",
"1062 576 OFFCURVE",
"962.667 696.333 OFFCURVE",
"784 747 CURVE",
"933.333 803 OFFCURVE",
"1012 917.333 OFFCURVE",
"1012 1072 CURVE SMOOTH",
"1012 1177.333 OFFCURVE",
"969 1272 OFFCURVE",
"893 1340 CURVE SMOOTH",
"817 1408 OFFCURVE",
"708.333 1449 OFFCURVE",
"579 1449 CURVE SMOOTH",
"448.333 1449 OFFCURVE",
"341 1408 OFFCURVE",
"265 1340 CURVE SMOOTH",
"189 1272 OFFCURVE",
"146 1177.333 OFFCURVE",
"146 1072 CURVE SMOOTH",
"146 917.333 OFFCURVE",
"223.333 803 OFFCURVE",
"374 747 CURVE",
"195.333 696.333 OFFCURVE",
"96 576 OFFCURVE",
"96 392 CURVE SMOOTH",
"96 266.667 OFFCURVE",
"144.667 164.667 OFFCURVE",
"230 94 CURVE SMOOTH",
"315.333 23.333 OFFCURVE",
"436.333 -16 OFFCURVE",
"579 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"485.667 126 OFFCURVE",
"410.833 153.167 OFFCURVE",
"359.5 200.5 CURVE SMOOTH",
"308.167 247.833 OFFCURVE",
"280 315 OFFCURVE",
"280 395 CURVE SMOOTH",
"280 493.667 OFFCURVE",
"315.167 563 OFFCURVE",
"370.5 607 CURVE SMOOTH",
"425.833 651 OFFCURVE",
"500.333 671 OFFCURVE",
"579 671 CURVE SMOOTH",
"657.667 671 OFFCURVE",
"732.167 651 OFFCURVE",
"787.5 607 CURVE SMOOTH",
"842.833 563 OFFCURVE",
"878 493.667 OFFCURVE",
"878 395 CURVE SMOOTH",
"878 315 OFFCURVE",
"849.833 247.833 OFFCURVE",
"798.5 200.5 CURVE SMOOTH",
"747.167 153.167 OFFCURVE",
"672.333 126 OFFCURVE",
"579 126 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402.936 814 OFFCURVE",
"320 926.075 OFFCURVE",
"320 1069 CURVE SMOOTH",
"320 1209.673 OFFCURVE",
"416.068 1311 OFFCURVE",
"579 1311 CURVE SMOOTH",
"741.932 1311 OFFCURVE",
"838 1209.673 OFFCURVE",
"838 1069 CURVE SMOOTH",
"838 926.075 OFFCURVE",
"755.064 814 OFFCURVE",
"579 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
53 52 33 32 1 0 63 61 52 71 53 71 43 41 32 51 33 51 17 15 0 31 1 31 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
24 8 2 3 4 1 30 8 1 4 0 3 2 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 17 31 7 1 2 2 0 1 0 36 6 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
24 8 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 2 0 1 0 36 6 1 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
24 8 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 0 0 2 1 0 35 7 1 2 2 0 1 0 36 6 1 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"651.667 588 OFFCURVE",
"745.667 619.333 OFFCURVE",
"819 678 CURVE",
"796.333 643.333 OFFCURVE",
"771.333 609.667 OFFCURVE",
"742 571 CURVE SMOOTH",
"306 0 LINE",
"470 0 LINE SMOOTH",
"511.333 0 OFFCURVE",
"544.667 16.667 OFFCURVE",
"562 42 CURVE SMOOTH",
"911 546 LINE SMOOTH",
"963 620.667 OFFCURVE",
"1003.667 689.333 OFFCURVE",
"1033 760 CURVE SMOOTH",
"1062.333 830.667 OFFCURVE",
"1078 903.333 OFFCURVE",
"1078 986 CURVE SMOOTH",
"1078 1123.333 OFFCURVE",
"1033 1238.667 OFFCURVE",
"953 1320 CURVE SMOOTH",
"873 1401.333 OFFCURVE",
"759.333 1449 OFFCURVE",
"622 1449 CURVE SMOOTH",
"483.333 1449 OFFCURVE",
"365 1399.333 OFFCURVE",
"281 1318 CURVE SMOOTH",
"197 1236.667 OFFCURVE",
"148 1124.333 OFFCURVE",
"148 999 CURVE SMOOTH",
"148 867 OFFCURVE",
"194.667 764.5 OFFCURVE",
"268 694.5 CURVE SMOOTH",
"341.333 624.5 OFFCURVE",
"441 588 OFFCURVE",
"549 588 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"907 933.667 OFFCURVE",
"879.667 863 OFFCURVE",
"829 811 CURVE SMOOTH",
"778.333 759 OFFCURVE",
"704 725 OFFCURVE",
"608 725 CURVE SMOOTH",
"432.443 725 OFFCURVE",
"326 830.691 OFFCURVE",
"326 1012 CURVE SMOOTH",
"326 1181.537 OFFCURVE",
"444.399 1300 OFFCURVE",
"620 1300 CURVE SMOOTH",
"704 1300 OFFCURVE",
"775.333 1271.667 OFFCURVE",
"826 1221 CURVE SMOOTH",
"876.667 1170.333 OFFCURVE",
"907 1096.333 OFFCURVE",
"907 1007 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 48 46 38 36 25 23 11 9 0 31 1 31 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
29 1 0 4 1 30 0 4 5 1 0 2 4 0 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
29 1 0 4 1 30 0 1 0 3 4 1 3 1 0 38 0 4 5 1 0 2 4 0 1 0 38 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
29 1 0 4 1 30 0 2 0 2 53 0 1 0 3 4 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 5 1 0 4 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"173 900 LINE",
"580 900 LINE",
"580 985 LINE",
"450 985 LINE",
"450 1631 LINE",
"342 1631 LINE",
"120 1441 LINE",
"159 1385 LINE",
"165 1375.667 OFFCURVE",
"175.667 1371 OFFCURVE",
"191 1371 CURVE SMOOTH",
"200.333 1371 OFFCURVE",
"209 1374 OFFCURVE",
"217 1380 CURVE",
"324 1468 LINE",
"320 1425 LINE",
"320 985 LINE",
"173 985 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 14 13 12 11 10 7 5 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
36 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
9 3 2 3 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 4 4 0 0 0 36 3 1 0 0 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
9 3 2 3 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 3 2 3 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = onesuperior;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"208.667 1637 OFFCURVE",
"110 1566.333 OFFCURVE",
"90 1425 CURVE",
"161 1413 LINE SMOOTH",
"167.667 1411.667 OFFCURVE",
"173.667 1411 OFFCURVE",
"179 1411 CURVE SMOOTH",
"201.667 1411 OFFCURVE",
"212.333 1422.333 OFFCURVE",
"223 1441 CURVE",
"241.667 1497 OFFCURVE",
"278.667 1531 OFFCURVE",
"340 1531 CURVE SMOOTH",
"400 1531 OFFCURVE",
"445 1493 OFFCURVE",
"445 1425 CURVE SMOOTH",
"445 1353.1 OFFCURVE",
"387.357 1277.357 OFFCURVE",
"325 1215 CURVE SMOOTH",
"104 996 LINE SMOOTH",
"88 980 OFFCURVE",
"82 960.333 OFFCURVE",
"82 943 CURVE SMOOTH",
"82 900 LINE",
"593 900 LINE",
"593 977 LINE SMOOTH",
"593 1003.667 OFFCURVE",
"577 1019 OFFCURVE",
"549 1019 CURVE SMOOTH",
"354 1019 LINE SMOOTH",
"326 1019 OFFCURVE",
"293.667 1013 OFFCURVE",
"263 1005 CURVE",
"425 1170 LINE SMOOTH",
"503.149 1248.149 OFFCURVE",
"576 1323.301 OFFCURVE",
"576 1429 CURVE SMOOTH",
"576 1555.83 OFFCURVE",
"482.328 1637 OFFCURVE",
"346 1637 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 40 38 34 32 20 19 16 13 0 45 1 45 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
43 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 2 2 1 1 0 36 0 1 1 14 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
43 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = twosuperior;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"223.528 1637 OFFCURVE",
"123.12 1562.198 OFFCURVE",
"105 1425 CURVE",
"172 1413 LINE SMOOTH",
"178.667 1411.667 OFFCURVE",
"184.667 1411 OFFCURVE",
"190 1411 CURVE SMOOTH",
"210 1411 OFFCURVE",
"219.333 1420.667 OFFCURVE",
"230 1442 CURVE",
"246 1495.333 OFFCURVE",
"283 1529 OFFCURVE",
"347 1529 CURVE SMOOTH",
"411 1529 OFFCURVE",
"453 1493.667 OFFCURVE",
"453 1427 CURVE SMOOTH",
"453 1357.667 OFFCURVE",
"411 1315.333 OFFCURVE",
"295 1314 CURVE",
"295 1227 LINE",
"411.217 1227 OFFCURVE",
"463 1197.822 OFFCURVE",
"463 1112 CURVE SMOOTH",
"463 1052.646 OFFCURVE",
"414.435 1000 OFFCURVE",
"337 1000 CURVE SMOOTH",
"260.18 1000 OFFCURVE",
"228.567 1047.439 OFFCURVE",
"208 1092 CURVE SMOOTH",
"200.667 1107.333 OFFCURVE",
"187.333 1115 OFFCURVE",
"168 1115 CURVE SMOOTH",
"158.667 1115 OFFCURVE",
"149 1113 OFFCURVE",
"139 1109 CURVE SMOOTH",
"84 1085 LINE",
"125.226 955.826 OFFCURVE",
"197.935 892 OFFCURVE",
"344 892 CURVE SMOOTH",
"477.542 892 OFFCURVE",
"594 973.971 OFFCURVE",
"594 1117 CURVE SMOOTH",
"594 1199.667 OFFCURVE",
"547 1250.667 OFFCURVE",
"459 1276 CURVE",
"538.333 1306 OFFCURVE",
"578 1363.667 OFFCURVE",
"578 1449 CURVE SMOOTH",
"578 1558.858 OFFCURVE",
"483.266 1637 OFFCURVE",
"354 1637 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 54 52 48 46 42 41 40 39 31 29 24 22 16 14 0 61 1 61 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
75 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
57 1 7 6 7 1 4 5 20 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 1 1 3 1 0 36 0 3 3 14 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
57 1 7 6 7 1 4 5 20 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = threesuperior;
unicode = 00B3;
},
{
glyphname = fraction;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"803 1433 LINE",
"726 1433 LINE SMOOTH",
"683.333 1433 OFFCURVE",
"654 1410.667 OFFCURVE",
"630 1372 CURVE SMOOTH",
"-188 0 LINE",
"-112 0 LINE SMOOTH",
"-73.333 0 OFFCURVE",
"-45.333 11.667 OFFCURVE",
"-20 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
9 7 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 52 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"988.667 737 OFFCURVE",
"890 666.333 OFFCURVE",
"870 525 CURVE",
"941 513 LINE SMOOTH",
"947.667 511.667 OFFCURVE",
"953.667 511 OFFCURVE",
"959 511 CURVE SMOOTH",
"981.667 511 OFFCURVE",
"992.333 522.333 OFFCURVE",
"1003 541 CURVE",
"1021.667 597 OFFCURVE",
"1058.667 631 OFFCURVE",
"1120 631 CURVE SMOOTH",
"1180 631 OFFCURVE",
"1225 593 OFFCURVE",
"1225 525 CURVE SMOOTH",
"1225 453.1 OFFCURVE",
"1167.357 377.357 OFFCURVE",
"1105 315 CURVE SMOOTH",
"884 96 LINE SMOOTH",
"868 80 OFFCURVE",
"862 60.333 OFFCURVE",
"862 43 CURVE SMOOTH",
"862 0 LINE",
"1373 0 LINE",
"1373 77 LINE SMOOTH",
"1373 103.667 OFFCURVE",
"1357 119 OFFCURVE",
"1329 119 CURVE SMOOTH",
"1134 119 LINE SMOOTH",
"1106 119 OFFCURVE",
"1073.667 113 OFFCURVE",
"1043 105 CURVE",
"1205 270 LINE SMOOTH",
"1283.149 348.149 OFFCURVE",
"1356 423.301 OFFCURVE",
"1356 529 CURVE SMOOTH",
"1356 655.83 OFFCURVE",
"1262.328 737 OFFCURVE",
"1126 737 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"155 703 LINE",
"562 703 LINE",
"562 788 LINE",
"432 788 LINE",
"432 1434 LINE",
"324 1434 LINE",
"102 1244 LINE",
"141 1188 LINE",
"147 1178.667 OFFCURVE",
"157.667 1174 OFFCURVE",
"173 1174 CURVE SMOOTH",
"182.333 1174 OFFCURVE",
"191 1177 OFFCURVE",
"199 1183 CURVE",
"306 1271 LINE",
"302 1228 LINE",
"302 788 LINE",
"155 788 LINE"
);
},
{
closed = 1;
nodes = (
"1213 1433 LINE",
"1136 1433 LINE SMOOTH",
"1093.333 1433 OFFCURVE",
"1064 1410.667 OFFCURVE",
"1040 1372 CURVE SMOOTH",
"222 0 LINE",
"298 0 LINE SMOOTH",
"336.667 0 OFFCURVE",
"364.667 11.667 OFFCURVE",
"390 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
1 0 71 69 66 64 61 60 59 58 57 56 53 51 47 46 40 38 34 32 20 19 16 13 0 45 1 45 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
55 49 48 3 6 7 43 1 4 3 11 1 2 1 3 30 0 6 7 5 7 6 5 50 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 0 38 11 1 7 7 11 31 0 1 1 2 1 0 36 10 1 2 2 12 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
55 49 48 3 6 7 43 1 4 3 11 1 2 1 3 30 11 1 7 6 7 52 0 6 5 6 52 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 0 38 0 1 1 2 1 0 36 10 1 2 2 15 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 81 values pushed */
55 49 48 3 6 7 43 1 4 3 11 1 2 1 3 30 11 1 7 6 7 52 0 6 5 6 52 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 10 1 2 1 2 1 0 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
55 49 48 3 6 11 43 1 4 3 11 1 2 1 3 30 0 7 11 7 52 0 11 6 11 52 0 6 5 6 52 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 2 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 10 1 2 1 2 1 0 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 98 values pushed */
55 49 48 3 6 11 43 1 4 3 11 1 10 1 3 30 0 7 11 7 52 0 11 6 11 52 0 6 5 6 52 0 8 5 0 5 8 42 0 4 3 1 3 4 1 50 0 10 1 2 1 10 2 50 0 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 2 38 0 1 10 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1295 729 LINE",
"1171 729 LINE",
"829 261 LINE",
"839 204 LINE SMOOTH",
"841.667 188 OFFCURVE",
"856 176 OFFCURVE",
"880 176 CURVE SMOOTH",
"1186 176 LINE",
"1186 0 LINE",
"1295 0 LINE",
"1295 176 LINE",
"1377 176 LINE SMOOTH",
"1394.333 176 OFFCURVE",
"1404 187.333 OFFCURVE",
"1404 202 CURVE SMOOTH",
"1404 267 LINE",
"1295 267 LINE"
);
},
{
closed = 1;
nodes = (
"155 703 LINE",
"562 703 LINE",
"562 788 LINE",
"432 788 LINE",
"432 1434 LINE",
"324 1434 LINE",
"102 1244 LINE",
"141 1188 LINE",
"147 1178.667 OFFCURVE",
"157.667 1174 OFFCURVE",
"173 1174 CURVE SMOOTH",
"182.333 1174 OFFCURVE",
"191 1177 OFFCURVE",
"199 1183 CURVE",
"306 1271 LINE",
"302 1228 LINE",
"302 788 LINE",
"155 788 LINE"
);
},
{
closed = 1;
nodes = (
"1186 267 LINE",
"950 267 LINE",
"1191 594 LINE",
"1187 563.333 OFFCURVE",
"1186 533.333 OFFCURVE",
"1186 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1257 1433 LINE",
"1180 1433 LINE SMOOTH",
"1137.333 1433 OFFCURVE",
"1108 1410.667 OFFCURVE",
"1084 1372 CURVE SMOOTH",
"266 0 LINE",
"342 0 LINE SMOOTH",
"380.667 0 OFFCURVE",
"408.667 11.667 OFFCURVE",
"434 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
48 46 43 41 38 37 32 31 30 29 28 27 24 22 18 17 16 15 11 9 8 7 6 4 1 0 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
26 20 19 3 6 7 36 1 0 9 2 30 0 6 7 5 7 6 5 50 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 12 1 7 7 11 31 0 4 4 2 1 0 36 11 1 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
26 20 19 3 6 7 36 1 0 9 2 30 12 1 7 6 7 52 0 6 5 6 52 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 1 0 36 11 1 2 2 15 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
26 20 19 3 6 7 36 1 0 9 2 30 12 1 7 6 7 52 0 6 5 6 52 0 4 9 2 4 0 0 35 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 1 0 36 11 1 2 4 2 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
26 20 19 3 6 12 36 1 0 9 2 30 0 7 12 7 52 0 12 6 12 52 0 6 5 6 52 0 4 9 2 4 0 0 35 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 2 38 0 4 4 2 1 0 36 11 1 2 4 2 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 95 values pushed */
26 20 19 3 6 12 36 1 0 9 2 30 0 7 12 7 52 0 12 6 12 52 0 6 5 6 52 0 8 5 4 5 8 42 0 11 1 2 1 11 2 50 0 4 9 2 4 0 0 35 0 5 0 9 0 5 9 0 2 38 0 10 0 3 1 10 3 1 2 38 0 0 0 1 11 0 1 1 0 38 0 4 4 2 0 0 36 0 2 4 2 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1296 729 LINE",
"1172 729 LINE",
"830 261 LINE",
"840 204 LINE SMOOTH",
"842.667 188 OFFCURVE",
"857 176 OFFCURVE",
"881 176 CURVE SMOOTH",
"1187 176 LINE",
"1187 0 LINE",
"1296 0 LINE",
"1296 176 LINE",
"1378 176 LINE SMOOTH",
"1395.333 176 OFFCURVE",
"1405 187.333 OFFCURVE",
"1405 202 CURVE SMOOTH",
"1405 267 LINE",
"1296 267 LINE"
);
},
{
closed = 1;
nodes = (
"207.528 1440 OFFCURVE",
"107.12 1365.198 OFFCURVE",
"89 1228 CURVE",
"156 1216 LINE SMOOTH",
"162.667 1214.667 OFFCURVE",
"168.667 1214 OFFCURVE",
"174 1214 CURVE SMOOTH",
"194 1214 OFFCURVE",
"203.333 1223.667 OFFCURVE",
"214 1245 CURVE",
"230 1298.333 OFFCURVE",
"267 1332 OFFCURVE",
"331 1332 CURVE SMOOTH",
"395 1332 OFFCURVE",
"437 1296.667 OFFCURVE",
"437 1230 CURVE SMOOTH",
"437 1160.667 OFFCURVE",
"395 1118.333 OFFCURVE",
"279 1117 CURVE",
"279 1030 LINE",
"395.217 1030 OFFCURVE",
"447 1000.822 OFFCURVE",
"447 915 CURVE SMOOTH",
"447 855.646 OFFCURVE",
"398.435 803 OFFCURVE",
"321 803 CURVE SMOOTH",
"244.18 803 OFFCURVE",
"212.567 850.439 OFFCURVE",
"192 895 CURVE SMOOTH",
"184.667 910.333 OFFCURVE",
"171.333 918 OFFCURVE",
"152 918 CURVE SMOOTH",
"142.667 918 OFFCURVE",
"133 916 OFFCURVE",
"123 912 CURVE SMOOTH",
"68 888 LINE",
"109.226 758.826 OFFCURVE",
"181.935 695 OFFCURVE",
"328 695 CURVE SMOOTH",
"461.542 695 OFFCURVE",
"578 776.971 OFFCURVE",
"578 920 CURVE SMOOTH",
"578 1002.667 OFFCURVE",
"531 1053.667 OFFCURVE",
"443 1079 CURVE",
"522.333 1109 OFFCURVE",
"562 1166.667 OFFCURVE",
"562 1252 CURVE SMOOTH",
"562 1361.858 OFFCURVE",
"467.266 1440 OFFCURVE",
"338 1440 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1187 267 LINE",
"951 267 LINE",
"1192 594 LINE",
"1188 563.333 OFFCURVE",
"1187 533.333 OFFCURVE",
"1187 508 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1262 1433 LINE",
"1185 1433 LINE SMOOTH",
"1142.333 1433 OFFCURVE",
"1113 1410.667 OFFCURVE",
"1089 1372 CURVE SMOOTH",
"271 0 LINE",
"347 0 LINE SMOOTH",
"385.667 0 OFFCURVE",
"413.667 11.667 OFFCURVE",
"439 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
18 17 94 92 89 87 84 83 71 69 65 63 59 58 57 56 48 46 41 39 33 31 17 78 18 78 16 15 11 9 8 7 6 4 1 0 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
67 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 95 values pushed */
74 1 12 11 24 1 9 10 37 1 8 7 82 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 0 38 13 1 0 3 1 1 2 0 1 1 2 38 0 11 11 5 1 0 36 15 16 2 5 5 11 31 0 4 4 2 1 0 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 99 values pushed */
74 1 12 11 24 1 9 10 37 1 8 7 82 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 0 38 13 1 0 3 1 1 2 0 1 1 2 38 0 15 15 11 31 0 11 11 5 1 0 36 16 1 5 5 11 31 0 4 4 2 1 0 36 14 1 2 2 12 2 32 11 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 100 values pushed */
74 1 12 11 24 1 9 10 37 1 8 7 82 1 0 6 4 30 0 15 5 11 5 15 11 50 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 16 1 5 0 11 12 5 11 1 0 38 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 0 38 13 1 0 3 1 1 2 0 1 1 2 38 0 4 4 2 1 0 36 14 1 2 2 15 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 109 values pushed */
74 1 12 11 24 1 9 10 37 1 8 7 82 1 0 6 4 30 0 15 5 11 5 15 11 50 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 16 1 5 0 11 12 5 11 1 0 38 0 10 0 9 7 10 9 1 0 38 0 4 6 2 4 0 0 35 0 8 0 6 0 8 6 1 0 38 13 1 0 3 1 1 2 0 1 1 2 38 0 4 4 2 1 0 36 14 1 2 4 2 1 0 33 11 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 124 values pushed */
74 1 12 11 24 1 9 10 37 1 8 7 82 1 0 6 4 30 0 15 5 11 5 15 11 50 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 14 1 2 1 14 2 50 16 1 5 0 11 12 5 11 1 0 38 0 10 0 9 7 10 9 1 0 38 0 4 6 2 4 0 0 35 0 8 0 6 0 8 6 1 0 38 0 13 0 3 1 13 3 1 2 38 0 0 0 1 14 0 1 1 0 38 0 4 4 2 0 0 36 0 2 4 2 0 0 33 13 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1426;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = period;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"88 38.865 OFFCURVE",
"142.328 -15 OFFCURVE",
"212 -15 CURVE SMOOTH",
"282.418 -15 OFFCURVE",
"337 38.957 OFFCURVE",
"337 110 CURVE SMOOTH",
"337 179.084 OFFCURVE",
"282.22 236 OFFCURVE",
"212 236 CURVE SMOOTH",
"142.128 236 OFFCURVE",
"88 179.593 OFFCURVE",
"88 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 21 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 424;
}
);
note = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"94 51.713 OFFCURVE",
"141.325 0 OFFCURVE",
"210 0 CURVE SMOOTH",
"223 0 LINE",
"208.549 -79.482 OFFCURVE",
"150.61 -150.029 OFFCURVE",
"117 -187 CURVE",
"107.667 -196.333 OFFCURVE",
"103 -205.333 OFFCURVE",
"103 -214 CURVE SMOOTH",
"103 -224.667 OFFCURVE",
"107.333 -234 OFFCURVE",
"116 -242 CURVE SMOOTH",
"146 -271 LINE",
"259.833 -174.875 OFFCURVE",
"336 -31.076 OFFCURVE",
"336 94 CURVE SMOOTH",
"336 174.702 OFFCURVE",
"291.472 236 OFFCURVE",
"212 236 CURVE SMOOTH",
"143.496 236 OFFCURVE",
"94 186.243 OFFCURVE",
"94 123 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
27 25 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
15 1 1 27 0 0 0 1 1 0 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
15 1 1 27 0 0 0 1 1 0 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
15 1 1 27 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 424;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"128 38.865 OFFCURVE",
"182.328 -15 OFFCURVE",
"252 -15 CURVE SMOOTH",
"322.418 -15 OFFCURVE",
"377 38.957 OFFCURVE",
"377 110 CURVE SMOOTH",
"377 179.084 OFFCURVE",
"322.22 236 OFFCURVE",
"252 236 CURVE SMOOTH",
"182.128 236 OFFCURVE",
"128 179.593 OFFCURVE",
"128 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"128 788.865 OFFCURVE",
"182.328 735 OFFCURVE",
"252 735 CURVE SMOOTH",
"322.418 735 OFFCURVE",
"377 788.957 OFFCURVE",
"377 860 CURVE SMOOTH",
"377 929.084 OFFCURVE",
"322.22 986 OFFCURVE",
"252 986 CURVE SMOOTH",
"182.128 986 OFFCURVE",
"128 929.593 OFFCURVE",
"128 860 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
36 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 18 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 21 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 504;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"134 51.713 OFFCURVE",
"181.325 0 OFFCURVE",
"250 0 CURVE SMOOTH",
"263 0 LINE",
"248.549 -79.482 OFFCURVE",
"190.61 -150.029 OFFCURVE",
"157 -187 CURVE",
"147.667 -196.333 OFFCURVE",
"143 -205.333 OFFCURVE",
"143 -214 CURVE SMOOTH",
"143 -224.667 OFFCURVE",
"147.333 -234 OFFCURVE",
"156 -242 CURVE SMOOTH",
"186 -271 LINE",
"299.833 -174.875 OFFCURVE",
"376 -31.076 OFFCURVE",
"376 94 CURVE SMOOTH",
"376 174.702 OFFCURVE",
"331.472 236 OFFCURVE",
"252 236 CURVE SMOOTH",
"183.496 236 OFFCURVE",
"134 186.243 OFFCURVE",
"134 123 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"128 788.865 OFFCURVE",
"182.328 735 OFFCURVE",
"252 735 CURVE SMOOTH",
"322.418 735 OFFCURVE",
"377 788.957 OFFCURVE",
"377 860 CURVE SMOOTH",
"377 929.084 OFFCURVE",
"322.22 986 OFFCURVE",
"252 986 CURVE SMOOTH",
"182.128 986 OFFCURVE",
"128 929.593 OFFCURVE",
"128 860 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
47 45 37 35 27 25 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
36 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
15 1 1 27 0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
15 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
15 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
15 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 504;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"88 38.865 OFFCURVE",
"142.328 -15 OFFCURVE",
"212 -15 CURVE SMOOTH",
"282.418 -15 OFFCURVE",
"337 38.957 OFFCURVE",
"337 110 CURVE SMOOTH",
"337 179.084 OFFCURVE",
"282.22 236 OFFCURVE",
"212 236 CURVE SMOOTH",
"142.128 236 OFFCURVE",
"88 179.593 OFFCURVE",
"88 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1117 38.865 OFFCURVE",
"1171.328 -15 OFFCURVE",
"1241 -15 CURVE SMOOTH",
"1311.418 -15 OFFCURVE",
"1366 38.957 OFFCURVE",
"1366 110 CURVE SMOOTH",
"1366 179.084 OFFCURVE",
"1311.22 236 OFFCURVE",
"1241 236 CURVE SMOOTH",
"1171.128 236 OFFCURVE",
"1117 179.593 OFFCURVE",
"1117 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"602 38.865 OFFCURVE",
"656.328 -15 OFFCURVE",
"726 -15 CURVE SMOOTH",
"796.418 -15 OFFCURVE",
"851 38.957 OFFCURVE",
"851 110 CURVE SMOOTH",
"851 179.084 OFFCURVE",
"796.22 236 OFFCURVE",
"726 236 CURVE SMOOTH",
"656.128 236 OFFCURVE",
"602 179.593 OFFCURVE",
"602 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 46 44 36 34 26 24 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 21 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
4 2 2 0 1 1 0 1 0 35 4 2 2 0 0 1 1 0 36 5 3 2 1 0 1 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 0 2 1 0 1 0 35 0 4 0 5 3 4 5 1 0 38 0 2 0 3 1 2 3 1 0 38 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1454;
}
);
note = ellipsis;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"261 1433 LINE",
"261 861 LINE SMOOTH",
"261 747.833 OFFCURVE",
"270.814 622.945 OFFCURVE",
"285 500 CURVE",
"406 500 LINE",
"420.186 622.945 OFFCURVE",
"430 747.833 OFFCURVE",
"430 861 CURVE SMOOTH",
"430 1433 LINE"
);
},
{
closed = 1;
nodes = (
"218 38.865 OFFCURVE",
"272.328 -15 OFFCURVE",
"342 -15 CURVE SMOOTH",
"412.418 -15 OFFCURVE",
"467 38.957 OFFCURVE",
"467 110 CURVE SMOOTH",
"467 179.084 OFFCURVE",
"412.22 236 OFFCURVE",
"342 236 CURVE SMOOTH",
"272.128 236 OFFCURVE",
"218 179.593 OFFCURVE",
"218 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 30 28 20 18 0 13 0 13 7 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 0 0 1 0 0 36 4 1 1 1 11 31 0 2 2 3 1 0 36 0 3 3 18 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 2 3 1 0 36 0 3 3 21 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 3 3 2 1 0 35 0 2 2 3 1 0 36 0 3 2 3 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"431 -343 LINE",
"431 198 LINE SMOOTH",
"431 308.789 OFFCURVE",
"421.193 435.992 OFFCURVE",
"407 559 CURVE",
"286 559 LINE",
"271.807 435.992 OFFCURVE",
"262 308.789 OFFCURVE",
"262 198 CURVE SMOOTH",
"262 -343 LINE"
);
},
{
closed = 1;
nodes = (
"218 835.105 OFFCURVE",
"272.372 778 OFFCURVE",
"343 778 CURVE SMOOTH",
"411.243 778 OFFCURVE",
"468 835.363 OFFCURVE",
"468 904 CURVE SMOOTH",
"468 974.59 OFFCURVE",
"411.48 1029 OFFCURVE",
"343 1029 CURVE SMOOTH",
"272.164 1029 OFFCURVE",
"218 974.836 OFFCURVE",
"218 904 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 30 28 20 18 0 13 0 13 7 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 3 2 1 0 36 0 2 2 20 31 0 0 0 1 0 0 36 4 1 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 4 1 1 0 1 0 0 37 0 3 3 2 1 0 36 0 2 2 20 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 4 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 686;
}
);
note = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"81 1230 LINE SMOOTH",
"90.333 1214.667 OFFCURVE",
"103.333 1207 OFFCURVE",
"120 1207 CURVE SMOOTH",
"135.178 1207 OFFCURVE",
"167.223 1235.934 OFFCURVE",
"199 1255 CURVE SMOOTH",
"239 1279 OFFCURVE",
"295.667 1303 OFFCURVE",
"377 1303 CURVE SMOOTH",
"496.671 1303 OFFCURVE",
"593 1231.061 OFFCURVE",
"593 1115 CURVE SMOOTH",
"593 1075 OFFCURVE",
"585.5 1040.333 OFFCURVE",
"570.5 1011 CURVE SMOOTH",
"540.5 952.333 OFFCURVE",
"492.167 907.5 OFFCURVE",
"439.5 869.5 CURVE SMOOTH",
"413.167 850.5 OFFCURVE",
"388.5 831.5 OFFCURVE",
"365.5 812.5 CURVE SMOOTH",
"319.5 774.5 OFFCURVE",
"286 733 OFFCURVE",
"286 677 CURVE SMOOTH",
"286 666 LINE",
"298 500 LINE",
"420 500 LINE",
"438 653 LINE SMOOTH",
"444.911 710.014 OFFCURVE",
"547.068 781.404 OFFCURVE",
"605 824.5 CURVE SMOOTH",
"632.333 844.833 OFFCURVE",
"657.5 868.833 OFFCURVE",
"680.5 896.5 CURVE SMOOTH",
"726.5 951.833 OFFCURVE",
"760 1022.667 OFFCURVE",
"760 1124 CURVE SMOOTH",
"760 1224 OFFCURVE",
"720.333 1305 OFFCURVE",
"655 1361 CURVE SMOOTH",
"589.667 1417 OFFCURVE",
"497.333 1449 OFFCURVE",
"392 1449 CURVE SMOOTH",
"242.147 1449 OFFCURVE",
"122.751 1388.025 OFFCURVE",
"34 1305 CURVE"
);
},
{
closed = 1;
nodes = (
"230 38.865 OFFCURVE",
"284.328 -15 OFFCURVE",
"354 -15 CURVE SMOOTH",
"424.418 -15 OFFCURVE",
"479 38.957 OFFCURVE",
"479 110 CURVE SMOOTH",
"479 179.084 OFFCURVE",
"424.22 236 OFFCURVE",
"354 236 CURVE SMOOTH",
"284.128 236 OFFCURVE",
"230 179.593 OFFCURVE",
"230 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
57 55 47 45 39 37 34 32 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
0 1 2 0 20 1 1 3 2 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 2 2 0 1 0 36 0 0 0 17 31 0 4 4 5 1 0 36 0 5 5 18 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 1 2 0 20 1 1 3 2 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 4 5 1 0 36 0 5 5 21 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
0 1 2 0 20 1 1 3 2 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 796;
}
);
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"723 -137 LINE SMOOTH",
"713.667 -122.333 OFFCURVE",
"703.667 -114 OFFCURVE",
"685 -114 CURVE SMOOTH",
"670.253 -114 OFFCURVE",
"635.847 -143.492 OFFCURVE",
"605 -162 CURVE SMOOTH",
"565 -186 OFFCURVE",
"508.333 -210 OFFCURVE",
"427 -210 CURVE SMOOTH",
"307.682 -210 OFFCURVE",
"211 -138.424 OFFCURVE",
"211 -22 CURVE SMOOTH",
"211 17.333 OFFCURVE",
"218.5 50.333 OFFCURVE",
"233.5 77 CURVE SMOOTH",
"263.5 130.333 OFFCURVE",
"311.833 169.167 OFFCURVE",
"364.5 200.5 CURVE SMOOTH",
"390.833 216.167 OFFCURVE",
"415.5 232.333 OFFCURVE",
"438.5 249 CURVE SMOOTH",
"484.5 282.333 OFFCURVE",
"518 321.333 OFFCURVE",
"518 380 CURVE SMOOTH",
"518 392 LINE",
"506 559 LINE",
"384 559 LINE",
"366 405 LINE SMOOTH",
"359.18 348.737 OFFCURVE",
"257.238 286.352 OFFCURVE",
"199 248 CURVE SMOOTH",
"171.667 230 OFFCURVE",
"146.5 208.333 OFFCURVE",
"123.5 183 CURVE SMOOTH",
"77.5 132.333 OFFCURVE",
"44 64.333 OFFCURVE",
"44 -37 CURVE SMOOTH",
"44 -137 OFFCURVE",
"83.667 -216.333 OFFCURVE",
"149 -271 CURVE SMOOTH",
"214.333 -325.667 OFFCURVE",
"306.667 -356 OFFCURVE",
"412 -356 CURVE SMOOTH",
"562.641 -356 OFFCURVE",
"681.069 -295.193 OFFCURVE",
"770 -212 CURVE"
);
},
{
closed = 1;
nodes = (
"324 831.865 OFFCURVE",
"378.328 778 OFFCURVE",
"448 778 CURVE SMOOTH",
"518.418 778 OFFCURVE",
"573 831.957 OFFCURVE",
"573 903 CURVE SMOOTH",
"573 972.084 OFFCURVE",
"518.22 1029 OFFCURVE",
"448 1029 CURVE SMOOTH",
"378.128 1029 OFFCURVE",
"324 972.593 OFFCURVE",
"324 903 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
58 56 48 46 39 37 34 32 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
20 1 3 1 0 1 0 2 2 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 5 5 4 1 0 36 0 4 4 20 31 0 2 2 0 1 2 36 0 0 0 22 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
20 1 3 1 0 1 0 2 2 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 2 0 0 2 0 1 2 37 0 5 5 4 1 0 36 0 4 4 20 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
20 1 3 1 0 1 0 2 2 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 4 0 5 1 4 5 1 0 38 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 0 0 2 0 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 796;
}
);
note = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"124 511.668 OFFCURVE",
"190.668 445 OFFCURVE",
"272 445 CURVE SMOOTH",
"354.37 445 OFFCURVE",
"423 510.338 OFFCURVE",
"423 593 CURVE SMOOTH",
"423 676.693 OFFCURVE",
"355.693 744 OFFCURVE",
"272 744 CURVE SMOOTH",
"189.338 744 OFFCURVE",
"124 675.37 OFFCURVE",
"124 593 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 546;
}
);
note = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"208 492.333 OFFCURVE",
"250.333 399.667 OFFCURVE",
"317 333 CURVE SMOOTH",
"383.667 266.333 OFFCURVE",
"476.667 224 OFFCURVE",
"578 224 CURVE SMOOTH",
"680.667 224 OFFCURVE",
"774.167 266.333 OFFCURVE",
"841.5 333 CURVE SMOOTH",
"908.833 399.667 OFFCURVE",
"951 492.333 OFFCURVE",
"951 595 CURVE SMOOTH",
"951 697.667 OFFCURVE",
"908.833 791.167 OFFCURVE",
"841.5 858.5 CURVE SMOOTH",
"774.167 925.833 OFFCURVE",
"680.667 968 OFFCURVE",
"578 968 CURVE SMOOTH",
"476.667 968 OFFCURVE",
"383.667 925.833 OFFCURVE",
"317 858.5 CURVE SMOOTH",
"250.333 791.167 OFFCURVE",
"208 697.667 OFFCURVE",
"208 595 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 1 0 36 0 0 0 14 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
lastChange = "2020-02-16 19:00:30 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"529 280 LINE",
"529 514 LINE SMOOTH",
"529 545 OFFCURVE",
"524 573 OFFCURVE",
"510 599 CURVE",
"528 575 OFFCURVE",
"549 558 OFFCURVE",
"577 541 CURVE SMOOTH",
"781 423 LINE",
"834 512 LINE",
"629 631 LINE",
"602 648 OFFCURVE",
"577 656 OFFCURVE",
"549 660 CURVE",
"577 663 OFFCURVE",
"602 672 OFFCURVE",
"629 689 CURVE",
"832 807 LINE",
"781 896 LINE",
"577 779 LINE",
"550 761 OFFCURVE",
"530 745 OFFCURVE",
"513 722 CURVE",
"524 747 OFFCURVE",
"529 775 OFFCURVE",
"529 807 CURVE SMOOTH",
"529 1040 LINE",
"425 1040 LINE",
"425 806 LINE SMOOTH",
"425 775 OFFCURVE",
"430 745 OFFCURVE",
"444 718 CURVE",
"426 743 OFFCURVE",
"404 763 OFFCURVE",
"377 779 CURVE SMOOTH",
"173 897 LINE",
"120 808 LINE",
"325 689 LINE",
"353 671 OFFCURVE",
"379 663 OFFCURVE",
"411 660 CURVE",
"382 657 OFFCURVE",
"353 648 OFFCURVE",
"325 631 CURVE SMOOTH",
"122 513 LINE",
"174 424 LINE",
"377 541 LINE SMOOTH",
"402 556 OFFCURVE",
"424 575 OFFCURVE",
"440 595 CURVE",
"429 570 OFFCURVE",
"425 542 OFFCURVE",
"425 513 CURVE SMOOTH",
"425 280 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 48 0 48 24 23 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
45 41 40 36 32 31 27 19 16 15 11 8 7 4 14 1 0 1 30 2 1 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
45 41 40 36 32 31 27 19 16 15 11 8 7 4 14 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 2 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1027 423 LINE",
"1036 480 LINE SMOOTH",
"1037.333 488 OFFCURVE",
"1038 495.333 OFFCURVE",
"1038 502 CURVE SMOOTH",
"1038 540.667 OFFCURVE",
"1020 554 OFFCURVE",
"988 554 CURVE SMOOTH",
"809 554 LINE",
"874 880 LINE",
"1012 880 LINE SMOOTH",
"1062.667 880 OFFCURVE",
"1085.333 897.333 OFFCURVE",
"1092 936 CURVE SMOOTH",
"1105 1011 LINE",
"893 1011 LINE",
"966 1366 LINE SMOOTH",
"966.667 1369.333 OFFCURVE",
"967 1373.667 OFFCURVE",
"967 1379 CURVE SMOOTH",
"967 1411 OFFCURVE",
"942.333 1433 OFFCURVE",
"909 1433 CURVE SMOOTH",
"830 1433 LINE",
"746 1011 LINE",
"499 1011 LINE",
"583 1433 LINE",
"503 1433 LINE SMOOTH",
"463 1433 OFFCURVE",
"432 1409 OFFCURVE",
"424 1369 CURVE SMOOTH",
"352 1011 LINE",
"194 1011 LINE SMOOTH",
"142 1011 OFFCURVE",
"120.667 992.667 OFFCURVE",
"114 954 CURVE SMOOTH",
"101 880 LINE",
"333 880 LINE",
"268 554 LINE",
"64 554 LINE",
"56 497 LINE SMOOTH",
"54.667 489 OFFCURVE",
"54 480.667 OFFCURVE",
"54 474 CURVE SMOOTH",
"54 436.667 OFFCURVE",
"72.333 423 OFFCURVE",
"103 423 CURVE SMOOTH",
"249 423 LINE",
"164 0 LINE",
"243 0 LINE SMOOTH",
"281.667 0 OFFCURVE",
"314.333 18.667 OFFCURVE",
"325 68 CURVE SMOOTH",
"396 423 LINE",
"643 423 LINE",
"572 77 LINE SMOOTH",
"570.667 70.333 OFFCURVE",
"570 66.333 OFFCURVE",
"570 61 CURVE SMOOTH",
"570 25 OFFCURVE",
"594.333 0 OFFCURVE",
"625 0 CURVE SMOOTH",
"706 0 LINE",
"790 423 LINE"
);
},
{
closed = 1;
nodes = (
"480 880 LINE",
"727 880 LINE",
"662 554 LINE",
"415 554 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
0 0 66 65 64 63 0 62 0 62 56 54 53 51 48 47 42 40 39 38 37 35 32 30 27 26 25 24 18 16 15 13 10 9 3 1 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 15 11 2 5 5 6 0 0 36 10 8 2 6 6 14 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
9 1 7 6 7 52 10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 2 1 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
9 1 7 6 7 52 2 1 0 1 0 53 10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 1 1 4 0 0 35 14 12 2 4 4 1 0 0 36 16 13 3 3 1 4 1 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 96 values pushed */
0 7 9 7 52 0 9 6 9 52 0 2 1 0 1 2 0 50 0 0 0 51 0 8 0 15 11 8 15 0 2 38 0 10 0 11 5 10 11 1 2 38 0 6 0 5 4 6 5 0 0 38 0 14 13 1 14 0 0 35 0 12 16 1 13 3 12 13 0 0 38 0 4 0 3 1 4 3 1 0 38 0 14 14 1 0 0 36 0 1 14 1 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
lastChange = "2020-02-16 19:03:00 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"758 1473 LINE",
"683 1473 LINE SMOOTH",
"639 1473 OFFCURVE",
"606.333 1449.667 OFFCURVE",
"589 1407 CURVE SMOOTH",
"-12 -90 LINE",
"63 -90 LINE SMOOTH",
"101.667 -90 OFFCURVE",
"142.333 -67.667 OFFCURVE",
"161 -21 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
9 7 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 53 0 1 1 13 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 746;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"578 -21 LINE SMOOTH",
"595.333 -67.667 OFFCURVE",
"637.333 -90 OFFCURVE",
"676 -90 CURVE SMOOTH",
"751 -90 LINE",
"150 1407 LINE SMOOTH",
"132.667 1449.667 OFFCURVE",
"100 1473 OFFCURVE",
"56 1473 CURVE SMOOTH",
"-20 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
7 5 2 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 750;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"289 914.333 OFFCURVE",
"363 1186.333 OFFCURVE",
"503 1429 CURVE",
"509.667 1441.667 OFFCURVE",
"513 1453 OFFCURVE",
"513 1463 CURVE SMOOTH",
"513 1481.667 OFFCURVE",
"502.667 1492.667 OFFCURVE",
"488 1502 CURVE SMOOTH",
"409 1551 LINE",
"309 1396.333 OFFCURVE",
"239.833 1246.833 OFFCURVE",
"196.5 1095.5 CURVE SMOOTH",
"153.167 944.167 OFFCURVE",
"134 790.333 OFFCURVE",
"134 629 CURVE SMOOTH",
"134 466.333 OFFCURVE",
"153.167 314 OFFCURVE",
"196.5 162 CURVE SMOOTH",
"239.833 10 OFFCURVE",
"309 -139.667 OFFCURVE",
"409 -293 CURVE",
"488 -245 LINE SMOOTH",
"502.667 -235.667 OFFCURVE",
"513 -224.667 OFFCURVE",
"513 -206 CURVE SMOOTH",
"513 -195.333 OFFCURVE",
"511 -185.667 OFFCURVE",
"503 -171 CURVE SMOOTH",
"364.333 73 OFFCURVE",
"289 343.667 OFFCURVE",
"289 629 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
20 10 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"298 343.667 OFFCURVE",
"222.667 73 OFFCURVE",
"84 -171 CURVE SMOOTH",
"76 -185.667 OFFCURVE",
"74 -195.333 OFFCURVE",
"74 -206 CURVE SMOOTH",
"74 -224.667 OFFCURVE",
"84.333 -235.667 OFFCURVE",
"99 -245 CURVE SMOOTH",
"178 -293 LINE",
"278 -139.667 OFFCURVE",
"347.167 10 OFFCURVE",
"390.5 162 CURVE SMOOTH",
"433.833 314 OFFCURVE",
"453 466.333 OFFCURVE",
"453 629 CURVE SMOOTH",
"453 790.333 OFFCURVE",
"433.833 944.167 OFFCURVE",
"390.5 1095.5 CURVE SMOOTH",
"347.167 1246.833 OFFCURVE",
"278 1396.333 OFFCURVE",
"178 1551 CURVE",
"99 1502 LINE SMOOTH",
"84.333 1492.667 OFFCURVE",
"74 1481.667 OFFCURVE",
"74 1463 CURVE SMOOTH",
"74 1453 OFFCURVE",
"77.333 1441.667 OFFCURVE",
"84 1429 CURVE",
"224 1186.333 OFFCURVE",
"298 914.333 OFFCURVE",
"298 629 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
9 19 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
lastChange = "2020-02-16 14:57:29 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"252 303 OFFCURVE",
"261 151 OFFCURVE",
"261 27 CURVE SMOOTH",
"261 -65 OFFCURVE",
"293 -140 OFFCURVE",
"349 -196 CURVE SMOOTH",
"405 -252 OFFCURVE",
"551 -289 OFFCURVE",
"660 -289 CURVE SMOOTH",
"713 -289 LINE",
"713 -209 LINE SMOOTH",
"713 -182 OFFCURVE",
"689 -171 OFFCURVE",
"673 -171 CURVE SMOOTH",
"653 -171 LINE SMOOTH",
"550 -171 OFFCURVE",
"417 -100 OFFCURVE",
"417 16 CURVE SMOOTH",
"417 158 OFFCURVE",
"403 292 OFFCURVE",
"403 423 CURVE SMOOTH",
"403 519 OFFCURVE",
"341 598 OFFCURVE",
"252 622 CURVE",
"343 647 OFFCURVE",
"403 724 OFFCURVE",
"403 822 CURVE SMOOTH",
"403 953 OFFCURVE",
"417 1087 OFFCURVE",
"417 1229 CURVE SMOOTH",
"417 1344 OFFCURVE",
"550 1416 OFFCURVE",
"653 1416 CURVE SMOOTH",
"673 1416 LINE SMOOTH",
"689 1416 OFFCURVE",
"713 1427 OFFCURVE",
"713 1454 CURVE SMOOTH",
"713 1533 LINE",
"660 1533 LINE SMOOTH",
"551 1533 OFFCURVE",
"411 1503 OFFCURVE",
"356 1447 CURVE SMOOTH",
"300 1390 OFFCURVE",
"261 1310 OFFCURVE",
"261 1218 CURVE SMOOTH",
"261 1092 OFFCURVE",
"252 943 OFFCURVE",
"252 820 CURVE SMOOTH",
"252 735 OFFCURVE",
"204 696 OFFCURVE",
"5 696 CURVE",
"5 549 LINE",
"204 549 OFFCURVE",
"252 509 OFFCURVE",
"252 425 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 51 48 24 21 18 16 5 4 3 2 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 49 values pushed */
36 1 0 1 1 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 718;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
lastChange = "2020-02-16 19:02:48 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"466 509 OFFCURVE",
"514 549 OFFCURVE",
"713 549 CURVE",
"713 696 LINE",
"514 696 OFFCURVE",
"466 735 OFFCURVE",
"466 820 CURVE SMOOTH",
"466 943 OFFCURVE",
"457 1092 OFFCURVE",
"457 1218 CURVE SMOOTH",
"457 1310 OFFCURVE",
"418 1390 OFFCURVE",
"362 1447 CURVE SMOOTH",
"307 1503 OFFCURVE",
"167 1533 OFFCURVE",
"58 1533 CURVE SMOOTH",
"5 1533 LINE",
"5 1454 LINE SMOOTH",
"5 1427 OFFCURVE",
"29 1416 OFFCURVE",
"45 1416 CURVE SMOOTH",
"65 1416 LINE SMOOTH",
"168 1416 OFFCURVE",
"301 1344 OFFCURVE",
"301 1229 CURVE SMOOTH",
"301 1087 OFFCURVE",
"315 953 OFFCURVE",
"315 822 CURVE SMOOTH",
"315 724 OFFCURVE",
"375 647 OFFCURVE",
"466 622 CURVE",
"377 598 OFFCURVE",
"315 519 OFFCURVE",
"315 423 CURVE SMOOTH",
"315 292 OFFCURVE",
"301 158 OFFCURVE",
"301 16 CURVE SMOOTH",
"301 -100 OFFCURVE",
"168 -171 OFFCURVE",
"65 -171 CURVE SMOOTH",
"45 -171 LINE SMOOTH",
"29 -171 OFFCURVE",
"5 -182 OFFCURVE",
"5 -209 CURVE SMOOTH",
"5 -289 LINE",
"58 -289 LINE SMOOTH",
"167 -289 OFFCURVE",
"313 -252 OFFCURVE",
"369 -196 CURVE SMOOTH",
"425 -140 OFFCURVE",
"457 -65 OFFCURVE",
"457 27 CURVE SMOOTH",
"457 151 OFFCURVE",
"466 303 OFFCURVE",
"466 425 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
63 62 61 60 49 47 44 41 17 14 11 9 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 49 values pushed */
29 1 5 4 1 30 0 3 0 2 4 3 2 1 0 38 0 4 0 5 1 4 5 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 718;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"510 -289 LINE",
"510 -219 LINE SMOOTH",
"510 -188.333 OFFCURVE",
"490.333 -171 OFFCURVE",
"461 -171 CURVE SMOOTH",
"292 -171 LINE",
"292 1416 LINE",
"461 1416 LINE SMOOTH",
"490.333 1416 OFFCURVE",
"510 1433.667 OFFCURVE",
"510 1463 CURVE SMOOTH",
"510 1533 LINE",
"142 1533 LINE",
"142 -289 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 13 0 13 10 8 7 5 2 1 5 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 34 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 3 3 2 1 0 35 0 2 2 3 0 0 36 4 1 3 2 3 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"90 -289 LINE",
"458 -289 LINE",
"458 1533 LINE",
"90 1533 LINE",
"90 1463 LINE SMOOTH",
"90 1436.333 OFFCURVE",
"109.667 1416 OFFCURVE",
"139 1416 CURVE SMOOTH",
"308 1416 LINE",
"308 -171 LINE",
"139 -171 LINE SMOOTH",
"109.667 -171 OFFCURVE",
"90 -192.333 OFFCURVE",
"90 -219 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
13 12 11 10 7 5 4 2 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 1 0 2 1 1 0 38 0 0 3 3 0 1 0 35 0 0 0 3 0 0 36 0 3 0 3 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"100 524 LINE",
"594 524 LINE",
"594 675 LINE",
"100 675 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 694;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"100 524 LINE",
"594 524 LINE",
"594 675 LINE",
"100 675 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 694;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"156 525 LINE",
"956 525 LINE",
"956 655 LINE",
"156 655 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"156 525 LINE",
"1486 525 LINE",
"1486 655 LINE",
"156 655 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1642;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = underscore;
lastChange = "2020-02-16 19:00:07 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"590 149 OFFCURVE",
"444 245 OFFCURVE",
"317 245 CURVE SMOOTH",
"230 245 OFFCURVE",
"144 213 OFFCURVE",
"112 180 CURVE SMOOTH",
"78 144 OFFCURVE",
"45 100 OFFCURVE",
"45 39 CURVE",
"189 39 LINE",
"192 73 OFFCURVE",
"215 105 OFFCURVE",
"328 105 CURVE SMOOTH",
"426 105 OFFCURVE",
"572 1 OFFCURVE",
"699 1 CURVE SMOOTH",
"784 1 OFFCURVE",
"837 28 OFFCURVE",
"899 78 CURVE SMOOTH",
"945 115 OFFCURVE",
"971 171 OFFCURVE",
"971 224 CURVE",
"827 224 LINE",
"826 173 OFFCURVE",
"775 149 OFFCURVE",
"688 149 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 976;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"162 197 LINE SMOOTH",
"144 189.667 OFFCURVE",
"135 178 OFFCURVE",
"135 162 CURVE SMOOTH",
"135 154.667 OFFCURVE",
"137.333 147.333 OFFCURVE",
"142 140 CURVE SMOOTH",
"172.667 89.333 OFFCURVE",
"184 44.667 OFFCURVE",
"184 2 CURVE SMOOTH",
"184 -72.497 OFFCURVE",
"144.268 -142.432 OFFCURVE",
"100 -195 CURVE",
"93.333 -201.667 OFFCURVE",
"90 -209.667 OFFCURVE",
"90 -219 CURVE SMOOTH",
"90 -227 OFFCURVE",
"92.333 -235.333 OFFCURVE",
"103 -242 CURVE SMOOTH",
"158 -276 LINE",
"263.333 -184 OFFCURVE",
"326 -72.333 OFFCURVE",
"326 49 CURVE SMOOTH",
"326 113 OFFCURVE",
"309.667 177 OFFCURVE",
"271 241 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 424;
}
);
note = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"162 197 LINE SMOOTH",
"144 189.667 OFFCURVE",
"135 178 OFFCURVE",
"135 162 CURVE SMOOTH",
"135 154.667 OFFCURVE",
"137.333 147.333 OFFCURVE",
"142 140 CURVE SMOOTH",
"172.667 89.333 OFFCURVE",
"184 44.667 OFFCURVE",
"184 2 CURVE SMOOTH",
"184 -72.497 OFFCURVE",
"144.268 -142.432 OFFCURVE",
"100 -195 CURVE",
"93.333 -201.667 OFFCURVE",
"90 -209.667 OFFCURVE",
"90 -219 CURVE SMOOTH",
"90 -227 OFFCURVE",
"92.333 -235.333 OFFCURVE",
"103 -242 CURVE SMOOTH",
"158 -276 LINE",
"263.333 -184 OFFCURVE",
"326 -72.333 OFFCURVE",
"326 49 CURVE SMOOTH",
"326 113 OFFCURVE",
"309.667 177 OFFCURVE",
"271 241 CURVE"
);
},
{
closed = 1;
nodes = (
"466 197 LINE SMOOTH",
"448 189.667 OFFCURVE",
"439 178 OFFCURVE",
"439 162 CURVE SMOOTH",
"439 154.667 OFFCURVE",
"441.333 147.333 OFFCURVE",
"446 140 CURVE SMOOTH",
"476.667 89.333 OFFCURVE",
"488 44.667 OFFCURVE",
"488 2 CURVE SMOOTH",
"488 -72.497 OFFCURVE",
"448.268 -142.432 OFFCURVE",
"404 -195 CURVE",
"397.333 -201.667 OFFCURVE",
"394 -209.667 OFFCURVE",
"394 -219 CURVE SMOOTH",
"394 -227 OFFCURVE",
"396.333 -235.333 OFFCURVE",
"407 -242 CURVE SMOOTH",
"462 -276 LINE",
"567.333 -184 OFFCURVE",
"630 -72.333 OFFCURVE",
"630 49 CURVE SMOOTH",
"630 113 OFFCURVE",
"613.667 177 OFFCURVE",
"575 241 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 31 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 728;
}
);
note = quotedblbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"223 1056 LINE SMOOTH",
"241 1062.667 OFFCURVE",
"250 1074 OFFCURVE",
"250 1090 CURVE SMOOTH",
"250 1098 OFFCURVE",
"247.667 1105.667 OFFCURVE",
"243 1113 CURVE SMOOTH",
"212.333 1163.667 OFFCURVE",
"201 1208.333 OFFCURVE",
"201 1251 CURVE SMOOTH",
"201 1328.151 OFFCURVE",
"240.951 1392.939 OFFCURVE",
"285 1448 CURVE",
"291.667 1454.667 OFFCURVE",
"295 1462.667 OFFCURVE",
"295 1472 CURVE SMOOTH",
"295 1480 OFFCURVE",
"292.667 1488.333 OFFCURVE",
"282 1495 CURVE SMOOTH",
"227 1529 LINE",
"120.333 1437 OFFCURVE",
"58 1325 OFFCURVE",
"58 1205 CURVE SMOOTH",
"58 1141 OFFCURVE",
"75.333 1076 OFFCURVE",
"114 1012 CURVE"
);
},
{
closed = 1;
nodes = (
"527 1056 LINE SMOOTH",
"545 1062.667 OFFCURVE",
"554 1074 OFFCURVE",
"554 1090 CURVE SMOOTH",
"554 1098 OFFCURVE",
"551.667 1105.667 OFFCURVE",
"547 1113 CURVE SMOOTH",
"516.333 1163.667 OFFCURVE",
"505 1208.333 OFFCURVE",
"505 1251 CURVE SMOOTH",
"505 1328.151 OFFCURVE",
"544.951 1392.939 OFFCURVE",
"589 1448 CURVE",
"595.667 1454.667 OFFCURVE",
"599 1462.667 OFFCURVE",
"599 1472 CURVE SMOOTH",
"599 1480 OFFCURVE",
"596.667 1488.333 OFFCURVE",
"586 1495 CURVE SMOOTH",
"531 1529 LINE",
"424.333 1437 OFFCURVE",
"362 1325 OFFCURVE",
"362 1205 CURVE SMOOTH",
"362 1141 OFFCURVE",
"379.333 1076 OFFCURVE",
"418 1012 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
31 25 6 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 728;
}
);
note = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"162 1464 LINE SMOOTH",
"144 1456.667 OFFCURVE",
"135 1445 OFFCURVE",
"135 1429 CURVE SMOOTH",
"135 1421.667 OFFCURVE",
"137.333 1414.333 OFFCURVE",
"142 1407 CURVE SMOOTH",
"172.667 1356.333 OFFCURVE",
"184 1311.667 OFFCURVE",
"184 1269 CURVE SMOOTH",
"184 1194.503 OFFCURVE",
"144.268 1124.568 OFFCURVE",
"100 1072 CURVE",
"93.333 1065.333 OFFCURVE",
"90 1057.333 OFFCURVE",
"90 1048 CURVE SMOOTH",
"90 1040 OFFCURVE",
"92.333 1031.667 OFFCURVE",
"103 1025 CURVE SMOOTH",
"158 991 LINE",
"263.333 1083 OFFCURVE",
"326 1194.667 OFFCURVE",
"326 1316 CURVE SMOOTH",
"326 1380 OFFCURVE",
"309.667 1444 OFFCURVE",
"271 1508 CURVE"
);
},
{
closed = 1;
nodes = (
"466 1464 LINE SMOOTH",
"448 1456.667 OFFCURVE",
"439 1445 OFFCURVE",
"439 1429 CURVE SMOOTH",
"439 1421.667 OFFCURVE",
"441.333 1414.333 OFFCURVE",
"446 1407 CURVE SMOOTH",
"476.667 1356.333 OFFCURVE",
"488 1311.667 OFFCURVE",
"488 1269 CURVE SMOOTH",
"488 1194.503 OFFCURVE",
"448.268 1124.568 OFFCURVE",
"404 1072 CURVE",
"397.333 1065.333 OFFCURVE",
"394 1057.333 OFFCURVE",
"394 1048 CURVE SMOOTH",
"394 1040 OFFCURVE",
"396.333 1031.667 OFFCURVE",
"407 1025 CURVE SMOOTH",
"462 991 LINE",
"567.333 1083 OFFCURVE",
"630 1194.667 OFFCURVE",
"630 1316 CURVE SMOOTH",
"630 1380 OFFCURVE",
"613.667 1444 OFFCURVE",
"575 1508 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 31 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 728;
}
);
note = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"223 1056 LINE SMOOTH",
"241 1062.667 OFFCURVE",
"250 1074 OFFCURVE",
"250 1090 CURVE SMOOTH",
"250 1098 OFFCURVE",
"247.667 1105.667 OFFCURVE",
"243 1113 CURVE SMOOTH",
"212.333 1163.667 OFFCURVE",
"201 1208.333 OFFCURVE",
"201 1251 CURVE SMOOTH",
"201 1328.151 OFFCURVE",
"240.951 1392.939 OFFCURVE",
"285 1448 CURVE",
"291.667 1454.667 OFFCURVE",
"295 1462.667 OFFCURVE",
"295 1472 CURVE SMOOTH",
"295 1480 OFFCURVE",
"292.667 1488.333 OFFCURVE",
"282 1495 CURVE SMOOTH",
"227 1529 LINE",
"120.333 1437 OFFCURVE",
"58 1325 OFFCURVE",
"58 1205 CURVE SMOOTH",
"58 1141 OFFCURVE",
"75.333 1076 OFFCURVE",
"114 1012 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 424;
}
);
note = quoteleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"162 1464 LINE SMOOTH",
"144 1456.667 OFFCURVE",
"135 1445 OFFCURVE",
"135 1429 CURVE SMOOTH",
"135 1421.667 OFFCURVE",
"137.333 1414.333 OFFCURVE",
"142 1407 CURVE SMOOTH",
"172.667 1356.333 OFFCURVE",
"184 1311.667 OFFCURVE",
"184 1269 CURVE SMOOTH",
"184 1194.503 OFFCURVE",
"144.268 1124.568 OFFCURVE",
"100 1072 CURVE",
"93.333 1065.333 OFFCURVE",
"90 1057.333 OFFCURVE",
"90 1048 CURVE SMOOTH",
"90 1040 OFFCURVE",
"92.333 1031.667 OFFCURVE",
"103 1025 CURVE SMOOTH",
"158 991 LINE",
"263.333 1083 OFFCURVE",
"326 1194.667 OFFCURVE",
"326 1316 CURVE SMOOTH",
"326 1380 OFFCURVE",
"309.667 1444 OFFCURVE",
"271 1508 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 424;
}
);
note = quoteright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"387 129 LINE",
"445 157 LINE SMOOTH",
"463.667 165.667 OFFCURVE",
"473 179.333 OFFCURVE",
"473 198 CURVE SMOOTH",
"473 208.667 OFFCURVE",
"469.667 221.333 OFFCURVE",
"463 232 CURVE SMOOTH",
"304 493 LINE SMOOTH",
"295.333 507.667 OFFCURVE",
"286 519.667 OFFCURVE",
"276 529 CURVE",
"285.333 537.667 OFFCURVE",
"294.667 550 OFFCURVE",
"304 566 CURVE SMOOTH",
"463 827 LINE SMOOTH",
"469.667 837.667 OFFCURVE",
"473 848.667 OFFCURVE",
"473 860 CURVE SMOOTH",
"473 877.333 OFFCURVE",
"463.667 892.667 OFFCURVE",
"445 902 CURVE SMOOTH",
"387 930 LINE",
"138 541 LINE",
"138 518 LINE"
);
},
{
closed = 1;
nodes = (
"683 129 LINE",
"741 157 LINE SMOOTH",
"759.667 165.667 OFFCURVE",
"769 179.333 OFFCURVE",
"769 198 CURVE SMOOTH",
"769 208.667 OFFCURVE",
"765.667 221.333 OFFCURVE",
"759 232 CURVE SMOOTH",
"600 493 LINE SMOOTH",
"591.333 507.667 OFFCURVE",
"582 519.667 OFFCURVE",
"572 529 CURVE",
"581.333 537.667 OFFCURVE",
"590.667 550 OFFCURVE",
"600 566 CURVE SMOOTH",
"759 827 LINE SMOOTH",
"765.667 837.667 OFFCURVE",
"769 848.667 OFFCURVE",
"769 860 CURVE SMOOTH",
"769 877.333 OFFCURVE",
"759.667 892.667 OFFCURVE",
"741 902 CURVE SMOOTH",
"683 930 LINE",
"434 541 LINE",
"434 518 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
23 41 2 20 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 926;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"485 518 LINE",
"485 541 LINE",
"236 930 LINE",
"178 902 LINE SMOOTH",
"159.333 893.333 OFFCURVE",
"150 879.667 OFFCURVE",
"150 861 CURVE SMOOTH",
"150 849.667 OFFCURVE",
"153.333 838.333 OFFCURVE",
"160 827 CURVE SMOOTH",
"319 566 LINE SMOOTH",
"329 548.667 OFFCURVE",
"338 536.333 OFFCURVE",
"346 529 CURVE",
"336.667 521 OFFCURVE",
"327.667 509 OFFCURVE",
"319 493 CURVE",
"160 232 LINE SMOOTH",
"153.333 220.667 OFFCURVE",
"150 209.333 OFFCURVE",
"150 198 CURVE SMOOTH",
"150 179.333 OFFCURVE",
"159.333 165.667 OFFCURVE",
"178 157 CURVE SMOOTH",
"236 129 LINE"
);
},
{
closed = 1;
nodes = (
"532 930 LINE",
"474 902 LINE SMOOTH",
"455.333 893.333 OFFCURVE",
"446 879.667 OFFCURVE",
"446 861 CURVE SMOOTH",
"446 849.667 OFFCURVE",
"449.333 838.333 OFFCURVE",
"456 827 CURVE SMOOTH",
"615 566 LINE SMOOTH",
"625 548.667 OFFCURVE",
"634 536.333 OFFCURVE",
"642 529 CURVE",
"632.667 521 OFFCURVE",
"623.667 509 OFFCURVE",
"615 493 CURVE",
"456 232 LINE SMOOTH",
"449.333 220.667 OFFCURVE",
"446 209.333 OFFCURVE",
"446 198 CURVE SMOOTH",
"446 179.333 OFFCURVE",
"455.333 165.667 OFFCURVE",
"474 157 CURVE SMOOTH",
"532 129 LINE",
"781 518 LINE",
"781 541 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
37 21 16 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 926;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"387 129 LINE",
"445 157 LINE SMOOTH",
"463.667 165.667 OFFCURVE",
"473 179.333 OFFCURVE",
"473 198 CURVE SMOOTH",
"473 208.667 OFFCURVE",
"469.667 221.333 OFFCURVE",
"463 232 CURVE SMOOTH",
"304 493 LINE SMOOTH",
"295.333 507.667 OFFCURVE",
"286 519.667 OFFCURVE",
"276 529 CURVE",
"285.333 537.667 OFFCURVE",
"294.667 550 OFFCURVE",
"304 566 CURVE SMOOTH",
"463 827 LINE SMOOTH",
"469.667 837.667 OFFCURVE",
"473 848.667 OFFCURVE",
"473 860 CURVE SMOOTH",
"473 877.333 OFFCURVE",
"463.667 892.667 OFFCURVE",
"445 902 CURVE SMOOTH",
"387 930 LINE",
"138 541 LINE",
"138 518 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
2 20 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 632;
}
);
note = guilsinglleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"236 930 LINE",
"178 902 LINE SMOOTH",
"159.333 893.333 OFFCURVE",
"150 879.667 OFFCURVE",
"150 861 CURVE SMOOTH",
"150 849.667 OFFCURVE",
"153.333 838.333 OFFCURVE",
"160 827 CURVE SMOOTH",
"319 566 LINE SMOOTH",
"329 548.667 OFFCURVE",
"338 536.333 OFFCURVE",
"346 529 CURVE",
"336.667 521 OFFCURVE",
"327.667 509 OFFCURVE",
"319 493 CURVE",
"160 232 LINE SMOOTH",
"153.333 220.667 OFFCURVE",
"150 209.333 OFFCURVE",
"150 198 CURVE SMOOTH",
"150 179.333 OFFCURVE",
"159.333 165.667 OFFCURVE",
"178 157 CURVE SMOOTH",
"236 129 LINE",
"485 518 LINE",
"485 541 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
18 2 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 632;
}
);
note = guilsinglright;
unicode = 203A;
},
{
glyphname = quotedbl;
lastChange = "2020-02-16 14:48:47 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"94 1498 LINE",
"163 1054 LINE",
"171 1011 OFFCURVE",
"184 981 OFFCURVE",
"219 981 CURVE SMOOTH",
"260 981 OFFCURVE",
"269 1011 OFFCURVE",
"276 1054 CURVE SMOOTH",
"346 1498 LINE"
);
},
{
closed = 1;
nodes = (
"466 1498 LINE",
"535 1054 LINE",
"543 1011 OFFCURVE",
"556 981 OFFCURVE",
"591 981 CURVE SMOOTH",
"632 981 OFFCURVE",
"641 1011 OFFCURVE",
"648 1054 CURVE SMOOTH",
"718 1498 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 11 0 0 11 21 11 21 17 15 0 10 0 10 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
20 12 9 1 4 0 1 1 30 2 1 0 0 1 0 0 36 5 3 4 3 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
20 12 9 1 4 0 1 1 30 5 3 4 3 1 0 0 1 0 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
20 12 9 1 4 2 3 1 30 4 1 1 3 0 1 0 0 35 5 1 3 0 2 0 3 2 1 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 794;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
lastChange = "2020-02-16 15:24:22 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"152 1303 LINE",
"188 858 LINE",
"196 815 OFFCURVE",
"206 791 OFFCURVE",
"229 791 CURVE SMOOTH",
"251 791 OFFCURVE",
"266 812 OFFCURVE",
"270 858 CURVE SMOOTH",
"307 1303 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 10 0 10 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
9 1 2 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
9 1 2 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 460;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = CR;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 0;
}
);
note = CR;
},
{
glyphname = .notdef;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"297 1065 LINE",
"305 1050.333 OFFCURVE",
"317.333 1043 OFFCURVE",
"334 1043 CURVE SMOOTH",
"360.404 1043 OFFCURVE",
"448.195 1101 OFFCURVE",
"510 1101 CURVE SMOOTH",
"586 1101 OFFCURVE",
"640 1058 OFFCURVE",
"640 990 CURVE SMOOTH",
"640 914.558 OFFCURVE",
"588.23 866.531 OFFCURVE",
"532.5 826 CURVE SMOOTH",
"478.504 786.73 OFFCURVE",
"430.339 743.118 OFFCURVE",
"438 678 CURVE SMOOTH",
"450 561 LINE",
"572 561 LINE",
"589 666 LINE SMOOTH",
"596.558 709.46 OFFCURVE",
"655.37 747.573 OFFCURVE",
"703 785.5 CURVE SMOOTH",
"721 799.833 OFFCURVE",
"737.5 816.833 OFFCURVE",
"752.5 836.5 CURVE SMOOTH",
"782.5 875.833 OFFCURVE",
"805 927.667 OFFCURVE",
"805 1001 CURVE SMOOTH",
"805 1152.82 OFFCURVE",
"688.823 1247 OFFCURVE",
"525 1247 CURVE SMOOTH",
"409.398 1247 OFFCURVE",
"319.51 1202.169 OFFCURVE",
"250 1141 CURVE"
);
},
{
closed = 1;
nodes = (
"396 229.333 OFFCURVE",
"442 182 OFFCURVE",
"506 182 CURVE SMOOTH",
"565.473 182 OFFCURVE",
"614 230.652 OFFCURVE",
"614 292 CURVE SMOOTH",
"614 354.194 OFFCURVE",
"565.951 403 OFFCURVE",
"506 403 CURVE SMOOTH",
"442 403 OFFCURVE",
"396 354.667 OFFCURVE",
"396 292 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"45 0 LINE",
"1019 0 LINE",
"1019 1433 LINE",
"45 1433 LINE"
);
},
{
closed = 1;
nodes = (
"95 1378 LINE",
"962 1378 LINE",
"962 54 LINE",
"95 54 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
61 60 59 58 57 56 55 54 52 50 42 40 36 34 31 29 19 18 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 8 7 0 0 36 0 7 7 15 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 7 7 8 0 0 35 0 8 8 7 0 0 36 0 7 8 7 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1063;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 386;
}
);
note = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 386;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = at;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1279 186 OFFCURVE",
"1378.167 239.667 OFFCURVE",
"1449.5 329 CURVE SMOOTH",
"1520.833 418.333 OFFCURVE",
"1564 543 OFFCURVE",
"1564 687 CURVE SMOOTH",
"1564 758.333 OFFCURVE",
"1555.167 824.5 OFFCURVE",
"1537.5 885.5 CURVE SMOOTH",
"1502.167 1007.5 OFFCURVE",
"1438 1106.833 OFFCURVE",
"1350 1183.5 CURVE SMOOTH",
"1306 1221.833 OFFCURVE",
"1257.833 1254 OFFCURVE",
"1205.5 1280 CURVE SMOOTH",
"1100.833 1332 OFFCURVE",
"981.667 1359 OFFCURVE",
"859 1359 CURVE SMOOTH",
"787 1359 OFFCURVE",
"718 1349.5 OFFCURVE",
"652 1330.5 CURVE SMOOTH",
"520 1292.5 OFFCURVE",
"404.333 1223.167 OFFCURVE",
"311 1126.5 CURVE SMOOTH",
"264.333 1078.167 OFFCURVE",
"224.333 1024.833 OFFCURVE",
"191 966.5 CURVE SMOOTH",
"124.333 849.833 OFFCURVE",
"86 713.333 OFFCURVE",
"86 568 CURVE SMOOTH",
"86 314.667 OFFCURVE",
"174.5 112.5 OFFCURVE",
"320.5 -25.5 CURVE SMOOTH",
"466.5 -163.5 OFFCURVE",
"670.333 -239 OFFCURVE",
"901 -239 CURVE SMOOTH",
"1131.667 -239 OFFCURVE",
"1311.333 -181 OFFCURVE",
"1454 -85 CURVE",
"1429 -19 LINE SMOOTH",
"1422.333 -3 OFFCURVE",
"1412 5 OFFCURVE",
"1398 5 CURVE SMOOTH",
"1390 5 OFFCURVE",
"1381 2 OFFCURVE",
"1371 -4 CURVE SMOOTH",
"1257.667 -72 OFFCURVE",
"1103.667 -121 OFFCURVE",
"901 -121 CURVE SMOOTH",
"710.333 -121 OFFCURVE",
"539.833 -62 OFFCURVE",
"416.5 54 CURVE SMOOTH",
"293.167 170 OFFCURVE",
"217 341.333 OFFCURVE",
"217 568 CURVE SMOOTH",
"217 761.333 OFFCURVE",
"288 929 OFFCURVE",
"404 1049 CURVE SMOOTH",
"520 1169 OFFCURVE",
"680.333 1241 OFFCURVE",
"859 1241 CURVE SMOOTH",
"1021.667 1241 OFFCURVE",
"1166.167 1195.167 OFFCURVE",
"1269.5 1102.5 CURVE SMOOTH",
"1372.833 1009.833 OFFCURVE",
"1436 871 OFFCURVE",
"1436 687 CURVE SMOOTH",
"1436 571 OFFCURVE",
"1408.167 474 OFFCURVE",
"1363.5 406 CURVE SMOOTH",
"1318.833 338 OFFCURVE",
"1258.333 299 OFFCURVE",
"1193 299 CURVE SMOOTH",
"1123.743 299 OFFCURVE",
"1080 329.04 OFFCURVE",
"1080 419 CURVE SMOOTH",
"1080 451.667 OFFCURVE",
"1086.333 493 OFFCURVE",
"1099 543 CURVE SMOOTH",
"1192 904 LINE",
"1132 930.667 OFFCURVE",
"1068.333 945 OFFCURVE",
"979 945 CURVE SMOOTH",
"812.333 945 OFFCURVE",
"684.333 880.167 OFFCURVE",
"599 787.5 CURVE SMOOTH",
"513.667 694.833 OFFCURVE",
"470 573.333 OFFCURVE",
"470 460 CURVE SMOOTH",
"470 302.736 OFFCURVE",
"548.893 188 OFFCURVE",
"706 188 CURVE SMOOTH",
"810 188 OFFCURVE",
"900.667 231 OFFCURVE",
"978 339 CURVE",
"995.333 235 OFFCURVE",
"1063 186 OFFCURVE",
"1167 186 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"654.333 306 OFFCURVE",
"610 369 OFFCURVE",
"610 465 CURVE SMOOTH",
"610 557 OFFCURVE",
"646 649 OFFCURVE",
"706 717 CURVE SMOOTH",
"766 785 OFFCURVE",
"851 831 OFFCURVE",
"951 831 CURVE SMOOTH",
"981.667 831 OFFCURVE",
"1010 828 OFFCURVE",
"1036 822 CURVE",
"960 527 LINE SMOOTH",
"919.584 372.466 OFFCURVE",
"840.482 306 OFFCURVE",
"741 306 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
83 82 1 0 91 89 82 97 83 97 71 69 59 57 53 51 48 46 38 36 28 26 17 15 7 5 0 81 1 81 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
67 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
19 1 10 2 88 3 2 3 10 55 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 3 2 10 1 0 38 12 9 2 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
199 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
19 1 10 2 88 3 2 9 10 55 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 3 0 9 1 0 35 0 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 88 values pushed */
19 1 10 2 88 3 2 9 10 55 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 0 1 0 9 1 1 0 38 0 3 11 1 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1644;
}
);
note = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"541.333 1449 OFFCURVE",
"444.667 1409.833 OFFCURVE",
"378 1346.5 CURVE SMOOTH",
"311.333 1283.167 OFFCURVE",
"275 1195.333 OFFCURVE",
"275 1098 CURVE SMOOTH",
"275 994 OFFCURVE",
"312.667 899.667 OFFCURVE",
"394 797 CURVE",
"303.333 757 OFFCURVE",
"225.833 700.667 OFFCURVE",
"170.5 630 CURVE SMOOTH",
"115.167 559.333 OFFCURVE",
"82 475.333 OFFCURVE",
"82 382 CURVE SMOOTH",
"82 258 OFFCURVE",
"135.833 158.167 OFFCURVE",
"216.5 89.5 CURVE SMOOTH",
"297.167 20.833 OFFCURVE",
"404.333 -16 OFFCURVE",
"511 -16 CURVE SMOOTH",
"707 -16 OFFCURVE",
"871.667 59.667 OFFCURVE",
"997 181 CURVE",
"1141 36 LINE SMOOTH",
"1170.333 6.667 OFFCURVE",
"1189.333 0 OFFCURVE",
"1228 0 CURVE SMOOTH",
"1400 0 LINE",
"1100 304 LINE",
"1188 433.333 OFFCURVE",
"1235.333 584.667 OFFCURVE",
"1238 738 CURVE",
"1128 738 LINE SMOOTH",
"1104 738 OFFCURVE",
"1090.667 722.333 OFFCURVE",
"1088 697 CURVE SMOOTH",
"1077.333 598.333 OFFCURVE",
"1047.667 498.333 OFFCURVE",
"997 409 CURVE",
"585 828 LINE SMOOTH",
"493.412 919.588 OFFCURVE",
"442 1003.765 OFFCURVE",
"442 1099 CURVE SMOOTH",
"442 1221.437 OFFCURVE",
"530.236 1310 OFFCURVE",
"660 1310 CURVE SMOOTH",
"772.146 1310 OFFCURVE",
"840.528 1231.752 OFFCURVE",
"862 1152 CURVE SMOOTH",
"868.667 1128 OFFCURVE",
"885.667 1120 OFFCURVE",
"903 1120 CURVE SMOOTH",
"905.667 1120 OFFCURVE",
"908.667 1120.333 OFFCURVE",
"912 1121 CURVE SMOOTH",
"1023 1143 LINE",
"1017.667 1223 OFFCURVE",
"979.833 1300 OFFCURVE",
"916.5 1356 CURVE SMOOTH",
"853.167 1412 OFFCURVE",
"765.333 1449 OFFCURVE",
"660 1449 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"263 521.333 OFFCURVE",
"334.667 630 OFFCURVE",
"476 706 CURVE",
"899 279 LINE",
"808.333 188.333 OFFCURVE",
"690.333 129 OFFCURVE",
"541 129 CURVE SMOOTH",
"395.195 129 OFFCURVE",
"263 230.677 OFFCURVE",
"263 396 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 70 68 47 45 40 38 34 32 17 15 9 7 0 63 1 63 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
5 1 1 2 56 1 3 1 73 72 43 37 27 5 6 3 3 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 5 1 4 4 12 31 0 6 6 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
5 1 1 2 56 1 3 1 73 72 43 37 27 5 6 3 3 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 0 4 4 12 31 0 6 6 5 1 0 36 0 5 5 18 5 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
5 1 1 2 56 1 3 1 73 72 43 37 27 5 6 3 3 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 3 3 4 1 0 36 0 4 4 15 31 0 6 6 5 1 0 36 0 5 5 21 5 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 70 values pushed */
5 1 1 2 56 1 3 1 73 72 43 37 27 5 6 3 3 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 6 4 5 6 1 0 35 0 3 0 4 5 3 4 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1406;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"492 1433 LINE SMOOTH",
"353.333 1433 OFFCURVE",
"241.5 1393.833 OFFCURVE",
"163.5 1326.5 CURVE SMOOTH",
"85.5 1259.167 OFFCURVE",
"42 1163.667 OFFCURVE",
"42 1049 CURVE SMOOTH",
"42 941 OFFCURVE",
"85.5 843.5 OFFCURVE",
"163.5 773.5 CURVE SMOOTH",
"241.5 703.5 OFFCURVE",
"353.333 660 OFFCURVE",
"492 660 CURVE",
"492 -201 LINE",
"649 -201 LINE",
"649 1280 LINE",
"926 1280 LINE",
"926 -201 LINE",
"1083 -201 LINE",
"1083 1280 LINE",
"1302 1280 LINE",
"1302 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 19 0 18 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 2 1 0 0 5 1 0 36 6 1 5 5 11 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 6 1 5 0 0 5 1 0 35 6 1 5 5 0 0 0 36 2 1 0 5 0 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 0 2 4 2 0 42 0 4 3 2 4 3 48 0 3 1 2 3 1 48 0 1 1 51 6 1 5 2 2 5 1 0 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1338;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"857 1330 LINE",
"779.667 1403.333 OFFCURVE",
"673.333 1447 OFFCURVE",
"540 1447 CURVE SMOOTH",
"425.333 1447 OFFCURVE",
"335.333 1412.333 OFFCURVE",
"274 1359 CURVE SMOOTH",
"212.667 1305.667 OFFCURVE",
"180 1231.333 OFFCURVE",
"180 1154 CURVE SMOOTH",
"180 1054 OFFCURVE",
"226.333 986.667 OFFCURVE",
"293 936 CURVE",
"169 889.333 OFFCURVE",
"114 802 OFFCURVE",
"114 698 CURVE SMOOTH",
"114 531.302 OFFCURVE",
"253.213 458.715 OFFCURVE",
"405 398 CURVE SMOOTH",
"545.634 341.747 OFFCURVE",
"696 293.269 OFFCURVE",
"696 172 CURVE SMOOTH",
"696 66.533 OFFCURVE",
"612.724 2 OFFCURVE",
"485 2 CURVE SMOOTH",
"401 2 OFFCURVE",
"346.667 24.167 OFFCURVE",
"308 47.5 CURVE SMOOTH",
"276.744 66.361 OFFCURVE",
"242.234 93 OFFCURVE",
"221 93 CURVE SMOOTH",
"198.333 93 OFFCURVE",
"183.667 83.333 OFFCURVE",
"173 66 CURVE SMOOTH",
"132 -2 LINE",
"212 -74 OFFCURVE",
"328.667 -125 OFFCURVE",
"470 -125 CURVE SMOOTH",
"592.667 -125 OFFCURVE",
"688.833 -89.5 OFFCURVE",
"753.5 -31.5 CURVE SMOOTH",
"818.167 26.5 OFFCURVE",
"852 107.667 OFFCURVE",
"852 201 CURVE SMOOTH",
"852 293 OFFCURVE",
"806.333 355.667 OFFCURVE",
"741 405 CURVE",
"853 455.667 OFFCURVE",
"903 543 OFFCURVE",
"903 651 CURVE SMOOTH",
"903 809.858 OFFCURVE",
"765.756 889.364 OFFCURVE",
"620.5 953 CURVE SMOOTH",
"562.317 978.49 OFFCURVE",
"472.21 1015.305 OFFCURVE",
"426.5 1042.5 CURVE SMOOTH",
"373.833 1073.833 OFFCURVE",
"338 1110.333 OFFCURVE",
"338 1161 CURVE SMOOTH",
"338 1250.389 OFFCURVE",
"424.082 1315 OFFCURVE",
"544 1315 CURVE SMOOTH",
"613.333 1315 OFFCURVE",
"662.833 1296.5 OFFCURVE",
"699.5 1278.5 CURVE SMOOTH",
"728.305 1264.36 OFFCURVE",
"762.557 1243 OFFCURVE",
"780 1243 CURVE SMOOTH",
"796.667 1243 OFFCURVE",
"809 1250.333 OFFCURVE",
"817 1265 CURVE"
);
},
{
closed = 1;
nodes = (
"272 790 OFFCURVE",
"304 837 OFFCURVE",
"392 877 CURVE",
"418.667 863.667 OFFCURVE",
"446 851.167 OFFCURVE",
"474 839.5 CURVE SMOOTH",
"530 816.167 OFFCURVE",
"583.333 793.333 OFFCURVE",
"630 768 CURVE SMOOTH",
"680.353 740.665 OFFCURVE",
"747 668.108 OFFCURVE",
"747 611 CURVE SMOOTH",
"747 548.333 OFFCURVE",
"717 497.667 OFFCURVE",
"645 463 CURVE",
"575.282 497.859 OFFCURVE",
"459.347 542.635 OFFCURVE",
"396.5 575.5 CURVE SMOOTH",
"323.833 613.5 OFFCURVE",
"272 658 OFFCURVE",
"272 726 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
70 68 45 43 40 38 33 31 8 6 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
72 1 1 5 88 78 61 24 4 3 0 35 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 4 0 2 4 2 1 0 37 0 1 1 5 1 0 36 0 5 5 17 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
72 1 1 5 88 78 61 24 4 3 0 35 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1006;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1009.269 450.561 OFFCURVE",
"973.359 427.15 OFFCURVE",
"949 417 CURVE SMOOTH",
"917 403.667 OFFCURVE",
"875 395 OFFCURVE",
"811 395 CURVE SMOOTH",
"728.333 395 OFFCURVE",
"655.667 424.333 OFFCURVE",
"605 479 CURVE SMOOTH",
"554.333 533.667 OFFCURVE",
"524 615.333 OFFCURVE",
"524 718 CURVE SMOOTH",
"524 818 OFFCURVE",
"553.833 899 OFFCURVE",
"606.5 955 CURVE SMOOTH",
"659.167 1011 OFFCURVE",
"735.667 1042 OFFCURVE",
"829 1042 CURVE SMOOTH",
"907.667 1042 OFFCURVE",
"955.667 1023.5 OFFCURVE",
"989 1005.5 CURVE SMOOTH",
"1013.451 992.297 OFFCURVE",
"1043.557 970 OFFCURVE",
"1059 970 CURVE SMOOTH",
"1075 970 OFFCURVE",
"1085.333 980 OFFCURVE",
"1092 988 CURVE",
"1138 1053 LINE",
"1062 1126.333 OFFCURVE",
"965 1176 OFFCURVE",
"821 1176 CURVE SMOOTH",
"690.333 1176 OFFCURVE",
"576.333 1129.167 OFFCURVE",
"495 1048.5 CURVE SMOOTH",
"413.667 967.833 OFFCURVE",
"365 852.667 OFFCURVE",
"365 718 CURVE SMOOTH",
"365 584.667 OFFCURVE",
"408.833 470.333 OFFCURVE",
"485.5 389 CURVE SMOOTH",
"562.167 307.667 OFFCURVE",
"671.333 260 OFFCURVE",
"802 260 CURVE SMOOTH",
"956.667 260 OFFCURVE",
"1065 311 OFFCURVE",
"1141 399 CURVE",
"1080 463 LINE SMOOTH",
"1072 471 OFFCURVE",
"1069.667 475 OFFCURVE",
"1055 475 CURVE SMOOTH",
"1051 475 OFFCURVE",
"1047.167 473.833 OFFCURVE",
"1043.5 471.5 CURVE SMOOTH",
"1039.833 469.167 OFFCURVE",
"1035.333 466.333 OFFCURVE",
"1030 463 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"68 648.667 OFFCURVE",
"76.667 584 OFFCURVE",
"94 522 CURVE SMOOTH",
"128.667 398 OFFCURVE",
"192.667 289.167 OFFCURVE",
"282 200.5 CURVE SMOOTH",
"326.667 156.167 OFFCURVE",
"376 118 OFFCURVE",
"430 86 CURVE SMOOTH",
"538 22 OFFCURVE",
"663.333 -14 OFFCURVE",
"798 -14 CURVE SMOOTH",
"865.333 -14 OFFCURVE",
"930.167 -5.333 OFFCURVE",
"992.5 12 CURVE SMOOTH",
"1117.167 46.667 OFFCURVE",
"1225.667 111.833 OFFCURVE",
"1315 200.5 CURVE SMOOTH",
"1359.667 244.833 OFFCURVE",
"1397.833 294 OFFCURVE",
"1429.5 348 CURVE SMOOTH",
"1492.833 456 OFFCURVE",
"1529 582.667 OFFCURVE",
"1529 716 CURVE SMOOTH",
"1529 783.333 OFFCURVE",
"1520.333 848.167 OFFCURVE",
"1503 910.5 CURVE SMOOTH",
"1468.333 1035.167 OFFCURVE",
"1404.333 1144.833 OFFCURVE",
"1315 1233.5 CURVE SMOOTH",
"1270.333 1277.833 OFFCURVE",
"1221 1316 OFFCURVE",
"1167 1348 CURVE SMOOTH",
"1059 1412 OFFCURVE",
"932.667 1448 OFFCURVE",
"798 1448 CURVE SMOOTH",
"730.667 1448 OFFCURVE",
"666 1439.333 OFFCURVE",
"604 1422 CURVE SMOOTH",
"480 1387.333 OFFCURVE",
"371.333 1322.167 OFFCURVE",
"282 1233.5 CURVE SMOOTH",
"237.333 1189.167 OFFCURVE",
"199.167 1139.833 OFFCURVE",
"167.5 1085.5 CURVE SMOOTH",
"104.167 976.833 OFFCURVE",
"68 850.667 OFFCURVE",
"68 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"168 894.667 OFFCURVE",
"237.667 1055.833 OFFCURVE",
"351 1172.5 CURVE SMOOTH",
"464.333 1289.167 OFFCURVE",
"622 1361 OFFCURVE",
"798 1361 CURVE SMOOTH",
"856.667 1361 OFFCURVE",
"913.167 1353.333 OFFCURVE",
"967.5 1338 CURVE SMOOTH",
"1076.167 1307.333 OFFCURVE",
"1169.833 1251.667 OFFCURVE",
"1246.5 1173 CURVE SMOOTH",
"1284.833 1133.667 OFFCURVE",
"1317.667 1090.167 OFFCURVE",
"1345 1042.5 CURVE SMOOTH",
"1399.667 947.167 OFFCURVE",
"1431 834.667 OFFCURVE",
"1431 716 CURVE SMOOTH",
"1431 537.333 OFFCURVE",
"1360.5 377.833 OFFCURVE",
"1246.5 262.5 CURVE SMOOTH",
"1132.5 147.167 OFFCURVE",
"974 76 OFFCURVE",
"798 76 CURVE SMOOTH",
"739.333 76 OFFCURVE",
"683 83.5 OFFCURVE",
"629 98.5 CURVE SMOOTH",
"521 128.5 OFFCURVE",
"427 184.667 OFFCURVE",
"351 262 CURVE SMOOTH",
"313 300.667 OFFCURVE",
"280.333 343.833 OFFCURVE",
"253 391.5 CURVE SMOOTH",
"198.333 486.833 OFFCURVE",
"168 597.333 OFFCURVE",
"168 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
95 93 83 81 69 67 55 53 43 41 33 31 28 26 21 19 11 9 4 2 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
23 1 4 2 7 1 5 0 2 30 0 3 4 0 4 3 0 50 0 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 18 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
23 1 4 2 7 1 5 0 2 30 0 3 4 0 4 3 0 50 0 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 21 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
23 1 4 2 7 1 5 0 2 30 0 3 4 0 4 3 0 50 0 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 8 7 1 0 36 0 7 7 21 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
23 1 4 2 7 1 5 0 2 30 0 3 4 0 4 3 0 50 0 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 7 7 8 1 0 35 0 8 8 7 1 0 36 0 7 8 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1596;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"68 648.667 OFFCURVE",
"76.667 584 OFFCURVE",
"94 522 CURVE SMOOTH",
"128.667 398 OFFCURVE",
"192.667 289.167 OFFCURVE",
"282 200.5 CURVE SMOOTH",
"326.667 156.167 OFFCURVE",
"376 118 OFFCURVE",
"430 86 CURVE SMOOTH",
"538 22 OFFCURVE",
"663.333 -14 OFFCURVE",
"798 -14 CURVE SMOOTH",
"865.333 -14 OFFCURVE",
"930.167 -5.333 OFFCURVE",
"992.5 12 CURVE SMOOTH",
"1117.167 46.667 OFFCURVE",
"1225.667 111.833 OFFCURVE",
"1315 200.5 CURVE SMOOTH",
"1359.667 244.833 OFFCURVE",
"1397.833 294 OFFCURVE",
"1429.5 348 CURVE SMOOTH",
"1492.833 456 OFFCURVE",
"1529 582.667 OFFCURVE",
"1529 716 CURVE SMOOTH",
"1529 783.333 OFFCURVE",
"1520.333 848.167 OFFCURVE",
"1503 910.5 CURVE SMOOTH",
"1468.333 1035.167 OFFCURVE",
"1404.333 1144.833 OFFCURVE",
"1315 1233.5 CURVE SMOOTH",
"1270.333 1277.833 OFFCURVE",
"1221 1316 OFFCURVE",
"1167 1348 CURVE SMOOTH",
"1059 1412 OFFCURVE",
"932.667 1448 OFFCURVE",
"798 1448 CURVE SMOOTH",
"730.667 1448 OFFCURVE",
"666 1439.333 OFFCURVE",
"604 1422 CURVE SMOOTH",
"480 1387.333 OFFCURVE",
"371.333 1322.167 OFFCURVE",
"282 1233.5 CURVE SMOOTH",
"237.333 1189.167 OFFCURVE",
"199.167 1139.833 OFFCURVE",
"167.5 1085.5 CURVE SMOOTH",
"104.167 976.833 OFFCURVE",
"68 850.667 OFFCURVE",
"68 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"168 894.667 OFFCURVE",
"237.667 1055.833 OFFCURVE",
"351 1172.5 CURVE SMOOTH",
"464.333 1289.167 OFFCURVE",
"622 1361 OFFCURVE",
"798 1361 CURVE SMOOTH",
"856.667 1361 OFFCURVE",
"913.167 1353.333 OFFCURVE",
"967.5 1338 CURVE SMOOTH",
"1076.167 1307.333 OFFCURVE",
"1169.833 1251.667 OFFCURVE",
"1246.5 1173 CURVE SMOOTH",
"1284.833 1133.667 OFFCURVE",
"1317.667 1090.167 OFFCURVE",
"1345 1042.5 CURVE SMOOTH",
"1399.667 947.167 OFFCURVE",
"1431 834.667 OFFCURVE",
"1431 716 CURVE SMOOTH",
"1431 537.333 OFFCURVE",
"1360.5 377.833 OFFCURVE",
"1246.5 262.5 CURVE SMOOTH",
"1132.5 147.167 OFFCURVE",
"974 76 OFFCURVE",
"798 76 CURVE SMOOTH",
"739.333 76 OFFCURVE",
"683 83.5 OFFCURVE",
"629 98.5 CURVE SMOOTH",
"521 128.5 OFFCURVE",
"427 184.667 OFFCURVE",
"351 262 CURVE SMOOTH",
"313 300.667 OFFCURVE",
"280.333 343.833 OFFCURVE",
"253 391.5 CURVE SMOOTH",
"198.333 486.833 OFFCURVE",
"168 597.333 OFFCURVE",
"168 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"734 626 LINE SMOOTH",
"768.667 626 OFFCURVE",
"782 616.333 OFFCURVE",
"794 599 CURVE SMOOTH",
"995 297 LINE SMOOTH",
"1005.667 280.333 OFFCURVE",
"1022 272 OFFCURVE",
"1044 272 CURVE SMOOTH",
"1192 272 LINE",
"964 606 LINE",
"949.333 632.667 OFFCURVE",
"933.667 652.667 OFFCURVE",
"911 666 CURVE",
"1052.333 699.333 OFFCURVE",
"1124 791.667 OFFCURVE",
"1124 917 CURVE SMOOTH",
"1124 1079.667 OFFCURVE",
"1015.333 1164 OFFCURVE",
"786 1164 CURVE SMOOTH",
"498 1164 LINE",
"498 272 LINE",
"654 272 LINE",
"654 626 LINE"
);
},
{
closed = 1;
nodes = (
"654 1044 LINE",
"786 1044 LINE SMOOTH",
"916.043 1044 OFFCURVE",
"970 1002.212 OFFCURVE",
"970 897 CURVE SMOOTH",
"970 788.606 OFFCURVE",
"907.763 740 OFFCURVE",
"770 740 CURVE SMOOTH",
"654 740 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
52 52 86 84 76 74 52 73 52 72 68 66 57 55 54 53 48 46 36 34 22 20 8 6 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 21 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 2 2 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
62 1 7 8 1 30 0 6 7 4 7 6 4 50 0 4 2 7 4 2 48 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 6 8 7 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1596;
}
);
note = registered;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"794 1412 LINE",
"779.333 1429.333 OFFCURVE",
"774.667 1433 OFFCURVE",
"752 1433 CURVE SMOOTH",
"646 1433 LINE",
"646 841 LINE",
"756 841 LINE",
"756 1206 LINE",
"748 1278 LINE",
"932 945 LINE",
"940 926.333 OFFCURVE",
"954.333 917 OFFCURVE",
"975 917 CURVE SMOOTH",
"993 917 LINE SMOOTH",
"1013.667 917 OFFCURVE",
"1028.333 926.333 OFFCURVE",
"1037 945 CURVE",
"1220 1281 LINE",
"1211 1206 LINE",
"1211 841 LINE",
"1321 841 LINE",
"1321 1433 LINE",
"1215 1433 LINE SMOOTH",
"1193.667 1433 OFFCURVE",
"1186 1429.333 OFFCURVE",
"1174 1412 CURVE",
"1005 1109 LINE SMOOTH",
"999.667 1099.667 OFFCURVE",
"995.667 1090.833 OFFCURVE",
"993 1082.5 CURVE SMOOTH",
"990.333 1074.167 OFFCURVE",
"987.333 1065.333 OFFCURVE",
"984 1056 CURVE",
"981.333 1065.333 OFFCURVE",
"978.167 1074.167 OFFCURVE",
"974.5 1082.5 CURVE SMOOTH",
"970.833 1090.833 OFFCURVE",
"967 1099.667 OFFCURVE",
"963 1109 CURVE"
);
},
{
closed = 1;
nodes = (
"64 1433 LINE",
"64 1328 LINE",
"244 1328 LINE",
"244 841 LINE",
"370 841 LINE",
"370 1328 LINE",
"550 1328 LINE",
"550 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
31 31 31 38 31 38 37 36 35 34 33 32 28 26 25 24 20 17 13 12 11 9 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
23 22 15 14 3 5 2 5 1 30 0 2 5 1 5 2 1 50 7 1 5 5 0 1 0 36 9 8 4 3 0 0 11 31 6 3 2 1 1 0 1 0 36 9 8 4 3 0 0 11 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
23 22 15 14 3 5 2 5 1 30 0 2 5 1 5 2 1 50 9 8 4 3 0 7 1 5 2 0 5 0 0 38 9 8 4 3 0 0 1 0 0 36 6 3 2 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
23 22 15 14 3 5 2 5 1 30 0 7 8 5 5 7 42 0 2 5 6 5 2 6 50 0 6 3 5 6 3 48 0 0 4 1 0 1 0 35 9 1 8 0 5 2 8 5 0 0 38 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1440;
}
);
note = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"70 1040 OFFCURVE",
"105.333 959.5 OFFCURVE",
"164 901.5 CURVE SMOOTH",
"222.667 843.5 OFFCURVE",
"304 807 OFFCURVE",
"396 807 CURVE SMOOTH",
"488 807 OFFCURVE",
"569.333 843.5 OFFCURVE",
"628 901.5 CURVE SMOOTH",
"686.667 959.5 OFFCURVE",
"722 1040 OFFCURVE",
"722 1128 CURVE SMOOTH",
"722 1217.333 OFFCURVE",
"686.667 1298.5 OFFCURVE",
"628 1356.5 CURVE SMOOTH",
"569.333 1414.5 OFFCURVE",
"488 1450 OFFCURVE",
"396 1450 CURVE SMOOTH",
"304 1450 OFFCURVE",
"222.667 1414.5 OFFCURVE",
"164 1356.5 CURVE SMOOTH",
"105.333 1298.5 OFFCURVE",
"70 1217.333 OFFCURVE",
"70 1128 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"197 1240.338 OFFCURVE",
"282.705 1329 OFFCURVE",
"396 1329 CURVE SMOOTH",
"508.451 1329 OFFCURVE",
"594 1239.87 OFFCURVE",
"594 1127 CURVE SMOOTH",
"594 1015.312 OFFCURVE",
"508.432 927 OFFCURVE",
"396 927 CURVE SMOOTH",
"282.725 927 OFFCURVE",
"197 1014.856 OFFCURVE",
"197 1127 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 794;
}
);
note = degree;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"230 -343 LINE",
"368 -343 LINE",
"368 1533 LINE",
"230 1533 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 0 0 36 0 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"230 739 LINE",
"368 739 LINE",
"368 1533 LINE",
"230 1533 LINE"
);
},
{
closed = 1;
nodes = (
"230 -343 LINE",
"368 -343 LINE",
"368 452 LINE",
"230 452 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 2 3 0 0 36 0 3 3 16 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"118 858 LINE",
"511 858 LINE",
"511 442 LINE",
"487 -335 LINE",
"513.667 -350.333 OFFCURVE",
"544.667 -358 OFFCURVE",
"580 -358 CURVE SMOOTH",
"616.667 -358 OFFCURVE",
"647.667 -350.333 OFFCURVE",
"673 -335 CURVE",
"650 442 LINE",
"650 858 LINE",
"1042 858 LINE",
"1042 918 LINE SMOOTH",
"1042 959.333 OFFCURVE",
"1016.667 997 OFFCURVE",
"958 997 CURVE SMOOTH",
"912 996.333 OFFCURVE",
"862.167 991.667 OFFCURVE",
"808.5 983 CURVE SMOOTH",
"754.833 974.333 OFFCURVE",
"702 967.667 OFFCURVE",
"650 963 CURVE",
"673 1451 LINE",
"647.667 1466.333 OFFCURVE",
"616.667 1474 OFFCURVE",
"580 1474 CURVE SMOOTH",
"544.667 1474 OFFCURVE",
"513.667 1466.333 OFFCURVE",
"487 1451 CURVE",
"511 963 LINE",
"468.135 966.297 OFFCURVE",
"394.448 977.694 OFFCURVE",
"352 983 CURVE SMOOTH",
"298.667 989.667 OFFCURVE",
"247.333 997 OFFCURVE",
"202 997 CURVE SMOOTH",
"144.667 997 OFFCURVE",
"118 959.333 OFFCURVE",
"118 918 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
31 30 27 25 22 21 18 16 12 10 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
13 9 2 0 1 14 8 2 3 0 28 24 2 4 3 3 30 0 1 1 13 31 5 1 3 3 0 1 0 36 2 1 0 0 14 31 0 4 4 22 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
13 9 2 0 1 14 8 2 3 0 28 24 2 4 3 3 30 2 1 0 5 1 3 4 0 3 0 0 38 0 1 1 13 31 0 4 4 22 4 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
124 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
13 9 2 0 1 14 8 2 3 0 28 24 2 4 3 3 30 2 1 0 5 1 3 4 0 3 0 0 38 0 4 4 1 1 0 36 0 1 1 13 4 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
13 9 2 0 1 14 8 2 3 0 28 24 2 4 3 3 30 0 1 0 4 1 1 0 35 2 1 0 5 1 3 4 0 3 0 0 38 0 1 1 4 1 0 36 0 4 1 4 1 0 33 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
13 9 2 0 1 14 8 2 3 2 28 24 2 4 3 3 30 0 1 0 4 1 1 0 35 0 0 2 3 0 1 0 35 0 2 5 1 3 4 2 3 0 0 38 0 1 1 4 1 0 36 0 4 1 4 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
13 9 2 0 1 14 8 2 5 2 28 24 2 4 3 3 30 0 1 0 4 1 1 0 35 0 0 0 5 3 0 5 0 0 38 0 2 0 3 4 2 3 0 0 38 0 1 1 4 1 0 36 0 4 1 4 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"118 858 LINE",
"511 858 LINE",
"511 258 LINE",
"118 258 LINE",
"118 198 LINE SMOOTH",
"118 156.667 OFFCURVE",
"144.667 119 OFFCURVE",
"202 119 CURVE SMOOTH",
"248 119.667 OFFCURVE",
"298 124.167 OFFCURVE",
"352 132.5 CURVE SMOOTH",
"406 140.833 OFFCURVE",
"459 147.333 OFFCURVE",
"511 152 CURVE",
"487 -335 LINE",
"513.667 -350.333 OFFCURVE",
"544.667 -358 OFFCURVE",
"580 -358 CURVE SMOOTH",
"616.667 -358 OFFCURVE",
"647.667 -350.333 OFFCURVE",
"673 -335 CURVE",
"650 152 LINE",
"702 147.333 OFFCURVE",
"754.833 140.833 OFFCURVE",
"808.5 132.5 CURVE SMOOTH",
"862.167 124.167 OFFCURVE",
"912 119.667 OFFCURVE",
"958 119 CURVE SMOOTH",
"1016.667 119 OFFCURVE",
"1042 156.667 OFFCURVE",
"1042 198 CURVE SMOOTH",
"1042 258 LINE",
"650 258 LINE",
"650 858 LINE",
"1042 858 LINE",
"1042 918 LINE SMOOTH",
"1042 959.333 OFFCURVE",
"1016.667 997 OFFCURVE",
"958 997 CURVE SMOOTH",
"912 996.333 OFFCURVE",
"862.167 991.667 OFFCURVE",
"808.5 983 CURVE SMOOTH",
"754.833 974.333 OFFCURVE",
"702 967.667 OFFCURVE",
"650 963 CURVE",
"673 1451 LINE",
"647.667 1466.333 OFFCURVE",
"616.667 1474 OFFCURVE",
"580 1474 CURVE SMOOTH",
"544.667 1474 OFFCURVE",
"513.667 1466.333 OFFCURVE",
"487 1451 CURVE",
"511 963 LINE",
"468.135 966.297 OFFCURVE",
"394.448 977.694 OFFCURVE",
"352 983 CURVE SMOOTH",
"298.667 989.667 OFFCURVE",
"247.333 997 OFFCURVE",
"202 997 CURVE SMOOTH",
"144.667 997 OFFCURVE",
"118 959.333 OFFCURVE",
"118 918 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
47 46 45 44 41 39 35 33 29 27 24 23 22 21 18 16 12 10 4 2 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
61 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
13 9 2 0 1 14 8 2 3 0 37 31 2 5 4 36 32 2 6 5 4 30 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 13 31 9 1 3 3 0 1 0 36 2 1 0 0 14 31 0 6 6 22 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
13 9 2 0 1 14 8 2 3 0 37 31 2 5 4 36 32 2 6 5 4 30 2 1 0 9 1 3 4 0 3 0 0 38 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 13 31 0 6 6 22 6 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
124 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
13 9 2 0 1 14 8 2 3 0 37 31 2 5 4 36 32 2 6 5 4 30 2 1 0 9 1 3 4 0 3 0 0 38 8 1 4 7 1 5 6 4 5 1 0 38 0 6 6 1 1 0 36 0 1 1 13 6 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
13 9 2 0 1 14 8 2 3 0 37 31 2 5 4 36 32 2 6 5 4 30 0 1 0 6 1 1 0 35 2 1 0 9 1 3 4 0 3 0 0 38 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 6 1 0 36 0 6 1 6 1 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
13 9 2 0 1 14 8 2 3 2 37 31 2 5 4 36 32 2 6 5 4 30 0 1 0 6 1 1 0 35 0 0 2 3 0 1 0 35 0 2 9 1 3 4 2 3 0 0 38 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 6 1 0 36 0 6 1 6 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
13 9 2 0 1 14 8 2 9 2 37 31 2 7 8 36 32 2 6 5 4 30 0 1 0 6 1 1 0 35 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 0 38 0 8 0 7 5 8 7 1 0 38 0 4 0 5 6 4 5 1 0 38 0 1 1 6 1 0 36 0 6 1 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = cent;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"546 -235 LINE",
"612 -235 LINE SMOOTH",
"640 -235 OFFCURVE",
"659.333 -212.333 OFFCURVE",
"662 -187 CURVE",
"674 -12 LINE",
"816.667 -2.667 OFFCURVE",
"946 45 OFFCURVE",
"1026 141 CURVE",
"978 204 LINE SMOOTH",
"971.333 213.333 OFFCURVE",
"958.667 220 OFFCURVE",
"944 220 CURVE SMOOTH",
"925.586 220 OFFCURVE",
"890.108 192.062 OFFCURVE",
"860.5 175 CURVE SMOOTH",
"821.167 152.333 OFFCURVE",
"767 128.333 OFFCURVE",
"683 123 CURVE",
"735 885 LINE",
"812.564 872.073 OFFCURVE",
"907 813 OFFCURVE",
"930 813 CURVE SMOOTH",
"948.667 813 OFFCURVE",
"956.333 820.333 OFFCURVE",
"967 835 CURVE SMOOTH",
"1013 897 LINE",
"941 962.333 OFFCURVE",
"854.333 1005 OFFCURVE",
"745 1021 CURVE",
"761 1254 LINE",
"695 1254 LINE SMOOTH",
"667 1254 OFFCURVE",
"647.667 1231.667 OFFCURVE",
"645 1205 CURVE SMOOTH",
"633 1026 LINE",
"474.333 1022 OFFCURVE",
"351 965 OFFCURVE",
"267 873 CURVE SMOOTH",
"183 781 OFFCURVE",
"138 654 OFFCURVE",
"138 506 CURVE SMOOTH",
"138 354 OFFCURVE",
"182.167 232 OFFCURVE",
"257.5 144 CURVE SMOOTH",
"332.833 56 OFFCURVE",
"438.333 2.333 OFFCURVE",
"561 -11 CURVE"
);
},
{
closed = 1;
nodes = (
"315 619.333 OFFCURVE",
"341 710.5 OFFCURVE",
"393 776.5 CURVE SMOOTH",
"445 842.5 OFFCURVE",
"521.667 881 OFFCURVE",
"623 889 CURVE",
"571 129 LINE",
"409.667 159.667 OFFCURVE",
"315 290 OFFCURVE",
"315 506 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
46 44 41 40 35 33 30 29 24 22 15 13 10 9 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
11 1 0 1 51 28 19 16 4 2 0 50 38 2 3 4 42 0 2 6 5 4 30 0 1 0 1 52 0 2 0 4 0 2 4 50 0 4 3 0 4 3 48 0 3 3 5 1 2 36 0 5 5 21 31 0 6 6 0 1 0 36 0 0 0 20 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
11 1 0 1 51 28 19 16 4 2 0 50 38 2 3 4 42 0 2 6 5 4 30 0 1 0 1 52 0 2 0 4 0 2 4 50 0 4 3 0 4 3 48 0 3 3 5 1 2 36 0 5 5 18 31 0 6 6 0 1 0 36 0 0 0 20 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
11 1 0 1 51 28 19 16 4 2 0 50 38 2 3 4 42 0 2 6 5 4 30 0 1 0 1 52 0 2 0 4 0 2 4 50 0 4 3 0 4 3 48 0 3 3 5 1 2 36 0 5 5 21 31 0 6 6 0 1 0 36 0 0 0 20 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
11 1 0 1 51 28 19 16 4 2 0 50 38 2 3 4 42 0 2 6 5 4 30 0 1 0 1 52 0 2 0 4 0 2 4 50 0 4 3 0 4 3 48 0 0 0 6 0 6 1 0 37 0 3 3 5 1 2 36 0 5 5 21 5 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
11 1 0 1 51 28 19 16 4 2 0 50 38 2 3 4 42 0 2 6 5 4 30 0 1 0 1 52 0 2 0 4 0 2 4 50 0 4 3 0 4 3 48 0 0 2 6 0 1 0 35 0 3 0 5 6 3 5 1 2 38 0 0 0 6 1 0 36 0 6 0 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"223 594.667 OFFCURVE",
"247 525.667 OFFCURVE",
"287 467 CURVE",
"136 315 LINE",
"225 224 LINE",
"378 377 LINE",
"436.667 338.333 OFFCURVE",
"504 315 OFFCURVE",
"580 315 CURVE SMOOTH",
"656 315 OFFCURVE",
"726.333 339 OFFCURVE",
"785 379 CURVE",
"937 227 LINE",
"1028 319 LINE",
"876 470 LINE",
"914.667 527.333 OFFCURVE",
"938 596 OFFCURVE",
"938 672 CURVE SMOOTH",
"938 749.333 OFFCURVE",
"914.333 818.333 OFFCURVE",
"873 877 CURVE",
"1024 1029 LINE",
"935 1120 LINE",
"782 967 LINE",
"724.667 1007 OFFCURVE",
"656 1030 OFFCURVE",
"580 1030 CURVE SMOOTH",
"502.667 1030 OFFCURVE",
"432.667 1006.333 OFFCURVE",
"374 965 CURVE",
"223 1117 LINE",
"132 1027 LINE",
"285 874 LINE",
"246.333 815.333 OFFCURVE",
"223 748 OFFCURVE",
"223 672 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"355 797.109 OFFCURVE",
"455.309 898 OFFCURVE",
"580 898 CURVE SMOOTH",
"704.481 898 OFFCURVE",
"807 798.023 OFFCURVE",
"807 672 CURVE SMOOTH",
"807 549.554 OFFCURVE",
"704.217 448 OFFCURVE",
"580 448 CURVE SMOOTH",
"455.972 448 OFFCURVE",
"355 550.829 OFFCURVE",
"355 672 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
52 50 42 40 28 26 10 8 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
14 12 6 4 4 3 0 33 21 15 3 4 2 3 30 24 22 3 1 2 3 30 13 5 2 0 28 32 31 23 3 1 27 0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 20 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
14 12 6 4 4 3 0 33 21 15 3 4 2 3 30 24 22 3 1 2 3 30 13 5 2 0 28 32 31 23 3 1 27 0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"483 -238 LINE",
"549 -238 LINE SMOOTH",
"577 -238 OFFCURVE",
"596.333 -215.333 OFFCURVE",
"599 -190 CURVE",
"611 -14 LINE",
"753.667 -6 OFFCURVE",
"865.833 47 OFFCURVE",
"942.5 127 CURVE SMOOTH",
"1019.167 207 OFFCURVE",
"1060 315 OFFCURVE",
"1060 435 CURVE SMOOTH",
"1060 557.667 OFFCURVE",
"1009.667 636.333 OFFCURVE",
"935 691 CURVE SMOOTH",
"860.333 745.667 OFFCURVE",
"763 776.667 OFFCURVE",
"667 806 CURVE",
"700 1290 LINE",
"765.333 1280.667 OFFCURVE",
"815.333 1255.5 OFFCURVE",
"854 1233.5 CURVE SMOOTH",
"884.834 1215.957 OFFCURVE",
"920.522 1192 OFFCURVE",
"938 1192 CURVE SMOOTH",
"955.333 1192 OFFCURVE",
"970.667 1202 OFFCURVE",
"984 1222 CURVE SMOOTH",
"1027 1288 LINE",
"947 1365.333 OFFCURVE",
"850 1423.667 OFFCURVE",
"710 1441 CURVE",
"724 1639 LINE",
"658 1639 LINE SMOOTH",
"628.667 1639 OFFCURVE",
"610.667 1615.333 OFFCURVE",
"608 1590 CURVE",
"598 1446 LINE",
"459.333 1440.667 OFFCURVE",
"352.167 1391 OFFCURVE",
"279.5 1319 CURVE SMOOTH",
"206.833 1247 OFFCURVE",
"168 1150.333 OFFCURVE",
"168 1053 CURVE SMOOTH",
"168 923.667 OFFCURVE",
"215.167 841.167 OFFCURVE",
"286.5 784.5 CURVE SMOOTH",
"357.833 727.833 OFFCURVE",
"451.667 696 OFFCURVE",
"545 668 CURVE",
"508 137 LINE",
"417.333 147.667 OFFCURVE",
"354.667 182.833 OFFCURVE",
"308 215.5 CURVE SMOOTH",
"270.574 241.698 OFFCURVE",
"229.153 278 OFFCURVE",
"206 278 CURVE SMOOTH",
"187.333 278 OFFCURVE",
"168.333 267.667 OFFCURVE",
"159 253 CURVE SMOOTH",
"106 171 LINE",
"202 71 OFFCURVE",
"336.667 2.667 OFFCURVE",
"498 -12 CURVE"
);
},
{
closed = 1;
nodes = (
"891 255.738 OFFCURVE",
"790.43 152.64 OFFCURVE",
"621 137 CURVE",
"655 635 LINE",
"787.525 591.727 OFFCURVE",
"891 538.969 OFFCURVE",
"891 407 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"336 1191.092 OFFCURVE",
"426.952 1278.226 OFFCURVE",
"587 1293 CURVE",
"557 842 LINE",
"431.685 884.66 OFFCURVE",
"336 945.464 OFFCURVE",
"336 1071 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 51 50 36 34 28 26 23 22 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
24 1 1 2 74 40 32 29 4 3 1 73 62 41 13 4 0 3 63 12 3 3 4 0 52 0 2 5 4 5 30 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 2 2 4 1 0 36 0 4 4 18 31 0 5 5 1 1 0 36 0 1 1 17 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
24 1 1 2 74 40 32 29 4 3 1 73 62 41 13 4 0 3 63 12 3 3 4 0 52 0 2 5 4 5 30 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 2 2 4 1 0 36 0 4 4 21 31 0 5 5 1 1 0 36 0 1 1 17 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
24 1 1 2 74 40 32 29 4 3 1 73 62 41 13 4 0 3 63 12 3 3 4 0 52 0 2 5 4 5 30 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 1 0 5 1 5 1 0 37 0 2 2 4 1 0 36 0 4 4 21 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
24 1 1 2 74 40 32 29 4 3 1 73 62 41 13 4 0 3 63 12 3 3 4 0 52 0 2 5 4 5 30 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 1 3 5 1 1 0 35 0 2 0 4 5 2 4 1 0 38 0 1 1 5 1 0 36 0 5 1 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"34 797 LINE",
"169 797 LINE",
"167.667 770.333 OFFCURVE",
"167 742.667 OFFCURVE",
"167 716 CURVE SMOOTH",
"167 705.333 OFFCURVE",
"167 695 OFFCURVE",
"167 685 CURVE SMOOTH",
"167 675 OFFCURVE",
"167.333 665 OFFCURVE",
"168 655 CURVE",
"34 655 LINE",
"34 553 LINE",
"176 553 LINE",
"197.333 378.333 OFFCURVE",
"256.333 235.5 OFFCURVE",
"347 137.5 CURVE SMOOTH",
"437.667 39.5 OFFCURVE",
"562.333 -15 OFFCURVE",
"717 -15 CURVE SMOOTH",
"907.667 -15 OFFCURVE",
"1044.667 64 OFFCURVE",
"1138 200 CURVE",
"1063 270 LINE SMOOTH",
"1052.333 279.333 OFFCURVE",
"1045.667 284 OFFCURVE",
"1035 284 CURVE SMOOTH",
"1012.649 284 OFFCURVE",
"977.262 240.691 OFFCURVE",
"944.5 212.5 CURVE SMOOTH",
"906.622 179.907 OFFCURVE",
"804.609 141 OFFCURVE",
"727 141 CURVE SMOOTH",
"532.333 141 OFFCURVE",
"398.333 278.333 OFFCURVE",
"361 553 CURVE",
"767 553 LINE SMOOTH",
"799 553 OFFCURVE",
"819 576.333 OFFCURVE",
"819 599 CURVE SMOOTH",
"819 655 LINE",
"352 655 LINE",
"351.333 665 OFFCURVE",
"351 675 OFFCURVE",
"351 685 CURVE SMOOTH",
"351 695 OFFCURVE",
"351 705.333 OFFCURVE",
"351 716 CURVE SMOOTH",
"351 744 OFFCURVE",
"351.667 770.333 OFFCURVE",
"353 797 CURVE",
"861 797 LINE SMOOTH",
"893 797 OFFCURVE",
"912 820 OFFCURVE",
"912 844 CURVE SMOOTH",
"912 899 LINE",
"365 899 LINE",
"407.667 1155 OFFCURVE",
"541.333 1291 OFFCURVE",
"736 1291 CURVE SMOOTH",
"836 1291 OFFCURVE",
"897.667 1260.667 OFFCURVE",
"939 1230 CURVE SMOOTH",
"970.667 1206.505 OFFCURVE",
"1003.963 1169 OFFCURVE",
"1024 1169 CURVE SMOOTH",
"1042.667 1169 OFFCURVE",
"1051.333 1179 OFFCURVE",
"1062 1191 CURVE SMOOTH",
"1123 1259 LINE",
"1029.667 1376.333 OFFCURVE",
"907.667 1447 OFFCURVE",
"729 1447 CURVE SMOOTH",
"585 1447 OFFCURVE",
"460.5 1394.833 OFFCURVE",
"366.5 1299.5 CURVE SMOOTH",
"272.5 1204.167 OFFCURVE",
"207.667 1067 OFFCURVE",
"181 899 CURVE",
"34 899 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
71 70 64 63 62 61 57 55 50 48 43 41 39 37 34 33 27 25 22 21 19 17 14 12 7 5 1 0 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
9 1 2 3 53 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 8 8 10 1 0 36 0 10 10 18 10 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
9 1 2 3 53 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 8 10 1 0 36 0 10 10 21 10 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
9 1 2 3 53 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 99 values pushed */
9 1 2 3 53 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 0 0 0 13 5 0 13 0 0 38 0 4 0 5 6 4 5 1 0 38 0 12 0 11 7 12 11 0 0 38 0 6 0 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1006 768 LINE",
"1006 897 LINE",
"684 897 LINE",
"706 1059 LINE SMOOTH",
"728.252 1227.123 OFFCURVE",
"819.323 1304 OFFCURVE",
"951 1304 CURVE SMOOTH",
"992.333 1304 OFFCURVE",
"1010 1317.333 OFFCURVE",
"1010 1356 CURVE SMOOTH",
"1010 1454 LINE",
"719.333 1454 OFFCURVE",
"565 1329 OFFCURVE",
"533 1065 CURVE SMOOTH",
"512 897 LINE",
"299 897 LINE",
"299 824 LINE SMOOTH",
"299 798.667 OFFCURVE",
"313 780.667 OFFCURVE",
"341 778 CURVE SMOOTH",
"496 763 LINE",
"407 43 LINE SMOOTH",
"387.28 -124.623 OFFCURVE",
"296.118 -201 OFFCURVE",
"166 -201 CURVE SMOOTH",
"126 -201 OFFCURVE",
"106 -220 OFFCURVE",
"106 -258 CURVE SMOOTH",
"106 -352 LINE",
"391.333 -352 OFFCURVE",
"550.667 -235.333 OFFCURVE",
"584 38 CURVE SMOOTH",
"673 768 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 35 0 35 34 33 28 26 23 22 19 18 8 6 4 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
13 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 4 4 3 1 0 36 0 3 3 17 31 0 1 1 0 1 2 36 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
13 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 0 1 2 37 0 4 4 3 1 0 36 0 3 3 17 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
13 1 1 6 1 30 0 3 0 4 2 3 4 1 0 38 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 2 36 0 0 1 0 1 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
13 1 1 6 1 30 0 2 4 5 4 2 5 50 0 3 0 4 2 3 4 1 0 38 0 5 7 1 6 1 5 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 2 36 0 0 1 0 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"52 614 LINE",
"247 614 LINE",
"247 325 LINE SMOOTH",
"247 209.53 OFFCURVE",
"169.489 143.085 OFFCURVE",
"74 115 CURVE",
"74 0 LINE",
"1038 0 LINE SMOOTH",
"1082.291 0 OFFCURVE",
"1115 39.459 OFFCURVE",
"1115 78 CURVE SMOOTH",
"1115 154 LINE",
"439 154 LINE SMOOTH",
"399 154 OFFCURVE",
"361.667 148.667 OFFCURVE",
"323 142 CURVE",
"389.667 202 OFFCURVE",
"430 271 OFFCURVE",
"430 371 CURVE SMOOTH",
"430 614 LINE",
"819 614 LINE SMOOTH",
"848.333 614 OFFCURVE",
"871 638 OFFCURVE",
"871 662 CURVE SMOOTH",
"871 734 LINE",
"430 734 LINE",
"430 997 LINE SMOOTH",
"430 1087.667 OFFCURVE",
"451.333 1162 OFFCURVE",
"494 1214 CURVE SMOOTH",
"536.667 1266 OFFCURVE",
"601 1295 OFFCURVE",
"685 1295 CURVE SMOOTH",
"800.528 1295 OFFCURVE",
"848.278 1241.653 OFFCURVE",
"908 1167 CURVE SMOOTH",
"922.667 1148.333 OFFCURVE",
"939.333 1142 OFFCURVE",
"958 1142 CURVE SMOOTH",
"971.333 1142 OFFCURVE",
"985.667 1145 OFFCURVE",
"999 1153 CURVE SMOOTH",
"1071 1199 LINE",
"1039 1268.333 OFFCURVE",
"993.667 1329.667 OFFCURVE",
"931 1375 CURVE SMOOTH",
"868.333 1420.333 OFFCURVE",
"789 1448 OFFCURVE",
"685 1448 CURVE SMOOTH",
"538.333 1448 OFFCURVE",
"429.333 1397.5 OFFCURVE",
"356 1315.5 CURVE SMOOTH",
"282.667 1233.5 OFFCURVE",
"247 1120.333 OFFCURVE",
"247 995 CURVE SMOOTH",
"247 734 LINE",
"113 734 LINE SMOOTH",
"74.333 734 OFFCURVE",
"52 706.667 OFFCURVE",
"52 672 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
62 61 54 52 47 45 39 37 34 33 28 26 20 18 11 9 4 2 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
15 1 2 3 55 43 2 7 6 2 30 0 2 3 0 3 2 0 50 4 1 0 8 1 5 6 0 5 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 6 6 7 1 0 36 0 7 7 12 7 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
15 1 2 3 55 43 2 7 6 2 30 0 2 3 0 3 2 0 50 0 1 0 3 2 1 3 1 0 38 4 1 0 8 1 5 6 0 5 1 0 38 0 6 6 7 1 0 36 0 7 7 15 7 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
15 1 2 3 55 43 2 7 6 2 30 0 2 3 0 3 2 0 50 0 1 0 3 2 1 3 1 0 38 4 1 0 8 1 5 6 0 5 1 0 38 0 6 7 7 6 1 0 35 0 6 6 7 1 0 36 0 7 6 7 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
15 1 2 3 55 43 2 7 6 2 30 0 2 3 0 3 2 0 50 0 1 0 3 2 1 3 1 0 38 0 0 0 8 5 0 8 0 0 38 0 4 0 5 6 4 5 1 0 38 0 6 7 7 6 1 0 35 0 6 6 7 1 0 36 0 7 6 7 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"146 523 LINE",
"486 523 LINE",
"486 418 LINE",
"146 418 LINE",
"146 315 LINE",
"486 315 LINE",
"486 0 LINE",
"665 0 LINE",
"665 315 LINE",
"1005 315 LINE",
"1005 418 LINE",
"665 418 LINE",
"665 523 LINE",
"1005 523 LINE",
"1005 625 LINE",
"698 625 LINE",
"1107 1433 LINE",
"957 1433 LINE SMOOTH",
"923.667 1433 OFFCURVE",
"901.667 1410.667 OFFCURVE",
"891 1388 CURVE SMOOTH",
"616 822 LINE",
"597.333 776.667 OFFCURVE",
"586.333 738.667 OFFCURVE",
"577 700 CURVE",
"567.667 738.667 OFFCURVE",
"554.667 775.333 OFFCURVE",
"536 822 CURVE",
"260 1388 LINE SMOOTH",
"246.667 1414.667 OFFCURVE",
"227.667 1433 OFFCURVE",
"193 1433 CURVE SMOOTH",
"44 1433 LINE",
"452 625 LINE",
"146 625 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 4 2 1 0 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 2 1 1 1 11 31 0 7 7 12 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 0 7 7 15 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 7 6 7 53 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 6 6 5 0 0 35 9 1 5 5 6 0 0 36 8 1 6 5 6 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 7 6 7 53 0 0 0 10 4 0 10 0 2 38 0 3 0 4 5 3 4 0 2 38 0 5 9 6 5 0 0 35 0 9 0 8 6 9 8 0 0 38 0 5 5 6 0 0 36 0 6 5 6 0 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"505 1166 LINE",
"505 739 LINE",
"100 739 LINE",
"100 604 LINE",
"505 604 LINE",
"505 174 LINE",
"651 174 LINE",
"651 604 LINE",
"1058 604 LINE",
"1058 739 LINE",
"651 739 LINE",
"651 1166 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 5 0 2 5 0 0 35 4 1 0 3 1 1 2 0 1 0 0 38 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
6 1 5 0 2 5 0 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 0 38 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"148 604 LINE",
"1008 604 LINE",
"1008 739 LINE",
"148 739 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = minus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"921 1110 LINE",
"577 766 LINE",
"232 1112 LINE",
"137 1016 LINE",
"482 671 LINE",
"126 315 LINE",
"221 219 LINE",
"578 575 LINE",
"932 221 LINE",
"1027 317 LINE",
"673 670 LINE",
"1017 1014 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
9 5 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"100 604 LINE",
"1058 604 LINE",
"1058 739 LINE",
"100 739 LINE"
);
},
{
closed = 1;
nodes = (
"454 954.768 OFFCURVE",
"507.506 901 OFFCURVE",
"578 901 CURVE SMOOTH",
"646.48 901 OFFCURVE",
"703 955.41 OFFCURVE",
"703 1026 CURVE SMOOTH",
"703 1094.637 OFFCURVE",
"646.243 1152 OFFCURVE",
"578 1152 CURVE SMOOTH",
"507.741 1152 OFFCURVE",
"454 1095.283 OFFCURVE",
"454 1026 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"454 242.768 OFFCURVE",
"507.506 189 OFFCURVE",
"578 189 CURVE SMOOTH",
"646.48 189 OFFCURVE",
"703 243.41 OFFCURVE",
"703 314 CURVE SMOOTH",
"703 382.637 OFFCURVE",
"646.243 440 OFFCURVE",
"578 440 CURVE SMOOTH",
"507.741 440 OFFCURVE",
"454 383.283 OFFCURVE",
"454 314 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
40 38 30 28 20 18 10 8 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 43 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 4 0 1 0 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 5 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"150 439 LINE",
"1009 439 LINE",
"1009 574 LINE",
"150 574 LINE"
);
},
{
closed = 1;
nodes = (
"150 774 LINE",
"1009 774 LINE",
"1009 909 LINE",
"150 909 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"150 774 LINE",
"576 774 LINE",
"481 574 LINE",
"150 574 LINE",
"150 439 LINE",
"418 439 LINE",
"299 187 LINE",
"428 187 LINE",
"547 439 LINE",
"1009 439 LINE",
"1009 574 LINE",
"610 574 LINE",
"705 774 LINE",
"1009 774 LINE",
"1009 909 LINE",
"768 909 LINE",
"882 1150 LINE",
"753 1150 LINE",
"639 909 LINE",
"150 909 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 1 0 0 1 40 0 6 5 5 6 41 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 1 0 1 52 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 0 1 52 0 6 5 6 53 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 2 38 0 4 8 5 4 0 0 35 0 8 0 7 5 8 7 0 0 38 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = notequal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1011 636 LINE",
"1011 710 LINE",
"238 1111 LINE",
"238 984 LINE SMOOTH",
"238 961.333 OFFCURVE",
"247.333 945.333 OFFCURVE",
"274 932 CURVE SMOOTH",
"723 704 LINE SMOOTH",
"749.667 689.333 OFFCURVE",
"777.667 680 OFFCURVE",
"811 672 CURVE",
"777.667 665.333 OFFCURVE",
"749.667 654.333 OFFCURVE",
"723 641 CURVE SMOOTH",
"274 414 LINE SMOOTH",
"247.333 400.667 OFFCURVE",
"238 383.333 OFFCURVE",
"238 362 CURVE SMOOTH",
"238 234 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
16 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"148 636 LINE",
"922 234 LINE",
"922 362 LINE SMOOTH",
"922 383.333 OFFCURVE",
"912.667 400.667 OFFCURVE",
"886 414 CURVE SMOOTH",
"437 641 LINE SMOOTH",
"410.333 654.333 OFFCURVE",
"380.333 665.333 OFFCURVE",
"347 672 CURVE",
"380.333 680 OFFCURVE",
"410.333 689.333 OFFCURVE",
"437 704 CURVE SMOOTH",
"886 932 LINE SMOOTH",
"912.667 945.333 OFFCURVE",
"922 961.333 OFFCURVE",
"922 984 CURVE SMOOTH",
"922 1111 LINE",
"148 710 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
1 17 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"238 1168 LINE",
"238 1046 LINE SMOOTH",
"238 1024.667 OFFCURVE",
"247.333 1005.667 OFFCURVE",
"282 991 CURVE",
"723 784 LINE SMOOTH",
"751 770.667 OFFCURVE",
"784 762 OFFCURVE",
"820 754 CURVE",
"782.667 746.667 OFFCURVE",
"750.333 736.667 OFFCURVE",
"723 724 CURVE SMOOTH",
"282 515 LINE SMOOTH",
"248.667 499 OFFCURVE",
"238 481.333 OFFCURVE",
"238 460 CURVE SMOOTH",
"238 338 LINE",
"1012 717 LINE",
"1012 791 LINE"
);
},
{
closed = 1;
nodes = (
"1012 215 LINE",
"238 215 LINE",
"238 80 LINE",
"1012 80 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
21 20 19 18 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 31 values pushed */
17 9 2 1 0 5 1 28 0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"148 717 LINE",
"922 338 LINE",
"922 460 LINE SMOOTH",
"922 481.333 OFFCURVE",
"911.333 499 OFFCURVE",
"878 515 CURVE SMOOTH",
"437 724 LINE SMOOTH",
"409 737.333 OFFCURVE",
"374.667 747.333 OFFCURVE",
"340 754 CURVE",
"374 762 OFFCURVE",
"406.333 772 OFFCURVE",
"437 784 CURVE",
"878 991 LINE SMOOTH",
"912.667 1007 OFFCURVE",
"922 1024.667 OFFCURVE",
"922 1046 CURVE SMOOTH",
"922 1168 LINE",
"148 791 LINE"
);
},
{
closed = 1;
nodes = (
"148 80 LINE",
"922 80 LINE",
"922 215 LINE",
"148 215 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
21 20 19 18 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 31 values pushed */
17 16 8 1 0 5 0 28 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"505 1202 LINE",
"505 826 LINE",
"100 826 LINE",
"100 690 LINE",
"505 690 LINE",
"505 322 LINE",
"651 322 LINE",
"651 690 LINE",
"1058 690 LINE",
"1058 826 LINE",
"651 826 LINE",
"651 1202 LINE"
);
},
{
closed = 1;
nodes = (
"100 80 LINE",
"1058 80 LINE",
"1058 215 LINE",
"100 215 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 15 14 13 12 0 11 0 11 10 9 8 7 6 5 4 3 2 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
4 1 0 3 1 1 2 0 1 0 0 38 8 1 5 0 2 6 5 2 0 0 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 0 38 8 1 5 0 2 6 5 2 0 0 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"663.214 858 OFFCURVE",
"530.071 965 OFFCURVE",
"390 965 CURVE SMOOTH",
"302 965 OFFCURVE",
"222.667 933 OFFCURVE",
"176 865 CURVE",
"205 756 LINE",
"232.546 792.729 OFFCURVE",
"307.188 827 OFFCURVE",
"380 827 CURVE SMOOTH",
"501.033 827 OFFCURVE",
"640.26 721 OFFCURVE",
"776 721 CURVE SMOOTH",
"857.333 721 OFFCURVE",
"937.333 751.333 OFFCURVE",
"984 814 CURVE",
"959 928 LINE",
"932.479 895.585 OFFCURVE",
"855.314 858 OFFCURVE",
"787 858 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"664.82 520 OFFCURVE",
"528.538 626 OFFCURVE",
"390 626 CURVE SMOOTH",
"302 626 OFFCURVE",
"222.667 594 OFFCURVE",
"176 526 CURVE",
"205 417 LINE",
"231.334 452.112 OFFCURVE",
"308.317 489 OFFCURVE",
"380 489 CURVE SMOOTH",
"503 489 OFFCURVE",
"638.362 382 OFFCURVE",
"776 382 CURVE SMOOTH",
"857.333 382 OFFCURVE",
"937.333 412 OFFCURVE",
"984 476 CURVE",
"959 589 LINE",
"931.275 555.114 OFFCURVE",
"856.409 520 OFFCURVE",
"787 520 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
29 28 1 0 52 50 43 41 38 36 28 55 29 55 24 22 15 13 10 8 0 27 1 27 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
20 5 2 0 3 19 6 2 1 2 48 33 2 4 7 47 34 2 5 6 4 30 0 3 0 2 1 3 2 1 0 38 8 1 0 0 1 7 0 1 1 0 38 9 1 4 6 5 4 1 0 35 0 7 0 6 5 7 6 1 0 38 9 1 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
20 5 2 0 3 19 6 2 1 2 48 33 2 4 7 47 34 2 5 6 4 30 8 1 0 0 1 7 0 1 1 0 38 0 7 0 6 5 7 6 1 0 38 9 1 4 0 5 4 5 1 0 37 0 2 2 3 1 0 36 0 3 3 14 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
20 5 2 0 3 19 6 2 1 2 48 33 2 4 7 47 34 2 5 6 4 30 0 3 0 2 1 3 2 1 0 38 8 1 0 0 1 7 0 1 1 0 38 9 1 4 6 5 4 1 0 35 0 7 0 6 5 7 6 1 0 38 9 1 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"661.005 613 OFFCURVE",
"515.37 718 OFFCURVE",
"388 718 CURVE SMOOTH",
"301.333 718 OFFCURVE",
"233.5 686.333 OFFCURVE",
"187.5 633 CURVE SMOOTH",
"141.5 579.667 OFFCURVE",
"116 503.333 OFFCURVE",
"116 414 CURVE",
"260 414 LINE",
"261.333 508.667 OFFCURVE",
"312.333 569 OFFCURVE",
"399 569 CURVE SMOOTH",
"497.345 569 OFFCURVE",
"642.63 465 OFFCURVE",
"770 465 CURVE SMOOTH",
"855.333 465 OFFCURVE",
"924.5 495.667 OFFCURVE",
"970.5 549 CURVE SMOOTH",
"1016.5 602.333 OFFCURVE",
"1042 678.667 OFFCURVE",
"1042 768 CURVE",
"898 768 LINE",
"896.667 674.667 OFFCURVE",
"845.667 613 OFFCURVE",
"759 613 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 45 values pushed */
0 1 5 1 52 0 4 2 4 53 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"148 604 LINE",
"857 604 LINE",
"857 315 LINE",
"1008 315 LINE",
"1008 739 LINE",
"148 739 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 2 1 41 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 1 2 1 53 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"158 787 LINE",
"294 787 LINE SMOOTH",
"320.667 787 OFFCURVE",
"334.333 802.333 OFFCURVE",
"345 821 CURVE SMOOTH",
"539 1173 LINE SMOOTH",
"554.333 1201.667 OFFCURVE",
"566.667 1230.667 OFFCURVE",
"576 1260 CURVE",
"585.333 1232 OFFCURVE",
"597.667 1203.667 OFFCURVE",
"615 1173 CURVE SMOOTH",
"811 821 LINE SMOOTH",
"821.667 802.333 OFFCURVE",
"837.333 787 OFFCURVE",
"860 787 CURVE SMOOTH",
"989 787 LINE",
"631 1433 LINE",
"516 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 15 4 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
10 1 1 0 1 30 2 1 1 0 1 53 0 0 0 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
10 1 1 0 1 30 0 0 1 0 52 2 1 1 1 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
10 1 2 0 1 30 0 0 2 0 52 0 2 1 2 52 0 1 1 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1084.667 254 OFFCURVE",
"1161.667 287.167 OFFCURVE",
"1219 346.5 CURVE SMOOTH",
"1276.333 405.833 OFFCURVE",
"1312 489.667 OFFCURVE",
"1312 591 CURVE SMOOTH",
"1312 692.333 OFFCURVE",
"1276.333 776.333 OFFCURVE",
"1219 835 CURVE SMOOTH",
"1161.667 893.667 OFFCURVE",
"1084.667 928 OFFCURVE",
"1002 928 CURVE SMOOTH",
"858.296 928 OFFCURVE",
"762.281 832.921 OFFCURVE",
"685 717 CURVE",
"605.071 832.759 OFFCURVE",
"512.469 928 OFFCURVE",
"368 928 CURVE SMOOTH",
"285.333 928 OFFCURVE",
"207.167 893.667 OFFCURVE",
"150.5 835 CURVE SMOOTH",
"93.833 776.333 OFFCURVE",
"58 692.333 OFFCURVE",
"58 591 CURVE SMOOTH",
"58 489.667 OFFCURVE",
"93.833 405.833 OFFCURVE",
"150.5 346.5 CURVE SMOOTH",
"207.167 287.167 OFFCURVE",
"285.333 254 OFFCURVE",
"368 254 CURVE SMOOTH",
"512.469 254 OFFCURVE",
"605.071 349.241 OFFCURVE",
"685 465 CURVE",
"762.281 349.079 OFFCURVE",
"858.296 254 OFFCURVE",
"1002 254 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"273.157 400 OFFCURVE",
"200 470.116 OFFCURVE",
"200 591 CURVE SMOOTH",
"200 711.884 OFFCURVE",
"273.157 782 OFFCURVE",
"375 782 CURVE SMOOTH",
"472.203 782 OFFCURVE",
"540.291 688.826 OFFCURVE",
"603 591 CURVE",
"538.972 491.116 OFFCURVE",
"473.097 400 OFFCURVE",
"375 400 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"896.589 400 OFFCURVE",
"829.98 491.191 OFFCURVE",
"766 591 CURVE",
"828.683 688.785 OFFCURVE",
"897.462 782 OFFCURVE",
"995 782 CURVE SMOOTH",
"1096.11 782 OFFCURVE",
"1169 711.928 OFFCURVE",
"1169 591 CURVE SMOOTH",
"1169 470.072 OFFCURVE",
"1096.11 400 OFFCURVE",
"995 400 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
61 60 41 40 1 0 71 69 60 79 61 79 51 49 40 59 41 59 31 29 21 19 11 9 0 39 1 39 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
75 45 25 5 4 4 5 1 30 3 1 2 7 1 5 4 2 5 1 0 38 10 6 9 3 4 0 0 4 1 0 35 10 6 9 3 4 4 0 1 0 36 1 8 2 0 4 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
75 45 25 5 4 4 5 1 30 0 3 0 7 5 3 7 1 0 38 0 2 0 5 4 2 5 1 0 38 10 1 6 1 0 6 1 0 35 9 1 4 0 1 0 4 1 1 0 38 10 1 6 6 0 1 0 36 8 1 0 6 0 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1368;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"244 32 LINE SMOOTH",
"223.173 -139.821 OFFCURVE",
"151.103 -213 OFFCURVE",
"-7 -213 CURVE SMOOTH",
"-67.343 -213 OFFCURVE",
"-87.359 -210.435 OFFCURVE",
"-96 -245 CURVE",
"-106 -321 LINE",
"-66 -342.333 OFFCURVE",
"-13.667 -350 OFFCURVE",
"33 -350 CURVE SMOOTH",
"133 -350 OFFCURVE",
"220.5 -320.833 OFFCURVE",
"286.5 -257.5 CURVE SMOOTH",
"352.5 -194.167 OFFCURVE",
"396.667 -98 OFFCURVE",
"414 38 CURVE SMOOTH",
"544 1068 LINE SMOOTH",
"564 1225.333 OFFCURVE",
"636.667 1295 OFFCURVE",
"770 1295 CURVE SMOOTH",
"824.807 1295 OFFCURVE",
"845.598 1304.192 OFFCURVE",
"852 1333 CURVE",
"860 1419 LINE",
"817.333 1440.333 OFFCURVE",
"771.667 1449 OFFCURVE",
"721 1449 CURVE SMOOTH",
"526.333 1449 OFFCURVE",
"402 1323 OFFCURVE",
"374 1091 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
31 28 22 20 13 11 4 2 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
6 1 1 0 24 1 2 3 2 30 0 1 1 0 1 0 36 0 0 0 17 31 0 3 3 2 1 0 36 0 2 2 16 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
6 1 1 0 24 1 2 3 2 30 0 3 0 2 3 2 1 0 37 0 1 1 0 1 0 36 0 0 0 17 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
6 1 1 0 24 1 2 3 2 30 0 0 0 1 3 0 1 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 0 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 800;
}
);
note = integral;
unicode = 222B;
},
{
glyphname = Ohm;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"1340 0 LINE SMOOTH",
"1380 0 OFFCURVE",
"1406 25.667 OFFCURVE",
"1406 63 CURVE SMOOTH",
"1406 163 LINE",
"986 163 LINE",
"986 337 LINE",
"1114 367.667 OFFCURVE",
"1218.833 433.333 OFFCURVE",
"1291.5 524 CURVE SMOOTH",
"1364.167 614.667 OFFCURVE",
"1405 732.333 OFFCURVE",
"1405 867 CURVE SMOOTH",
"1405 1037.667 OFFCURVE",
"1335.167 1183.333 OFFCURVE",
"1218.5 1286 CURVE SMOOTH",
"1101.833 1388.667 OFFCURVE",
"936.667 1449 OFFCURVE",
"746 1449 CURVE SMOOTH",
"555.333 1449 OFFCURVE",
"390.167 1388.667 OFFCURVE",
"273.5 1286 CURVE SMOOTH",
"156.833 1183.333 OFFCURVE",
"87 1037.667 OFFCURVE",
"87 867 CURVE SMOOTH",
"87 732.333 OFFCURVE",
"128 614.667 OFFCURVE",
"200 524 CURVE SMOOTH",
"272 433.333 OFFCURVE",
"377 367.667 OFFCURVE",
"505 337 CURVE",
"505 163 LINE",
"86 163 LINE",
"86 63 LINE SMOOTH",
"86 25.667 OFFCURVE",
"112 0 OFFCURVE",
"152 0 CURVE SMOOTH",
"656 0 LINE",
"656 438 LINE",
"548 458 OFFCURVE",
"454.333 500.833 OFFCURVE",
"389 569.5 CURVE SMOOTH",
"323.667 638.167 OFFCURVE",
"285 733 OFFCURVE",
"285 857 CURVE SMOOTH",
"285 999.667 OFFCURVE",
"333.5 1108.833 OFFCURVE",
"415.5 1181.5 CURVE SMOOTH",
"497.5 1254.167 OFFCURVE",
"612.667 1292 OFFCURVE",
"746 1292 CURVE SMOOTH",
"879.333 1292 OFFCURVE",
"994.5 1254.167 OFFCURVE",
"1076.5 1181.5 CURVE SMOOTH",
"1158.5 1108.833 OFFCURVE",
"1207 999.667 OFFCURVE",
"1207 857 CURVE SMOOTH",
"1207 733 OFFCURVE",
"1168.5 638.167 OFFCURVE",
"1102.5 569.5 CURVE SMOOTH",
"1036.5 500.833 OFFCURVE",
"944 458 OFFCURVE",
"836 438 CURVE",
"836 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 55 0 54 51 50 40 38 28 27 24 22 12 10 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
49 29 21 1 4 2 0 1 30 0 0 0 3 1 0 36 0 3 3 17 31 4 1 2 2 1 1 0 36 6 5 2 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
49 29 21 1 4 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 2 1 1 0 36 6 5 2 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
49 29 21 1 4 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 1 1 2 0 0 35 4 1 2 2 1 1 0 36 6 5 2 1 2 1 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
49 29 21 1 4 2 0 1 30 0 3 0 0 2 3 0 1 0 38 0 2 4 1 2 0 0 35 0 4 6 1 5 1 4 5 1 0 38 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1494;
}
);
note = Omega;
unicode = 2126;
},
{
glyphname = increment;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"14 0 LINE",
"1378 0 LINE",
"783 1433 LINE",
"608 1433 LINE"
);
},
{
closed = 1;
nodes = (
"659 1114 LINE SMOOTH",
"671 1144.667 OFFCURVE",
"684 1184.667 OFFCURVE",
"696 1230 CURVE",
"708 1184.667 OFFCURVE",
"722 1145.667 OFFCURVE",
"734 1115 CURVE SMOOTH",
"1118 156 LINE",
"273 156 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
9 1 2 0 1 30 0 0 0 11 31 0 2 2 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
9 1 2 0 1 30 0 0 2 0 52 0 2 2 1 0 2 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
9 1 2 0 1 30 0 0 2 0 52 0 2 1 1 2 0 0 35 0 2 2 1 0 2 36 0 1 2 1 0 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1392;
}
);
note = Delta;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"62 1433 LINE",
"62 1280 LINE",
"249 1280 LINE",
"249 -343 LINE",
"433 -343 LINE",
"433 1280 LINE",
"934 1280 LINE",
"934 -343 LINE",
"1118 -343 LINE",
"1118 1280 LINE",
"1305 1280 LINE",
"1305 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 2 2 0 0 5 0 0 36 6 1 5 5 11 31 3 1 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
3 1 1 0 1 53 4 2 2 0 0 5 0 0 36 6 1 5 5 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
3 1 1 0 1 53 6 1 5 0 0 5 0 0 35 6 1 5 5 0 0 0 36 4 2 2 0 5 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 4 5 2 2 4 42 0 0 2 3 2 0 42 0 3 1 2 3 1 48 0 1 1 51 6 1 5 4 2 5 0 2 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1368;
}
);
note = product;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"84 1368 LINE SMOOTH",
"84 1349.333 OFFCURVE",
"88.333 1329.333 OFFCURVE",
"103 1312 CURVE SMOOTH",
"732 547 LINE",
"103 -223 LINE SMOOTH",
"89.667 -239 OFFCURVE",
"84 -259.333 OFFCURVE",
"84 -278 CURVE SMOOTH",
"84 -343 LINE",
"1283 -343 LINE",
"1283 -190 LINE",
"360 -190 LINE",
"933 519 LINE",
"933 571 LINE",
"360 1280 LINE",
"1283 1280 LINE",
"1283 1433 LINE",
"84 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
9 8 7 6 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
14 5 4 3 2 1 1 30 0 1 1 0 0 0 36 0 0 0 11 31 0 2 2 3 0 0 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
14 5 4 3 2 1 1 30 0 2 0 3 2 3 0 0 37 0 1 1 0 0 0 36 0 0 0 11 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
14 5 4 3 2 1 1 30 0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1368;
}
);
note = summation;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"536 0 LINE",
"685 0 LINE",
"1239 1712 LINE",
"1124 1712 LINE SMOOTH",
"1097.333 1712 OFFCURVE",
"1077.667 1696.333 OFFCURVE",
"1071 1675 CURVE SMOOTH",
"639 324 LINE SMOOTH",
"627 285.333 OFFCURVE",
"620.667 248 OFFCURVE",
"614 212 CURVE",
"608.667 257.333 OFFCURVE",
"602 303.333 OFFCURVE",
"586 346 CURVE SMOOTH",
"436 757 LINE SMOOTH",
"429.333 777 OFFCURVE",
"410.333 794 OFFCURVE",
"381 794 CURVE SMOOTH",
"46 794 LINE",
"46 737 LINE SMOOTH",
"46 682.333 OFFCURVE",
"77.667 663 OFFCURVE",
"115 663 CURVE SMOOTH",
"286 663 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
23 22 21 19 7 5 2 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
13 1 3 0 1 30 0 2 1 2 52 0 1 0 0 3 1 0 1 0 38 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
13 1 3 0 1 30 0 2 1 2 52 0 1 0 0 3 1 0 1 0 38 0 3 3 15 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
13 1 3 0 1 30 0 2 1 2 52 0 3 0 3 53 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1146;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = micro;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"122 1013 LINE",
"122 -267 LINE SMOOTH",
"122 -315 OFFCURVE",
"150.333 -343 OFFCURVE",
"201 -343 CURVE SMOOTH",
"290 -343 LINE",
"290 -64 LINE SMOOTH",
"290 -13.333 OFFCURVE",
"286.333 47 OFFCURVE",
"277 103 CURVE",
"329 41.667 OFFCURVE",
"403.333 6 OFFCURVE",
"502 6 CURVE SMOOTH",
"618 6 OFFCURVE",
"707.667 50 OFFCURVE",
"797 146 CURVE",
"811 37 LINE",
"817.667 12.333 OFFCURVE",
"833.667 0 OFFCURVE",
"859 0 CURVE SMOOTH",
"965 0 LINE",
"965 1013 LINE",
"787 1013 LINE",
"787 266 LINE",
"709.667 178 OFFCURVE",
"617 126 OFFCURVE",
"513 126 CURVE SMOOTH",
"373 126 OFFCURVE",
"300 209.667 OFFCURVE",
"300 355 CURVE SMOOTH",
"300 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 29 0 29 26 24 18 16 12 10 9 8 5 3 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
14 7 2 0 1 20 1 2 0 2 30 6 5 2 1 1 14 31 0 0 0 2 1 0 36 3 1 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
14 7 2 0 1 20 1 2 0 2 30 0 0 0 2 1 0 36 3 1 2 2 12 31 0 4 4 1 0 0 36 6 5 2 1 1 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
14 7 2 0 1 20 1 3 0 2 30 0 0 0 3 1 0 36 0 3 3 12 31 0 2 2 12 31 0 4 4 1 0 0 36 6 5 2 1 1 14 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
14 7 2 0 1 20 1 3 0 2 30 0 4 1 4 1 0 34 0 0 0 3 1 0 36 0 3 3 15 31 6 5 2 1 1 2 1 0 36 0 2 2 15 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
14 7 2 0 1 20 1 3 0 2 30 0 0 0 3 2 0 3 1 0 38 6 5 2 1 0 2 4 1 2 1 0 38 6 5 2 1 1 4 1 0 36 0 4 1 4 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
14 7 2 0 5 20 1 3 0 2 30 6 1 5 0 4 5 0 0 35 0 0 0 3 2 0 3 1 0 38 0 1 0 2 4 1 2 1 0 38 6 1 5 5 4 1 0 36 0 4 5 4 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1112;
}
);
note = mu;
unicode = 00B5;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"386 1270 LINE SMOOTH",
"400.667 1246 OFFCURVE",
"412.333 1240 OFFCURVE",
"427 1240 CURVE SMOOTH",
"462.095 1240 OFFCURVE",
"584.638 1305 OFFCURVE",
"651 1305 CURVE SMOOTH",
"816.333 1305 OFFCURVE",
"913 1168 OFFCURVE",
"913 904 CURVE SMOOTH",
"913 869.333 OFFCURVE",
"912.667 823.333 OFFCURVE",
"910 774 CURVE",
"846 888.667 OFFCURVE",
"742.667 949 OFFCURVE",
"604 949 CURVE SMOOTH",
"454.667 949 OFFCURVE",
"326.667 887.667 OFFCURVE",
"236 789 CURVE SMOOTH",
"145.333 690.333 OFFCURVE",
"92 551.333 OFFCURVE",
"92 398 CURVE SMOOTH",
"92 271.333 OFFCURVE",
"132.667 168.833 OFFCURVE",
"202 97.5 CURVE SMOOTH",
"271.333 26.167 OFFCURVE",
"370.333 -13 OFFCURVE",
"485 -13 CURVE SMOOTH",
"682.333 -13 OFFCURVE",
"829.5 81.5 OFFCURVE",
"927.5 243.5 CURVE SMOOTH",
"1025.5 405.5 OFFCURVE",
"1074 634.667 OFFCURVE",
"1074 904 CURVE SMOOTH",
"1074 1074.667 OFFCURVE",
"1034.333 1210.667 OFFCURVE",
"965 1304 CURVE SMOOTH",
"895.667 1397.333 OFFCURVE",
"795 1448 OFFCURVE",
"675 1448 CURVE SMOOTH",
"539.12 1448 OFFCURVE",
"454.294 1410.588 OFFCURVE",
"348 1337 CURVE"
);
},
{
closed = 1;
nodes = (
"359.539 127 OFFCURVE",
"276 233.749 OFFCURVE",
"276 401 CURVE SMOOTH",
"276 517 OFFCURVE",
"306.333 618.833 OFFCURVE",
"365 691.5 CURVE SMOOTH",
"423.667 764.167 OFFCURVE",
"511 808 OFFCURVE",
"623 808 CURVE SMOOTH",
"772.261 808 OFFCURVE",
"849.159 705.899 OFFCURVE",
"878 579 CURVE",
"851.333 425.667 OFFCURVE",
"803 312.667 OFFCURVE",
"739 238 CURVE SMOOTH",
"675 163.333 OFFCURVE",
"594 127 OFFCURVE",
"506 127 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
44 43 54 52 43 62 44 62 40 38 35 33 26 24 16 14 6 4 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 1 3 0 48 28 2 5 6 2 30 0 4 3 2 3 4 2 50 0 2 0 6 5 2 6 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 7 1 5 5 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
0 1 3 0 48 28 2 5 6 2 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 5 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
0 1 3 0 48 28 2 5 6 2 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 1 1 5 1 0 35 7 1 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = partialdiff;
unicode = 2202;
},
{
glyphname = percent;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"707 1201.667 OFFCURVE",
"672.167 1291.667 OFFCURVE",
"615.5 1353 CURVE SMOOTH",
"558.833 1414.333 OFFCURVE",
"478.333 1447 OFFCURVE",
"389 1447 CURVE SMOOTH",
"298.333 1447 OFFCURVE",
"220.333 1414.333 OFFCURVE",
"163 1353 CURVE SMOOTH",
"105.667 1291.667 OFFCURVE",
"72 1201.667 OFFCURVE",
"72 1087 CURVE SMOOTH",
"72 975 OFFCURVE",
"105.667 885.167 OFFCURVE",
"163 824.5 CURVE SMOOTH",
"220.333 763.833 OFFCURVE",
"298.333 731 OFFCURVE",
"389 731 CURVE SMOOTH",
"473 731 OFFCURVE",
"553.5 763.833 OFFCURVE",
"611.5 824.5 CURVE SMOOTH",
"669.5 885.167 OFFCURVE",
"707 975 OFFCURVE",
"707 1087 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"568 928.301 OFFCURVE",
"500.11 849 OFFCURVE",
"389 849 CURVE SMOOTH",
"277.001 849 OFFCURVE",
"212 927.747 OFFCURVE",
"212 1087 CURVE SMOOTH",
"212 1247.977 OFFCURVE",
"277.339 1330 OFFCURVE",
"389 1330 CURVE SMOOTH",
"499.782 1330 OFFCURVE",
"568 1247.423 OFFCURVE",
"568 1087 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"166 0 LINE",
"298 0 LINE SMOOTH",
"323.333 0 OFFCURVE",
"341.667 11.667 OFFCURVE",
"355 29 CURVE SMOOTH",
"1402 1433 LINE",
"1274 1433 LINE SMOOTH",
"1242 1433 OFFCURVE",
"1225.333 1419.667 OFFCURVE",
"1208 1397 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1499 452.667 OFFCURVE",
"1465.333 543.667 OFFCURVE",
"1408 605 CURVE SMOOTH",
"1350.667 666.333 OFFCURVE",
"1271.333 699 OFFCURVE",
"1182 699 CURVE SMOOTH",
"1091.333 699 OFFCURVE",
"1013.333 666.333 OFFCURVE",
"956 605 CURVE SMOOTH",
"898.667 543.667 OFFCURVE",
"865 452.667 OFFCURVE",
"865 338 CURVE SMOOTH",
"865 226 OFFCURVE",
"898.667 137.167 OFFCURVE",
"956 76.5 CURVE SMOOTH",
"1013.333 15.833 OFFCURVE",
"1091.333 -17 OFFCURVE",
"1182 -17 CURVE SMOOTH",
"1266 -17 OFFCURVE",
"1345.5 15.833 OFFCURVE",
"1403.5 76.5 CURVE SMOOTH",
"1461.5 137.167 OFFCURVE",
"1499 226 OFFCURVE",
"1499 338 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1361 179.713 OFFCURVE",
"1292.985 101 OFFCURVE",
"1182 101 CURVE SMOOTH",
"1070.604 101 OFFCURVE",
"1005 179.574 OFFCURVE",
"1005 338 CURVE SMOOTH",
"1005 498.978 OFFCURVE",
"1069.637 581 OFFCURVE",
"1182 581 CURVE SMOOTH",
"1293.469 581 OFFCURVE",
"1361 498.423 OFFCURVE",
"1361 338 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 9 9 5 1 0 36 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 4 1 2 1 4 2 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 5 5 15 31 0 9 9 6 1 0 36 0 6 6 21 6 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 69 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 5 6 9 1 0 35 0 9 9 6 1 0 36 0 6 9 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1572;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"707 1201.667 OFFCURVE",
"672.167 1291.667 OFFCURVE",
"615.5 1353 CURVE SMOOTH",
"558.833 1414.333 OFFCURVE",
"478.333 1447 OFFCURVE",
"389 1447 CURVE SMOOTH",
"298.333 1447 OFFCURVE",
"220.333 1414.333 OFFCURVE",
"163 1353 CURVE SMOOTH",
"105.667 1291.667 OFFCURVE",
"72 1201.667 OFFCURVE",
"72 1087 CURVE SMOOTH",
"72 975 OFFCURVE",
"105.667 885.167 OFFCURVE",
"163 824.5 CURVE SMOOTH",
"220.333 763.833 OFFCURVE",
"298.333 731 OFFCURVE",
"389 731 CURVE SMOOTH",
"473 731 OFFCURVE",
"553.5 763.833 OFFCURVE",
"611.5 824.5 CURVE SMOOTH",
"669.5 885.167 OFFCURVE",
"707 975 OFFCURVE",
"707 1087 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"568 928.301 OFFCURVE",
"500.11 849 OFFCURVE",
"389 849 CURVE SMOOTH",
"277.001 849 OFFCURVE",
"212 927.747 OFFCURVE",
"212 1087 CURVE SMOOTH",
"212 1247.977 OFFCURVE",
"277.339 1330 OFFCURVE",
"389 1330 CURVE SMOOTH",
"499.782 1330 OFFCURVE",
"568 1247.423 OFFCURVE",
"568 1087 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"166 0 LINE",
"298 0 LINE SMOOTH",
"323.333 0 OFFCURVE",
"341.667 11.667 OFFCURVE",
"355 29 CURVE SMOOTH",
"1402 1433 LINE",
"1274 1433 LINE SMOOTH",
"1242 1433 OFFCURVE",
"1225 1420.333 OFFCURVE",
"1213 1403 CURVE"
);
},
{
closed = 1;
nodes = (
"1499 452.667 OFFCURVE",
"1465.333 543.667 OFFCURVE",
"1408 605 CURVE SMOOTH",
"1350.667 666.333 OFFCURVE",
"1271.333 699 OFFCURVE",
"1182 699 CURVE SMOOTH",
"1091.333 699 OFFCURVE",
"1013.333 666.333 OFFCURVE",
"956 605 CURVE SMOOTH",
"898.667 543.667 OFFCURVE",
"865 452.667 OFFCURVE",
"865 338 CURVE SMOOTH",
"865 226 OFFCURVE",
"898.667 137.167 OFFCURVE",
"956 76.5 CURVE SMOOTH",
"1013.333 15.833 OFFCURVE",
"1091.333 -17 OFFCURVE",
"1182 -17 CURVE SMOOTH",
"1266 -17 OFFCURVE",
"1345.5 15.833 OFFCURVE",
"1403.5 76.5 CURVE SMOOTH",
"1461.5 137.167 OFFCURVE",
"1499 226 OFFCURVE",
"1499 338 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1361 179.713 OFFCURVE",
"1292.985 101 OFFCURVE",
"1182 101 CURVE SMOOTH",
"1070.604 101 OFFCURVE",
"1005 179.574 OFFCURVE",
"1005 338 CURVE SMOOTH",
"1005 498.978 OFFCURVE",
"1069.637 581 OFFCURVE",
"1182 581 CURVE SMOOTH",
"1293.469 581 OFFCURVE",
"1361 498.423 OFFCURVE",
"1361 338 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2233 452.667 OFFCURVE",
"2198.167 543.667 OFFCURVE",
"2141.5 605 CURVE SMOOTH",
"2084.833 666.333 OFFCURVE",
"2004.333 699 OFFCURVE",
"1915 699 CURVE SMOOTH",
"1824.333 699 OFFCURVE",
"1746.333 666.333 OFFCURVE",
"1689 605 CURVE SMOOTH",
"1631.667 543.667 OFFCURVE",
"1598 452.667 OFFCURVE",
"1598 338 CURVE SMOOTH",
"1598 226 OFFCURVE",
"1631.667 137.167 OFFCURVE",
"1689 76.5 CURVE SMOOTH",
"1746.333 15.833 OFFCURVE",
"1824.333 -17 OFFCURVE",
"1915 -17 CURVE SMOOTH",
"1999 -17 OFFCURVE",
"2079.5 15.833 OFFCURVE",
"2137.5 76.5 CURVE SMOOTH",
"2195.5 137.167 OFFCURVE",
"2233 226 OFFCURVE",
"2233 338 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2094 179.713 OFFCURVE",
"2025.985 101 OFFCURVE",
"1915 101 CURVE SMOOTH",
"1803.604 101 OFFCURVE",
"1738 179.574 OFFCURVE",
"1738 338 CURVE SMOOTH",
"1738 498.978 OFFCURVE",
"1802.637 581 OFFCURVE",
"1915 581 CURVE SMOOTH",
"2026.469 581 OFFCURVE",
"2094 498.423 OFFCURVE",
"2094 338 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
126 124 116 114 106 104 96 94 86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 13 1 9 9 5 1 0 36 10 6 2 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 4 1 2 1 4 2 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 5 5 15 31 13 1 9 9 6 1 0 36 10 1 6 6 21 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 13 1 9 5 6 9 1 0 35 13 1 9 9 6 1 0 36 10 1 6 9 6 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 4 1 2 1 4 2 50 0 5 13 10 13 5 10 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 11 0 12 8 11 12 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 13 6 9 1 0 35 0 13 0 10 6 13 10 1 0 38 0 9 9 6 1 0 36 0 6 9 6 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2306;
}
);
note = perthousand;
unicode = 2030;
},
{
glyphname = lozenge;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"518 -119 LINE",
"642 -119 LINE",
"1032 701 LINE",
"642 1522 LINE",
"518 1522 LINE",
"128 701 LINE"
);
},
{
closed = 1;
nodes = (
"552 1283 LINE",
"557.333 1297.667 OFFCURVE",
"562.5 1311.333 OFFCURVE",
"567.5 1324 CURVE SMOOTH",
"572.5 1336.667 OFFCURVE",
"576.667 1349 OFFCURVE",
"580 1361 CURVE",
"586.667 1337.667 OFFCURVE",
"596 1311.667 OFFCURVE",
"608 1283 CURVE",
"888 701 LINE",
"608 120 LINE",
"596 89.333 OFFCURVE",
"586.667 65 OFFCURVE",
"580 41 CURVE",
"576.667 53 OFFCURVE",
"572.5 65.333 OFFCURVE",
"567.5 78 CURVE SMOOTH",
"562.5 90.667 OFFCURVE",
"557.333 104.667 OFFCURVE",
"552 120 CURVE",
"276 701 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
5 4 2 1 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 34 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = "quarternote-musical";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"-2 -343 LINE",
"2 -343 LINE",
"2 1473 LINE",
"-2 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 13 31 0 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 0;
}
);
note = uni2669;
unicode = 2669;
},
{
glyphname = dieresis;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"239 1350.597 OFFCURVE",
"187.003 1403 OFFCURVE",
"125 1403 CURVE SMOOTH",
"65.46 1403 OFFCURVE",
"14 1350.314 OFFCURVE",
"14 1289 CURVE SMOOTH",
"14 1229.686 OFFCURVE",
"65.949 1178 OFFCURVE",
"125 1178 CURVE SMOOTH",
"186.503 1178 OFFCURVE",
"239 1229.384 OFFCURVE",
"239 1289 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"598 1350.976 OFFCURVE",
"546.618 1403 OFFCURVE",
"485 1403 CURVE SMOOTH",
"423.736 1403 OFFCURVE",
"373 1351.446 OFFCURVE",
"373 1289 CURVE SMOOTH",
"373 1228.606 OFFCURVE",
"424.228 1178 OFFCURVE",
"485 1178 CURVE SMOOTH",
"546.122 1178 OFFCURVE",
"598 1229.042 OFFCURVE",
"598 1289 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
2 1 0 0 1 1 0 36 3 1 1 1 11 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"433 1407.842 OFFCURVE",
"373.327 1466 OFFCURVE",
"305 1466 CURVE SMOOTH",
"236.736 1466 OFFCURVE",
"180 1407.819 OFFCURVE",
"180 1338 CURVE SMOOTH",
"180 1270.192 OFFCURVE",
"237.192 1213 OFFCURVE",
"305 1213 CURVE SMOOTH",
"372.87 1213 OFFCURVE",
"433 1270.168 OFFCURVE",
"433 1338 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 13 0 32 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
lastChange = "2020-02-16 19:34:17 +0000";
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"18 1159 LINE",
"372 691 LINE",
"390 671 OFFCURVE",
"405 663 OFFCURVE",
"433 663 CURVE",
"595 663 LINE",
"326 1115 LINE SMOOTH",
"303 1146 OFFCURVE",
"291 1159 OFFCURVE",
"247 1159 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 1 0 1 53 2 1 0 0 17 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
2 1 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"423 1449 LINE SMOOTH",
"380.333 1449 OFFCURVE",
"362.667 1435.667 OFFCURVE",
"344 1405 CURVE SMOOTH",
"196 1163 LINE",
"302 1163 LINE SMOOTH",
"330 1163 OFFCURVE",
"345.333 1171 OFFCURVE",
"364 1191 CURVE SMOOTH",
"597 1449 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 9 0 8 5 3 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 1 0 53 2 1 1 1 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"311 1449 LINE SMOOTH",
"267 1449 OFFCURVE",
"249.333 1435.667 OFFCURVE",
"232 1405 CURVE SMOOTH",
"94 1163 LINE",
"168 1163 LINE SMOOTH",
"196 1163 OFFCURVE",
"214 1169.667 OFFCURVE",
"230 1191 CURVE SMOOTH",
"429 1449 LINE"
);
},
{
closed = 1;
nodes = (
"612 1449 LINE SMOOTH",
"568 1449 OFFCURVE",
"554.333 1434.333 OFFCURVE",
"533 1405 CURVE SMOOTH",
"353 1163 LINE",
"439 1163 LINE SMOOTH",
"465.667 1163 OFFCURVE",
"481.333 1171 OFFCURVE",
"500 1191 CURVE SMOOTH",
"743 1449 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 19 10 18 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
2 1 0 0 1 1 0 36 5 3 4 3 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"389 1433 LINE",
"223 1433 LINE",
"0 1169 LINE",
"123 1169 LINE SMOOTH",
"139 1169 OFFCURVE",
"155 1176.333 OFFCURVE",
"163 1183 CURVE",
"292 1309 LINE",
"308 1326 LINE",
"325 1309 LINE",
"453 1183 LINE",
"465.667 1173.667 OFFCURVE",
"479 1169 OFFCURVE",
"493 1169 CURVE SMOOTH",
"612 1169 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
13 12 11 9 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
5 1 0 2 1 30 1 1 0 2 0 53 0 2 2 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
5 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
5 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"223 1169 LINE",
"389 1169 LINE",
"612 1433 LINE",
"493 1433 LINE SMOOTH",
"478.333 1433 OFFCURVE",
"461 1426 OFFCURVE",
"453 1418 CURVE SMOOTH",
"325 1293 LINE",
"321.667 1290.333 OFFCURVE",
"318.833 1287.333 OFFCURVE",
"316.5 1284 CURVE SMOOTH",
"314.167 1280.667 OFFCURVE",
"311.333 1277.333 OFFCURVE",
"308 1274 CURVE",
"304 1280.667 OFFCURVE",
"298.333 1287 OFFCURVE",
"291 1293 CURVE",
"163 1418 LINE",
"155 1424.667 OFFCURVE",
"139 1433 OFFCURVE",
"123 1433 CURVE SMOOTH",
"0 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 16 15 13 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
7 1 2 0 1 30 0 2 0 2 53 1 1 0 0 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
7 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
7 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"407.333 1164 OFFCURVE",
"476.167 1194.833 OFFCURVE",
"519.5 1243.5 CURVE SMOOTH",
"562.833 1292.167 OFFCURVE",
"580 1359.667 OFFCURVE",
"580 1433 CURVE",
"454 1433 LINE",
"454 1338.573 OFFCURVE",
"415.618 1280 OFFCURVE",
"306 1280 CURVE SMOOTH",
"196.382 1280 OFFCURVE",
"158 1338.573 OFFCURVE",
"158 1433 CURVE",
"32 1433 LINE",
"32 1359.667 OFFCURVE",
"49.167 1292.167 OFFCURVE",
"92.5 1243.5 CURVE SMOOTH",
"135.833 1194.833 OFFCURVE",
"203.333 1164 OFFCURVE",
"306 1164 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 17 16 12 10 6 5 0 21 1 21 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 4 1 0 2 0 1 0 37 3 1 1 1 11 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"106 1207.187 OFFCURVE",
"196.746 1131 OFFCURVE",
"305 1131 CURVE SMOOTH",
"415.708 1131 OFFCURVE",
"507 1206.899 OFFCURVE",
"507 1315 CURVE SMOOTH",
"507 1424.991 OFFCURVE",
"414.935 1502 OFFCURVE",
"305 1502 CURVE SMOOTH",
"197.498 1502 OFFCURVE",
"106 1424.722 OFFCURVE",
"106 1315 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"206 1375 OFFCURVE",
"244.333 1416 OFFCURVE",
"307 1416 CURVE SMOOTH",
"367 1416 OFFCURVE",
"407 1375 OFFCURVE",
"407 1315 CURVE SMOOTH",
"407 1256.333 OFFCURVE",
"367 1215 OFFCURVE",
"307 1215 CURVE SMOOTH",
"244.333 1215 OFFCURVE",
"206 1256.333 OFFCURVE",
"206 1315 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 13 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"356.54 1325 OFFCURVE",
"281.995 1417 OFFCURVE",
"197 1417 CURVE SMOOTH",
"88.484 1417 OFFCURVE",
"18 1326.104 OFFCURVE",
"18 1202 CURVE",
"129 1202 LINE",
"130.333 1260.667 OFFCURVE",
"155 1290 OFFCURVE",
"203 1290 CURVE SMOOTH",
"264.256 1290 OFFCURVE",
"339.418 1198 OFFCURVE",
"424 1198 CURVE SMOOTH",
"533.935 1198 OFFCURVE",
"601 1288.348 OFFCURVE",
"601 1411 CURVE",
"493 1411 LINE",
"491.667 1352.333 OFFCURVE",
"465 1325 OFFCURVE",
"417 1325 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 23 21 17 16 15 13 10 8 4 3 0 26 1 26 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
46 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
6 1 0 4 1 2 0 2 1 0 37 0 3 3 1 1 0 36 5 1 1 1 11 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"20 1231 LINE",
"594 1231 LINE",
"594 1348 LINE",
"20 1348 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"160.667 -247 OFFCURVE",
"153 -253 OFFCURVE",
"149 -265 CURVE SMOOTH",
"132 -320 LINE",
"173.333 -338.667 OFFCURVE",
"223.333 -351 OFFCURVE",
"278 -351 CURVE SMOOTH",
"397.58 -351 OFFCURVE",
"495 -303.305 OFFCURVE",
"495 -213 CURVE SMOOTH",
"495 -141 OFFCURVE",
"444 -96.667 OFFCURVE",
"324 -70 CURVE",
"348 10 LINE",
"236 10 LINE",
"193 -131 LINE",
"282.328 -142.754 OFFCURVE",
"354 -157.177 OFFCURVE",
"354 -211 CURVE SMOOTH",
"354 -245.667 OFFCURVE",
"325 -270 OFFCURVE",
"269 -270 CURVE SMOOTH",
"236.037 -270 OFFCURVE",
"184.748 -247 OFFCURVE",
"172 -247 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 25 23 15 14 6 4 0 29 1 29 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
16 13 2 0 2 27 1 3 0 2 30 0 2 0 0 2 40 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
16 13 2 0 2 27 1 3 0 2 30 0 2 0 2 52 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
16 13 2 0 2 27 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 1 3 1 2 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
16 13 2 0 2 27 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 3 3 1 1 0 35 0 1 1 3 1 2 36 0 3 1 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"440.525 -211 OFFCURVE",
"393.408 -235 OFFCURVE",
"360 -235 CURVE SMOOTH",
"304 -235 OFFCURVE",
"269 -204.667 OFFCURVE",
"269 -154 CURVE SMOOTH",
"269 -85.611 OFFCURVE",
"331.328 -30.62 OFFCURVE",
"387 0 CURVE",
"295 13 LINE",
"208.358 -35.418 OFFCURVE",
"134 -112.457 OFFCURVE",
"134 -197 CURVE SMOOTH",
"134 -285 OFFCURVE",
"205.667 -342 OFFCURVE",
"323 -342 CURVE SMOOTH",
"391 -342 OFFCURVE",
"457 -320.667 OFFCURVE",
"497 -290 CURVE",
"469 -224 LINE SMOOTH",
"466.333 -217.333 OFFCURVE",
"460.333 -211 OFFCURVE",
"451 -211 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
1 0 25 23 8 6 0 28 1 28 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
4 1 1 0 1 30 16 15 2 0 28 2 3 2 0 0 1 1 0 36 0 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
4 1 1 2 1 30 16 15 2 0 28 3 1 0 2 0 52 0 2 2 1 1 0 36 0 1 1 16 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
4 1 1 2 1 30 16 15 2 0 28 3 1 0 2 0 52 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = dieresis.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"204 1727.245 OFFCURVE",
"153.245 1778 OFFCURVE",
"92 1778 CURVE SMOOTH",
"34.927 1778 OFFCURVE",
"-16 1725.866 OFFCURVE",
"-16 1666 CURVE SMOOTH",
"-16 1607.891 OFFCURVE",
"36.028 1558 OFFCURVE",
"92 1558 CURVE SMOOTH",
"152.114 1558 OFFCURVE",
"204 1606.541 OFFCURVE",
"204 1666 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"630 1726.542 OFFCURVE",
"579.157 1778 OFFCURVE",
"520 1778 CURVE SMOOTH",
"458.463 1778 OFFCURVE",
"410 1726.772 OFFCURVE",
"410 1666 CURVE SMOOTH",
"410 1607.012 OFFCURVE",
"459.593 1558 OFFCURVE",
"520 1558 CURVE SMOOTH",
"578.041 1558 OFFCURVE",
"630 1607.229 OFFCURVE",
"630 1666 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = dieresis.case;
},
{
glyphname = dotaccent.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"428 1753.501 OFFCURVE",
"369.922 1811 OFFCURVE",
"304 1811 CURVE SMOOTH",
"238.976 1811 OFFCURVE",
"184 1753.675 OFFCURVE",
"184 1688 CURVE SMOOTH",
"184 1623.934 OFFCURVE",
"238.8 1567 OFFCURVE",
"304 1567 CURVE SMOOTH",
"370.089 1567 OFFCURVE",
"428 1624.105 OFFCURVE",
"428 1688 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = dotaccent.case;
},
{
glyphname = grave.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"-44 1782 LINE",
"251 1565 LINE SMOOTH",
"273.667 1549 OFFCURVE",
"285 1546 OFFCURVE",
"313 1546 CURVE SMOOTH",
"452 1546 LINE",
"241 1749 LINE SMOOTH",
"214.333 1775.667 OFFCURVE",
"199.667 1782 OFFCURVE",
"157 1782 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 0 1 0 52 0 1 1 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = grave.case;
},
{
glyphname = acute.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"457 1782 LINE SMOOTH",
"417.99 1782 OFFCURVE",
"398.6 1774.6 OFFCURVE",
"373 1749 CURVE SMOOTH",
"162 1546 LINE",
"300 1546 LINE SMOOTH",
"328 1546 OFFCURVE",
"341.333 1550 OFFCURVE",
"364 1566 CURVE SMOOTH",
"658 1782 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 11 0 10 5 3 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = acute.case;
},
{
glyphname = hungarumlaut.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"307 1771 LINE SMOOTH",
"263 1771 OFFCURVE",
"241.333 1753.667 OFFCURVE",
"220 1727 CURVE SMOOTH",
"78 1546 LINE",
"164 1546 LINE SMOOTH",
"190.667 1546 OFFCURVE",
"206.333 1554.333 OFFCURVE",
"225 1573 CURVE SMOOTH",
"424 1771 LINE"
);
},
{
closed = 1;
nodes = (
"626 1771 LINE SMOOTH",
"583.333 1771 OFFCURVE",
"560.333 1753.667 OFFCURVE",
"535 1727 CURVE SMOOTH",
"356 1546 LINE",
"452 1546 LINE SMOOTH",
"480 1546 OFFCURVE",
"496.333 1555.667 OFFCURVE",
"519 1573 CURVE SMOOTH",
"762 1771 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 19 10 18 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = hungarumlaut.case;
},
{
glyphname = circumflex.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"394 1756 LINE",
"218 1756 LINE",
"-20 1546 LINE",
"115 1546 LINE SMOOTH",
"131 1546 OFFCURVE",
"152 1551 OFFCURVE",
"164 1559 CURVE",
"294 1654 LINE",
"296.667 1655.333 OFFCURVE",
"300.667 1658 OFFCURVE",
"306 1662 CURVE",
"308.667 1659.333 OFFCURVE",
"312.667 1656.667 OFFCURVE",
"318 1654 CURVE",
"448 1559 LINE",
"460 1551 OFFCURVE",
"481 1546 OFFCURVE",
"497 1546 CURVE SMOOTH",
"632 1546 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
16 15 14 12 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
7 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
7 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = circumflex.case;
},
{
glyphname = caron.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"632 1756 LINE",
"497 1756 LINE SMOOTH",
"481 1756 OFFCURVE",
"460 1751 OFFCURVE",
"448 1743 CURVE",
"318 1649 LINE",
"314 1646.333 OFFCURVE",
"308.667 1642 OFFCURVE",
"306 1638 CURVE",
"303.333 1642 OFFCURVE",
"298 1646.333 OFFCURVE",
"294 1649 CURVE",
"164 1743 LINE",
"152 1751 OFFCURVE",
"131 1756 OFFCURVE",
"115 1756 CURVE SMOOTH",
"-20 1756 LINE",
"218 1546 LINE",
"394 1546 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 16 4 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = caron.case;
},
{
glyphname = breve.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"488.333 1527 OFFCURVE",
"586 1616 OFFCURVE",
"586 1756 CURVE",
"471 1756 LINE",
"471 1677.333 OFFCURVE",
"421.667 1636 OFFCURVE",
"307 1636 CURVE SMOOTH",
"192.333 1636 OFFCURVE",
"143 1677.333 OFFCURVE",
"143 1756 CURVE",
"28 1756 LINE",
"28 1604 OFFCURVE",
"124.333 1527 OFFCURVE",
"307 1527 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 11 10 8 6 4 3 0 13 1 13 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = breve.case;
},
{
glyphname = ring.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"118 1558.406 OFFCURVE",
"205.56 1485 OFFCURVE",
"306 1485 CURVE SMOOTH",
"410.82 1485 OFFCURVE",
"497 1558.097 OFFCURVE",
"497 1659 CURVE SMOOTH",
"497 1762.72 OFFCURVE",
"411.134 1837 OFFCURVE",
"306 1837 CURVE SMOOTH",
"204.822 1837 OFFCURVE",
"118 1762.862 OFFCURVE",
"118 1659 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"207 1719 OFFCURVE",
"245.333 1760 OFFCURVE",
"308 1760 CURVE SMOOTH",
"368 1760 OFFCURVE",
"408 1719 OFFCURVE",
"408 1659 CURVE SMOOTH",
"408 1601.667 OFFCURVE",
"368 1559 OFFCURVE",
"308 1559 CURVE SMOOTH",
"245.333 1559 OFFCURVE",
"207 1601.667 OFFCURVE",
"207 1659 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = ring.case;
},
{
glyphname = tilde.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"362.393 1663 OFFCURVE",
"280.225 1746 OFFCURVE",
"194 1746 CURVE SMOOTH",
"87.959 1746 OFFCURVE",
"26 1661.228 OFFCURVE",
"26 1548 CURVE",
"126 1548 LINE",
"127.333 1596 OFFCURVE",
"152.667 1627 OFFCURVE",
"198 1627 CURVE SMOOTH",
"262.216 1627 OFFCURVE",
"346.051 1544 OFFCURVE",
"432 1544 CURVE SMOOTH",
"538.688 1544 OFFCURVE",
"598 1626.557 OFFCURVE",
"598 1741 CURVE",
"500 1741 LINE",
"498.667 1691.667 OFFCURVE",
"473.667 1663 OFFCURVE",
"427 1663 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
91 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = tilde.case;
},
{
glyphname = macron.case;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
paths = (
{
closed = 1;
nodes = (
"68 1575 LINE",
"546 1575 LINE",
"546 1681 LINE",
"68 1681 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 614;
}
);
note = macron.case;
},
{
glyphname = firsttonechinese;
layers = (
{
components = (
{
alignment = -1;
name = macron;
}
);
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 614;
}
);
note = uni02C9;
unicode = 02C9;
},
{
glyphname = NULL;
layers = (
{
layerId = "35A30917-2BE5-44A3-8659-B24E5BB0D762";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
name = Regular;
weightClass = Normal;
}
);
kerning = {
"35A30917-2BE5-44A3-8659-B24E5BB0D762" = {
A = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Aacute = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Acircumflex = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Adieresis = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Agrave = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Aogonek = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Aring = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
Atilde = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
C = {
bullet = -150;
emdash = -150;
endash = -150;
guillemetleft = -150;
guillemetright = -150;
guilsinglleft = -150;
guilsinglright = -150;
hyphen = -150;
periodcentered = -150;
softhyphen = -150;
};
Cacute = {
bullet = -150;
emdash = -150;
endash = -150;
guillemetleft = -150;
guillemetright = -150;
guilsinglleft = -150;
guilsinglright = -150;
hyphen = -150;
periodcentered = -150;
softhyphen = -150;
};
Ccedilla = {
bullet = -150;
emdash = -150;
endash = -150;
guillemetleft = -150;
guillemetright = -150;
guilsinglleft = -150;
guilsinglright = -150;
hyphen = -150;
periodcentered = -150;
softhyphen = -150;
};
D = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Eth = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
F = {
A = -132;
AE = -132;
Aacute = -132;
Acircumflex = -132;
Adieresis = -132;
Agrave = -132;
Aogonek = -132;
Aring = -132;
Atilde = -132;
J = -198;
ampersand = -132;
c = -70;
cacute = -70;
ccedilla = -70;
colon = -60;
comma = -180;
d = -70;
e = -70;
eacute = -70;
ecircumflex = -70;
edieresis = -70;
egrave = -70;
eogonek = -70;
eth = -70;
increment = -132;
m = -60;
micro = -60;
n = -60;
nacute = -60;
ntilde = -60;
o = -70;
oacute = -70;
ocircumflex = -70;
odieresis = -70;
oe = -70;
ograve = -70;
oslash = -70;
otilde = -70;
p = -60;
period = -180;
q = -70;
question = 30;
quotedblbase = -180;
quotesinglbase = -180;
r = -60;
semicolon = -60;
slash = -132;
u = -60;
uacute = -60;
ucircumflex = -60;
udieresis = -60;
ugrave = -60;
};
J = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
K = {
C = -30;
Cacute = -30;
Ccedilla = -30;
G = -30;
O = -30;
OE = -30;
Oacute = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
at = -30;
bullet = -62;
c = -36;
cacute = -36;
ccedilla = -36;
d = -36;
e = -36;
eacute = -36;
ecircumflex = -36;
edieresis = -36;
egrave = -36;
emdash = -62;
endash = -62;
eogonek = -36;
eth = -36;
f = -52;
guillemetleft = -62;
guillemetright = -62;
guilsinglleft = -62;
guilsinglright = -62;
hyphen = -62;
o = -36;
oacute = -36;
ocircumflex = -36;
odieresis = -36;
oe = -36;
ograve = -36;
oslash = -36;
otilde = -36;
periodcentered = -62;
q = -36;
softhyphen = -62;
t = -82;
v = -66;
w = -56;
y = -66;
};
L = {
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
T = -172;
V = -182;
W = -152;
Y = -212;
Yacute = -212;
Ydieresis = -212;
asterisk = -290;
at = -80;
backslash = -182;
bullet = -198;
c = -36;
cacute = -36;
ccedilla = -36;
comma = 54;
d = -36;
degree = -290;
e = -36;
eacute = -36;
ecircumflex = -36;
edieresis = -36;
egrave = -36;
emdash = -198;
endash = -198;
eogonek = -36;
eth = -36;
guillemetleft = -198;
guillemetright = -198;
guilsinglleft = -198;
guilsinglright = -198;
hyphen = -198;
o = -36;
oacute = -36;
ocircumflex = -36;
odieresis = -36;
oe = -36;
ograve = -36;
onesuperior = -202;
ordfeminine = -290;
ordmasculine = -290;
oslash = -36;
otilde = -36;
period = 54;
periodcentered = -198;
q = -36;
question = -50;
quotedbl = -290;
quotedblbase = 54;
quotedblleft = -290;
quotedblright = -290;
quoteleft = -290;
quoteright = -290;
quotesinglbase = 54;
quotesingle = -290;
softhyphen = -198;
threesuperior = -202;
trademark = -290;
twosuperior = -202;
v = -108;
w = -80;
y = -108;
};
Lslash = {
V = -162;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -140;
backslash = -162;
bullet = -128;
degree = -140;
emdash = -128;
endash = -128;
guillemetleft = -128;
guillemetright = -128;
guilsinglleft = -128;
guilsinglright = -128;
hyphen = -128;
onesuperior = -132;
ordfeminine = -140;
ordmasculine = -140;
periodcentered = -128;
quotedbl = -140;
quotedblleft = -140;
quotedblright = -140;
quoteleft = -140;
quoteright = -140;
quotesingle = -140;
softhyphen = -128;
threesuperior = -132;
trademark = -140;
twosuperior = -132;
v = -56;
y = -56;
};
O = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Oacute = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Ocircumflex = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Odieresis = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Ograve = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
Otilde = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
P = {
A = -138;
AE = -138;
Aacute = -138;
Acircumflex = -138;
Adieresis = -138;
Agrave = -138;
Aogonek = -138;
Aring = -138;
Atilde = -138;
J = -182;
a = -50;
aacute = -50;
acircumflex = -50;
adieresis = -50;
ae = -50;
agrave = -50;
ampersand = -138;
aogonek = -50;
aring = -50;
atilde = -50;
c = -30;
cacute = -30;
ccedilla = -30;
comma = -248;
d = -30;
e = -30;
eacute = -30;
ecircumflex = -30;
edieresis = -30;
egrave = -30;
eogonek = -30;
eth = -30;
increment = -138;
o = -30;
oacute = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
oslash = -30;
otilde = -30;
period = -248;
q = -30;
quotedblbase = -248;
quotesinglbase = -248;
slash = -138;
};
Q = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
R = {
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
T = -52;
U = -42;
Uacute = -42;
Ucircumflex = -42;
Udieresis = -42;
Ugrave = -42;
at = -46;
};
T = {
A = -132;
AE = -132;
Aacute = -132;
Acircumflex = -132;
Adieresis = -132;
Agrave = -132;
Aogonek = -132;
Aring = -132;
Atilde = -132;
C = -98;
Cacute = -98;
Ccedilla = -98;
G = -98;
J = -200;
O = -98;
OE = -98;
Oacute = -98;
Ocircumflex = -98;
Odieresis = -98;
Ograve = -98;
Oslash = -98;
Otilde = -98;
Q = -98;
a = -250;
aacute = -250;
acircumflex = -250;
adieresis = -250;
ae = -250;
agrave = -250;
ampersand = -132;
aogonek = -250;
aring = -250;
at = -98;
atilde = -250;
bullet = -180;
c = -210;
cacute = -210;
ccedilla = -210;
colon = -160;
comma = -180;
d = -210;
e = -210;
eacute = -210;
ecircumflex = -210;
edieresis = -210;
egrave = -210;
emdash = -180;
endash = -180;
eogonek = -210;
eth = -210;
g = -188;
guillemetleft = -180;
guillemetright = -180;
guilsinglleft = -180;
guilsinglright = -180;
hyphen = -180;
increment = -132;
m = -160;
micro = -160;
n = -160;
nacute = -160;
ntilde = -160;
o = -210;
oacute = -210;
ocircumflex = -210;
odieresis = -210;
oe = -210;
ograve = -210;
oslash = -210;
otilde = -210;
p = -160;
period = -180;
periodcentered = -180;
q = -210;
quotedblbase = -180;
quotesinglbase = -180;
r = -160;
s = -162;
semicolon = -160;
slash = -132;
softhyphen = -180;
u = -160;
uacute = -160;
ucircumflex = -160;
udieresis = -160;
ugrave = -160;
v = -180;
w = -140;
x = -144;
y = -180;
z = -120;
};
Thorn = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
U = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
Uacute = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
Ucircumflex = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
Udieresis = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
Ugrave = {
A = -56;
AE = -56;
Aacute = -56;
Acircumflex = -56;
Adieresis = -56;
Agrave = -56;
Aogonek = -56;
Aring = -56;
Atilde = -56;
ampersand = -56;
comma = -50;
increment = -56;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -56;
};
V = {
A = -136;
AE = -136;
Aacute = -136;
Acircumflex = -136;
Adieresis = -136;
Agrave = -136;
Aogonek = -136;
Aring = -136;
Atilde = -136;
C = -52;
Cacute = -52;
Ccedilla = -52;
G = -52;
J = -152;
O = -52;
OE = -52;
Oacute = -52;
Ocircumflex = -52;
Odieresis = -52;
Ograve = -52;
Oslash = -52;
Otilde = -52;
Q = -52;
a = -116;
aacute = -116;
acircumflex = -116;
adieresis = -116;
ae = -116;
agrave = -116;
ampersand = -136;
aogonek = -116;
aring = -116;
asterisk = 48;
at = -52;
atilde = -116;
bullet = -112;
c = -116;
cacute = -116;
ccedilla = -116;
colon = -88;
comma = -192;
d = -116;
degree = 48;
e = -116;
eacute = -116;
ecircumflex = -116;
edieresis = -116;
egrave = -116;
emdash = -112;
endash = -112;
eogonek = -116;
eth = -116;
f = -30;
g = -136;
guillemetleft = -112;
guillemetright = -112;
guilsinglleft = -112;
guilsinglright = -112;
hyphen = -112;
increment = -136;
m = -88;
micro = -88;
n = -88;
nacute = -88;
ntilde = -88;
o = -116;
oacute = -116;
ocircumflex = -116;
odieresis = -116;
oe = -116;
ograve = -116;
onesuperior = 58;
ordfeminine = 48;
ordmasculine = 48;
oslash = -116;
otilde = -116;
p = -88;
period = -192;
periodcentered = -112;
q = -116;
question = 48;
quotedbl = 48;
quotedblbase = -192;
quotedblleft = 48;
quotedblright = 48;
quoteleft = 48;
quoteright = 48;
quotesinglbase = -192;
quotesingle = 48;
r = -88;
s = -106;
semicolon = -88;
slash = -136;
softhyphen = -112;
t = -42;
threesuperior = 58;
trademark = 48;
twosuperior = 58;
u = -88;
uacute = -88;
ucircumflex = -88;
udieresis = -88;
ugrave = -88;
v = -48;
x = -52;
y = -48;
z = -82;
};
W = {
A = -94;
AE = -94;
Aacute = -94;
Acircumflex = -94;
Adieresis = -94;
Agrave = -94;
Aogonek = -94;
Aring = -94;
Atilde = -94;
J = -102;
a = -88;
aacute = -88;
acircumflex = -88;
adieresis = -88;
ae = -88;
agrave = -88;
ampersand = -94;
aogonek = -88;
aring = -88;
asterisk = 48;
atilde = -88;
bullet = -32;
c = -32;
cacute = -32;
ccedilla = -32;
comma = -122;
d = -32;
degree = 48;
e = -32;
eacute = -32;
ecircumflex = -32;
edieresis = -32;
egrave = -32;
emdash = -32;
endash = -32;
eogonek = -32;
eth = -32;
g = -98;
guillemetleft = -32;
guillemetright = -32;
guilsinglleft = -32;
guilsinglright = -32;
hyphen = -32;
increment = -94;
o = -32;
oacute = -32;
ocircumflex = -32;
odieresis = -32;
oe = -32;
ograve = -32;
onesuperior = 48;
ordfeminine = 48;
ordmasculine = 48;
oslash = -32;
otilde = -32;
period = -122;
periodcentered = -32;
q = -32;
question = 34;
quotedbl = 48;
quotedblbase = -122;
quotedblleft = 48;
quotedblright = 48;
quoteleft = 48;
quoteright = 48;
quotesinglbase = -122;
quotesingle = 48;
s = -46;
slash = -94;
softhyphen = -32;
threesuperior = 48;
trademark = 48;
twosuperior = 48;
};
X = {
C = -30;
Cacute = -30;
Ccedilla = -30;
G = -30;
O = -30;
OE = -30;
Oacute = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
at = -30;
bullet = -62;
c = -36;
cacute = -36;
ccedilla = -36;
d = -36;
e = -36;
eacute = -36;
ecircumflex = -36;
edieresis = -36;
egrave = -36;
emdash = -62;
endash = -62;
eogonek = -36;
eth = -36;
f = -52;
guillemetleft = -62;
guillemetright = -62;
guilsinglleft = -62;
guilsinglright = -62;
hyphen = -62;
o = -36;
oacute = -36;
ocircumflex = -36;
odieresis = -36;
oe = -36;
ograve = -36;
oslash = -36;
otilde = -36;
periodcentered = -62;
q = -36;
softhyphen = -62;
t = -82;
v = -66;
w = -56;
y = -66;
};
Y = {
A = -164;
AE = -164;
Aacute = -164;
Acircumflex = -164;
Adieresis = -164;
Agrave = -164;
Aogonek = -164;
Aring = -164;
Atilde = -164;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -128;
aacute = -128;
acircumflex = -128;
adieresis = -128;
ae = -128;
agrave = -128;
ampersand = -164;
aogonek = -128;
aring = -128;
asterisk = 30;
at = -80;
atilde = -128;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -122;
comma = -152;
d = -160;
degree = 30;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -172;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -164;
m = -122;
micro = -122;
n = -122;
nacute = -122;
ntilde = -122;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 50;
ordfeminine = 30;
ordmasculine = 30;
oslash = -160;
otilde = -160;
p = -122;
period = -152;
periodcentered = -160;
q = -160;
question = 34;
quotedbl = 30;
quotedblbase = -152;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
quotesinglbase = -152;
quotesingle = 30;
r = -122;
s = -128;
semicolon = -122;
slash = -164;
softhyphen = -160;
threesuperior = 50;
trademark = 30;
twosuperior = 50;
u = -122;
uacute = -122;
ucircumflex = -122;
udieresis = -122;
ugrave = -122;
v = -100;
w = -92;
x = -132;
y = -100;
};
Yacute = {
A = -164;
AE = -164;
Aacute = -164;
Acircumflex = -164;
Adieresis = -164;
Agrave = -164;
Aogonek = -164;
Aring = -164;
Atilde = -164;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -128;
aacute = -128;
acircumflex = -128;
adieresis = -128;
ae = -128;
agrave = -128;
ampersand = -164;
aogonek = -128;
aring = -128;
asterisk = 30;
at = -80;
atilde = -128;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -122;
comma = -152;
d = -160;
degree = 30;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -172;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -164;
m = -122;
micro = -122;
n = -122;
nacute = -122;
ntilde = -122;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 50;
ordfeminine = 30;
ordmasculine = 30;
oslash = -160;
otilde = -160;
p = -122;
period = -152;
periodcentered = -160;
q = -160;
question = 34;
quotedbl = 30;
quotedblbase = -152;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
quotesinglbase = -152;
quotesingle = 30;
r = -122;
s = -128;
semicolon = -122;
slash = -164;
softhyphen = -160;
threesuperior = 50;
trademark = 30;
twosuperior = 50;
u = -122;
uacute = -122;
ucircumflex = -122;
udieresis = -122;
ugrave = -122;
v = -100;
w = -92;
x = -132;
y = -100;
};
Ydieresis = {
A = -164;
AE = -164;
Aacute = -164;
Acircumflex = -164;
Adieresis = -164;
Agrave = -164;
Aogonek = -164;
Aring = -164;
Atilde = -164;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -128;
aacute = -128;
acircumflex = -128;
adieresis = -128;
ae = -128;
agrave = -128;
ampersand = -164;
aogonek = -128;
aring = -128;
asterisk = 30;
at = -80;
atilde = -128;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -122;
comma = -152;
d = -160;
degree = 30;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -172;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -164;
m = -122;
micro = -122;
n = -122;
nacute = -122;
ntilde = -122;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 50;
ordfeminine = 30;
ordmasculine = 30;
oslash = -160;
otilde = -160;
p = -122;
period = -152;
periodcentered = -160;
q = -160;
question = 34;
quotedbl = 30;
quotedblbase = -152;
quotedblleft = 30;
quotedblright = 30;
quoteleft = 30;
quoteright = 30;
quotesinglbase = -152;
quotesingle = 30;
r = -122;
s = -128;
semicolon = -122;
slash = -164;
softhyphen = -160;
threesuperior = 50;
trademark = 30;
twosuperior = 50;
u = -122;
uacute = -122;
ucircumflex = -122;
udieresis = -122;
ugrave = -122;
v = -100;
w = -92;
x = -132;
y = -100;
};
Z = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -70;
c = -38;
cacute = -38;
ccedilla = -38;
d = -38;
e = -38;
eacute = -38;
ecircumflex = -38;
edieresis = -38;
egrave = -38;
emdash = -70;
endash = -70;
eogonek = -38;
eth = -38;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -38;
oacute = -38;
ocircumflex = -38;
odieresis = -38;
oe = -38;
ograve = -38;
oslash = -38;
otilde = -38;
periodcentered = -70;
q = -38;
question = 34;
s = -28;
softhyphen = -70;
v = -40;
y = -40;
};
Zacute = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -70;
c = -38;
cacute = -38;
ccedilla = -38;
d = -38;
e = -38;
eacute = -38;
ecircumflex = -38;
edieresis = -38;
egrave = -38;
emdash = -70;
endash = -70;
eogonek = -38;
eth = -38;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -38;
oacute = -38;
ocircumflex = -38;
odieresis = -38;
oe = -38;
ograve = -38;
oslash = -38;
otilde = -38;
periodcentered = -70;
q = -38;
question = 34;
s = -28;
softhyphen = -70;
v = -40;
y = -40;
};
Zcaron = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -70;
c = -38;
cacute = -38;
ccedilla = -38;
d = -38;
e = -38;
eacute = -38;
ecircumflex = -38;
edieresis = -38;
egrave = -38;
emdash = -70;
endash = -70;
eogonek = -38;
eth = -38;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -38;
oacute = -38;
ocircumflex = -38;
odieresis = -38;
oe = -38;
ograve = -38;
oslash = -38;
otilde = -38;
periodcentered = -70;
q = -38;
question = 34;
s = -28;
softhyphen = -70;
v = -40;
y = -40;
};
Zdotaccent = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -70;
c = -38;
cacute = -38;
ccedilla = -38;
d = -38;
e = -38;
eacute = -38;
ecircumflex = -38;
edieresis = -38;
egrave = -38;
emdash = -70;
endash = -70;
eogonek = -38;
eth = -38;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -38;
oacute = -38;
ocircumflex = -38;
odieresis = -38;
oe = -38;
ograve = -38;
oslash = -38;
otilde = -38;
periodcentered = -70;
q = -38;
question = 34;
s = -28;
softhyphen = -70;
v = -40;
y = -40;
};
a = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
aacute = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
acircumflex = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
adieresis = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
ae = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
agrave = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
aogonek = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
aring = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
asterisk = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -75;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -32;
softhyphen = -178;
};
at = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
atilde = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
b = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
backslash = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
braceleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
braceright = 19;
c = -32;
cacute = -32;
ccedilla = -32;
d = -32;
e = -32;
eacute = -32;
ecircumflex = -32;
edieresis = -32;
egrave = -32;
eogonek = -32;
eth = -32;
o = -32;
oacute = -32;
ocircumflex = -32;
odieresis = -32;
oe = -32;
ograve = -32;
oslash = -32;
otilde = -32;
q = -32;
};
bracketleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
c = -32;
cacute = -32;
ccedilla = -32;
d = -32;
e = -32;
eacute = -32;
ecircumflex = -32;
edieresis = -32;
egrave = -32;
eogonek = -32;
eth = -32;
o = -32;
oacute = -32;
ocircumflex = -32;
odieresis = -32;
oe = -32;
ograve = -32;
oslash = -32;
otilde = -32;
q = -32;
};
bullet = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
comma = {
C = -56;
Cacute = -56;
Ccedilla = -56;
G = -56;
O = -56;
OE = -56;
Oacute = -56;
Ocircumflex = -56;
Odieresis = -56;
Ograve = -56;
Oslash = -56;
Otilde = -56;
Q = -56;
T = -180;
V = -180;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -228;
at = -56;
backslash = -180;
bullet = -136;
degree = -228;
emdash = -136;
endash = -136;
guillemetleft = -136;
guillemetright = -136;
guilsinglleft = -136;
guilsinglright = -136;
hyphen = -136;
ordfeminine = -228;
ordmasculine = -228;
periodcentered = -136;
quotedbl = -228;
quotedblleft = -228;
quotedblright = -228;
quoteleft = -228;
quoteright = -228;
quotesingle = -228;
softhyphen = -136;
trademark = -228;
v = -132;
w = -62;
y = -132;
};
degree = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
e = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
eacute = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
ecircumflex = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
edieresis = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
egrave = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
emdash = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
endash = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
eogonek = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
f = {
asterisk = 68;
comma = -130;
degree = 68;
onesuperior = 100;
ordfeminine = 68;
ordmasculine = 68;
period = -130;
quotedbl = 68;
quotedblbase = -130;
quotedblleft = 68;
quotedblright = 68;
quoteleft = 68;
quoteright = 68;
quotesinglbase = -130;
quotesingle = 68;
threesuperior = 100;
trademark = 68;
twosuperior = 100;
};
guillemetleft = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
guillemetright = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
guilsinglleft = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
guilsinglright = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
h = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
hyphen = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
increment = {
C = -42;
Cacute = -42;
Ccedilla = -42;
G = -42;
J = 50;
O = -42;
OE = -42;
Oacute = -42;
Ocircumflex = -42;
Odieresis = -42;
Ograve = -42;
Oslash = -42;
Otilde = -42;
Q = -42;
T = -132;
U = -56;
Uacute = -56;
Ucircumflex = -56;
Udieresis = -56;
Ugrave = -56;
V = -136;
W = -84;
Y = -164;
Yacute = -164;
Ydieresis = -164;
asterisk = -182;
at = -42;
backslash = -136;
bullet = -52;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -184;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
question = -56;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
softhyphen = -52;
threesuperior = -184;
trademark = -182;
twosuperior = -184;
v = -82;
y = -82;
};
k = {
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
m = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
n = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
nacute = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
ntilde = {
asterisk = -72;
degree = -72;
onesuperior = -72;
ordfeminine = -72;
ordmasculine = -72;
quotedbl = -72;
quotedblleft = -72;
quotedblright = -72;
quoteleft = -72;
quoteright = -72;
quotesingle = -72;
threesuperior = -72;
trademark = -72;
twosuperior = -72;
v = -32;
w = -16;
y = -32;
};
o = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
oacute = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
ocircumflex = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
odieresis = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
oe = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
ograve = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
onesuperior = {
A = -184;
AE = -184;
Aacute = -184;
Acircumflex = -184;
Adieresis = -184;
Agrave = -184;
Aogonek = -184;
Aring = -184;
Atilde = -184;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -184;
backslash = 58;
increment = -184;
slash = -184;
};
ordfeminine = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
ordmasculine = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
oslash = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
otilde = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
p = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
parenleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
c = -32;
cacute = -32;
ccedilla = -32;
d = -32;
e = -32;
eacute = -32;
ecircumflex = -32;
edieresis = -32;
egrave = -32;
eogonek = -32;
eth = -32;
o = -32;
oacute = -32;
ocircumflex = -32;
odieresis = -32;
oe = -32;
ograve = -32;
oslash = -32;
otilde = -32;
q = -32;
};
period = {
C = -56;
Cacute = -56;
Ccedilla = -56;
G = -56;
O = -56;
OE = -56;
Oacute = -56;
Ocircumflex = -56;
Odieresis = -56;
Ograve = -56;
Oslash = -56;
Otilde = -56;
Q = -56;
T = -180;
V = -180;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -228;
at = -56;
backslash = -180;
bullet = -136;
degree = -228;
emdash = -136;
endash = -136;
guillemetleft = -136;
guillemetright = -136;
guilsinglleft = -136;
guilsinglright = -136;
hyphen = -136;
ordfeminine = -228;
ordmasculine = -228;
periodcentered = -136;
quotedbl = -228;
quotedblleft = -228;
quotedblright = -228;
quoteleft = -228;
quoteright = -228;
quotesingle = -228;
softhyphen = -136;
trademark = -228;
underscore = 41;
v = -132;
w = -62;
y = -132;
};
periodcentered = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
quotedbl = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
quotedblbase = {
C = -56;
Cacute = -56;
Ccedilla = -56;
G = -56;
O = -56;
OE = -56;
Oacute = -56;
Ocircumflex = -56;
Odieresis = -56;
Ograve = -56;
Oslash = -56;
Otilde = -56;
Q = -56;
T = -180;
V = -180;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -228;
at = -56;
backslash = -180;
bullet = -136;
degree = -228;
emdash = -136;
endash = -136;
guillemetleft = -136;
guillemetright = -136;
guilsinglleft = -136;
guilsinglright = -136;
hyphen = -136;
ordfeminine = -228;
ordmasculine = -228;
periodcentered = -136;
quotedbl = -228;
quotedblleft = -228;
quotedblright = -228;
quoteleft = -228;
quoteright = -228;
quotesingle = -228;
softhyphen = -136;
trademark = -228;
v = -132;
w = -62;
y = -132;
};
quotedblleft = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
quotedblright = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
quoteleft = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
quoteright = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
quotesinglbase = {
C = -56;
Cacute = -56;
Ccedilla = -56;
G = -56;
O = -56;
OE = -56;
Oacute = -56;
Ocircumflex = -56;
Odieresis = -56;
Ograve = -56;
Oslash = -56;
Otilde = -56;
Q = -56;
T = -180;
V = -180;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -228;
at = -56;
backslash = -180;
bullet = -136;
degree = -228;
emdash = -136;
endash = -136;
guillemetleft = -136;
guillemetright = -136;
guilsinglleft = -136;
guilsinglright = -136;
hyphen = -136;
ordfeminine = -228;
ordmasculine = -228;
periodcentered = -136;
quotedbl = -228;
quotedblleft = -228;
quotedblright = -228;
quoteleft = -228;
quoteright = -228;
quotesingle = -228;
softhyphen = -136;
trademark = -228;
v = -132;
w = -62;
y = -132;
};
quotesingle = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
r = {
a = -38;
aacute = -38;
acircumflex = -38;
adieresis = -38;
ae = -38;
agrave = -38;
aogonek = -38;
aring = -38;
atilde = -38;
comma = -132;
period = -132;
quotedblbase = -132;
quotesinglbase = -132;
};
registered = {
A = -42;
AE = -42;
Aacute = -42;
Acircumflex = -42;
Adieresis = -42;
Agrave = -42;
Aogonek = -42;
Aring = -42;
Atilde = -42;
T = -98;
V = -52;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -70;
Zacute = -70;
Zcaron = -70;
Zdotaccent = -70;
ampersand = -42;
asterisk = -46;
backslash = -52;
braceright = -40;
bracketright = -40;
comma = -56;
degree = -46;
increment = -42;
ordfeminine = -46;
ordmasculine = -46;
parenright = -40;
period = -56;
quotedbl = -46;
quotedblbase = -56;
quotedblleft = -46;
quotedblright = -46;
quoteleft = -46;
quoteright = -46;
quotesinglbase = -56;
quotesingle = -46;
slash = -42;
trademark = -46;
};
slash = {
A = -136;
AE = -136;
Aacute = -136;
Acircumflex = -136;
Adieresis = -136;
Agrave = -136;
Aogonek = -136;
Aring = -136;
Atilde = -136;
C = -52;
Cacute = -52;
Ccedilla = -52;
G = -52;
J = -152;
O = -52;
OE = -52;
Oacute = -52;
Ocircumflex = -52;
Odieresis = -52;
Ograve = -52;
Oslash = -52;
Otilde = -52;
Q = -52;
a = -116;
aacute = -116;
acircumflex = -116;
adieresis = -116;
ae = -116;
agrave = -116;
ampersand = -136;
aogonek = -116;
aring = -116;
asterisk = 48;
at = -52;
atilde = -116;
bullet = -112;
c = -116;
cacute = -116;
ccedilla = -116;
colon = -88;
comma = -192;
d = -116;
degree = 48;
e = -116;
eacute = -116;
ecircumflex = -116;
edieresis = -116;
egrave = -116;
emdash = -112;
endash = -112;
eogonek = -116;
eth = -116;
f = -30;
g = -136;
guillemetleft = -112;
guillemetright = -112;
guilsinglleft = -112;
guilsinglright = -112;
hyphen = -112;
increment = -136;
m = -88;
micro = -88;
n = -88;
nacute = -88;
ntilde = -88;
o = -116;
oacute = -116;
ocircumflex = -116;
odieresis = -116;
oe = -116;
ograve = -116;
onesuperior = 58;
ordfeminine = 48;
ordmasculine = 48;
oslash = -116;
otilde = -116;
p = -88;
period = -192;
periodcentered = -112;
q = -116;
question = 48;
quotedbl = 48;
quotedblbase = -192;
quotedblleft = 48;
quotedblright = 48;
quoteleft = 48;
quoteright = 48;
quotesinglbase = -192;
quotesingle = 48;
r = -88;
s = -106;
semicolon = -88;
slash = -136;
softhyphen = -112;
t = -42;
threesuperior = 58;
trademark = 48;
twosuperior = 58;
u = -88;
uacute = -88;
ucircumflex = -88;
udieresis = -88;
ugrave = -88;
v = -48;
x = -52;
y = -48;
z = -82;
};
softhyphen = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -180;
V = -112;
W = -32;
X = -62;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -46;
Zacute = -46;
Zcaron = -46;
Zdotaccent = -46;
ampersand = -52;
asterisk = -178;
backslash = -112;
comma = -136;
degree = -178;
increment = -52;
ordfeminine = -178;
ordmasculine = -178;
period = -136;
quotedbl = -178;
quotedblbase = -136;
quotedblleft = -178;
quotedblright = -178;
quoteleft = -178;
quoteright = -178;
quotesinglbase = -136;
quotesingle = -178;
slash = -52;
trademark = -178;
};
thorn = {
V = -116;
W = -32;
asterisk = -92;
backslash = -116;
braceright = -32;
bracketright = -32;
degree = -92;
ordfeminine = -92;
ordmasculine = -92;
parenright = -32;
quotedbl = -92;
quotedblleft = -92;
quotedblright = -92;
quoteleft = -92;
quoteright = -92;
quotesingle = -92;
trademark = -92;
v = -26;
x = -60;
y = -26;
};
threesuperior = {
A = -184;
AE = -184;
Aacute = -184;
Acircumflex = -184;
Adieresis = -184;
Agrave = -184;
Aogonek = -184;
Aring = -184;
Atilde = -184;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -184;
backslash = 58;
increment = -184;
slash = -184;
};
trademark = {
A = -182;
AE = -182;
Aacute = -182;
Acircumflex = -182;
Adieresis = -182;
Agrave = -182;
Aogonek = -182;
Aring = -182;
Atilde = -182;
C = -46;
Cacute = -46;
Ccedilla = -46;
G = -46;
O = -46;
OE = -46;
Oacute = -46;
Ocircumflex = -46;
Odieresis = -46;
Ograve = -46;
Oslash = -46;
Otilde = -46;
Q = -46;
V = 48;
W = 48;
Y = 30;
Yacute = 30;
Ydieresis = 30;
a = -64;
aacute = -64;
acircumflex = -64;
adieresis = -64;
ae = -64;
agrave = -64;
ampersand = -182;
aogonek = -64;
aring = -64;
at = -46;
atilde = -64;
backslash = 48;
bullet = -178;
c = -92;
cacute = -92;
ccedilla = -92;
comma = -228;
d = -92;
e = -92;
eacute = -92;
ecircumflex = -92;
edieresis = -92;
egrave = -92;
emdash = -178;
endash = -178;
eogonek = -92;
eth = -92;
guillemetleft = -178;
guillemetright = -178;
guilsinglleft = -178;
guilsinglright = -178;
hyphen = -178;
increment = -182;
o = -92;
oacute = -92;
ocircumflex = -92;
odieresis = -92;
oe = -92;
ograve = -92;
oslash = -92;
otilde = -92;
period = -228;
periodcentered = -178;
q = -92;
quotedblbase = -228;
quotesinglbase = -228;
slash = -182;
softhyphen = -178;
};
twosuperior = {
A = -184;
AE = -184;
Aacute = -184;
Acircumflex = -184;
Adieresis = -184;
Agrave = -184;
Aogonek = -184;
Aring = -184;
Atilde = -184;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -184;
backslash = 58;
increment = -184;
slash = -184;
};
v = {
A = -82;
AE = -82;
Aacute = -82;
Acircumflex = -82;
Adieresis = -82;
Agrave = -82;
Aogonek = -82;
Aring = -82;
Atilde = -82;
ampersand = -82;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -132;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
eogonek = -26;
eth = -26;
increment = -82;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -132;
q = -26;
quotedblbase = -132;
quotesinglbase = -132;
slash = -82;
};
w = {
comma = -62;
period = -62;
quotedblbase = -62;
quotesinglbase = -62;
};
x = {
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
y = {
A = -82;
AE = -82;
Aacute = -82;
Acircumflex = -82;
Adieresis = -82;
Agrave = -82;
Aogonek = -82;
Aring = -82;
Atilde = -82;
ampersand = -82;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -132;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
eogonek = -26;
eth = -26;
increment = -82;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -132;
q = -26;
quotedblbase = -132;
quotesinglbase = -132;
slash = -82;
};
};
};
manufacturer = Truebase;
manufacturerURL = "http://www.truebase.com/";
unitsPerEm = 2000;
versionMajor = 1;
versionMinor = 104;
}
