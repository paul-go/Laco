{
.appVersion = "99";
DisplayStrings = (
"//{}_~a*a//*//"
);
copyright = "Copyright (c) 2010-2011 by tyPoland Lukasz Dziedzic with Reserved Font Name \"Lato\". Licensed under the SIL Open Font License, Version 1.1.";
date = "2011-09-12 07:00:00 +0000";
designer = "Paul Go";
designerURL = "http://www.github.com/paul-go";
familyName = "Lato Code";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub three slash four by threequarters;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub f i by fi;\012sub f l by fl;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 1610;
capHeight = 1457;
custom = Black;
customParameters = (
{
name = "Prep Table Assembly";
value = "PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012SWAP[ ]	/* SwapTopStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01240 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0129 10 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01211 16 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01217 22 3 2 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\0124 40 6 \012RCVT[ ]	/* ReadCVT */\012GT[ ]	/* GreaterThan */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\01211 16 4 2 \012CALL[ ]	/* CallFunction */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RCVT[ ]	/* ReadCVT */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01222 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\0126 4 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0129 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 4 values pushed */\01211 11 1 0 \012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0126 2 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01211 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01218 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01212 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01216 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01231 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
320,
230,
320,
320,
230,
230,
1457,
0,
1497,
1037,
0,
-329,
1473,
-16,
1503,
1053,
-16,
-357
);
}
);
descender = -390;
id = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
weightValue = 900;
widthValue = 5;
xHeight = 1037;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"912 1457 LINE",
"566 1457 LINE",
"2 0 LINE",
"266 0 LINE SMOOTH",
"322 0 OFFCURVE",
"362.667 35.667 OFFCURVE",
"376 73 CURVE SMOOTH",
"462 327 LINE",
"1016 327 LINE",
"1102 73 LINE SMOOTH",
"1116.667 30.333 OFFCURVE",
"1155.333 0 OFFCURVE",
"1214 0 CURVE SMOOTH",
"1476 0 LINE"
);
},
{
closed = 1;
nodes = (
"674 954 LINE",
"694 1004.667 OFFCURVE",
"717.667 1075.667 OFFCURVE",
"739 1157 CURVE",
"761.667 1077 OFFCURVE",
"786.667 1006.667 OFFCURVE",
"804 956 CURVE SMOOTH",
"938 557 LINE",
"540 557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 14 13 12 11 9 6 5 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
19 1 4 3 1 30 0 4 0 1 0 4 1 0 2 38 0 3 3 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
19 1 4 3 1 30 0 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
19 1 4 3 1 30 0 3 4 3 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1474;
}
);
note = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 388, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Aacute;
unicode = 00C1;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 408, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Acircumflex;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 408, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Adieresis;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 388, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Agrave;
unicode = 00C0;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1418.715 -167 OFFCURVE",
"1387.735 -175 OFFCURVE",
"1368 -175 CURVE SMOOTH",
"1332 -175 OFFCURVE",
"1314 -154 OFFCURVE",
"1314 -122 CURVE SMOOTH",
"1314 -71.333 OFFCURVE",
"1356 -28 OFFCURVE",
"1408 0 CURVE",
"1476 0 LINE",
"912 1457 LINE",
"566 1457 LINE",
"2 0 LINE",
"266 0 LINE SMOOTH",
"322 0 OFFCURVE",
"362.667 35.667 OFFCURVE",
"376 73 CURVE SMOOTH",
"462 327 LINE",
"1016 327 LINE",
"1102 73 LINE SMOOTH",
"1116.667 30.333 OFFCURVE",
"1155.333 0 OFFCURVE",
"1214 0 CURVE SMOOTH",
"1226 0 LINE",
"1126 -60 OFFCURVE",
"1084 -130 OFFCURVE",
"1084 -198 CURVE SMOOTH",
"1084 -284.667 OFFCURVE",
"1159.333 -347 OFFCURVE",
"1302 -347 CURVE SMOOTH",
"1380.667 -347 OFFCURVE",
"1453.333 -325 OFFCURVE",
"1500 -297 CURVE",
"1454 -186 LINE",
"1449.333 -173.333 OFFCURVE",
"1440 -167 OFFCURVE",
"1426 -167 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"674 954 LINE",
"694 1004.667 OFFCURVE",
"716.667 1075.667 OFFCURVE",
"738 1157 CURVE",
"760.667 1077 OFFCURVE",
"784 1006.667 OFFCURVE",
"804 956 CURVE",
"938 557 LINE",
"540 557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 39 38 34 32 27 26 25 24 23 21 18 17 14 12 7 5 0 37 1 37 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
43 1 8 5 3 1 1 0 2 30 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 7 9 2 0 0 1 1 0 36 0 1 1 22 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
43 1 8 5 3 1 1 0 2 30 0 8 0 3 2 8 3 0 2 38 7 9 2 0 0 1 0 1 1 0 37 0 5 5 11 31 6 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
43 1 8 5 3 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 7 0 1 7 1 1 0 37 0 5 5 11 31 6 4 2 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
43 1 8 5 3 1 1 7 2 30 0 5 8 5 52 6 4 2 2 3 0 3 2 0 50 9 1 0 7 3 0 7 48 0 8 0 3 2 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
43 1 8 5 3 1 1 7 2 30 0 5 8 5 52 0 6 3 4 3 6 4 50 0 4 2 3 4 2 48 0 2 0 3 2 0 48 9 1 0 7 3 0 7 48 0 8 0 3 6 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1474;
}
);
note = Aogonek;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.case;
transform = "{1, 0, 0, 1, 412, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Aring;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 408, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1474;
}
);
note = Atilde;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"-32 0 LINE",
"224 0 LINE SMOOTH",
"284 0 OFFCURVE",
"331.333 29 OFFCURVE",
"350 73 CURVE SMOOTH",
"461 327 LINE",
"944 327 LINE",
"984 0 LINE",
"1804 0 LINE",
"1804 260 LINE",
"1272 260 LINE",
"1230 607 LINE",
"1664 607 LINE",
"1664 857 LINE",
"1200 857 LINE",
"1159 1197 LINE",
"1804 1197 LINE",
"1804 1457 LINE",
"684 1457 LINE"
);
},
{
closed = 1;
nodes = (
"758 1005 LINE SMOOTH",
"784.667 1062.333 OFFCURVE",
"811.333 1130.333 OFFCURVE",
"838 1209 CURVE",
"916 557 LINE",
"562 557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
20 19 18 16 13 12 11 10 9 8 7 6 5 4 3 2 1 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
21 1 1 0 1 30 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 1 1 0 0 0 36 0 0 0 11 31 0 4 4 5 1 0 36 7 1 5 5 12 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 1 1 0 1 30 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 5 5 4 0 0 35 0 4 4 5 1 0 36 7 1 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
21 1 1 0 1 30 0 7 4 5 4 7 5 50 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 7 5 4 0 0 35 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1876;
}
);
note = AE;
unicode = 00C6;
},
{
glyphname = B;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"702 0 LINE SMOOTH",
"876.667 0 OFFCURVE",
"1013.833 47.167 OFFCURVE",
"1106.5 126.5 CURVE SMOOTH",
"1199.167 205.833 OFFCURVE",
"1248 315 OFFCURVE",
"1248 439 CURVE SMOOTH",
"1248 603 OFFCURVE",
"1158 707.333 OFFCURVE",
"966 754 CURVE",
"1054 786 OFFCURVE",
"1116 829.667 OFFCURVE",
"1156 883 CURVE SMOOTH",
"1196 936.333 OFFCURVE",
"1214 997.667 OFFCURVE",
"1214 1063 CURVE SMOOTH",
"1214 1183 OFFCURVE",
"1175.333 1282 OFFCURVE",
"1086 1350 CURVE SMOOTH",
"996.667 1418 OFFCURVE",
"857.333 1457 OFFCURVE",
"656 1457 CURVE SMOOTH",
"120 1457 LINE",
"120 0 LINE"
);
},
{
closed = 1;
nodes = (
"694 618 LINE SMOOTH",
"851.049 618 OFFCURVE",
"914 562.625 OFFCURVE",
"914 446 CURVE SMOOTH",
"914 335.747 OFFCURVE",
"857.128 255 OFFCURVE",
"696 255 CURVE SMOOTH",
"458 255 LINE",
"458 618 LINE"
);
},
{
closed = 1;
nodes = (
"458 1204 LINE",
"656 1204 LINE SMOOTH",
"805.78 1204 OFFCURVE",
"876 1161.873 OFFCURVE",
"876 1023 CURVE SMOOTH",
"876 881.475 OFFCURVE",
"785.943 844 OFFCURVE",
"634 844 CURVE SMOOTH",
"458 844 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
21 21 0 0 46 44 36 34 21 33 21 32 24 22 0 20 0 19 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 4 1 30 0 4 7 1 3 2 4 3 1 0 38 0 5 5 0 1 0 36 0 0 0 11 31 0 2 2 1 1 0 36 6 1 1 1 12 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 6 1 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1312;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1079 377 OFFCURVE",
"1060 367.333 OFFCURVE",
"1044 354 CURVE SMOOTH",
"962.657 283.503 OFFCURVE",
"887.174 262 OFFCURVE",
"768 262 CURVE SMOOTH",
"661.333 262 OFFCURVE",
"565.5 304.167 OFFCURVE",
"495.5 383.5 CURVE SMOOTH",
"425.5 462.833 OFFCURVE",
"382 579.667 OFFCURVE",
"382 729 CURVE SMOOTH",
"382 871.667 OFFCURVE",
"424.833 987.833 OFFCURVE",
"497.5 1068.5 CURVE SMOOTH",
"570.167 1149.167 OFFCURVE",
"673.333 1194 OFFCURVE",
"796 1194 CURVE SMOOTH",
"871.124 1194 OFFCURVE",
"970.258 1165.512 OFFCURVE",
"1008.5 1141.5 CURVE SMOOTH",
"1045.162 1118.479 OFFCURVE",
"1084.233 1089 OFFCURVE",
"1116 1089 CURVE SMOOTH",
"1152 1089 OFFCURVE",
"1169.333 1107.333 OFFCURVE",
"1184 1126 CURVE SMOOTH",
"1298 1279 LINE",
"1243.333 1336.333 OFFCURVE",
"1172 1384.5 OFFCURVE",
"1088 1418.5 CURVE SMOOTH",
"1004 1452.5 OFFCURVE",
"907.333 1473 OFFCURVE",
"798 1473 CURVE SMOOTH",
"572.667 1473 OFFCURVE",
"382.5 1396 OFFCURVE",
"248.5 1264 CURVE SMOOTH",
"114.5 1132 OFFCURVE",
"36 946.333 OFFCURVE",
"36 729 CURVE SMOOTH",
"36 515.667 OFFCURVE",
"103.5 329.167 OFFCURVE",
"225.5 196.5 CURVE SMOOTH",
"347.5 63.833 OFFCURVE",
"524.667 -16 OFFCURVE",
"746 -16 CURVE SMOOTH",
"987.333 -16 OFFCURVE",
"1162.667 62.667 OFFCURVE",
"1280 216 CURVE",
"1146 357 LINE SMOOTH",
"1131.333 371.667 OFFCURVE",
"1115 377 OFFCURVE",
"1099 377 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 44 42 34 32 27 25 18 16 8 6 0 50 1 50 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
22 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 6 1 0 5 4 0 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
22 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 6 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 1 1 5 1 0 35 0 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1314;
}
);
note = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 436, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1314;
}
);
note = Cacute;
unicode = 0106;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"603.333 -210 OFFCURVE",
"592 -219 OFFCURVE",
"588 -237 CURVE",
"560 -331 LINE",
"610.667 -341.667 OFFCURVE",
"653.333 -347 OFFCURVE",
"708 -347 CURVE SMOOTH",
"854.003 -347 OFFCURVE",
"976 -293.662 OFFCURVE",
"976 -194 CURVE SMOOTH",
"976 -120.104 OFFCURVE",
"928.275 -71.607 OFFCURVE",
"821 -43 CURVE",
"829 -12 LINE",
"1027.667 4 OFFCURVE",
"1177.333 81.333 OFFCURVE",
"1280 216 CURVE",
"1146 357 LINE SMOOTH",
"1131.333 371.667 OFFCURVE",
"1115 377 OFFCURVE",
"1099 377 CURVE SMOOTH",
"1079 377 OFFCURVE",
"1060 367.333 OFFCURVE",
"1044 354 CURVE SMOOTH",
"962.657 283.503 OFFCURVE",
"887.174 262 OFFCURVE",
"768 262 CURVE SMOOTH",
"661.333 262 OFFCURVE",
"565.5 304.167 OFFCURVE",
"495.5 383.5 CURVE SMOOTH",
"425.5 462.833 OFFCURVE",
"382 579.667 OFFCURVE",
"382 729 CURVE SMOOTH",
"382 871.667 OFFCURVE",
"424.833 987.833 OFFCURVE",
"497.5 1068.5 CURVE SMOOTH",
"570.167 1149.167 OFFCURVE",
"673.333 1194 OFFCURVE",
"796 1194 CURVE SMOOTH",
"871.124 1194 OFFCURVE",
"970.258 1165.512 OFFCURVE",
"1008.5 1141.5 CURVE SMOOTH",
"1045.162 1118.479 OFFCURVE",
"1084.233 1089 OFFCURVE",
"1116 1089 CURVE SMOOTH",
"1152 1089 OFFCURVE",
"1169.333 1107.333 OFFCURVE",
"1184 1126 CURVE SMOOTH",
"1298 1279 LINE",
"1243.333 1336.333 OFFCURVE",
"1172 1384.5 OFFCURVE",
"1088 1418.5 CURVE SMOOTH",
"1004 1452.5 OFFCURVE",
"907.333 1473 OFFCURVE",
"798 1473 CURVE SMOOTH",
"572.667 1473 OFFCURVE",
"382.5 1396 OFFCURVE",
"248.5 1264 CURVE SMOOTH",
"114.5 1132 OFFCURVE",
"36 946.333 OFFCURVE",
"36 729 CURVE SMOOTH",
"36 533 OFFCURVE",
"92.167 360.333 OFFCURVE",
"195.5 231 CURVE SMOOTH",
"298.833 101.667 OFFCURVE",
"448.667 15 OFFCURVE",
"638 -9 CURVE",
"600 -136 LINE",
"648.667 -142.667 OFFCURVE",
"683.167 -149.5 OFFCURVE",
"703.5 -156.5 CURVE SMOOTH",
"723.833 -163.5 OFFCURVE",
"734 -174 OFFCURVE",
"734 -188 CURVE SMOOTH",
"734 -202.667 OFFCURVE",
"720.667 -218 OFFCURVE",
"686 -218 CURVE SMOOTH",
"672 -218 OFFCURVE",
"660.333 -216.667 OFFCURVE",
"651 -214 CURVE SMOOTH",
"641.667 -211.333 OFFCURVE",
"632 -210 OFFCURVE",
"622 -210 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 73 71 55 53 47 45 37 35 30 28 21 19 4 2 0 77 1 77 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
25 1 4 2 62 58 10 9 4 0 5 75 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 0 4 4 2 1 0 36 0 2 2 17 31 1 8 2 0 0 7 1 2 36 0 7 7 22 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
25 1 4 2 62 58 10 9 4 0 5 75 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 1 8 2 0 0 7 0 7 1 2 37 0 4 4 2 1 0 36 0 2 2 17 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
25 1 4 2 62 58 10 9 4 0 5 75 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 1 0 7 1 7 1 2 37 0 4 4 2 1 0 36 0 2 2 17 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
25 1 4 2 62 58 10 9 4 0 5 75 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 2 0 4 3 2 4 1 0 38 0 1 7 7 1 1 0 35 0 1 1 7 1 2 36 0 7 1 7 1 2 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1314;
}
);
note = Ccedilla;
unicode = 00C7;
},
{
glyphname = D;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1442 938.333 OFFCURVE",
"1366 1120.667 OFFCURVE",
"1234 1250 CURVE SMOOTH",
"1102 1379.333 OFFCURVE",
"912.667 1457 OFFCURVE",
"686 1457 CURVE SMOOTH",
"120 1457 LINE",
"120 0 LINE",
"686 0 LINE SMOOTH",
"912.667 0 OFFCURVE",
"1102 76.5 OFFCURVE",
"1234 206.5 CURVE SMOOTH",
"1366 336.5 OFFCURVE",
"1442 518.333 OFFCURVE",
"1442 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1096 583.667 OFFCURVE",
"1057.5 466.167 OFFCURVE",
"987.5 385.5 CURVE SMOOTH",
"917.5 304.833 OFFCURVE",
"815.333 260 OFFCURVE",
"686 260 CURVE SMOOTH",
"460 260 LINE",
"460 1197 LINE",
"686 1197 LINE SMOOTH",
"815.333 1197 OFFCURVE",
"917.5 1152.167 OFFCURVE",
"987.5 1071.5 CURVE SMOOTH",
"1057.5 990.833 OFFCURVE",
"1096 873 OFFCURVE",
"1096 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 20 19 17 9 7 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 11 31 0 3 3 0 1 0 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1484;
}
);
note = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"54 639 LINE",
"220 639 LINE",
"220 0 LINE",
"786 0 LINE SMOOTH",
"1012.667 0 OFFCURVE",
"1202 76.5 OFFCURVE",
"1334 206.5 CURVE SMOOTH",
"1466 336.5 OFFCURVE",
"1542 518.333 OFFCURVE",
"1542 729 CURVE SMOOTH",
"1542 938.333 OFFCURVE",
"1466 1120.667 OFFCURVE",
"1334 1250 CURVE SMOOTH",
"1202 1379.333 OFFCURVE",
"1012.667 1457 OFFCURVE",
"786 1457 CURVE SMOOTH",
"220 1457 LINE",
"220 823 LINE",
"54 823 LINE"
);
},
{
closed = 1;
nodes = (
"1196 583.667 OFFCURVE",
"1157.5 466.167 OFFCURVE",
"1087.5 385.5 CURVE SMOOTH",
"1017.5 304.833 OFFCURVE",
"915.333 260 OFFCURVE",
"786 260 CURVE SMOOTH",
"560 260 LINE",
"560 639 LINE",
"904 639 LINE",
"904 823 LINE",
"560 823 LINE",
"560 1197 LINE",
"786 1197 LINE SMOOTH",
"915.333 1197 OFFCURVE",
"1017.5 1152.167 OFFCURVE",
"1087.5 1071.5 CURVE SMOOTH",
"1157.5 990.833 OFFCURVE",
"1196 873 OFFCURVE",
"1196 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
30 28 27 26 25 24 23 21 16 15 14 12 4 2 1 0 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
5 1 0 6 1 3 7 0 3 0 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 7 7 2 1 0 36 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 1 0 4 0 1 4 1 0 38 0 5 0 6 3 5 6 0 0 38 0 0 0 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1584;
}
);
note = Eth;
unicode = 00D0;
},
{
glyphname = E;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"120 1457 LINE",
"120 0 LINE",
"1058 0 LINE",
"1058 260 LINE",
"460 260 LINE",
"460 607 LINE",
"918 607 LINE",
"918 857 LINE",
"460 857 LINE",
"460 1197 LINE",
"1058 1197 LINE",
"1058 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 5 0 0 36 6 1 5 5 11 31 0 3 3 4 0 0 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
6 1 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1130;
}
);
note = E;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 256, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1130;
}
);
note = Eacute;
unicode = 00C9;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 276, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1130;
}
);
note = Ecircumflex;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 276, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1130;
}
);
note = Edieresis;
unicode = 00CB;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 256, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1130;
}
);
note = Egrave;
unicode = 00C8;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"976.715 -167 OFFCURVE",
"945.735 -175 OFFCURVE",
"926 -175 CURVE SMOOTH",
"890 -175 OFFCURVE",
"872 -154 OFFCURVE",
"872 -122 CURVE SMOOTH",
"872 -71.333 OFFCURVE",
"914 -28 OFFCURVE",
"966 0 CURVE",
"1058 0 LINE",
"1058 260 LINE",
"460 260 LINE",
"460 607 LINE",
"918 607 LINE",
"918 857 LINE",
"460 857 LINE",
"460 1197 LINE",
"1058 1197 LINE",
"1058 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"784 0 LINE",
"684 -60 OFFCURVE",
"642 -130 OFFCURVE",
"642 -198 CURVE SMOOTH",
"642 -284.667 OFFCURVE",
"717.333 -347 OFFCURVE",
"860 -347 CURVE SMOOTH",
"938.667 -347 OFFCURVE",
"1011.333 -325 OFFCURVE",
"1058 -297 CURVE",
"1012 -186 LINE",
"1007.333 -173.333 OFFCURVE",
"998 -167 OFFCURVE",
"984 -167 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 32 30 25 24 23 22 21 20 19 18 17 16 15 14 13 12 7 5 0 35 1 35 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
3 1 1 0 1 30 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 9 10 2 0 0 1 1 0 36 0 1 1 22 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
3 1 1 0 1 30 0 5 0 6 7 5 6 0 0 38 9 10 2 0 0 1 0 1 1 0 37 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 5 0 6 7 5 6 0 0 38 0 9 0 1 9 1 1 0 37 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 8 1 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
3 1 1 9 1 30 0 8 7 2 2 8 42 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 0 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1130;
}
);
note = Eogonek;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"120 1457 LINE",
"120 0 LINE",
"460 0 LINE",
"460 567 LINE",
"958 567 LINE",
"958 828 LINE",
"460 828 LINE",
"460 1197 LINE",
"1058 1197 LINE",
"1058 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 9 0 9 8 7 6 5 4 3 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 4 0 0 36 5 1 4 4 11 31 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 3 2 3 53 5 1 4 0 0 1 4 0 0 0 38 0 1 2 2 1 0 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1114;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"683.333 244 OFFCURVE",
"577.833 288.333 OFFCURVE",
"502.5 371 CURVE SMOOTH",
"427.167 453.667 OFFCURVE",
"382 574.333 OFFCURVE",
"382 729 CURVE SMOOTH",
"382 869 OFFCURVE",
"422.167 984.667 OFFCURVE",
"493.5 1066 CURVE SMOOTH",
"564.833 1147.333 OFFCURVE",
"667.333 1194 OFFCURVE",
"794 1194 CURVE SMOOTH",
"928.271 1194 OFFCURVE",
"1002.922 1168.447 OFFCURVE",
"1112 1103 CURVE SMOOTH",
"1133.333 1089.667 OFFCURVE",
"1154 1083 OFFCURVE",
"1174 1083 CURVE SMOOTH",
"1204.667 1083 OFFCURVE",
"1231.333 1100 OFFCURVE",
"1250 1128 CURVE SMOOTH",
"1348 1277 LINE",
"1289.333 1333 OFFCURVE",
"1214.5 1382.333 OFFCURVE",
"1124.5 1417 CURVE SMOOTH",
"1034.5 1451.667 OFFCURVE",
"927.333 1473 OFFCURVE",
"806 1473 CURVE SMOOTH",
"571.333 1473 OFFCURVE",
"378.5 1396 OFFCURVE",
"244.5 1264 CURVE SMOOTH",
"110.5 1132 OFFCURVE",
"36 946.333 OFFCURVE",
"36 729 CURVE SMOOTH",
"36 515.667 OFFCURVE",
"115.833 329.167 OFFCURVE",
"248.5 196.5 CURVE SMOOTH",
"381.167 63.833 OFFCURVE",
"566.667 -16 OFFCURVE",
"780 -16 CURVE SMOOTH",
"898.667 -16 OFFCURVE",
"1001.167 -4.333 OFFCURVE",
"1092.5 21 CURVE SMOOTH",
"1183.833 46.333 OFFCURVE",
"1263.333 85.333 OFFCURVE",
"1338 140 CURVE",
"1338 755 LINE",
"820 755 LINE",
"820 569 LINE SMOOTH",
"820 534.333 OFFCURVE",
"845.333 509 OFFCURVE",
"888 509 CURVE SMOOTH",
"1032 509 LINE",
"1032 288 LINE",
"968 261.333 OFFCURVE",
"899.333 244 OFFCURVE",
"806 244 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 43 41 36 34 27 25 17 15 10 9 6 4 0 51 1 51 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
31 1 6 4 3 1 0 1 11 1 3 0 3 30 0 5 6 2 6 5 2 50 0 2 0 1 0 2 1 1 0 38 0 6 6 4 1 0 36 0 4 4 17 31 7 1 0 0 3 1 0 36 0 3 3 18 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
31 1 6 4 3 1 0 1 11 1 3 0 3 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 3 3 0 1 0 35 7 1 0 0 3 1 0 36 0 3 0 3 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1392 1457 LINE",
"1052 1457 LINE",
"1052 848 LINE",
"460 848 LINE",
"460 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"460 0 LINE",
"460 616 LINE",
"1052 616 LINE",
"1052 0 LINE",
"1392 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 4 0 1 0 4 1 0 0 38 5 1 3 3 11 31 2 1 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
5 1 3 4 0 3 0 0 35 0 4 0 1 0 4 1 0 0 38 5 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 4 0 5 0 0 35 0 4 0 1 2 4 1 0 0 38 0 3 0 2 0 3 2 0 0 38 0 5 5 0 0 0 36 0 0 5 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"490 1457 LINE",
"150 1457 LINE",
"150 0 LINE",
"490 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 640;
}
);
note = I;
unicode = 0049;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, -25, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 640;
}
);
note = Iacute;
unicode = 00CD;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 640;
}
);
note = Icircumflex;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, -5, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 640;
}
);
note = Idieresis;
unicode = 00CF;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, -25, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 640;
}
);
note = Igrave;
unicode = 00CC;
},
{
glyphname = J;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"740 1457 LINE",
"402 1457 LINE",
"402 521 LINE SMOOTH",
"402 421 OFFCURVE",
"386 354.5 OFFCURVE",
"354 312.5 CURVE SMOOTH",
"322 270.5 OFFCURVE",
"273.333 254 OFFCURVE",
"208 254 CURVE SMOOTH",
"184.667 254 OFFCURVE",
"164.667 255.833 OFFCURVE",
"148 259.5 CURVE SMOOTH",
"131.333 263.167 OFFCURVE",
"117.333 265 OFFCURVE",
"106 265 CURVE SMOOTH",
"62 265 OFFCURVE",
"36.667 241.667 OFFCURVE",
"34 207 CURVE SMOOTH",
"16 10 LINE",
"96 -8.667 OFFCURVE",
"168 -16 OFFCURVE",
"244 -16 CURVE SMOOTH",
"412 -16 OFFCURVE",
"535.5 39.167 OFFCURVE",
"617.5 134.5 CURVE SMOOTH",
"699.5 229.833 OFFCURVE",
"740 365.333 OFFCURVE",
"740 528 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 21 16 14 13 11 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
43 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
8 1 0 1 1 30 0 3 3 11 31 2 1 1 1 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
8 1 0 2 1 30 0 1 3 2 3 1 2 50 0 3 3 11 31 0 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
8 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 860;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"458 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"458 0 LINE",
"458 620 LINE",
"540 620 LINE SMOOTH",
"602.667 620 OFFCURVE",
"636 606.333 OFFCURVE",
"660 569 CURVE SMOOTH",
"990 62 LINE SMOOTH",
"1019.191 18.213 OFFCURVE",
"1051.16 0 OFFCURVE",
"1122 0 CURVE SMOOTH",
"1424 0 LINE",
"984 676 LINE SMOOTH",
"949.333 730.667 OFFCURVE",
"907.667 761.333 OFFCURVE",
"857 780 CURVE",
"891.667 798.667 OFFCURVE",
"925.333 825.333 OFFCURVE",
"956 868 CURVE SMOOTH",
"1388 1457 LINE",
"1094 1457 LINE SMOOTH",
"1027.333 1457 OFFCURVE",
"984 1442 OFFCURVE",
"948 1390 CURVE SMOOTH",
"620 914 LINE SMOOTH",
"598 882.667 OFFCURVE",
"562 867 OFFCURVE",
"512 867 CURVE SMOOTH",
"458 867 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
31 30 29 28 27 25 18 16 8 6 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
12 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 5 1 1 1 11 31 4 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
12 1 3 0 1 30 5 1 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 5 1 1 1 2 1 0 36 4 1 2 1 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
12 1 3 0 1 30 0 1 5 2 1 1 0 35 0 0 0 3 4 0 3 1 0 38 0 5 0 4 2 5 4 0 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1428;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"458 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"998 0 LINE",
"998 270 LINE",
"458 270 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1038;
}
);
note = L;
unicode = 004C;
},
{
glyphname = Lslash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"536 1457 LINE",
"198 1457 LINE",
"198 773 LINE",
"60 702 LINE",
"36 692 OFFCURVE",
"24 674 OFFCURVE",
"24 648 CURVE SMOOTH",
"24 420 LINE",
"198 505 LINE",
"198 0 LINE",
"1076 0 LINE",
"1076 270 LINE",
"536 270 LINE",
"536 653 LINE",
"830 805 LINE",
"856.667 814.333 OFFCURVE",
"870 835 OFFCURVE",
"870 867 CURVE SMOOTH",
"870 1088 LINE",
"536 923 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 16 9 8 7 6 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
15 11 10 5 1 0 6 0 2 1 30 0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
15 11 10 5 1 0 6 0 2 1 30 0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1116;
}
);
note = Lslash;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"865 666 LINE",
"490 1405 LINE SMOOTH",
"463.801 1454.778 OFFCURVE",
"436.135 1457 OFFCURVE",
"378 1457 CURVE SMOOTH",
"120 1457 LINE",
"120 0 LINE",
"418 0 LINE",
"418 838 LINE SMOOTH",
"418 876.667 OFFCURVE",
"415.333 924.333 OFFCURVE",
"410 971 CURVE",
"798 221 LINE SMOOTH",
"822 174.333 OFFCURVE",
"864 150 OFFCURVE",
"916 150 CURVE SMOOTH",
"962 150 LINE SMOOTH",
"1014 150 OFFCURVE",
"1056 174.333 OFFCURVE",
"1080 221 CURVE SMOOTH",
"1466 970 LINE",
"1462 922.667 OFFCURVE",
"1460 878.667 OFFCURVE",
"1460 838 CURVE SMOOTH",
"1460 0 LINE",
"1758 0 LINE",
"1758 1457 LINE",
"1500 1457 LINE SMOOTH",
"1441.865 1457 OFFCURVE",
"1414.199 1454.778 OFFCURVE",
"1388 1405 CURVE SMOOTH",
"1014 669 LINE SMOOTH",
"987.333 617 OFFCURVE",
"961.667 561.667 OFFCURVE",
"939 503 CURVE",
"916.333 560.333 OFFCURVE",
"891.667 615.333 OFFCURVE",
"865 666 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
36 33 32 31 24 21 15 14 13 10 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
27 18 3 3 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 0 11 31 3 1 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
27 18 3 3 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 2 1 0 1 0 35 4 1 0 0 1 0 0 36 3 1 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
27 18 3 3 2 4 1 30 0 2 4 3 4 2 3 50 0 0 4 1 0 1 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1878;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"298 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"418 0 LINE",
"418 781 LINE SMOOTH",
"418 823.667 OFFCURVE",
"415 873.333 OFFCURVE",
"411 924 CURVE",
"1098 56 LINE SMOOTH",
"1131.333 13.333 OFFCURVE",
"1164 0 OFFCURVE",
"1216 0 CURVE SMOOTH",
"1392 0 LINE",
"1392 1457 LINE",
"1094 1457 LINE",
"1094 686 LINE SMOOTH",
"1094 639.333 OFFCURVE",
"1096.667 586 OFFCURVE",
"1102 530 CURVE",
"410 1405 LINE SMOOTH",
"374.427 1448.196 OFFCURVE",
"354.444 1457 OFFCURVE",
"298 1457 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
24 23 22 21 14 12 11 10 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
4 1 2 0 0 11 31 3 1 2 2 12 2 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
4 1 2 0 2 2 0 0 0 35 4 1 2 0 0 2 1 0 36 3 1 2 0 2 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 1 4 0 40 0 1 4 2 1 0 0 35 0 4 0 3 2 4 3 0 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1512;
}
);
note = N;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 414, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1512;
}
);
note = Nacute;
unicode = 0143;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 434, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1512;
}
);
note = Ntilde;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1558 938.333 OFFCURVE",
"1482 1124.667 OFFCURVE",
"1350 1258 CURVE SMOOTH",
"1218 1391.333 OFFCURVE",
"1028.667 1473 OFFCURVE",
"802 1473 CURVE SMOOTH",
"575.333 1473 OFFCURVE",
"385.167 1392.333 OFFCURVE",
"252.5 1259 CURVE SMOOTH",
"119.833 1125.667 OFFCURVE",
"44 939.667 OFFCURVE",
"44 729 CURVE SMOOTH",
"44 518.333 OFFCURVE",
"119.833 332.5 OFFCURVE",
"252.5 198.5 CURVE SMOOTH",
"385.167 64.5 OFFCURVE",
"575.333 -16 OFFCURVE",
"802 -16 CURVE SMOOTH",
"1028.667 -16 OFFCURVE",
"1218 64.5 OFFCURVE",
"1350 198.5 CURVE SMOOTH",
"1482 332.5 OFFCURVE",
"1558 518.333 OFFCURVE",
"1558 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1212 583.667 OFFCURVE",
"1173.5 467 OFFCURVE",
"1103.5 387 CURVE SMOOTH",
"1033.5 307 OFFCURVE",
"931.333 264 OFFCURVE",
"802 264 CURVE SMOOTH",
"671.333 264 OFFCURVE",
"568.5 307 OFFCURVE",
"498.5 387 CURVE SMOOTH",
"428.5 467 OFFCURVE",
"390 583.667 OFFCURVE",
"390 729 CURVE SMOOTH",
"390 873 OFFCURVE",
"428.5 990 OFFCURVE",
"498.5 1070 CURVE SMOOTH",
"568.5 1150 OFFCURVE",
"671.333 1194 OFFCURVE",
"802 1194 CURVE SMOOTH",
"931.333 1194 OFFCURVE",
"1033.5 1150 OFFCURVE",
"1103.5 1070 CURVE SMOOTH",
"1173.5 990 OFFCURVE",
"1212 873 OFFCURVE",
"1212 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1600;
}
);
note = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 454, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1600;
}
);
note = Oacute;
unicode = 00D3;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 474, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1600;
}
);
note = Ocircumflex;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 474, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1600;
}
);
note = Odieresis;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 454, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1600;
}
);
note = Ograve;
unicode = 00D2;
},
{
glyphname = Oslash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1558 943.667 OFFCURVE",
"1480 1132 OFFCURVE",
"1340 1268 CURVE",
"1524 1523 LINE",
"1352 1523 LINE SMOOTH",
"1281.006 1523 OFFCURVE",
"1256.588 1502.559 OFFCURVE",
"1214 1444 CURVE SMOOTH",
"1173 1387 LINE",
"1065 1443 OFFCURVE",
"942 1473 OFFCURVE",
"802 1473 CURVE SMOOTH",
"575.333 1473 OFFCURVE",
"385.167 1392.333 OFFCURVE",
"252.5 1259 CURVE SMOOTH",
"119.833 1125.667 OFFCURVE",
"44 939.667 OFFCURVE",
"44 729 CURVE SMOOTH",
"44 497 OFFCURVE",
"133.667 299 OFFCURVE",
"291 163 CURVE",
"92 -113 LINE",
"224 -113 LINE SMOOTH",
"290.665 -113 OFFCURVE",
"364.525 -88.376 OFFCURVE",
"408 -27 CURVE SMOOTH",
"465 52 LINE",
"565 8 OFFCURVE",
"676.667 -16 OFFCURVE",
"802 -16 CURVE SMOOTH",
"1028.667 -16 OFFCURVE",
"1218 64.5 OFFCURVE",
"1350 198.5 CURVE SMOOTH",
"1482 332.5 OFFCURVE",
"1558 518.333 OFFCURVE",
"1558 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"390 873 OFFCURVE",
"428.5 990 OFFCURVE",
"498.5 1070 CURVE SMOOTH",
"568.5 1150 OFFCURVE",
"671.333 1194 OFFCURVE",
"802 1194 CURVE SMOOTH",
"878 1194 OFFCURVE",
"945 1178.333 OFFCURVE",
"1001 1149 CURVE",
"474 418 LINE",
"418 497.333 OFFCURVE",
"390 601 OFFCURVE",
"390 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1212 583.667 OFFCURVE",
"1173.5 467 OFFCURVE",
"1103.5 387 CURVE SMOOTH",
"1033.5 307 OFFCURVE",
"931.333 264 OFFCURVE",
"802 264 CURVE SMOOTH",
"740 264 OFFCURVE",
"685.333 273.333 OFFCURVE",
"638 292 CURVE",
"1150 1003 LINE",
"1190 929.667 OFFCURVE",
"1212 837 OFFCURVE",
"1212 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 45 43 34 32 25 23 15 13 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
35 27 2 4 2 53 52 41 40 4 5 4 16 8 2 0 5 3 30 0 1 0 1 53 0 3 3 19 31 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
35 27 2 4 2 53 52 41 40 4 5 4 16 8 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
35 27 2 4 2 53 52 41 40 4 5 4 16 8 2 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 0 36 0 0 5 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1600;
}
);
note = Oslash;
unicode = 00D8;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 474, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1600;
}
);
note = Otilde;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1166 1457 LINE",
"1166 1308 LINE",
"1051.333 1412 OFFCURVE",
"903.333 1473 OFFCURVE",
"726 1473 CURVE SMOOTH",
"520.667 1473 OFFCURVE",
"350.833 1392.333 OFFCURVE",
"231.5 1259 CURVE SMOOTH",
"112.167 1125.667 OFFCURVE",
"44 939.667 OFFCURVE",
"44 729 CURVE SMOOTH",
"44 518.333 OFFCURVE",
"112.167 332.5 OFFCURVE",
"231.5 198.5 CURVE SMOOTH",
"350.833 64.5 OFFCURVE",
"520.667 -16 OFFCURVE",
"726 -16 CURVE SMOOTH",
"903.333 -16 OFFCURVE",
"1051.333 44 OFFCURVE",
"1166 148 CURVE",
"1166 0 LINE",
"2064 0 LINE",
"2064 260 LINE",
"1466 260 LINE",
"1466 607 LINE",
"1924 607 LINE",
"1924 857 LINE",
"1466 857 LINE",
"1466 1197 LINE",
"2064 1197 LINE",
"2064 1457 LINE"
);
},
{
closed = 1;
nodes = (
"1126 583.667 OFFCURVE",
"1092.667 464.5 OFFCURVE",
"1030 382.5 CURVE SMOOTH",
"967.333 300.5 OFFCURVE",
"876 254 OFFCURVE",
"760 254 CURVE SMOOTH",
"641.333 254 OFFCURVE",
"549.833 300.5 OFFCURVE",
"486.5 382.5 CURVE SMOOTH",
"423.167 464.5 OFFCURVE",
"390 583.667 OFFCURVE",
"390 729 CURVE SMOOTH",
"390 873 OFFCURVE",
"423.167 992.5 OFFCURVE",
"486.5 1074.5 CURVE SMOOTH",
"549.833 1156.5 OFFCURVE",
"641.333 1203 OFFCURVE",
"760 1203 CURVE SMOOTH",
"876 1203 OFFCURVE",
"967.333 1156.5 OFFCURVE",
"1030 1074.5 CURVE SMOOTH",
"1092.667 992.5 OFFCURVE",
"1126 873 OFFCURVE",
"1126 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
0 0 45 43 35 33 0 28 0 28 25 23 15 13 10 9 8 7 6 5 4 3 2 1 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
27 1 0 6 11 1 4 3 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 10 7 2 6 6 17 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 0 7 11 1 4 3 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 0 6 6 17 31 8 1 0 0 7 0 0 36 10 1 7 7 11 31 9 1 3 3 4 0 0 36 0 4 4 12 31 9 1 3 3 5 1 0 36 0 5 5 18 5 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
27 1 8 7 11 1 4 9 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 0 3 3 4 0 0 36 0 4 4 12 31 0 9 9 5 1 0 36 0 5 5 18 5 32 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
27 1 8 7 11 1 4 9 2 30 0 6 0 8 0 6 8 1 0 38 10 1 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 9 4 5 9 1 0 35 0 3 0 4 5 3 4 0 0 38 0 9 9 5 1 0 36 0 5 9 5 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2136;
}
);
note = OE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"634 487 LINE SMOOTH",
"835.333 487 OFFCURVE",
"982 538.333 OFFCURVE",
"1078 625 CURVE SMOOTH",
"1174 711.667 OFFCURVE",
"1220 835.667 OFFCURVE",
"1220 981 CURVE SMOOTH",
"1220 1115.667 OFFCURVE",
"1175.833 1234.667 OFFCURVE",
"1080.5 1320 CURVE SMOOTH",
"985.167 1405.333 OFFCURVE",
"839.333 1457 OFFCURVE",
"634 1457 CURVE SMOOTH",
"120 1457 LINE",
"120 0 LINE",
"458 0 LINE",
"458 487 LINE"
);
},
{
closed = 1;
nodes = (
"458 1204 LINE",
"634 1204 LINE SMOOTH",
"795.931 1204 OFFCURVE",
"882 1120.947 OFFCURVE",
"882 981 CURVE SMOOTH",
"882 830.333 OFFCURVE",
"810 742 OFFCURVE",
"634 742 CURVE SMOOTH",
"458 742 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 25 23 17 15 0 14 0 13 5 3 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
0 3 5 1 2 0 3 2 1 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
0 0 2 0 53 0 1 0 4 3 1 4 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 5 1 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1276;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"634 252 LINE SMOOTH",
"835.333 252 OFFCURVE",
"982 303.333 OFFCURVE",
"1078 390 CURVE SMOOTH",
"1174 476.667 OFFCURVE",
"1220 600.667 OFFCURVE",
"1220 746 CURVE SMOOTH",
"1220 880.667 OFFCURVE",
"1175.833 999.667 OFFCURVE",
"1080.5 1085 CURVE SMOOTH",
"985.167 1170.333 OFFCURVE",
"839.333 1222 OFFCURVE",
"634 1222 CURVE SMOOTH",
"458 1222 LINE",
"458 1457 LINE",
"120 1457 LINE",
"120 0 LINE",
"458 0 LINE",
"458 252 LINE"
);
},
{
closed = 1;
nodes = (
"458 969 LINE",
"634 969 LINE SMOOTH",
"795.931 969 OFFCURVE",
"882 885.947 OFFCURVE",
"882 746 CURVE SMOOTH",
"882 595.333 OFFCURVE",
"810 507 OFFCURVE",
"634 507 CURVE SMOOTH",
"458 507 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 27 25 19 17 0 16 0 15 7 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 5 4 2 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 1 2 0 1 0 0 35 0 2 0 5 4 2 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 0 1 1 0 0 0 36 0 0 1 0 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1276;
}
);
note = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1558 938.333 OFFCURVE",
"1482 1124.667 OFFCURVE",
"1350 1258 CURVE SMOOTH",
"1218 1391.333 OFFCURVE",
"1028.667 1473 OFFCURVE",
"802 1473 CURVE SMOOTH",
"575.333 1473 OFFCURVE",
"385.167 1392.333 OFFCURVE",
"252.5 1259 CURVE SMOOTH",
"119.833 1125.667 OFFCURVE",
"44 939.667 OFFCURVE",
"44 729 CURVE SMOOTH",
"44 518.333 OFFCURVE",
"119.833 332.5 OFFCURVE",
"252.5 198.5 CURVE SMOOTH",
"385.167 64.5 OFFCURVE",
"575.333 -16 OFFCURVE",
"802 -16 CURVE SMOOTH",
"866 -16 OFFCURVE",
"926.333 -9 OFFCURVE",
"985 3 CURVE",
"1166 -200 LINE SMOOTH",
"1216.667 -258.667 OFFCURVE",
"1282 -273 OFFCURVE",
"1362 -273 CURVE SMOOTH",
"1640 -273 LINE",
"1271 130 LINE",
"1361.667 196.667 OFFCURVE",
"1433.833 284.667 OFFCURVE",
"1482.5 386 CURVE SMOOTH",
"1531.167 487.333 OFFCURVE",
"1558 603.667 OFFCURVE",
"1558 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1212 583.667 OFFCURVE",
"1173.5 467 OFFCURVE",
"1103.5 387 CURVE SMOOTH",
"1033.5 307 OFFCURVE",
"931.333 264 OFFCURVE",
"802 264 CURVE SMOOTH",
"671.333 264 OFFCURVE",
"568.5 307 OFFCURVE",
"498.5 387 CURVE SMOOTH",
"428.5 467 OFFCURVE",
"390 583.667 OFFCURVE",
"390 729 CURVE SMOOTH",
"390 873 OFFCURVE",
"428.5 990 OFFCURVE",
"498.5 1070 CURVE SMOOTH",
"568.5 1150 OFFCURVE",
"671.333 1194 OFFCURVE",
"802 1194 CURVE SMOOTH",
"931.333 1194 OFFCURVE",
"1033.5 1150 OFFCURVE",
"1103.5 1070 CURVE SMOOTH",
"1173.5 990 OFFCURVE",
"1212 873 OFFCURVE",
"1212 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
45 43 35 33 25 23 15 13 8 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
5 1 1 4 1 30 0 0 1 0 53 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
5 1 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1600;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"544 539 LINE SMOOTH",
"596 539 OFFCURVE",
"620.667 524.333 OFFCURVE",
"642 487 CURVE SMOOTH",
"884 64 LINE SMOOTH",
"908.667 21.333 OFFCURVE",
"949.333 0 OFFCURVE",
"1006 0 CURVE SMOOTH",
"1312 0 LINE",
"1002 507 LINE SMOOTH",
"972.667 555 OFFCURVE",
"932.333 587.333 OFFCURVE",
"887 610 CURVE",
"981.667 646 OFFCURVE",
"1054.5 703.167 OFFCURVE",
"1104.5 774.5 CURVE SMOOTH",
"1154.5 845.833 OFFCURVE",
"1180 930.333 OFFCURVE",
"1180 1025 CURVE SMOOTH",
"1180 1149 OFFCURVE",
"1139.5 1256.667 OFFCURVE",
"1045.5 1334 CURVE SMOOTH",
"951.5 1411.333 OFFCURVE",
"804.667 1457 OFFCURVE",
"594 1457 CURVE SMOOTH",
"120 1457 LINE",
"120 0 LINE",
"458 0 LINE",
"458 539 LINE"
);
},
{
closed = 1;
nodes = (
"458 1204 LINE",
"594 1204 LINE SMOOTH",
"768.667 1204 OFFCURVE",
"850 1128 OFFCURVE",
"850 1000 CURVE SMOOTH",
"850 861.376 OFFCURVE",
"766.774 772 OFFCURVE",
"594 772 CURVE SMOOTH",
"458 772 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 36 34 28 26 0 25 0 24 20 18 5 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
14 1 3 4 1 30 0 4 6 1 3 0 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 11 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
14 1 3 4 1 30 2 1 0 3 0 53 0 1 0 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
14 1 3 4 1 30 0 2 3 0 3 2 0 50 0 0 0 51 0 1 0 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1330;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1016 1318 LINE",
"964 1366 OFFCURVE",
"897 1404.167 OFFCURVE",
"821 1431.5 CURVE SMOOTH",
"745 1458.833 OFFCURVE",
"659.333 1473 OFFCURVE",
"570 1473 CURVE SMOOTH",
"410 1473 OFFCURVE",
"285.333 1420.333 OFFCURVE",
"200 1339 CURVE SMOOTH",
"114.667 1257.667 OFFCURVE",
"70 1149.333 OFFCURVE",
"70 1040 CURVE SMOOTH",
"70 904 OFFCURVE",
"110.833 814.5 OFFCURVE",
"171.5 752.5 CURVE SMOOTH",
"232.167 690.5 OFFCURVE",
"312.667 655.5 OFFCURVE",
"394 629.5 CURVE SMOOTH",
"459.55 608.545 OFFCURVE",
"564.353 581.068 OFFCURVE",
"616.5 557 CURVE SMOOTH",
"677.167 529 OFFCURVE",
"718 489 OFFCURVE",
"718 421 CURVE SMOOTH",
"718 303.667 OFFCURVE",
"646.667 252 OFFCURVE",
"524 252 CURVE SMOOTH",
"433.333 252 OFFCURVE",
"368.833 282.333 OFFCURVE",
"317.5 313 CURVE SMOOTH",
"272.56 339.847 OFFCURVE",
"225.526 374 OFFCURVE",
"188 374 CURVE SMOOTH",
"157.333 374 OFFCURVE",
"128.667 358 OFFCURVE",
"114 334 CURVE SMOOTH",
"14 176 LINE",
"71.333 118.667 OFFCURVE",
"151 71.5 OFFCURVE",
"239 37.5 CURVE SMOOTH",
"327 3.5 OFFCURVE",
"423.333 -16 OFFCURVE",
"514 -16 CURVE SMOOTH",
"679.333 -16 OFFCURVE",
"810.833 37.167 OFFCURVE",
"899.5 124.5 CURVE SMOOTH",
"988.167 211.833 OFFCURVE",
"1036 332.333 OFFCURVE",
"1036 467 CURVE SMOOTH",
"1036 588.333 OFFCURVE",
"995.167 672 OFFCURVE",
"934.5 732 CURVE SMOOTH",
"873.833 792 OFFCURVE",
"792.333 827.833 OFFCURVE",
"711 856.5 CURVE SMOOTH",
"645.193 879.694 OFFCURVE",
"540.063 909.74 OFFCURVE",
"487.5 934 CURVE SMOOTH",
"426.833 962 OFFCURVE",
"386 998.333 OFFCURVE",
"386 1057 CURVE SMOOTH",
"386 1149 OFFCURVE",
"447.333 1207 OFFCURVE",
"574 1207 CURVE SMOOTH",
"647.333 1207 OFFCURVE",
"703.833 1184 OFFCURVE",
"748.5 1160 CURVE SMOOTH",
"785.855 1139.928 OFFCURVE",
"830.023 1113 OFFCURVE",
"858 1113 CURVE SMOOTH",
"892.667 1113 OFFCURVE",
"912 1129 OFFCURVE",
"932 1161 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
57 55 40 38 35 33 26 24 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
61 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 17 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
61 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1084;
}
);
note = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 254, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1118;
}
);
note = Sacute;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 256, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1084;
}
);
note = Scaron;
unicode = 0160;
},
{
glyphname = T;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"20 1457 LINE",
"20 1189 LINE",
"430 1189 LINE",
"430 0 LINE",
"768 0 LINE",
"768 1189 LINE",
"1178 1189 LINE",
"1178 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 7 0 7 6 5 4 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
2 1 0 0 3 0 0 36 4 1 3 3 11 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 1 53 4 1 3 0 0 3 0 0 35 4 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 3 0 0 2 42 0 1 0 1 53 4 1 3 2 0 3 0 2 35 4 1 3 3 0 0 0 36 0 0 3 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1198;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"635.333 267 OFFCURVE",
"563.333 297.833 OFFCURVE",
"514 354.5 CURVE SMOOTH",
"464.667 411.167 OFFCURVE",
"438 492.333 OFFCURVE",
"438 595 CURVE SMOOTH",
"438 1457 LINE",
"100 1457 LINE",
"100 594 LINE SMOOTH",
"100 415.333 OFFCURVE",
"159 263 OFFCURVE",
"267 155 CURVE SMOOTH",
"375 47 OFFCURVE",
"531.333 -16 OFFCURVE",
"726 -16 CURVE SMOOTH",
"919.333 -16 OFFCURVE",
"1076 47 OFFCURVE",
"1184 155 CURVE SMOOTH",
"1292 263 OFFCURVE",
"1352 415.333 OFFCURVE",
"1352 594 CURVE SMOOTH",
"1352 1457 LINE",
"1014 1457 LINE",
"1014 594 LINE SMOOTH",
"1014 491.333 OFFCURVE",
"987.333 410 OFFCURVE",
"938 354 CURVE SMOOTH",
"888.667 298 OFFCURVE",
"816.667 267 OFFCURVE",
"726 267 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 20 19 14 12 7 6 0 25 1 25 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 1 11 31 4 1 0 0 2 1 0 36 0 2 2 18 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 0 1 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 1 52 0 3 0 3 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1452;
}
);
note = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 376, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1452;
}
);
note = Uacute;
unicode = 00DA;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 396, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1452;
}
);
note = Ucircumflex;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 396, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1452;
}
);
note = Udieresis;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 376, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1452;
}
);
note = Ugrave;
unicode = 00D9;
},
{
glyphname = V;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"584 0 LINE",
"890 0 LINE",
"1474 1457 LINE",
"1200 1457 LINE SMOOTH",
"1144 1457 OFFCURVE",
"1103.333 1421.333 OFFCURVE",
"1090 1384 CURVE SMOOTH",
"810 604 LINE SMOOTH",
"786 536 OFFCURVE",
"759.667 455 OFFCURVE",
"741 367 CURVE",
"718.333 455 OFFCURVE",
"691.333 536 OFFCURVE",
"666 604 CURVE SMOOTH",
"384 1384 LINE SMOOTH",
"368 1428 OFFCURVE",
"330.667 1457 OFFCURVE",
"272 1457 CURVE SMOOTH",
"0 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 11 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1474;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"460 0 LINE",
"766 0 LINE",
"1044 903 LINE SMOOTH",
"1053.333 931 OFFCURVE",
"1063.667 964.667 OFFCURVE",
"1073 1002 CURVE",
"1082.333 964.667 OFFCURVE",
"1092.667 931 OFFCURVE",
"1102 903 CURVE SMOOTH",
"1376 0 LINE",
"1682 0 LINE",
"2132 1457 LINE",
"1866 1457 LINE SMOOTH",
"1810 1457 OFFCURVE",
"1766.667 1422.667 OFFCURVE",
"1756 1384 CURVE SMOOTH",
"1556 624 LINE SMOOTH",
"1544 577.333 OFFCURVE",
"1532.667 523.667 OFFCURVE",
"1522 465 CURVE",
"1510 525 OFFCURVE",
"1492.667 577.333 OFFCURVE",
"1478 624 CURVE SMOOTH",
"1244 1384 LINE SMOOTH",
"1229.333 1429.333 OFFCURVE",
"1190.667 1457 OFFCURVE",
"1132 1457 CURVE SMOOTH",
"1032 1457 LINE SMOOTH",
"976 1457 OFFCURVE",
"934 1421.333 OFFCURVE",
"922 1384 CURVE SMOOTH",
"686 624 LINE SMOOTH",
"671.333 574.667 OFFCURVE",
"654.333 519.667 OFFCURVE",
"641 457 CURVE",
"634.333 518.333 OFFCURVE",
"619.333 574.667 OFFCURVE",
"606 624 CURVE SMOOTH",
"406 1384 LINE SMOOTH",
"394 1428 OFFCURVE",
"352.667 1457 OFFCURVE",
"294 1457 CURVE SMOOTH",
"10 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
42 41 33 32 31 29 17 14 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
37 23 8 3 3 0 1 30 2 1 2 0 0 11 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
37 23 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
37 23 8 3 4 2 1 30 0 0 1 0 52 0 1 2 1 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2142;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"10 0 LINE",
"326 0 LINE SMOOTH",
"366 0 OFFCURVE",
"392 26 OFFCURVE",
"408 54 CURVE SMOOTH",
"680 526 LINE",
"686.667 536.667 OFFCURVE",
"692.667 549.333 OFFCURVE",
"698 564 CURVE",
"990 54 LINE SMOOTH",
"1006 24.667 OFFCURVE",
"1032 0 OFFCURVE",
"1076 0 CURVE SMOOTH",
"1414 0 LINE",
"947 764 LINE",
"1404 1457 LINE",
"1080 1457 LINE SMOOTH",
"1051.333 1457 OFFCURVE",
"1028.667 1443 OFFCURVE",
"1012 1415 CURVE SMOOTH",
"758 979 LINE SMOOTH",
"747.333 961.667 OFFCURVE",
"738.667 946.333 OFFCURVE",
"732 929 CURVE",
"442 1420 LINE SMOOTH",
"426 1446.667 OFFCURVE",
"410 1457 OFFCURVE",
"366 1457 CURVE SMOOTH",
"28 1457 LINE",
"479 749 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
27 25 17 15 13 11 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
14 0 2 2 0 1 30 1 1 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
14 0 2 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
14 0 2 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1374 1457 LINE",
"1074 1457 LINE SMOOTH",
"1022.984 1457 OFFCURVE",
"981.5 1421.917 OFFCURVE",
"964 1384 CURVE SMOOTH",
"760 960 LINE SMOOTH",
"744 926.667 OFFCURVE",
"729 895.667 OFFCURVE",
"715 867 CURVE SMOOTH",
"701 838.333 OFFCURVE",
"689 809.667 OFFCURVE",
"679 781 CURVE",
"657.667 837 OFFCURVE",
"629.333 892 OFFCURVE",
"596 960 CURVE SMOOTH",
"390 1384 LINE SMOOTH",
"368.667 1426.667 OFFCURVE",
"336.667 1457 OFFCURVE",
"278 1457 CURVE SMOOTH",
"-20 1457 LINE",
"508 554 LINE",
"508 0 LINE",
"846 0 LINE",
"846 554 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
22 20 6 4 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
12 3 0 3 0 1 1 30 2 1 1 1 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
12 3 0 3 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
12 3 0 3 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1354;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 330, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1354;
}
);
note = Yacute;
unicode = 00DD;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 350, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1354;
}
);
note = Ydieresis;
unicode = 0178;
},
{
glyphname = Z;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"96 1457 LINE",
"96 1197 LINE",
"756 1197 LINE",
"70 217 LINE SMOOTH",
"51.333 191.667 OFFCURVE",
"40 160.667 OFFCURVE",
"40 130 CURVE SMOOTH",
"40 0 LINE",
"1164 0 LINE",
"1164 260 LINE",
"470 260 LINE",
"1154 1237 LINE SMOOTH",
"1174 1266.333 OFFCURVE",
"1186 1300.333 OFFCURVE",
"1186 1335 CURVE SMOOTH",
"1186 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 15 0 15 14 13 8 7 6 5 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 0 0 36 4 1 3 3 11 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1220;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 294, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1220;
}
);
note = Zacute;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 314, -1}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1220;
}
);
note = Zcaron;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent.case;
transform = "{1, 0, 0, 1, 314, -1}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1220;
}
);
note = Zdotaccent;
unicode = 017B;
},
{
glyphname = a;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"978 0 LINE",
"978 648 LINE SMOOTH",
"978 766.667 OFFCURVE",
"939.5 868.833 OFFCURVE",
"869.5 941.5 CURVE SMOOTH",
"799.5 1014.167 OFFCURVE",
"697.333 1057 OFFCURVE",
"572 1057 CURVE SMOOTH",
"397.333 1057 OFFCURVE",
"243.333 1003.667 OFFCURVE",
"118 893 CURVE",
"174 796 LINE SMOOTH",
"191.333 765.333 OFFCURVE",
"221.333 742 OFFCURVE",
"264 742 CURVE SMOOTH",
"361.53 742 OFFCURVE",
"401.952 820 OFFCURVE",
"532 820 CURVE SMOOTH",
"624 820 OFFCURVE",
"676 769.333 OFFCURVE",
"676 648 CURVE SMOOTH",
"676 604 LINE",
"438.667 598.667 OFFCURVE",
"287 551.833 OFFCURVE",
"195 488.5 CURVE SMOOTH",
"103 425.167 OFFCURVE",
"70 343.333 OFFCURVE",
"70 270 CURVE SMOOTH",
"70 176.667 OFFCURVE",
"100.5 105 OFFCURVE",
"154.5 57 CURVE SMOOTH",
"208.5 9 OFFCURVE",
"287.333 -16 OFFCURVE",
"382 -16 CURVE SMOOTH",
"522.066 -16 OFFCURVE",
"605.309 30.415 OFFCURVE",
"710 119 CURVE",
"732 62 LINE SMOOTH",
"752 11.333 OFFCURVE",
"777.333 0 OFFCURVE",
"836 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"405.333 189 OFFCURVE",
"366 214.333 OFFCURVE",
"366 285 CURVE SMOOTH",
"366 321 OFFCURVE",
"381.333 352 OFFCURVE",
"428 376 CURVE SMOOTH",
"474.667 400 OFFCURVE",
"552 416.667 OFFCURVE",
"676 422 CURVE",
"676 278 LINE",
"614.667 215.333 OFFCURVE",
"560 189 OFFCURVE",
"480 189 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
43 42 1 0 47 46 42 53 43 53 36 34 29 27 24 22 19 18 10 8 0 41 1 41 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
32 1 3 5 45 1 6 7 4 1 0 6 3 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 20 31 9 1 6 6 0 1 0 36 1 8 2 0 0 12 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
32 1 3 5 45 1 6 7 4 1 0 6 3 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 20 31 8 1 0 0 12 31 9 1 6 6 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
32 1 3 5 45 1 6 7 4 1 0 6 3 30 0 4 3 2 3 4 2 50 8 1 0 6 1 6 0 1 50 0 5 0 3 4 5 3 1 0 38 0 2 0 7 6 2 7 1 0 38 9 1 6 0 1 6 1 0 35 9 1 6 6 1 1 0 36 0 1 6 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1078;
}
);
note = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = aacute;
unicode = 00E1;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = acircumflex;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = adieresis;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = agrave;
unicode = 00E0;
},
{
glyphname = aogonek;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"988.715 -167 OFFCURVE",
"957.735 -175 OFFCURVE",
"938 -175 CURVE SMOOTH",
"902 -175 OFFCURVE",
"884 -154 OFFCURVE",
"884 -122 CURVE SMOOTH",
"884 -71.333 OFFCURVE",
"926 -28 OFFCURVE",
"978 0 CURVE",
"978 648 LINE SMOOTH",
"978 766.667 OFFCURVE",
"939.5 868.833 OFFCURVE",
"869.5 941.5 CURVE SMOOTH",
"799.5 1014.167 OFFCURVE",
"697.333 1057 OFFCURVE",
"572 1057 CURVE SMOOTH",
"397.333 1057 OFFCURVE",
"243.333 1003.667 OFFCURVE",
"118 893 CURVE",
"174 796 LINE SMOOTH",
"191.333 765.333 OFFCURVE",
"221.333 742 OFFCURVE",
"264 742 CURVE SMOOTH",
"361.53 742 OFFCURVE",
"401.952 820 OFFCURVE",
"532 820 CURVE SMOOTH",
"624 820 OFFCURVE",
"676 769.333 OFFCURVE",
"676 648 CURVE SMOOTH",
"676 604 LINE",
"438.667 598.667 OFFCURVE",
"287 551.833 OFFCURVE",
"195 488.5 CURVE SMOOTH",
"103 425.167 OFFCURVE",
"70 343.333 OFFCURVE",
"70 270 CURVE SMOOTH",
"70 176.667 OFFCURVE",
"100.5 105 OFFCURVE",
"154.5 57 CURVE SMOOTH",
"208.5 9 OFFCURVE",
"287.333 -16 OFFCURVE",
"382 -16 CURVE SMOOTH",
"522.066 -16 OFFCURVE",
"605.309 30.415 OFFCURVE",
"710 119 CURVE",
"732 62 LINE SMOOTH",
"746.667 23.333 OFFCURVE",
"765.333 7.333 OFFCURVE",
"800 2 CURVE",
"698.667 -58 OFFCURVE",
"654 -128.667 OFFCURVE",
"654 -198 CURVE SMOOTH",
"654 -284.667 OFFCURVE",
"729.333 -347 OFFCURVE",
"872 -347 CURVE SMOOTH",
"950.667 -347 OFFCURVE",
"1023.333 -325 OFFCURVE",
"1070 -297 CURVE",
"1024 -186 LINE",
"1019.333 -173.333 OFFCURVE",
"1010 -167 OFFCURVE",
"996 -167 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"405.333 189 OFFCURVE",
"366 214.333 OFFCURVE",
"366 285 CURVE SMOOTH",
"366 321 OFFCURVE",
"381.333 352 OFFCURVE",
"428 376 CURVE SMOOTH",
"474.667 400 OFFCURVE",
"552 416.667 OFFCURVE",
"676 422 CURVE",
"676 278 LINE",
"614.667 215.333 OFFCURVE",
"560 189 OFFCURVE",
"480 189 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
65 64 1 0 69 68 64 75 65 75 60 58 48 46 41 39 36 34 31 30 22 20 7 5 0 63 1 63 12 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
44 1 4 6 67 1 8 9 53 16 12 3 2 8 3 1 1 0 4 30 0 5 4 3 4 5 3 50 0 3 0 9 8 3 9 1 0 38 0 4 4 6 1 0 36 0 6 6 20 31 11 1 8 8 2 1 0 36 0 2 2 18 31 7 10 2 0 0 1 1 0 36 0 1 1 22 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
44 1 4 6 67 1 8 9 53 16 12 3 2 8 3 1 1 0 4 30 0 5 4 3 4 5 3 50 0 3 0 9 8 3 9 1 0 38 7 10 2 0 0 1 0 1 1 0 37 0 4 4 6 1 0 36 0 6 6 20 31 11 1 8 8 2 1 0 36 0 2 2 18 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
44 1 4 6 67 1 8 9 53 16 12 3 2 8 3 1 1 7 4 30 0 5 4 3 4 5 3 50 10 1 0 2 7 2 0 7 50 0 3 0 9 8 3 9 1 0 38 0 7 0 1 7 1 1 0 37 0 4 4 6 1 0 36 0 6 6 20 31 11 1 8 8 2 1 0 36 0 2 2 18 2 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 91 values pushed */
44 1 4 6 67 1 8 9 53 16 12 3 2 8 3 1 1 7 4 30 0 5 4 3 4 5 3 50 10 1 0 2 7 2 0 7 50 0 6 0 4 5 6 4 1 0 38 0 3 0 9 8 3 9 1 0 38 11 1 8 0 2 0 8 2 1 0 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1078;
}
);
note = aogonek;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 234, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = aring;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 232, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1078;
}
);
note = atilde;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1033.333 1053 OFFCURVE",
"921.667 998 OFFCURVE",
"843 910 CURVE",
"787 1002 OFFCURVE",
"688.667 1057 OFFCURVE",
"538 1057 CURVE SMOOTH",
"375.333 1057 OFFCURVE",
"243.333 1003.667 OFFCURVE",
"118 893 CURVE",
"174 796 LINE SMOOTH",
"191.333 765.333 OFFCURVE",
"221.333 742 OFFCURVE",
"264 742 CURVE SMOOTH",
"360.704 742 OFFCURVE",
"402.715 829 OFFCURVE",
"532 829 CURVE SMOOTH",
"624 829 OFFCURVE",
"676 769.333 OFFCURVE",
"676 648 CURVE SMOOTH",
"676 625 LINE",
"596.667 623 OFFCURVE",
"526.667 616.667 OFFCURVE",
"466 606 CURVE SMOOTH",
"344.667 584.667 OFFCURVE",
"255.167 549.167 OFFCURVE",
"194.5 504.5 CURVE SMOOTH",
"164.167 482.167 OFFCURVE",
"139.833 458.5 OFFCURVE",
"121.5 433.5 CURVE SMOOTH",
"84.833 383.5 OFFCURVE",
"70 330.333 OFFCURVE",
"70 281 CURVE SMOOTH",
"70 93 OFFCURVE",
"190.667 -16 OFFCURVE",
"404 -16 CURVE SMOOTH",
"489.333 -16 OFFCURVE",
"570.333 -2.5 OFFCURVE",
"641 27.5 CURVE SMOOTH",
"711.667 57.5 OFFCURVE",
"772.333 104 OFFCURVE",
"815 168 CURVE",
"901.466 42.231 OFFCURVE",
"1030.655 -16 OFFCURVE",
"1172 -16 CURVE SMOOTH",
"1241.333 -16 OFFCURVE",
"1318 -7.5 OFFCURVE",
"1394 18.5 CURVE SMOOTH",
"1470 44.5 OFFCURVE",
"1544 88.667 OFFCURVE",
"1608 162 CURVE",
"1524 265 LINE",
"1511.333 283 OFFCURVE",
"1490.667 292 OFFCURVE",
"1462 292 CURVE SMOOTH",
"1430.3 292 OFFCURVE",
"1405.097 271.347 OFFCURVE",
"1373.5 254 CURVE SMOOTH",
"1339.5 235.333 OFFCURVE",
"1291.333 216 OFFCURVE",
"1202 216 CURVE SMOOTH",
"1079.333 216 OFFCURVE",
"994.667 284.333 OFFCURVE",
"972 443 CURVE",
"1542 443 LINE SMOOTH",
"1601.128 443 OFFCURVE",
"1610 473.752 OFFCURVE",
"1610 558 CURVE SMOOTH",
"1610 708.667 OFFCURVE",
"1564.167 832.5 OFFCURVE",
"1487.5 918.5 CURVE SMOOTH",
"1410.833 1004.5 OFFCURVE",
"1302.667 1053 OFFCURVE",
"1180 1053 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1286.324 839 OFFCURVE",
"1334 730.574 OFFCURVE",
"1334 623 CURVE",
"970 623 LINE",
"987.333 763 OFFCURVE",
"1048.667 839 OFFCURVE",
"1166 839 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"676 427 LINE SMOOTH",
"676 263.926 OFFCURVE",
"603.351 189 OFFCURVE",
"480 189 CURVE SMOOTH",
"405.333 189 OFFCURVE",
"366 224 OFFCURVE",
"366 296 CURVE SMOOTH",
"366 330.667 OFFCURVE",
"381.333 364.333 OFFCURVE",
"428 391 CURVE SMOOTH",
"474.667 417.667 OFFCURVE",
"552 436.333 OFFCURVE",
"676 443 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
70 69 1 0 87 85 79 78 73 72 69 77 70 77 64 62 57 55 52 50 47 46 38 36 28 26 20 18 15 13 11 9 0 68 1 68 16 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
18 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
66 60 2 7 0 32 22 2 4 2 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 11 1 6 12 1 1 3 6 1 1 0 38 15 10 2 7 7 0 1 0 36 9 14 2 0 0 20 31 13 1 2 2 4 1 0 36 5 1 4 4 18 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
49 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
66 60 2 7 0 32 22 2 4 13 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 11 1 6 12 1 1 3 6 1 1 0 38 15 10 2 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 18 31 0 13 13 4 1 0 36 5 1 4 4 18 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 97 values pushed */
66 60 2 10 0 32 22 2 4 13 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 11 1 6 12 1 1 3 6 1 1 0 38 15 1 10 10 0 1 0 36 9 14 2 0 0 20 31 0 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 18 31 0 13 13 4 1 0 36 5 1 4 4 18 4 32 12 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
111 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 93 values pushed */
66 60 2 10 0 32 22 2 4 13 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 15 1 10 7 0 10 1 0 35 9 14 2 0 0 7 8 0 7 1 0 38 11 1 6 12 1 1 3 6 1 1 0 38 0 2 13 4 2 1 0 35 0 13 4 4 13 1 0 35 0 13 13 4 1 0 36 5 1 4 13 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
144 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
66 60 2 10 0 32 22 2 4 13 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 14 1 0 15 1 10 7 0 10 1 0 38 0 9 0 7 8 9 7 1 0 38 11 1 6 12 1 1 3 6 1 1 0 38 0 2 13 4 2 1 0 35 0 13 4 4 13 1 0 35 0 13 13 4 1 0 36 5 1 4 13 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 101 values pushed */
66 60 2 10 0 32 22 2 4 13 2 30 0 8 7 6 7 8 6 50 0 3 12 2 12 3 2 50 14 1 0 15 1 10 7 0 10 1 0 38 0 9 0 7 8 9 7 1 0 38 0 1 12 6 1 1 0 35 11 1 6 0 12 3 6 12 1 0 38 0 2 13 4 2 1 0 35 0 13 4 4 13 1 0 35 0 13 13 4 1 0 36 5 1 4 13 4 1 0 33 11 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 103 values pushed */
66 60 2 10 0 32 22 2 5 13 2 30 0 8 7 6 7 8 6 50 0 3 12 2 12 3 2 50 14 1 0 15 1 10 7 0 10 1 0 38 0 9 0 7 8 9 7 1 0 38 0 11 0 1 12 11 1 1 0 38 0 6 0 12 3 6 12 1 0 38 0 2 13 4 2 1 0 35 0 13 0 5 4 13 5 1 0 38 0 2 2 4 1 0 36 0 4 2 4 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1668;
}
);
note = ae;
unicode = 00E6;
},
{
glyphname = b;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"326 0 LINE SMOOTH",
"366 0 OFFCURVE",
"390.667 13.333 OFFCURVE",
"400 56 CURVE SMOOTH",
"411 108 LINE",
"479.59 30.836 OFFCURVE",
"547.144 -16 OFFCURVE",
"666 -16 CURVE SMOOTH",
"798 -16 OFFCURVE",
"908.5 41.667 OFFCURVE",
"986.5 139 CURVE SMOOTH",
"1064.5 236.333 OFFCURVE",
"1110 371 OFFCURVE",
"1110 527 CURVE SMOOTH",
"1110 693.667 OFFCURVE",
"1069.667 825.5 OFFCURVE",
"1003 915.5 CURVE SMOOTH",
"936.333 1005.5 OFFCURVE",
"842 1053 OFFCURVE",
"734 1053 CURVE SMOOTH",
"602 1053 OFFCURVE",
"507.333 1003 OFFCURVE",
"430 927 CURVE",
"430 1497 LINE",
"120 1497 LINE",
"120 0 LINE"
);
},
{
closed = 1;
nodes = (
"675.333 820 OFFCURVE",
"715.833 801.5 OFFCURVE",
"744.5 755.5 CURVE SMOOTH",
"773.167 709.5 OFFCURVE",
"790 636.333 OFFCURVE",
"790 527 CURVE SMOOTH",
"790 412.333 OFFCURVE",
"768.833 333.5 OFFCURVE",
"733.5 283.5 CURVE SMOOTH",
"698.167 233.5 OFFCURVE",
"649.333 212 OFFCURVE",
"592 212 CURVE SMOOTH",
"532 212 OFFCURVE",
"476.667 230 OFFCURVE",
"430 282 CURVE",
"430 722 LINE",
"483.689 786.427 OFFCURVE",
"535.896 820 OFFCURVE",
"626 820 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 0 0 36 34 26 44 27 44 0 25 0 24 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
3 1 4 1 32 31 2 5 4 21 1 2 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 6 3 2 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
3 1 4 1 32 31 2 5 4 21 1 3 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 12 31 0 5 5 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
3 1 4 1 32 31 2 5 4 21 1 3 5 3 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 5 2 1 0 37 6 1 3 3 0 0 0 36 0 0 0 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
3 1 4 1 32 31 2 5 4 21 1 3 5 3 30 0 1 7 1 4 5 1 4 1 0 38 0 5 3 2 5 1 0 35 0 0 6 1 3 2 0 3 1 0 38 0 5 5 2 1 0 36 0 2 5 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"950 900 LINE",
"851.333 1000 OFFCURVE",
"732.667 1053 OFFCURVE",
"570 1053 CURVE SMOOTH",
"400.667 1053 OFFCURVE",
"271.833 994.833 OFFCURVE",
"184.5 899.5 CURVE SMOOTH",
"97.167 804.167 OFFCURVE",
"52 670.333 OFFCURVE",
"52 521 CURVE SMOOTH",
"52 350.333 OFFCURVE",
"107.167 215.833 OFFCURVE",
"194.5 124.5 CURVE SMOOTH",
"281.833 33.167 OFFCURVE",
"401.333 -16 OFFCURVE",
"528 -16 CURVE SMOOTH",
"598.667 -16 OFFCURVE",
"674.5 -7.5 OFFCURVE",
"748.5 18.5 CURVE SMOOTH",
"822.5 44.5 OFFCURVE",
"894 88.667 OFFCURVE",
"958 162 CURVE",
"868 273 LINE",
"855.333 291 OFFCURVE",
"836.667 300 OFFCURVE",
"812 300 CURVE SMOOTH",
"743.362 300 OFFCURVE",
"699.54 212 OFFCURVE",
"586 212 CURVE SMOOTH",
"451.333 212 OFFCURVE",
"370 322.333 OFFCURVE",
"370 521 CURVE SMOOTH",
"370 615.667 OFFCURVE",
"387 692 OFFCURVE",
"423 744 CURVE SMOOTH",
"459 796 OFFCURVE",
"514 825 OFFCURVE",
"590 825 CURVE SMOOTH",
"680.058 825 OFFCURVE",
"747.943 754 OFFCURVE",
"804 754 CURVE SMOOTH",
"836 754 OFFCURVE",
"849.333 768.333 OFFCURVE",
"868 791 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
40 38 30 28 22 20 17 15 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
42 1 1 5 24 1 4 2 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 1 1 5 1 0 36 0 5 5 20 31 0 2 2 4 1 0 36 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
42 1 1 5 24 1 4 2 2 30 0 0 1 3 1 0 3 50 0 3 2 1 3 2 48 0 5 0 1 0 5 1 1 0 38 0 2 4 4 2 1 0 35 0 2 2 4 1 0 36 0 4 2 4 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 972;
}
);
note = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 236, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 972;
}
);
note = cacute;
unicode = 0107;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"391.333 -210 OFFCURVE",
"380 -219 OFFCURVE",
"376 -237 CURVE",
"348 -331 LINE",
"398.667 -341.667 OFFCURVE",
"441.333 -347 OFFCURVE",
"496 -347 CURVE SMOOTH",
"642.003 -347 OFFCURVE",
"764 -293.662 OFFCURVE",
"764 -194 CURVE SMOOTH",
"764 -120.104 OFFCURVE",
"716.275 -71.607 OFFCURVE",
"609 -43 CURVE",
"618 -11 LINE",
"739.531 2.81 OFFCURVE",
"862.756 51.718 OFFCURVE",
"958 162 CURVE",
"868 273 LINE",
"855.333 291 OFFCURVE",
"836.667 300 OFFCURVE",
"812 300 CURVE SMOOTH",
"743.362 300 OFFCURVE",
"699.54 212 OFFCURVE",
"586 212 CURVE SMOOTH",
"451.333 212 OFFCURVE",
"370 322.333 OFFCURVE",
"370 521 CURVE SMOOTH",
"370 615.667 OFFCURVE",
"387 692 OFFCURVE",
"423 744 CURVE SMOOTH",
"459 796 OFFCURVE",
"514 825 OFFCURVE",
"590 825 CURVE SMOOTH",
"680.058 825 OFFCURVE",
"747.943 754 OFFCURVE",
"804 754 CURVE SMOOTH",
"836 754 OFFCURVE",
"849.333 768.333 OFFCURVE",
"868 791 CURVE",
"950 900 LINE",
"851.333 1000 OFFCURVE",
"732.667 1053 OFFCURVE",
"570 1053 CURVE SMOOTH",
"400.667 1053 OFFCURVE",
"271.833 994.833 OFFCURVE",
"184.5 899.5 CURVE SMOOTH",
"97.167 804.167 OFFCURVE",
"52 670.333 OFFCURVE",
"52 521 CURVE SMOOTH",
"52 373 OFFCURVE",
"93 253.333 OFFCURVE",
"161 164 CURVE SMOOTH",
"229 74.667 OFFCURVE",
"323 16.333 OFFCURVE",
"427 -5 CURVE",
"388 -136 LINE",
"436.667 -142.667 OFFCURVE",
"471.167 -149.5 OFFCURVE",
"491.5 -156.5 CURVE SMOOTH",
"511.833 -163.5 OFFCURVE",
"522 -174 OFFCURVE",
"522 -188 CURVE SMOOTH",
"522 -202.667 OFFCURVE",
"508.667 -218 OFFCURVE",
"474 -218 CURVE SMOOTH",
"460 -218 OFFCURVE",
"448.333 -216.667 OFFCURVE",
"439 -214 CURVE SMOOTH",
"429.667 -211.333 OFFCURVE",
"420 -210 OFFCURVE",
"410 -210 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 65 63 46 44 41 39 33 31 28 26 21 19 4 2 0 69 1 69 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
23 1 4 2 54 48 10 9 4 0 5 67 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 0 4 4 2 1 0 36 0 2 2 20 31 1 8 2 0 0 7 1 2 36 0 7 7 22 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
23 1 4 2 54 48 10 9 4 0 5 67 1 7 0 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 1 8 2 0 0 7 0 7 1 2 37 0 4 4 2 1 0 36 0 2 2 20 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
23 1 4 2 54 48 10 9 4 0 5 67 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 1 0 7 1 7 1 2 37 0 4 4 2 1 0 36 0 2 2 20 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
23 1 4 2 54 48 10 9 4 0 5 67 1 7 1 3 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 5 0 4 5 0 48 8 1 0 1 4 0 1 48 0 2 0 4 3 2 4 1 0 38 0 1 7 7 1 1 0 35 0 1 1 7 1 2 36 0 7 1 7 1 2 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 972;
}
);
note = ccedilla;
unicode = 00E7;
},
{
glyphname = d;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1040 0 LINE",
"1040 1497 LINE",
"730 1497 LINE",
"730 972 LINE",
"670 1022.667 OFFCURVE",
"600.667 1057 OFFCURVE",
"494 1057 CURVE SMOOTH",
"362 1057 OFFCURVE",
"250.5 999.167 OFFCURVE",
"172.5 902.5 CURVE SMOOTH",
"94.5 805.833 OFFCURVE",
"50 669.667 OFFCURVE",
"50 515 CURVE SMOOTH",
"50 347 OFFCURVE",
"90.333 214.667 OFFCURVE",
"157 124 CURVE SMOOTH",
"223.667 33.333 OFFCURVE",
"318 -16 OFFCURVE",
"426 -16 CURVE SMOOTH",
"563.992 -16 OFFCURVE",
"662.715 40.213 OFFCURVE",
"748 131 CURVE",
"772 52 LINE SMOOTH",
"782.667 17.333 OFFCURVE",
"809.333 0 OFFCURVE",
"848 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"484.667 222 OFFCURVE",
"444.167 240.5 OFFCURVE",
"415.5 286.5 CURVE SMOOTH",
"386.833 332.5 OFFCURVE",
"370 405.667 OFFCURVE",
"370 515 CURVE SMOOTH",
"370 628.333 OFFCURVE",
"391.167 707.5 OFFCURVE",
"426.5 757.5 CURVE SMOOTH",
"461.833 807.5 OFFCURVE",
"510.667 829 OFFCURVE",
"568 829 CURVE SMOOTH",
"628 829 OFFCURVE",
"682 811 OFFCURVE",
"730 759 CURVE",
"730 319 LINE",
"677.184 255.621 OFFCURVE",
"621.432 222 OFFCURVE",
"534 222 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 1 0 36 34 26 44 27 44 24 23 20 18 10 8 0 25 1 25 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
22 1 5 2 32 31 2 4 5 4 1 0 4 3 30 7 1 4 5 0 5 4 0 50 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 1 6 2 0 0 12 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
22 1 5 2 32 31 2 4 5 4 1 0 4 3 30 7 1 4 5 0 5 4 0 50 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 12 31 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
22 1 5 2 32 31 2 4 5 4 1 0 4 3 30 7 1 4 5 0 5 4 0 50 0 1 0 1 53 0 2 0 5 4 2 5 1 0 38 6 1 0 0 3 0 0 36 0 3 3 13 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
22 1 5 2 32 31 2 4 5 4 1 0 4 3 30 7 1 4 5 0 5 4 0 50 0 1 0 1 53 0 3 2 0 3 0 0 35 0 2 0 5 4 2 5 1 0 38 0 3 3 0 1 0 36 6 1 0 3 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"416 963 LINE",
"628 1087 LINE",
"729.333 1019 OFFCURVE",
"783.333 937.333 OFFCURVE",
"810 828 CURVE",
"734 896 OFFCURVE",
"642 935 OFFCURVE",
"522 935 CURVE SMOOTH",
"383.333 935 OFFCURVE",
"266.5 882 OFFCURVE",
"184.5 798 CURVE SMOOTH",
"102.5 714 OFFCURVE",
"56 600 OFFCURVE",
"56 480 CURVE SMOOTH",
"56 324 OFFCURVE",
"110.333 200.333 OFFCURVE",
"201 115 CURVE SMOOTH",
"291.667 29.667 OFFCURVE",
"418.667 -16 OFFCURVE",
"564 -16 CURVE SMOOTH",
"734.667 -16 OFFCURVE",
"869.167 40.167 OFFCURVE",
"960.5 147.5 CURVE SMOOTH",
"1051.833 254.833 OFFCURVE",
"1100 411 OFFCURVE",
"1100 611 CURVE SMOOTH",
"1100 871 OFFCURVE",
"1011.333 1064.667 OFFCURVE",
"866 1202 CURVE",
"932 1235 LINE SMOOTH",
"954.667 1245.667 OFFCURVE",
"967 1266.333 OFFCURVE",
"967 1289 CURVE SMOOTH",
"967 1301.667 OFFCURVE",
"963.333 1313.667 OFFCURVE",
"956 1325 CURVE SMOOTH",
"894 1423 LINE",
"711 1316 LINE",
"597.667 1381.333 OFFCURVE",
"467.333 1423.333 OFFCURVE",
"326 1446 CURVE",
"290 1343 LINE SMOOTH",
"283.333 1323.667 OFFCURVE",
"280 1306 OFFCURVE",
"280 1290 CURVE SMOOTH",
"280 1242 OFFCURVE",
"308.667 1213.667 OFFCURVE",
"350 1203 CURVE SMOOTH",
"379.333 1195 OFFCURVE",
"405.333 1186.333 OFFCURVE",
"432 1177 CURVE",
"386 1155 LINE SMOOTH",
"359.333 1143 OFFCURVE",
"345 1121.667 OFFCURVE",
"345 1099 CURVE SMOOTH",
"345 1086.333 OFFCURVE",
"349.333 1073 OFFCURVE",
"358 1059 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"445.535 212 OFFCURVE",
"364 314.873 OFFCURVE",
"364 478 CURVE SMOOTH",
"364 608.898 OFFCURVE",
"446.018 707 OFFCURVE",
"586 707 CURVE SMOOTH",
"699.333 707 OFFCURVE",
"768.333 645 OFFCURVE",
"807 561 CURVE",
"803 425 OFFCURVE",
"774.833 337.167 OFFCURVE",
"731.5 284.5 CURVE SMOOTH",
"688.167 231.833 OFFCURVE",
"632 212 OFFCURVE",
"572 212 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
53 52 61 59 52 69 53 69 45 43 35 33 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
47 1 3 1 57 1 2 3 2 30 51 50 26 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
47 1 3 1 57 1 2 3 2 30 51 50 26 19 18 15 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 0 0 2 1 0 35 4 1 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1162;
}
);
note = eth;
unicode = 00F0;
},
{
glyphname = e;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"405.333 1053 OFFCURVE",
"278.167 994.333 OFFCURVE",
"189.5 901 CURVE SMOOTH",
"100.833 807.667 OFFCURVE",
"52 679.667 OFFCURVE",
"52 541 CURVE SMOOTH",
"52 357 OFFCURVE",
"111.167 218.333 OFFCURVE",
"206.5 125 CURVE SMOOTH",
"301.833 31.667 OFFCURVE",
"432.667 -16 OFFCURVE",
"578 -16 CURVE SMOOTH",
"648.667 -16 OFFCURVE",
"728.5 -7.5 OFFCURVE",
"806.5 18.5 CURVE SMOOTH",
"884.5 44.5 OFFCURVE",
"960 88.667 OFFCURVE",
"1024 162 CURVE",
"934 273 LINE",
"921.333 291 OFFCURVE",
"902.667 300 OFFCURVE",
"878 300 CURVE SMOOTH",
"804.786 300 OFFCURVE",
"726.958 216 OFFCURVE",
"606 216 CURVE SMOOTH",
"471.333 216 OFFCURVE",
"382 289.667 OFFCURVE",
"362 463 CURVE",
"960 463 LINE SMOOTH",
"1020.234 463 OFFCURVE",
"1030 493.744 OFFCURVE",
"1030 578 CURVE SMOOTH",
"1030 727.333 OFFCURVE",
"981.5 846.667 OFFCURVE",
"899.5 928 CURVE SMOOTH",
"817.5 1009.333 OFFCURVE",
"701.333 1053 OFFCURVE",
"564 1053 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"696.731 839 OFFCURVE",
"752 749.623 OFFCURVE",
"752 643 CURVE",
"365 643 LINE",
"386.333 769.667 OFFCURVE",
"451.333 839 OFFCURVE",
"570 839 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
38 37 1 0 41 40 37 45 38 45 28 26 20 18 15 13 11 9 0 36 1 36 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
22 1 4 2 1 30 0 3 1 2 1 3 2 50 0 6 0 1 3 6 1 1 0 38 8 1 5 5 0 1 0 36 7 1 0 0 20 31 0 2 2 4 1 0 36 0 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
22 1 4 2 1 30 0 3 1 2 1 3 2 50 7 1 0 8 1 5 6 0 5 1 0 38 0 6 0 1 3 6 1 1 0 38 0 2 4 4 2 1 0 35 0 2 2 4 1 0 36 0 4 2 4 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1088;
}
);
note = e;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 242, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1088;
}
);
note = eacute;
unicode = 00E9;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 242, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1088;
}
);
note = ecircumflex;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 242, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1088;
}
);
note = edieresis;
unicode = 00EB;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 242, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1088;
}
);
note = egrave;
unicode = 00E8;
},
{
glyphname = eogonek;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"736.715 -167 OFFCURVE",
"705.735 -175 OFFCURVE",
"686 -175 CURVE SMOOTH",
"650 -175 OFFCURVE",
"632 -154 OFFCURVE",
"632 -122 CURVE SMOOTH",
"632 -72.667 OFFCURVE",
"670 -32 OFFCURVE",
"718 -4 CURVE",
"824.667 14.667 OFFCURVE",
"936 60.667 OFFCURVE",
"1024 162 CURVE",
"934 273 LINE",
"921.333 291 OFFCURVE",
"902.667 300 OFFCURVE",
"878 300 CURVE SMOOTH",
"804.786 300 OFFCURVE",
"726.958 216 OFFCURVE",
"606 216 CURVE SMOOTH",
"471.333 216 OFFCURVE",
"382 289.667 OFFCURVE",
"362 463 CURVE",
"960 463 LINE SMOOTH",
"1020.234 463 OFFCURVE",
"1030 493.744 OFFCURVE",
"1030 578 CURVE SMOOTH",
"1030 727.333 OFFCURVE",
"981.5 846.667 OFFCURVE",
"899.5 928 CURVE SMOOTH",
"817.5 1009.333 OFFCURVE",
"701.333 1053 OFFCURVE",
"564 1053 CURVE SMOOTH",
"405.333 1053 OFFCURVE",
"278.167 994.333 OFFCURVE",
"189.5 901 CURVE SMOOTH",
"100.833 807.667 OFFCURVE",
"52 679.667 OFFCURVE",
"52 541 CURVE SMOOTH",
"52 369 OFFCURVE",
"103.833 236.167 OFFCURVE",
"188.5 143.5 CURVE SMOOTH",
"273.167 50.833 OFFCURVE",
"391 -2.333 OFFCURVE",
"523 -13 CURVE",
"439 -69 OFFCURVE",
"402 -134 OFFCURVE",
"402 -198 CURVE SMOOTH",
"402 -284.667 OFFCURVE",
"477.333 -347 OFFCURVE",
"620 -347 CURVE SMOOTH",
"698.667 -347 OFFCURVE",
"771.333 -325 OFFCURVE",
"818 -297 CURVE",
"772 -186 LINE",
"767.333 -173.333 OFFCURVE",
"758 -167 OFFCURVE",
"744 -167 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"696.731 839 OFFCURVE",
"752 749.623 OFFCURVE",
"752 643 CURVE",
"365 643 LINE",
"386.333 769.667 OFFCURVE",
"451.333 839 OFFCURVE",
"570 839 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
59 58 1 0 62 61 58 66 59 66 54 52 42 40 37 35 33 31 23 21 7 5 0 57 1 57 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
44 12 2 0 4 3 1 1 0 2 30 0 5 3 4 3 5 4 50 0 4 0 3 4 0 48 0 8 0 3 5 8 3 1 0 38 10 1 7 7 2 1 0 36 0 2 2 20 31 6 9 2 0 0 1 1 2 36 0 1 1 22 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
44 12 2 0 4 3 1 1 0 2 30 0 5 3 4 3 5 4 50 0 4 0 3 4 0 48 0 8 0 3 5 8 3 1 0 38 6 9 2 0 0 1 0 1 1 2 37 10 1 7 7 2 1 0 36 0 2 2 20 7 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 68 values pushed */
44 12 2 0 4 3 1 1 6 2 30 0 5 3 4 3 5 4 50 0 4 0 3 4 0 48 9 1 0 6 3 0 6 48 0 8 0 3 5 8 3 1 0 38 0 6 0 1 6 1 1 2 37 10 1 7 7 2 1 0 36 0 2 2 20 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
44 12 2 0 4 3 1 1 6 2 30 0 5 3 4 3 5 4 50 0 4 0 3 4 0 48 9 1 0 6 3 0 6 48 0 2 10 1 7 8 2 7 1 0 38 0 8 0 3 5 8 3 1 0 38 0 6 1 1 6 1 0 35 0 6 6 1 1 2 36 0 1 6 1 1 2 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1088;
}
);
note = eogonek;
unicode = 0119;
},
{
glyphname = f;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"476 0 LINE",
"476 823 LINE",
"710 823 LINE",
"710 1035 LINE",
"466 1035 LINE",
"466 1084 LINE SMOOTH",
"466 1215.487 OFFCURVE",
"520.829 1259 OFFCURVE",
"636 1259 CURVE SMOOTH",
"672.748 1259 OFFCURVE",
"711.506 1275.098 OFFCURVE",
"714 1315 CURVE SMOOTH",
"720 1466 LINE",
"673.333 1479.333 OFFCURVE",
"632.667 1485 OFFCURVE",
"582 1485 CURVE SMOOTH",
"451.333 1485 OFFCURVE",
"347.833 1446 OFFCURVE",
"276.5 1378 CURVE SMOOTH",
"205.167 1310 OFFCURVE",
"166 1212.667 OFFCURVE",
"166 1094 CURVE SMOOTH",
"166 1035 LINE",
"20 1035 LINE",
"20 913 LINE SMOOTH",
"20 869 OFFCURVE",
"51.333 848.667 OFFCURVE",
"98 838 CURVE SMOOTH",
"166 824 LINE",
"166 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 32 0 32 31 30 29 28 23 21 14 12 7 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
16 1 2 1 1 1 4 0 2 30 0 2 2 1 1 0 36 0 1 1 17 31 0 4 4 0 0 0 36 3 1 0 0 14 31 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
16 1 2 1 1 1 4 0 2 30 0 1 0 2 0 1 2 1 0 38 0 4 4 0 0 0 36 3 1 0 0 14 31 6 1 5 5 12 5 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
16 1 2 1 1 1 4 0 2 30 6 1 5 4 5 53 0 1 0 2 0 1 2 1 0 38 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 0 36 0 4 0 4 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
16 1 2 1 1 1 4 3 2 30 0 0 2 3 2 0 3 50 6 1 5 4 5 53 0 1 0 2 0 1 2 1 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 724;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"364.667 1055 OFFCURVE",
"258.167 1022.5 OFFCURVE",
"181.5 964.5 CURVE SMOOTH",
"104.833 906.5 OFFCURVE",
"58 822 OFFCURVE",
"58 718 CURVE SMOOTH",
"58 592.667 OFFCURVE",
"124 496.333 OFFCURVE",
"232 439 CURVE",
"143.99 397.44 OFFCURVE",
"94 324.734 OFFCURVE",
"94 256 CURVE SMOOTH",
"94 182.667 OFFCURVE",
"124.333 136.667 OFFCURVE",
"171 106 CURVE",
"73.667 70 OFFCURVE",
"14 7 OFFCURVE",
"14 -85 CURVE SMOOTH",
"14 -155.667 OFFCURVE",
"50.5 -223.5 OFFCURVE",
"128.5 -273.5 CURVE SMOOTH",
"206.5 -323.5 OFFCURVE",
"323.333 -357 OFFCURVE",
"486 -357 CURVE SMOOTH",
"651.333 -357 OFFCURVE",
"780 -311.333 OFFCURVE",
"868 -242 CURVE SMOOTH",
"956 -172.667 OFFCURVE",
"1002 -79.333 OFFCURVE",
"1002 14 CURVE SMOOTH",
"1002 114 OFFCURVE",
"962 176.333 OFFCURVE",
"902 215 CURVE SMOOTH",
"842 253.667 OFFCURVE",
"761 268.167 OFFCURVE",
"681 275.5 CURVE SMOOTH",
"548.604 287.636 OFFCURVE",
"360 271.623 OFFCURVE",
"360 342 CURVE SMOOTH",
"360 359.333 OFFCURVE",
"371.333 374.667 OFFCURVE",
"394 388 CURVE",
"422.667 384 OFFCURVE",
"453.333 382 OFFCURVE",
"486 382 CURVE SMOOTH",
"603.333 382 OFFCURVE",
"709.167 414.5 OFFCURVE",
"784.5 472.5 CURVE SMOOTH",
"859.833 530.5 OFFCURVE",
"906 614 OFFCURVE",
"906 718 CURVE SMOOTH",
"906 750 OFFCURVE",
"901.333 781 OFFCURVE",
"892 811 CURVE",
"968 828 LINE SMOOTH",
"1014.667 838.667 OFFCURVE",
"1032 857.333 OFFCURVE",
"1032 892 CURVE SMOOTH",
"1032 1005 LINE",
"719 1005 LINE",
"652.333 1037 OFFCURVE",
"574 1055 OFFCURVE",
"486 1055 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"716 -113.014 OFFCURVE",
"643.074 -144 OFFCURVE",
"492 -144 CURVE SMOOTH",
"352.016 -144 OFFCURVE",
"282 -115.255 OFFCURVE",
"282 -45 CURVE SMOOTH",
"282 -3.667 OFFCURVE",
"309.333 28.333 OFFCURVE",
"348 55 CURVE",
"376.667 51.667 OFFCURVE",
"405.667 49.5 OFFCURVE",
"435 48.5 CURVE SMOOTH",
"493.667 46.5 OFFCURVE",
"549.167 44.333 OFFCURVE",
"596.5 39 CURVE SMOOTH",
"661.579 31.667 OFFCURVE",
"716 12.237 OFFCURVE",
"716 -38 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"389.396 573 OFFCURVE",
"340 628.016 OFFCURVE",
"340 711 CURVE SMOOTH",
"340 795 OFFCURVE",
"383.333 846 OFFCURVE",
"486 846 CURVE SMOOTH",
"588.667 846 OFFCURVE",
"632 795 OFFCURVE",
"632 711 CURVE SMOOTH",
"632 629.667 OFFCURVE",
"588.667 573 OFFCURVE",
"486 573 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
79 78 1 0 85 83 78 91 79 91 74 72 64 62 35 33 24 23 17 15 4 3 0 57 1 57 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
22 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
9 1 7 8 50 18 2 2 7 65 42 2 5 3 3 30 10 1 7 0 2 3 7 2 1 0 38 0 1 1 14 31 0 8 8 0 1 0 36 9 1 0 0 20 31 0 3 3 5 1 0 36 0 5 5 12 31 0 6 6 4 1 0 36 0 4 4 22 4 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
9 1 7 8 50 18 2 2 7 65 42 2 5 3 3 30 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 1 1 14 31 0 8 8 0 1 0 36 9 1 0 0 20 31 0 6 6 4 1 0 36 0 4 4 22 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
9 1 7 8 50 18 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 8 8 0 1 0 36 9 1 0 0 20 31 0 6 6 4 1 0 36 0 4 4 22 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
9 1 7 8 50 18 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 6 0 4 6 4 1 0 37 0 8 8 0 1 0 36 9 1 0 0 20 8 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
9 1 7 8 50 18 2 2 7 65 42 2 5 3 3 30 0 1 0 8 0 1 8 50 9 1 0 0 8 7 0 8 1 0 38 10 1 7 0 2 3 7 2 1 0 38 0 3 0 5 6 3 5 1 0 38 0 6 4 4 6 1 0 35 0 6 6 4 1 0 36 0 4 6 4 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1046;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 0 LINE",
"430 739 LINE",
"484.667 788.333 OFFCURVE",
"544 820 OFFCURVE",
"612 820 CURVE SMOOTH",
"702.667 820 OFFCURVE",
"750 760.333 OFFCURVE",
"750 659 CURVE SMOOTH",
"750 0 LINE",
"1060 0 LINE",
"1060 659 LINE SMOOTH",
"1060 772.333 OFFCURVE",
"1029 871.5 OFFCURVE",
"969 941.5 CURVE SMOOTH",
"909 1011.5 OFFCURVE",
"821.333 1053 OFFCURVE",
"708 1053 CURVE SMOOTH",
"586.667 1053 OFFCURVE",
"504.667 1010 OFFCURVE",
"430 946 CURVE",
"430 1497 LINE",
"120 1497 LINE",
"120 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 21 0 21 18 16 13 12 7 5 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
3 1 3 1 20 1 2 3 2 30 0 0 0 13 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
3 1 3 1 20 1 2 3 2 30 0 1 0 3 2 1 3 1 0 38 5 4 2 2 2 0 0 0 36 0 0 0 13 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
3 1 3 1 20 1 2 3 2 30 0 0 1 2 0 0 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 0 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
3 1 3 1 20 1 4 3 2 30 0 2 4 2 53 0 0 1 4 0 0 0 35 0 1 0 3 4 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 1037 LINE",
"130 0 LINE",
"440 0 LINE",
"440 1037 LINE"
);
},
{
closed = 1;
nodes = (
"476 1422.658 OFFCURVE",
"389.15 1503 OFFCURVE",
"286 1503 CURVE SMOOTH",
"185.395 1503 OFFCURVE",
"102 1421.994 OFFCURVE",
"102 1321 CURVE SMOOTH",
"102 1223.521 OFFCURVE",
"185.646 1141 OFFCURVE",
"286 1141 CURVE SMOOTH",
"388.9 1141 OFFCURVE",
"476 1222.887 OFFCURVE",
"476 1321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 20 18 10 8 0 3 0 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 19 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
4 1 1 0 0 1 0 0 0 37 0 2 2 3 1 0 36 0 3 3 19 2 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 3 0 2 1 3 2 1 0 38 4 1 1 0 0 1 0 0 35 4 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 570;
}
);
note = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 1037 LINE",
"130 0 LINE",
"440 0 LINE",
"440 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 14 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 570;
}
);
note = dotlessi;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, -35, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 570;
}
);
note = iacute;
unicode = 00ED;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -35, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 570;
}
);
note = icircumflex;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -35, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 570;
}
);
note = idieresis;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, -35, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 570;
}
);
note = igrave;
unicode = 00EC;
},
{
glyphname = j;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 1037 LINE",
"130 -2 LINE SMOOTH",
"130 -105.212 OFFCURVE",
"106.078 -135 OFFCURVE",
"10 -135 CURVE SMOOTH",
"-38 -135 OFFCURVE",
"-49.333 -148 OFFCURVE",
"-52 -176 CURVE SMOOTH",
"-62 -339 LINE",
"-15.333 -351 OFFCURVE",
"25.333 -357 OFFCURVE",
"76 -357 CURVE SMOOTH",
"213.333 -357 OFFCURVE",
"303.833 -317.167 OFFCURVE",
"360.5 -252.5 CURVE SMOOTH",
"417.167 -187.833 OFFCURVE",
"440 -99.333 OFFCURVE",
"440 -2 CURVE SMOOTH",
"440 1037 LINE"
);
},
{
closed = 1;
nodes = (
"476 1422.658 OFFCURVE",
"389.15 1503 OFFCURVE",
"286 1503 CURVE SMOOTH",
"185.395 1503 OFFCURVE",
"102 1421.994 OFFCURVE",
"102 1321 CURVE SMOOTH",
"102 1223.521 OFFCURVE",
"185.646 1141 OFFCURVE",
"286 1141 CURVE SMOOTH",
"388.9 1141 OFFCURVE",
"476 1222.887 OFFCURVE",
"476 1321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 36 34 26 24 0 19 0 19 14 12 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
10 9 2 0 1 1 30 0 3 3 4 1 0 36 0 4 4 19 31 5 1 2 2 14 31 0 1 1 0 1 2 36 0 0 0 22 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
10 9 2 0 1 1 30 0 1 0 0 1 0 1 2 37 0 3 3 4 1 0 36 0 4 4 19 31 5 1 2 2 14 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
10 9 2 0 1 1 30 5 1 2 3 1 3 2 1 50 0 1 0 0 1 0 1 2 37 0 3 3 4 1 0 36 0 4 4 19 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
10 9 2 0 1 1 30 5 1 2 3 1 3 2 1 50 0 4 0 3 2 4 3 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 2 36 0 0 1 0 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 566;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"120 1497 LINE",
"120 0 LINE",
"430 0 LINE",
"430 459 LINE",
"490 459 LINE SMOOTH",
"530 459 OFFCURVE",
"545.333 452.333 OFFCURVE",
"564 419 CURVE SMOOTH",
"760 52 LINE SMOOTH",
"781.333 13.333 OFFCURVE",
"815.333 0 OFFCURVE",
"862 0 CURVE SMOOTH",
"1142 0 LINE",
"850 496 LINE SMOOTH",
"828 533.333 OFFCURVE",
"802 563.333 OFFCURVE",
"772 586 CURVE",
"806.667 607.333 OFFCURVE",
"836.667 633.333 OFFCURVE",
"862 668 CURVE SMOOTH",
"1130 1037 LINE",
"846 1037 LINE SMOOTH",
"798 1037 OFFCURVE",
"768.667 1021.667 OFFCURVE",
"746 987 CURVE SMOOTH",
"550 695 LINE SMOOTH",
"531.333 667 OFFCURVE",
"514.667 658 OFFCURVE",
"476 658 CURVE SMOOTH",
"430 658 LINE",
"430 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 29 0 29 28 27 26 24 19 17 10 8 3 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 6 1 5 5 13 31 0 1 1 14 31 4 1 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
14 1 3 0 1 30 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 4 1 2 2 5 0 0 36 6 1 5 5 13 5 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
14 1 3 0 1 30 6 1 5 1 2 5 0 0 35 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 4 1 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
14 1 3 0 1 30 0 1 0 2 1 1 0 35 0 0 0 3 4 0 3 1 0 38 6 1 5 0 4 2 5 4 0 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1152;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 1497 LINE",
"130 0 LINE",
"440 0 LINE",
"440 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 13 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 0 0 1 0 0 36 2 1 1 1 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 570;
}
);
note = l;
unicode = 006C;
},
{
glyphname = lslash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"200 1497 LINE",
"200 847 LINE",
"86 800 LINE SMOOTH",
"62 790 OFFCURVE",
"50 772 OFFCURVE",
"50 746 CURVE SMOOTH",
"50 566 LINE",
"200 624 LINE",
"200 0 LINE",
"510 0 LINE",
"510 728 LINE",
"620 774 LINE SMOOTH",
"646.667 785.333 OFFCURVE",
"660 806 OFFCURVE",
"660 836 CURVE SMOOTH",
"660 1010 LINE",
"510 951 LINE",
"510 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 15 0 15 8 7 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
14 10 9 6 2 1 6 0 1 1 30 2 1 1 1 13 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
14 10 9 6 2 1 6 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 13 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
14 10 9 6 2 1 6 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 710;
}
);
note = lslash;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 0 LINE",
"430 750 LINE",
"474 792.667 OFFCURVE",
"524 820 OFFCURVE",
"580 820 CURVE SMOOTH",
"670.667 820 OFFCURVE",
"718 777.667 OFFCURVE",
"718 659 CURVE SMOOTH",
"718 0 LINE",
"1028 0 LINE",
"1028 659 LINE SMOOTH",
"1028 763 OFFCURVE",
"1090 820 OFFCURVE",
"1174 820 CURVE SMOOTH",
"1266 820 OFFCURVE",
"1312 766.333 OFFCURVE",
"1312 659 CURVE SMOOTH",
"1312 0 LINE",
"1622 0 LINE",
"1622 659 LINE SMOOTH",
"1622 783 OFFCURVE",
"1589.5 882.167 OFFCURVE",
"1527.5 949.5 CURVE SMOOTH",
"1465.5 1016.833 OFFCURVE",
"1372.667 1053 OFFCURVE",
"1254 1053 CURVE SMOOTH",
"1122.195 1053 OFFCURVE",
"988.257 999.166 OFFCURVE",
"921 875 CURVE",
"878.333 983 OFFCURVE",
"797.333 1053 OFFCURVE",
"672 1053 CURVE SMOOTH",
"557.463 1053 OFFCURVE",
"475.541 1002.254 OFFCURVE",
"405 929 CURVE",
"388 985 LINE SMOOTH",
"377.333 1019.667 OFFCURVE",
"350.667 1037 OFFCURVE",
"312 1037 CURVE SMOOTH",
"120 1037 LINE",
"120 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 42 0 42 39 37 34 33 30 28 26 25 20 18 12 10 3 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
14 6 2 4 0 41 1 3 4 2 30 6 1 4 4 0 1 0 36 2 1 2 0 0 14 31 8 7 5 3 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
14 6 2 4 0 41 1 3 4 2 30 0 0 0 14 31 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
14 6 2 4 0 41 1 3 4 2 30 0 0 4 3 0 1 0 35 2 1 1 6 1 4 3 1 4 1 0 38 0 0 0 3 0 0 36 8 7 5 3 3 0 3 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
14 6 2 6 0 41 1 7 4 2 30 0 5 7 3 7 5 3 50 0 3 3 51 0 0 6 7 0 1 0 35 0 1 0 6 4 1 6 1 0 38 0 2 0 4 7 2 4 1 0 38 0 0 0 7 0 0 36 8 1 7 0 7 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1722;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 0 LINE",
"430 739 LINE",
"484.667 788.333 OFFCURVE",
"544 820 OFFCURVE",
"612 820 CURVE SMOOTH",
"702.667 820 OFFCURVE",
"750 760.333 OFFCURVE",
"750 659 CURVE SMOOTH",
"750 0 LINE",
"1060 0 LINE",
"1060 659 LINE SMOOTH",
"1060 772.333 OFFCURVE",
"1029 871.5 OFFCURVE",
"969 941.5 CURVE SMOOTH",
"909 1011.5 OFFCURVE",
"821.333 1053 OFFCURVE",
"708 1053 CURVE SMOOTH",
"576.879 1053 OFFCURVE",
"490.193 1003.58 OFFCURVE",
"406 925 CURVE",
"388 985 LINE SMOOTH",
"377.333 1019.667 OFFCURVE",
"350.667 1037 OFFCURVE",
"312 1037 CURVE SMOOTH",
"120 1037 LINE",
"120 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 26 0 26 23 21 18 17 12 10 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
6 1 3 0 25 1 2 3 2 30 0 3 3 0 1 0 36 1 1 0 0 14 31 5 4 2 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
6 1 3 0 25 1 2 3 2 30 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
6 1 3 0 25 1 2 3 2 30 0 0 3 2 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 0 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
6 1 3 0 25 1 4 3 2 30 0 2 4 2 53 0 0 3 4 0 1 0 35 0 1 0 3 4 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = n;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 268, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = nacute;
unicode = 0144;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 260, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = ntilde;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"423.333 1053 OFFCURVE",
"291.5 1002 OFFCURVE",
"197.5 910 CURVE SMOOTH",
"103.5 818 OFFCURVE",
"50 685 OFFCURVE",
"50 521 CURVE SMOOTH",
"50 355.667 OFFCURVE",
"103.5 221.167 OFFCURVE",
"197.5 128.5 CURVE SMOOTH",
"291.5 35.833 OFFCURVE",
"423.333 -16 OFFCURVE",
"582 -16 CURVE SMOOTH",
"739.333 -16 OFFCURVE",
"870.833 35.833 OFFCURVE",
"963.5 128.5 CURVE SMOOTH",
"1056.167 221.167 OFFCURVE",
"1110 355.667 OFFCURVE",
"1110 521 CURVE SMOOTH",
"1110 685 OFFCURVE",
"1056.167 818 OFFCURVE",
"963.5 910 CURVE SMOOTH",
"870.833 1002 OFFCURVE",
"739.333 1053 OFFCURVE",
"582 1053 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"435.333 214 OFFCURVE",
"370 313.667 OFFCURVE",
"370 519 CURVE SMOOTH",
"370 724.333 OFFCURVE",
"435.333 823 OFFCURVE",
"582 823 CURVE SMOOTH",
"724.667 823 OFFCURVE",
"790 724.333 OFFCURVE",
"790 519 CURVE SMOOTH",
"790 313.667 OFFCURVE",
"724.667 214 OFFCURVE",
"582 214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 20 31 5 1 2 2 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = oacute;
unicode = 00F3;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = ocircumflex;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = odieresis;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = ograve;
unicode = 00F2;
},
{
glyphname = oslash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1156 1146 LINE",
"1004 1146 LINE SMOOTH",
"932.227 1146 OFFCURVE",
"909.838 1125.537 OFFCURVE",
"866 1068 CURVE SMOOTH",
"820 1006 LINE",
"749.333 1037.333 OFFCURVE",
"670 1053 OFFCURVE",
"582 1053 CURVE SMOOTH",
"423.333 1053 OFFCURVE",
"291.5 1002 OFFCURVE",
"197.5 910 CURVE SMOOTH",
"103.5 818 OFFCURVE",
"50 685 OFFCURVE",
"50 521 CURVE SMOOTH",
"50 362.333 OFFCURVE",
"98.333 233 OFFCURVE",
"185 141 CURVE",
"24 -78 LINE",
"136 -78 LINE SMOOTH",
"203.917 -78 OFFCURVE",
"277.275 -53.831 OFFCURVE",
"320 9 CURVE SMOOTH",
"337 33 LINE",
"410.333 0.333 OFFCURVE",
"492 -16 OFFCURVE",
"582 -16 CURVE SMOOTH",
"739.333 -16 OFFCURVE",
"870.833 35.833 OFFCURVE",
"963.5 128.5 CURVE SMOOTH",
"1056.167 221.167 OFFCURVE",
"1110 355.667 OFFCURVE",
"1110 521 CURVE SMOOTH",
"1110 678.333 OFFCURVE",
"1060.667 807 OFFCURVE",
"974 899 CURVE"
);
},
{
closed = 1;
nodes = (
"541.333 205 OFFCURVE",
"506.667 211.667 OFFCURVE",
"478 225 CURVE",
"796 656 LINE",
"805.333 616.667 OFFCURVE",
"810 571 OFFCURVE",
"810 519 CURVE SMOOTH",
"810 313.667 OFFCURVE",
"724.667 205 OFFCURVE",
"582 205 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"350 724.333 OFFCURVE",
"435.333 833 OFFCURVE",
"582 833 CURVE SMOOTH",
"619.333 833 OFFCURVE",
"651.667 826.667 OFFCURVE",
"679 814 CURVE",
"363 384 LINE",
"354.333 420.667 OFFCURVE",
"350 465.667 OFFCURVE",
"350 519 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
37 36 50 48 36 43 37 43 35 33 27 25 17 15 9 7 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
28 0 2 5 2 47 46 42 41 4 4 5 18 10 2 0 4 3 30 0 3 2 3 52 0 1 0 1 53 0 5 5 2 1 0 36 0 2 2 20 31 6 1 4 4 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
28 0 2 5 2 47 46 42 41 4 4 5 18 10 2 0 4 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 5 4 2 5 1 0 38 6 1 4 0 0 4 1 0 35 6 1 4 4 0 1 0 36 0 0 4 0 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = oslash;
unicode = 00F8;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = otilde;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1110 1053 OFFCURVE",
"989.333 986 OFFCURVE",
"912 878 CURVE",
"828 991.333 OFFCURVE",
"703.333 1053 OFFCURVE",
"546 1053 CURVE SMOOTH",
"403.333 1053 OFFCURVE",
"279 1002 OFFCURVE",
"191 910 CURVE SMOOTH",
"103 818 OFFCURVE",
"50 685 OFFCURVE",
"50 521 CURVE SMOOTH",
"50 355.667 OFFCURVE",
"102.333 221.167 OFFCURVE",
"189 128.5 CURVE SMOOTH",
"275.667 35.833 OFFCURVE",
"396.667 -16 OFFCURVE",
"534 -16 CURVE SMOOTH",
"699.333 -16 OFFCURVE",
"829 47.333 OFFCURVE",
"913 162 CURVE",
"996.427 42.074 OFFCURVE",
"1130.23 -16 OFFCURVE",
"1266 -16 CURVE SMOOTH",
"1335.333 -16 OFFCURVE",
"1412 -7.5 OFFCURVE",
"1488 18.5 CURVE SMOOTH",
"1564 44.5 OFFCURVE",
"1638 88.667 OFFCURVE",
"1702 162 CURVE",
"1610 273 LINE SMOOTH",
"1596.667 289 OFFCURVE",
"1578.667 300 OFFCURVE",
"1556 300 CURVE SMOOTH",
"1479.245 300 OFFCURVE",
"1413.108 216 OFFCURVE",
"1296 216 CURVE SMOOTH",
"1173.333 216 OFFCURVE",
"1088.667 284.333 OFFCURVE",
"1066 443 CURVE",
"1636 443 LINE SMOOTH",
"1695.128 443 OFFCURVE",
"1704 473.752 OFFCURVE",
"1704 558 CURVE SMOOTH",
"1704 708.667 OFFCURVE",
"1658.167 832.5 OFFCURVE",
"1581.5 918.5 CURVE SMOOTH",
"1504.833 1004.5 OFFCURVE",
"1396.667 1053 OFFCURVE",
"1274 1053 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"429.333 214 OFFCURVE",
"370 313.667 OFFCURVE",
"370 519 CURVE SMOOTH",
"370 724.333 OFFCURVE",
"429.333 823 OFFCURVE",
"564 823 CURVE SMOOTH",
"697.333 823 OFFCURVE",
"756 724.333 OFFCURVE",
"756 519 CURVE SMOOTH",
"756 313.667 OFFCURVE",
"697.333 214 OFFCURVE",
"564 214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1380.324 839 OFFCURVE",
"1428 730.574 OFFCURVE",
"1428 623 CURVE",
"1064 623 LINE",
"1081.333 763 OFFCURVE",
"1142.667 839 OFFCURVE",
"1260 839 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 36 values pushed */
65 64 53 52 1 0 68 67 64 72 65 72 59 57 52 63 53 63 47 45 37 35 29 27 20 18 15 13 11 9 0 51 1 51 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
49 1 8 0 33 23 2 4 2 2 30 0 3 1 2 1 3 2 50 0 10 0 1 3 10 1 1 0 38 13 9 2 8 8 0 1 0 36 6 11 2 0 0 20 31 12 7 2 2 2 4 1 0 36 5 1 4 4 18 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
49 1 9 0 33 23 2 4 2 2 30 0 3 1 2 1 3 2 50 0 10 0 1 3 10 1 1 0 38 13 1 9 9 0 1 0 36 6 11 2 0 0 20 31 0 8 8 0 1 0 36 6 11 2 0 0 20 31 12 7 2 2 2 4 1 0 36 5 1 4 4 18 4 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
201 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
49 1 9 0 33 23 2 4 2 2 30 0 3 1 2 1 3 2 50 13 1 9 8 0 9 1 0 35 6 11 2 0 0 8 10 0 8 1 0 38 0 10 0 1 3 10 1 1 0 38 12 7 2 2 4 4 2 1 0 35 12 7 2 2 2 4 1 0 36 5 1 4 2 4 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
49 1 9 0 33 23 2 4 7 2 30 0 3 1 2 1 3 2 50 13 1 9 8 0 9 1 0 35 6 11 2 0 0 8 10 0 8 1 0 38 0 10 0 1 3 10 1 1 0 38 0 2 7 4 2 1 0 35 12 1 7 4 4 7 1 0 35 12 1 7 7 4 1 0 36 5 1 4 7 4 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
49 1 9 6 33 23 2 5 7 2 30 0 3 1 2 1 3 2 50 11 1 0 13 1 9 8 0 9 1 0 38 0 6 0 8 10 6 8 1 0 38 0 10 0 1 3 10 1 1 0 38 0 2 7 4 2 1 0 35 12 1 7 0 5 4 7 5 1 0 38 0 2 2 4 1 0 36 0 4 2 4 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1762;
}
);
note = oe;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 -329 LINE",
"430 69 LINE",
"490 17 OFFCURVE",
"558 -16 OFFCURVE",
"666 -16 CURVE SMOOTH",
"798 -16 OFFCURVE",
"908.5 41.667 OFFCURVE",
"986.5 139 CURVE SMOOTH",
"1064.5 236.333 OFFCURVE",
"1110 371 OFFCURVE",
"1110 527 CURVE SMOOTH",
"1110 693.667 OFFCURVE",
"1069.667 826.333 OFFCURVE",
"1003 917 CURVE SMOOTH",
"936.333 1007.667 OFFCURVE",
"842 1057 OFFCURVE",
"734 1057 CURVE SMOOTH",
"598.688 1057 OFFCURVE",
"492.637 998.801 OFFCURVE",
"411 909 CURVE",
"388 985 LINE SMOOTH",
"377.333 1019.667 OFFCURVE",
"350.667 1037 OFFCURVE",
"312 1037 CURVE SMOOTH",
"120 1037 LINE",
"120 -329 LINE"
);
},
{
closed = 1;
nodes = (
"675.333 820 OFFCURVE",
"715.833 801.5 OFFCURVE",
"744.5 755.5 CURVE SMOOTH",
"773.167 709.5 OFFCURVE",
"790 636.333 OFFCURVE",
"790 527 CURVE SMOOTH",
"790 412.333 OFFCURVE",
"768.833 333.5 OFFCURVE",
"733.5 283.5 CURVE SMOOTH",
"698.167 233.5 OFFCURVE",
"649.333 212 OFFCURVE",
"592 212 CURVE SMOOTH",
"532 212 OFFCURVE",
"476.667 230 OFFCURVE",
"430 282 CURVE",
"430 722 LINE",
"483.689 786.427 OFFCURVE",
"535.896 820 OFFCURVE",
"626 820 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 0 0 36 34 26 44 27 44 0 25 0 25 22 20 12 10 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
6 1 4 0 32 31 2 5 4 24 1 2 5 3 30 7 1 4 0 5 0 4 5 50 1 1 0 0 14 31 0 5 5 2 1 2 36 0 2 2 18 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
6 1 4 0 32 31 2 5 4 24 1 2 5 3 30 7 1 4 0 5 0 4 5 50 0 1 1 20 31 0 0 0 14 31 0 5 5 2 1 2 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
6 1 4 0 32 31 2 5 4 24 1 2 5 3 30 7 1 4 0 5 0 4 5 50 0 1 1 20 31 0 5 5 2 1 2 36 0 2 2 18 31 6 1 3 3 0 1 0 36 0 0 0 14 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
6 1 4 0 32 31 2 5 4 24 1 2 5 3 30 0 1 0 1 52 7 1 4 0 5 0 4 5 50 0 0 4 3 0 1 0 35 0 5 0 2 3 5 2 1 2 38 0 0 0 3 0 0 36 6 1 3 0 3 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1156;
}
);
note = p;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 -329 LINE",
"430 87 LINE",
"491.608 22.592 OFFCURVE",
"560.48 -16 OFFCURVE",
"666 -16 CURVE SMOOTH",
"798 -16 OFFCURVE",
"908.5 41.667 OFFCURVE",
"986.5 139 CURVE SMOOTH",
"1064.5 236.333 OFFCURVE",
"1110 371 OFFCURVE",
"1110 527 CURVE SMOOTH",
"1110 693.667 OFFCURVE",
"1069.667 825.5 OFFCURVE",
"1003 915.5 CURVE SMOOTH",
"936.333 1005.5 OFFCURVE",
"842 1053 OFFCURVE",
"734 1053 CURVE SMOOTH",
"602 1053 OFFCURVE",
"507.333 1003 OFFCURVE",
"430 927 CURVE",
"430 1497 LINE",
"120 1497 LINE",
"120 -329 LINE"
);
},
{
closed = 1;
nodes = (
"675.333 820 OFFCURVE",
"715.833 801.5 OFFCURVE",
"744.5 755.5 CURVE SMOOTH",
"773.167 709.5 OFFCURVE",
"790 636.333 OFFCURVE",
"790 527 CURVE SMOOTH",
"790 412.333 OFFCURVE",
"768.833 333.5 OFFCURVE",
"733.5 283.5 CURVE SMOOTH",
"698.167 233.5 OFFCURVE",
"649.333 212 OFFCURVE",
"592 212 CURVE SMOOTH",
"532 212 OFFCURVE",
"476.667 230 OFFCURVE",
"430 282 CURVE",
"430 722 LINE",
"483.689 786.427 OFFCURVE",
"535.896 820 OFFCURVE",
"626 820 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
24 23 0 0 33 31 23 41 24 41 0 22 0 22 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
3 1 4 1 29 28 2 5 4 21 1 2 5 3 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
3 1 4 1 29 28 2 5 4 21 1 2 5 3 30 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 0 0 0 36 0 0 0 13 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
3 1 4 1 29 28 2 5 4 21 1 2 5 3 30 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 6 1 3 3 0 0 0 36 0 0 0 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
3 1 4 1 29 28 2 5 4 21 1 2 5 3 30 0 0 1 3 0 0 0 35 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 3 0 0 36 6 1 3 0 3 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1156;
}
);
note = thorn;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"848 1037 LINE SMOOTH",
"809.333 1037 OFFCURVE",
"784 1019.667 OFFCURVE",
"772 985 CURVE SMOOTH",
"759 944 LINE",
"687.169 1015.831 OFFCURVE",
"614.094 1057 OFFCURVE",
"494 1057 CURVE SMOOTH",
"362 1057 OFFCURVE",
"250.5 999.167 OFFCURVE",
"172.5 902.5 CURVE SMOOTH",
"94.5 805.833 OFFCURVE",
"50 669.667 OFFCURVE",
"50 515 CURVE SMOOTH",
"50 347 OFFCURVE",
"90.333 214.667 OFFCURVE",
"157 124 CURVE SMOOTH",
"223.667 33.333 OFFCURVE",
"318 -16 OFFCURVE",
"426 -16 CURVE SMOOTH",
"558 -16 OFFCURVE",
"651.333 35.667 OFFCURVE",
"730 113 CURVE",
"730 -329 LINE",
"1040 -329 LINE",
"1040 1037 LINE"
);
},
{
closed = 1;
nodes = (
"484.667 222 OFFCURVE",
"444.167 240.5 OFFCURVE",
"415.5 286.5 CURVE SMOOTH",
"386.833 332.5 OFFCURVE",
"370 405.667 OFFCURVE",
"370 515 CURVE SMOOTH",
"370 628.333 OFFCURVE",
"391.167 707.5 OFFCURVE",
"426.5 757.5 CURVE SMOOTH",
"461.833 807.5 OFFCURVE",
"510.667 829 OFFCURVE",
"568 829 CURVE SMOOTH",
"628 829 OFFCURVE",
"682 809.667 OFFCURVE",
"730 759 CURVE",
"730 319 LINE",
"677.184 255.621 OFFCURVE",
"621.432 222 OFFCURVE",
"534 222 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
26 25 0 0 35 33 25 43 26 43 0 24 0 23 17 15 7 5 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
21 1 5 2 31 30 2 4 5 3 1 1 4 3 30 0 5 5 2 1 0 36 6 3 2 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
21 1 5 3 31 30 2 4 5 3 1 1 4 3 30 6 1 3 3 14 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
21 1 5 3 31 30 2 4 5 3 1 1 4 3 30 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 1 1 0 36 0 1 1 18 31 0 0 0 3 1 0 36 6 1 3 3 14 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
21 1 5 3 31 30 2 4 5 3 1 1 4 3 30 6 1 3 5 0 3 1 0 35 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 0 4 1 1 0 38 6 1 3 3 0 0 0 36 0 0 3 0 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"430 0 LINE",
"430 636 LINE",
"476.667 722.667 OFFCURVE",
"540.667 766 OFFCURVE",
"622 766 CURVE SMOOTH",
"645.333 766 OFFCURVE",
"664.667 764.5 OFFCURVE",
"680 761.5 CURVE SMOOTH",
"695.333 758.5 OFFCURVE",
"708.667 757 OFFCURVE",
"720 757 CURVE SMOOTH",
"746.667 757 OFFCURVE",
"762.667 767 OFFCURVE",
"768 795 CURVE SMOOTH",
"808 1023 LINE",
"779.333 1045.667 OFFCURVE",
"741.333 1057 OFFCURVE",
"694 1057 CURVE SMOOTH",
"582 1057 OFFCURVE",
"487 984.333 OFFCURVE",
"411 867 CURVE",
"394 964 LINE SMOOTH",
"383.108 1018.458 OFFCURVE",
"365.761 1037 OFFCURVE",
"304 1037 CURVE SMOOTH",
"120 1037 LINE",
"120 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 23 0 23 21 19 18 16 12 10 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
13 8 2 2 0 22 1 4 2 2 30 3 1 2 2 0 1 0 36 1 1 0 0 14 31 5 1 4 4 12 4 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
52 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
13 8 2 2 0 22 1 4 2 2 30 0 0 0 14 31 3 1 2 2 1 1 0 36 0 1 1 20 31 5 1 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
13 8 2 3 0 22 1 4 2 2 30 0 2 3 4 3 2 42 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
20 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
13 8 2 3 0 22 1 4 2 2 30 0 2 3 4 3 2 42 0 0 3 4 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
13 8 2 3 0 22 1 4 2 2 30 0 2 3 4 3 2 4 50 0 0 3 4 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 826;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"824 919 LINE",
"742.52 1000.48 OFFCURVE",
"609.359 1053 OFFCURVE",
"466 1053 CURVE SMOOTH",
"328.667 1053 OFFCURVE",
"226 1015 OFFCURVE",
"158 955 CURVE SMOOTH",
"90 895 OFFCURVE",
"56 813 OFFCURVE",
"56 725 CURVE SMOOTH",
"56 630.333 OFFCURVE",
"86.667 565.5 OFFCURVE",
"132 519.5 CURVE SMOOTH",
"177.333 473.5 OFFCURVE",
"238 445.333 OFFCURVE",
"298 424 CURVE SMOOTH",
"406.253 385.51 OFFCURVE",
"540 367.276 OFFCURVE",
"540 283 CURVE SMOOTH",
"540 229.19 OFFCURVE",
"494.505 193 OFFCURVE",
"410 193 CURVE SMOOTH",
"298.833 193 OFFCURVE",
"239.949 269 OFFCURVE",
"172 269 CURVE SMOOTH",
"133.333 269 OFFCURVE",
"111.333 252.667 OFFCURVE",
"94 226 CURVE SMOOTH",
"22 112 LINE",
"104.677 37.591 OFFCURVE",
"260.935 -16 OFFCURVE",
"394 -16 CURVE SMOOTH",
"535.333 -16 OFFCURVE",
"644.5 20.333 OFFCURVE",
"718.5 83 CURVE SMOOTH",
"792.5 145.667 OFFCURVE",
"830 234.333 OFFCURVE",
"830 337 CURVE SMOOTH",
"830 497.305 OFFCURVE",
"721.922 565.094 OFFCURVE",
"590 612 CURVE SMOOTH",
"482.695 650.153 OFFCURVE",
"350 672.003 OFFCURVE",
"350 750 CURVE SMOOTH",
"350 803.333 OFFCURVE",
"393.333 835 OFFCURVE",
"472 835 CURVE SMOOTH",
"546.16 835 OFFCURVE",
"638.937 775 OFFCURVE",
"694 775 CURVE SMOOTH",
"722 775 OFFCURVE",
"738 784.667 OFFCURVE",
"754 810 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
59 57 40 38 35 33 26 24 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
63 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 20 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
63 1 1 5 30 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 880;
}
);
note = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 134, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 880;
}
);
note = sacute;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 132, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 880;
}
);
note = scaron;
unicode = 0161;
},
{
glyphname = germandbls;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"548 1485 OFFCURVE",
"409 1429.833 OFFCURVE",
"313 1338.5 CURVE SMOOTH",
"217 1247.167 OFFCURVE",
"166 1120.667 OFFCURVE",
"166 978 CURVE SMOOTH",
"166 0 LINE",
"476 0 LINE",
"476 968 LINE SMOOTH",
"476 1061.333 OFFCURVE",
"492.667 1137.167 OFFCURVE",
"530 1188.5 CURVE SMOOTH",
"567.333 1239.833 OFFCURVE",
"626 1268 OFFCURVE",
"710 1268 CURVE SMOOTH",
"836.667 1268 OFFCURVE",
"892 1213.333 OFFCURVE",
"892 1124 CURVE SMOOTH",
"892 1064.298 OFFCURVE",
"808.037 995.057 OFFCURVE",
"759 959 CURVE SMOOTH",
"736.333 942.333 OFFCURVE",
"715 923.5 OFFCURVE",
"695 902.5 CURVE SMOOTH",
"655 860.5 OFFCURVE",
"626 805 OFFCURVE",
"626 725 CURVE SMOOTH",
"626 677.667 OFFCURVE",
"634.667 638.167 OFFCURVE",
"652 606.5 CURVE SMOOTH",
"686.667 543.167 OFFCURVE",
"741 498.167 OFFCURVE",
"801 465.5 CURVE SMOOTH",
"831 449.167 OFFCURVE",
"859 433 OFFCURVE",
"885 417 CURVE SMOOTH",
"937 385 OFFCURVE",
"976 350.333 OFFCURVE",
"976 297 CURVE SMOOTH",
"976 234.333 OFFCURVE",
"932 193 OFFCURVE",
"880 193 CURVE SMOOTH",
"788.244 193 OFFCURVE",
"744.832 269 OFFCURVE",
"672 269 CURVE SMOOTH",
"633.333 269 OFFCURVE",
"611.333 252.667 OFFCURVE",
"594 226 CURVE SMOOTH",
"522 112 LINE",
"602.534 39.52 OFFCURVE",
"735.929 -16 OFFCURVE",
"852 -16 CURVE SMOOTH",
"960 -16 OFFCURVE",
"1064 14 OFFCURVE",
"1140 74 CURVE SMOOTH",
"1216 134 OFFCURVE",
"1266 223.667 OFFCURVE",
"1266 345 CURVE SMOOTH",
"1266 395.667 OFFCURVE",
"1258.167 439.167 OFFCURVE",
"1242.5 475.5 CURVE SMOOTH",
"1211.167 548.167 OFFCURVE",
"1163.667 599.667 OFFCURVE",
"1109 637 CURVE SMOOTH",
"1050.885 676.688 OFFCURVE",
"952 736.332 OFFCURVE",
"952 786 CURVE SMOOTH",
"952 835.831 OFFCURVE",
"1016.815 871.533 OFFCURVE",
"1073 910.5 CURVE SMOOTH",
"1093.667 924.833 OFFCURVE",
"1113 941.667 OFFCURVE",
"1131 961 CURVE SMOOTH",
"1167 999.667 OFFCURVE",
"1194 1051.333 OFFCURVE",
"1194 1126 CURVE SMOOTH",
"1194 1194 OFFCURVE",
"1163.5 1282.667 OFFCURVE",
"1089.5 1356 CURVE SMOOTH",
"1015.5 1429.333 OFFCURVE",
"897.333 1485 OFFCURVE",
"724 1485 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 65 64 59 57 39 37 34 32 25 23 0 70 1 70 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
29 1 1 3 1 30 0 2 4 3 4 2 3 50 0 4 4 0 1 0 36 6 1 0 0 17 31 0 3 3 1 1 0 36 5 1 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
29 1 5 3 1 30 0 2 4 3 4 2 3 50 0 4 4 0 1 0 36 6 1 0 0 17 31 0 5 5 12 31 0 3 3 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
29 1 5 3 1 30 0 2 4 3 4 2 3 50 6 1 0 0 4 2 0 4 1 0 38 0 5 5 12 31 0 3 3 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
29 1 5 3 1 30 0 2 4 3 4 2 3 50 0 5 3 1 3 5 1 50 6 1 0 0 4 2 0 4 1 0 38 0 3 5 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1316;
}
);
note = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"590.667 -16 OFFCURVE",
"694 14 OFFCURVE",
"774 74 CURVE",
"680 221 LINE SMOOTH",
"668 239.667 OFFCURVE",
"658.667 248 OFFCURVE",
"640 248 CURVE SMOOTH",
"614.187 248 OFFCURVE",
"598.179 225 OFFCURVE",
"558 225 CURVE SMOOTH",
"514 225 OFFCURVE",
"490 260 OFFCURVE",
"490 308 CURVE SMOOTH",
"490 823 LINE",
"742 823 LINE",
"742 1035 LINE",
"490 1035 LINE",
"490 1338 LINE",
"328 1338 LINE SMOOTH",
"290.667 1338 OFFCURVE",
"268 1322 OFFCURVE",
"260 1290 CURVE SMOOTH",
"199 1037 LINE",
"34 1005 LINE",
"34 884 LINE SMOOTH",
"34 844 OFFCURVE",
"60 823 OFFCURVE",
"92 823 CURVE SMOOTH",
"180 823 LINE",
"180 287 LINE SMOOTH",
"180 195 OFFCURVE",
"207.167 119.167 OFFCURVE",
"258.5 66.5 CURVE SMOOTH",
"309.833 13.833 OFFCURVE",
"385.333 -16 OFFCURVE",
"484 -16 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 30 28 25 23 20 19 18 17 16 14 8 6 0 35 1 35 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
22 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
11 1 1 3 33 1 0 5 2 30 0 2 3 2 52 4 1 1 1 3 0 0 36 0 3 3 14 31 6 1 5 5 0 1 2 36 7 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
11 1 1 3 33 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 4 1 1 1 3 0 0 36 0 3 3 14 31 0 5 5 0 1 2 36 7 1 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
11 1 1 3 33 1 0 5 2 30 0 2 3 2 52 0 6 1 5 1 6 5 50 0 3 4 1 1 6 3 1 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 2 36 7 1 0 5 0 1 2 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
11 1 4 3 33 1 0 5 2 30 0 2 3 2 52 0 1 4 6 4 1 6 50 0 6 5 4 6 5 48 0 3 0 4 1 3 4 0 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 2 36 7 1 0 5 0 1 2 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 800;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"100 1037 LINE",
"100 379 LINE SMOOTH",
"100 264.333 OFFCURVE",
"131 166.667 OFFCURVE",
"191 96 CURVE SMOOTH",
"251 25.333 OFFCURVE",
"338.667 -16 OFFCURVE",
"452 -16 CURVE SMOOTH",
"579.166 -16 OFFCURVE",
"672.058 33.756 OFFCURVE",
"753 112 CURVE",
"772 52 LINE SMOOTH",
"784 17.333 OFFCURVE",
"809.333 0 OFFCURVE",
"848 0 CURVE SMOOTH",
"1040 0 LINE",
"1040 1037 LINE",
"730 1037 LINE",
"730 298 LINE",
"674 247.333 OFFCURVE",
"616 218 OFFCURVE",
"548 218 CURVE SMOOTH",
"457.333 218 OFFCURVE",
"410 276.333 OFFCURVE",
"410 379 CURVE SMOOTH",
"410 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 25 0 25 20 18 12 10 9 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
7 1 0 1 14 1 2 0 2 30 5 4 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
7 1 0 1 14 1 2 0 2 30 5 4 2 1 1 14 31 0 2 2 12 31 0 0 0 3 1 2 36 0 3 3 18 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
7 1 0 1 14 1 2 0 2 30 0 0 2 3 0 1 0 35 5 4 2 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
7 1 0 4 14 1 2 0 2 30 5 1 4 1 0 1 4 0 50 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 248, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = uacute;
unicode = 00FA;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 248, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = ucircumflex;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 248, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = udieresis;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 248, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1160;
}
);
note = ugrave;
unicode = 00F9;
},
{
glyphname = v;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1096 1037 LINE",
"850 1037 LINE SMOOTH",
"810 1037 OFFCURVE",
"778.667 1013.667 OFFCURVE",
"768 983 CURVE SMOOTH",
"618 518 LINE SMOOTH",
"594 442 OFFCURVE",
"571.667 371 OFFCURVE",
"557 299 CURVE",
"542.333 371 OFFCURVE",
"520.667 442 OFFCURVE",
"498 518 CURVE SMOOTH",
"354 983 LINE SMOOTH",
"343.333 1013.667 OFFCURVE",
"312 1037 OFFCURVE",
"268 1037 CURVE SMOOTH",
"10 1037 LINE",
"412 0 LINE",
"694 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 16 4 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
10 1 0 1 1 30 2 1 1 1 14 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1106;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"322 0 LINE",
"562 0 LINE SMOOTH",
"596 0 OFFCURVE",
"618 17.333 OFFCURVE",
"628 52 CURVE SMOOTH",
"778 567 LINE SMOOTH",
"792.667 613.667 OFFCURVE",
"803.667 659.333 OFFCURVE",
"813 706 CURVE",
"822.333 660.667 OFFCURVE",
"834.667 615.667 OFFCURVE",
"848 569 CURVE SMOOTH",
"996 52 LINE SMOOTH",
"1006.667 14.667 OFFCURVE",
"1025.333 0 OFFCURVE",
"1052 0 CURVE SMOOTH",
"1304 0 LINE",
"1626 1037 LINE",
"1390 1037 LINE SMOOTH",
"1350 1037 OFFCURVE",
"1314.667 1015 OFFCURVE",
"1308 983 CURVE SMOOTH",
"1198 518 LINE SMOOTH",
"1180.667 444.667 OFFCURVE",
"1164.667 380.667 OFFCURVE",
"1154 314 CURVE",
"1145.333 348 OFFCURVE",
"1136.167 381.667 OFFCURVE",
"1126.5 415 CURVE SMOOTH",
"1116.833 448.333 OFFCURVE",
"1107.333 482.667 OFFCURVE",
"1098 518 CURVE SMOOTH",
"974 984 LINE SMOOTH",
"966 1014.667 OFFCURVE",
"932 1038 OFFCURVE",
"888 1038 CURVE SMOOTH",
"750 1038 LINE SMOOTH",
"710 1038 OFFCURVE",
"676 1014.667 OFFCURVE",
"668 984 CURVE SMOOTH",
"538 518 LINE SMOOTH",
"528 482 OFFCURVE",
"517.833 447.5 OFFCURVE",
"507.5 414.5 CURVE SMOOTH",
"497.167 381.5 OFFCURVE",
"487.333 348.667 OFFCURVE",
"478 316 CURVE",
"467.333 381.333 OFFCURVE",
"454 447.333 OFFCURVE",
"438 518 CURVE SMOOTH",
"334 983 LINE SMOOTH",
"327.333 1015 OFFCURVE",
"292 1037 OFFCURVE",
"248 1037 CURVE SMOOTH",
"0 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
47 45 34 32 31 29 17 14 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
40 23 8 3 3 0 1 30 2 1 2 0 0 14 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
40 23 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
40 23 8 3 3 0 1 30 0 1 0 1 52 2 1 0 3 0 52 4 1 3 3 43 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
40 23 8 3 4 2 1 30 0 1 0 1 52 0 0 2 0 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1626;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"20 0 LINE",
"296 0 LINE SMOOTH",
"336 0 OFFCURVE",
"362 26 OFFCURVE",
"378 54 CURVE SMOOTH",
"530 312 LINE SMOOTH",
"540.667 329.333 OFFCURVE",
"550.333 349.333 OFFCURVE",
"557 372 CURVE",
"742 54 LINE SMOOTH",
"759.333 24.667 OFFCURVE",
"784 0 OFFCURVE",
"828 0 CURVE SMOOTH",
"1126 0 LINE",
"778 550 LINE",
"1112 1037 LINE",
"828 1037 LINE SMOOTH",
"797.333 1037 OFFCURVE",
"777.333 1025.667 OFFCURVE",
"760 995 CURVE SMOOTH",
"628 764 LINE SMOOTH",
"613.333 738.667 OFFCURVE",
"601 717 OFFCURVE",
"593 693 CURVE",
"408 1000 LINE SMOOTH",
"392 1026.667 OFFCURVE",
"376 1037 OFFCURVE",
"332 1037 CURVE SMOOTH",
"34 1037 LINE",
"368 536 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
29 27 18 16 14 12 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
21 15 6 0 4 2 0 1 30 1 1 0 0 14 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
21 15 6 0 4 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 42 values pushed */
21 15 6 0 4 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1146;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1098 1037 LINE",
"848 1037 LINE SMOOTH",
"812 1037 OFFCURVE",
"776.667 1013.667 OFFCURVE",
"766 983 CURVE SMOOTH",
"612 538 LINE SMOOTH",
"604.667 516.667 OFFCURVE",
"597 495.667 OFFCURVE",
"589 475 CURVE SMOOTH",
"581 454.333 OFFCURVE",
"573.667 433.333 OFFCURVE",
"567 412 CURVE",
"557 453.333 OFFCURVE",
"544 494.667 OFFCURVE",
"528 536 CURVE SMOOTH",
"358 983 LINE SMOOTH",
"347.333 1012.333 OFFCURVE",
"322 1037 OFFCURVE",
"274 1037 CURVE SMOOTH",
"0 1037 LINE",
"414 91 LINE",
"214 -329 LINE",
"446 -329 LINE SMOOTH",
"504.667 -329 OFFCURVE",
"525.333 -310.333 OFFCURVE",
"544 -269 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
21 19 8 6 4 2 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
13 5 2 0 1 1 30 2 1 1 1 14 31 0 0 0 16 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
13 5 2 0 1 1 30 0 0 0 1 1 0 36 2 1 1 1 14 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
13 5 2 0 1 1 30 2 1 1 0 0 1 1 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
13 5 2 0 2 1 30 0 2 1 0 1 2 0 50 0 1 2 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1106;
}
);
note = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 240, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1106;
}
);
note = yacute;
unicode = 00FD;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 240, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 1106;
}
);
note = ydieresis;
unicode = 00FF;
},
{
glyphname = z;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"894 1037 LINE",
"92 1037 LINE",
"92 807 LINE",
"541 807 LINE",
"104 228 LINE SMOOTH",
"78.667 193.333 OFFCURVE",
"64 151.333 OFFCURVE",
"64 126 CURVE SMOOTH",
"64 0 LINE",
"884 0 LINE",
"884 230 LINE",
"421 230 LINE",
"854 802 LINE SMOOTH",
"875.333 830 OFFCURVE",
"894 870.333 OFFCURVE",
"894 913 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
15 14 13 12 7 6 5 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 3 0 0 36 0 3 3 14 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 954;
}
);
note = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 178, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 954;
}
);
note = zacute;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 178, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 954;
}
);
note = zcaron;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 180, 0}";
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 954;
}
);
note = zdotaccent;
unicode = 017C;
},
{
glyphname = fi;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"476 0 LINE",
"476 823 LINE",
"814 823 LINE",
"814 0 LINE",
"1124 0 LINE",
"1124 1035 LINE",
"466 1035 LINE",
"466 1040 LINE SMOOTH",
"466 1121.333 OFFCURVE",
"483.833 1184.5 OFFCURVE",
"536.5 1226.5 CURVE SMOOTH",
"589.167 1268.5 OFFCURVE",
"677.333 1290 OFFCURVE",
"816 1290 CURVE SMOOTH",
"850.667 1290 OFFCURVE",
"887.333 1297.667 OFFCURVE",
"890 1331 CURVE SMOOTH",
"900 1488 LINE",
"853.333 1500 OFFCURVE",
"784 1506 OFFCURVE",
"724 1506 CURVE SMOOTH",
"529.333 1506 OFFCURVE",
"389.667 1454.5 OFFCURVE",
"299 1372.5 CURVE SMOOTH",
"208.333 1290.5 OFFCURVE",
"166 1175.333 OFFCURVE",
"166 1050 CURVE SMOOTH",
"166 1035 LINE",
"20 1035 LINE",
"20 913 LINE SMOOTH",
"20 869 OFFCURVE",
"51.333 848.667 OFFCURVE",
"98 838 CURVE SMOOTH",
"166 824 LINE",
"166 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 32 0 32 31 30 29 28 27 26 21 19 14 12 7 6 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
17 16 2 2 1 1 1 5 0 2 30 0 2 2 1 1 0 36 0 1 1 19 31 0 5 5 0 0 0 36 3 1 0 0 14 31 7 6 2 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
17 16 2 2 1 1 1 5 0 2 30 7 6 2 4 5 4 53 3 1 0 0 5 4 0 5 0 0 38 0 2 2 1 1 0 36 0 1 1 19 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
17 16 2 2 1 1 1 5 0 2 30 7 6 2 4 5 4 53 0 1 0 2 0 1 2 1 0 38 3 1 0 5 5 0 0 0 35 3 1 0 0 5 0 0 36 0 5 0 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
17 16 2 2 1 1 1 5 3 2 30 0 0 2 3 2 0 3 50 7 1 6 5 4 5 6 4 50 0 4 4 51 0 1 0 2 0 1 2 1 0 38 0 3 5 5 3 0 0 35 0 3 3 5 0 0 36 0 5 3 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1258;
}
);
note = fi;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"476 0 LINE",
"476 823 LINE",
"690 823 LINE",
"690 1035 LINE",
"466 1035 LINE",
"466 1071 LINE SMOOTH",
"466 1204.333 OFFCURVE",
"533.333 1276 OFFCURVE",
"660 1276 CURVE SMOOTH",
"680 1276 OFFCURVE",
"705.833 1275.167 OFFCURVE",
"737.5 1273.5 CURVE SMOOTH",
"769.167 1271.833 OFFCURVE",
"802 1270.333 OFFCURVE",
"836 1269 CURVE",
"836 0 LINE",
"1144 0 LINE",
"1144 1477 LINE",
"970 1477 LINE SMOOTH",
"910.667 1477 OFFCURVE",
"852.167 1479 OFFCURVE",
"794.5 1483 CURVE SMOOTH",
"736.833 1487 OFFCURVE",
"675.333 1489 OFFCURVE",
"610 1489 CURVE SMOOTH",
"455.333 1489 OFFCURVE",
"344 1437.5 OFFCURVE",
"272 1359.5 CURVE SMOOTH",
"200 1281.5 OFFCURVE",
"166 1176.333 OFFCURVE",
"166 1071 CURVE SMOOTH",
"166 1035 LINE",
"20 1035 LINE",
"20 913 LINE SMOOTH",
"20 869 OFFCURVE",
"51.333 848.667 OFFCURVE",
"98 838 CURVE SMOOTH",
"166 824 LINE",
"166 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 31 0 31 30 29 28 27 24 20 19 18 17 12 7 6 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
1 1 5 0 1 30 0 3 3 1 1 0 36 0 1 1 17 31 0 5 5 0 0 0 36 4 1 0 0 14 31 7 6 2 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
1 1 5 0 1 30 7 6 2 2 5 2 53 0 1 0 3 0 1 3 1 0 38 4 1 0 5 5 0 0 0 35 4 1 0 0 5 0 0 36 0 5 0 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
1 1 5 4 1 30 0 0 3 4 3 0 4 50 7 1 6 5 2 5 6 2 50 0 2 2 51 0 1 0 3 0 1 3 1 0 38 0 4 5 5 4 0 0 35 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1276;
}
);
note = fl;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"646 1229 LINE SMOOTH",
"646 1373.932 OFFCURVE",
"540 1479 OFFCURVE",
"386 1479 CURVE SMOOTH",
"275.333 1479 OFFCURVE",
"178.667 1449.667 OFFCURVE",
"100 1379 CURVE",
"138 1310 LINE",
"152.667 1291.333 OFFCURVE",
"171.333 1270 OFFCURVE",
"202 1270 CURVE SMOOTH",
"267.695 1270 OFFCURVE",
"281.439 1308 OFFCURVE",
"358 1308 CURVE SMOOTH",
"402 1308 OFFCURVE",
"430 1290.333 OFFCURVE",
"430 1229 CURVE SMOOTH",
"430 1213 LINE",
"284.667 1209 OFFCURVE",
"194.333 1179.833 OFFCURVE",
"141 1140.5 CURVE SMOOTH",
"87.667 1101.167 OFFCURVE",
"70 1052.667 OFFCURVE",
"70 1010 CURVE SMOOTH",
"70 898 OFFCURVE",
"142.667 834 OFFCURVE",
"264 834 CURVE SMOOTH",
"344.761 834 OFFCURVE",
"396.043 858.863 OFFCURVE",
"456 911 CURVE",
"468 884 LINE",
"485.333 849.333 OFFCURVE",
"502 842 OFFCURVE",
"542 842 CURVE SMOOTH",
"646 842 LINE"
);
},
{
closed = 1;
nodes = (
"296 980 OFFCURVE",
"282 989.333 OFFCURVE",
"282 1020 CURVE SMOOTH",
"282 1061.297 OFFCURVE",
"327.87 1078.654 OFFCURVE",
"430 1083 CURVE",
"430 1020 LINE",
"398 989.333 OFFCURVE",
"372 980 OFFCURVE",
"336 980 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
41 40 45 44 40 51 41 51 35 33 28 26 23 21 18 17 11 9 2 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
31 1 3 5 43 1 6 7 5 1 0 6 3 30 8 1 6 7 0 7 6 0 50 1 1 0 0 51 0 2 0 7 6 2 7 1 0 38 4 1 3 3 5 1 0 36 0 5 5 17 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
31 1 3 5 43 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 8 1 6 7 0 7 6 0 50 1 1 0 0 51 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 17 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
31 1 3 5 43 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 8 1 6 7 0 7 6 0 50 0 0 1 7 0 1 48 0 1 1 51 0 2 0 7 6 2 7 1 0 38 0 3 3 5 1 0 36 0 5 5 17 3 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
31 1 3 5 43 1 6 7 5 1 0 6 3 30 0 4 3 2 3 4 2 50 8 1 6 7 0 7 6 0 50 0 0 1 7 0 1 48 0 1 1 51 0 5 0 3 4 5 3 1 0 38 0 2 7 7 2 1 0 35 0 2 2 7 1 0 36 0 7 2 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 706;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"294.667 1477 OFFCURVE",
"208.333 1446.833 OFFCURVE",
"147 1391.5 CURVE SMOOTH",
"85.667 1336.167 OFFCURVE",
"50 1256 OFFCURVE",
"50 1156 CURVE SMOOTH",
"50 1054.667 OFFCURVE",
"85.667 973 OFFCURVE",
"147 917 CURVE SMOOTH",
"208.333 861 OFFCURVE",
"294.667 830 OFFCURVE",
"396 830 CURVE SMOOTH",
"496 830 OFFCURVE",
"582 861 OFFCURVE",
"642 917 CURVE SMOOTH",
"702 973 OFFCURVE",
"738 1054.667 OFFCURVE",
"738 1156 CURVE SMOOTH",
"738 1256 OFFCURVE",
"702 1336.167 OFFCURVE",
"642 1391.5 CURVE SMOOTH",
"582 1446.833 OFFCURVE",
"496 1477 OFFCURVE",
"396 1477 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"321.333 1004 OFFCURVE",
"292 1046 OFFCURVE",
"292 1154 CURVE SMOOTH",
"292 1262 OFFCURVE",
"321.333 1303 OFFCURVE",
"396 1303 CURVE SMOOTH",
"464 1303 OFFCURVE",
"496 1262 OFFCURVE",
"496 1154 CURVE SMOOTH",
"496 1046 OFFCURVE",
"464 1004 OFFCURVE",
"396 1004 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 27 25 20 31 21 31 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 17 31 0 1 1 2 1 0 36 5 1 2 2 14 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
5 1 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 4 1 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 788;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = pi;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"162 1037 LINE SMOOTH",
"95.039 1037 OFFCURVE",
"48 981.914 OFFCURVE",
"48 932 CURVE SMOOTH",
"48 824 LINE",
"218 824 LINE",
"218 287 LINE SMOOTH",
"218 220.184 OFFCURVE",
"199.849 199 OFFCURVE",
"126 199 CURVE SMOOTH",
"74 199 OFFCURVE",
"63.333 174.667 OFFCURVE",
"62 148 CURVE SMOOTH",
"54 21 LINE",
"108.667 -5.667 OFFCURVE",
"171.333 -16 OFFCURVE",
"222 -16 CURVE SMOOTH",
"335.333 -16 OFFCURVE",
"412 14.667 OFFCURVE",
"460 68 CURVE SMOOTH",
"508 121.333 OFFCURVE",
"528 196 OFFCURVE",
"528 284 CURVE SMOOTH",
"528 824 LINE",
"814 824 LINE",
"814 0 LINE",
"1124 0 LINE",
"1124 824 LINE",
"1204 824 LINE SMOOTH",
"1264 824 OFFCURVE",
"1298 866.333 OFFCURVE",
"1298 917 CURVE SMOOTH",
"1298 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 35 0 34 29 28 23 21 16 14 9 8 7 6 5 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 3 1 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 1 1 12 31 0 3 3 18 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
18 1 1 4 1 30 0 4 0 1 0 4 1 50 0 1 3 0 1 3 48 0 3 3 51 7 1 6 0 0 6 1 0 35 7 1 6 6 0 0 0 36 5 2 2 0 6 0 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
18 1 1 4 1 30 0 5 6 2 2 5 42 0 0 2 4 2 0 42 0 4 1 2 4 1 48 0 1 3 2 1 3 48 0 3 3 51 7 1 6 5 2 6 1 2 35 7 1 6 6 2 0 0 36 0 2 6 2 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1336;
}
);
note = pi;
unicode = 03C0;
},
{
glyphname = zero;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1120 983.667 OFFCURVE",
"1062.167 1169.333 OFFCURVE",
"965.5 1292 CURVE SMOOTH",
"868.833 1414.667 OFFCURVE",
"732.667 1473 OFFCURVE",
"578 1473 CURVE SMOOTH",
"423.333 1473 OFFCURVE",
"289 1414.667 OFFCURVE",
"193 1292 CURVE SMOOTH",
"97 1169.333 OFFCURVE",
"40 983.667 OFFCURVE",
"40 729 CURVE SMOOTH",
"40 474.333 OFFCURVE",
"97 288.667 OFFCURVE",
"193 166 CURVE SMOOTH",
"289 43.333 OFFCURVE",
"423.333 -16 OFFCURVE",
"578 -16 CURVE SMOOTH",
"732.667 -16 OFFCURVE",
"868.833 43.333 OFFCURVE",
"965.5 166 CURVE SMOOTH",
"1062.167 288.667 OFFCURVE",
"1120 474.333 OFFCURVE",
"1120 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"800 526.333 OFFCURVE",
"772.5 403.5 OFFCURVE",
"730.5 329.5 CURVE SMOOTH",
"688.5 255.5 OFFCURVE",
"632.667 233 OFFCURVE",
"578 233 CURVE SMOOTH",
"523.333 233 OFFCURVE",
"468.167 255.5 OFFCURVE",
"427.5 329.5 CURVE SMOOTH",
"386.833 403.5 OFFCURVE",
"360 526.333 OFFCURVE",
"360 729 CURVE SMOOTH",
"360 930.333 OFFCURVE",
"386.833 1054.667 OFFCURVE",
"427.5 1128 CURVE SMOOTH",
"468.167 1201.333 OFFCURVE",
"523.333 1224 OFFCURVE",
"578 1224 CURVE SMOOTH",
"632.667 1224 OFFCURVE",
"688.5 1201.333 OFFCURVE",
"730.5 1128 CURVE SMOOTH",
"772.5 1054.667 OFFCURVE",
"800 930.333 OFFCURVE",
"800 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"252 0 LINE",
"1082 0 LINE",
"1082 224 LINE",
"842 224 LINE",
"842 1458 LINE",
"586 1458 LINE",
"132 1077 LINE",
"230 947 LINE SMOOTH",
"243.333 929.667 OFFCURVE",
"272.333 911 OFFCURVE",
"307 911 CURVE SMOOTH",
"327 911 OFFCURVE",
"348.667 917.667 OFFCURVE",
"370 935 CURVE SMOOTH",
"535 1072 LINE",
"533 1032.667 OFFCURVE",
"532 995 OFFCURVE",
"532 959 CURVE SMOOTH",
"532 224 LINE",
"252 224 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
18 17 16 15 14 13 9 7 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
12 4 2 1 2 1 30 0 1 2 0 2 1 0 50 0 2 2 11 31 3 1 0 0 4 0 2 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
12 4 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
12 4 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"468.667 1473 OFFCURVE",
"350.5 1438 OFFCURVE",
"260.5 1366 CURVE SMOOTH",
"170.5 1294 OFFCURVE",
"107.333 1186.333 OFFCURVE",
"86 1041 CURVE",
"250 1012 LINE SMOOTH",
"266 1009.333 OFFCURVE",
"281.667 1008 OFFCURVE",
"295 1008 CURVE SMOOTH",
"351 1008 OFFCURVE",
"380.667 1033 OFFCURVE",
"402 1093 CURVE SMOOTH",
"429.163 1166.34 OFFCURVE",
"494.725 1220 OFFCURVE",
"584 1220 CURVE SMOOTH",
"697.333 1220 OFFCURVE",
"752 1156 OFFCURVE",
"752 1040 CURVE SMOOTH",
"752 969.333 OFFCURVE",
"734.667 907.833 OFFCURVE",
"700 844.5 CURVE SMOOTH",
"665.333 781.167 OFFCURVE",
"612 717 OFFCURVE",
"540 645 CURVE SMOOTH",
"120 222 LINE",
"80 186 OFFCURVE",
"66 138.667 OFFCURVE",
"66 100 CURVE SMOOTH",
"66 0 LINE",
"1090 0 LINE",
"1090 180 LINE SMOOTH",
"1090 240 OFFCURVE",
"1048.667 280 OFFCURVE",
"982 280 CURVE SMOOTH",
"710 280 LINE SMOOTH",
"647.333 280 OFFCURVE",
"574.333 266.333 OFFCURVE",
"501 245 CURVE",
"786 537 LINE SMOOTH",
"863.333 615.667 OFFCURVE",
"934 690.5 OFFCURVE",
"986 772.5 CURVE SMOOTH",
"1038 854.5 OFFCURVE",
"1070 943.333 OFFCURVE",
"1070 1050 CURVE SMOOTH",
"1070 1174 OFFCURVE",
"1025.333 1279.333 OFFCURVE",
"944 1354 CURVE SMOOTH",
"862.667 1428.667 OFFCURVE",
"746 1473 OFFCURVE",
"602 1473 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 42 40 34 32 20 19 16 13 0 49 1 49 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
45 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 0 3 3 0 1 0 36 5 1 0 0 17 31 0 1 1 2 0 0 36 0 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
45 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"496.667 1473 OFFCURVE",
"378.5 1438 OFFCURVE",
"288.5 1366 CURVE SMOOTH",
"198.5 1294 OFFCURVE",
"135.333 1186.333 OFFCURVE",
"114 1041 CURVE",
"278 1012 LINE SMOOTH",
"294 1009.333 OFFCURVE",
"309.667 1008 OFFCURVE",
"323 1008 CURVE SMOOTH",
"379 1008 OFFCURVE",
"408.667 1033 OFFCURVE",
"430 1093 CURVE SMOOTH",
"457.163 1166.34 OFFCURVE",
"522.725 1220 OFFCURVE",
"612 1220 CURVE SMOOTH",
"725.333 1220 OFFCURVE",
"780 1155.667 OFFCURVE",
"780 1041 CURVE SMOOTH",
"780 985 OFFCURVE",
"770.167 937.167 OFFCURVE",
"729.5 904.5 CURVE SMOOTH",
"688.833 871.833 OFFCURVE",
"617.333 852 OFFCURVE",
"496 852 CURVE",
"496 638 LINE",
"640 638 OFFCURVE",
"715 618 OFFCURVE",
"755 582 CURVE SMOOTH",
"795 546 OFFCURVE",
"798 495.667 OFFCURVE",
"798 433 CURVE SMOOTH",
"798 329.787 OFFCURVE",
"720.924 237 OFFCURVE",
"592 237 CURVE SMOOTH",
"501.333 237 OFFCURVE",
"438 284.333 OFFCURVE",
"378 395 CURVE SMOOTH",
"360.667 427 OFFCURVE",
"324.667 444 OFFCURVE",
"282 444 CURVE SMOOTH",
"259.333 444 OFFCURVE",
"236 440.667 OFFCURVE",
"212 430 CURVE SMOOTH",
"74 374 LINE",
"120.667 238 OFFCURVE",
"183 139.833 OFFCURVE",
"267 76.5 CURVE SMOOTH",
"351 13.167 OFFCURVE",
"457.333 -16 OFFCURVE",
"596 -16 CURVE SMOOTH",
"730.667 -16 OFFCURVE",
"859.5 22 OFFCURVE",
"953.5 98 CURVE SMOOTH",
"1047.5 174 OFFCURVE",
"1108 288.333 OFFCURVE",
"1108 443 CURVE SMOOTH",
"1108 606.333 OFFCURVE",
"1027.333 716 OFFCURVE",
"866 772 CURVE",
"935.333 796 OFFCURVE",
"989.833 831.167 OFFCURVE",
"1026.5 882.5 CURVE SMOOTH",
"1063.167 933.833 OFFCURVE",
"1082 1003 OFFCURVE",
"1082 1095 CURVE SMOOTH",
"1082 1196.333 OFFCURVE",
"1041.333 1290.667 OFFCURVE",
"964 1360 CURVE SMOOTH",
"886.667 1429.333 OFFCURVE",
"774 1473 OFFCURVE",
"630 1473 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 60 58 52 50 44 43 42 41 33 31 27 25 18 16 0 67 1 67 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
63 1 7 6 10 1 4 5 22 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 0 5 0 4 2 5 4 1 0 38 0 6 6 0 1 0 36 8 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
63 1 7 6 10 1 4 5 22 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"976 1457 LINE",
"680 1457 LINE",
"6 551 LINE",
"38 398 LINE SMOOTH",
"46 362 OFFCURVE",
"81.333 335 OFFCURVE",
"120 335 CURVE SMOOTH",
"706 335 LINE",
"706 0 LINE",
"976 0 LINE",
"976 335 LINE",
"1066 335 LINE SMOOTH",
"1104.667 335 OFFCURVE",
"1126 361.333 OFFCURVE",
"1126 392 CURVE SMOOTH",
"1126 566 LINE",
"976 566 LINE"
);
},
{
closed = 1;
nodes = (
"706 566 LINE",
"331 566 LINE",
"716 1105 LINE",
"709.333 1047.667 OFFCURVE",
"706 992.667 OFFCURVE",
"706 946 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
22 21 16 15 11 9 8 7 6 4 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
20 1 0 4 1 30 5 1 0 3 1 1 2 0 1 1 2 38 0 4 4 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
20 1 0 4 1 30 0 4 0 4 52 0 2 1 2 53 5 1 0 1 1 0 0 0 35 5 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
20 1 0 4 1 30 0 4 0 4 52 0 2 1 2 53 0 0 5 1 0 0 0 35 0 5 0 3 1 5 3 1 2 38 0 0 0 1 1 0 36 0 1 0 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"998 1457 LINE",
"252 1457 LINE",
"128 728 LINE",
"320 676 LINE",
"382.667 700.667 OFFCURVE",
"446.667 713 OFFCURVE",
"512 713 CURVE SMOOTH",
"658.667 713 OFFCURVE",
"742 637.333 OFFCURVE",
"742 496 CURVE SMOOTH",
"742 345.479 OFFCURVE",
"672.825 235 OFFCURVE",
"512 235 CURVE SMOOTH",
"429.333 235 OFFCURVE",
"376.5 260.5 OFFCURVE",
"334.5 286.5 CURVE SMOOTH",
"295.9 310.395 OFFCURVE",
"257.472 339 OFFCURVE",
"220 339 CURVE SMOOTH",
"189.333 339 OFFCURVE",
"162 324.667 OFFCURVE",
"142 298 CURVE SMOOTH",
"46 170 LINE",
"98 119.333 OFFCURVE",
"162.167 73.5 OFFCURVE",
"237.5 39.5 CURVE SMOOTH",
"312.833 5.5 OFFCURVE",
"399.333 -16 OFFCURVE",
"494 -16 CURVE SMOOTH",
"656.667 -16 OFFCURVE",
"796.333 37.667 OFFCURVE",
"895 131 CURVE SMOOTH",
"993.667 224.333 OFFCURVE",
"1052 355 OFFCURVE",
"1052 511 CURVE SMOOTH",
"1052 635 OFFCURVE",
"1011 746.833 OFFCURVE",
"931 827.5 CURVE SMOOTH",
"851 908.167 OFFCURVE",
"733.333 958 OFFCURVE",
"580 958 CURVE SMOOTH",
"532 958 OFFCURVE",
"481.667 953.333 OFFCURVE",
"427 944 CURVE",
"468 1185 LINE",
"816 1185 LINE SMOOTH",
"936.725 1185 OFFCURVE",
"998 1236.105 OFFCURVE",
"998 1329 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
47 46 43 41 35 33 30 28 21 19 11 9 6 4 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
45 7 2 5 1 44 1 3 5 25 1 2 4 3 30 0 3 5 4 5 3 4 50 0 1 0 5 3 1 5 1 0 38 0 0 0 6 0 0 36 0 6 6 11 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
45 7 2 5 1 44 1 3 5 25 1 2 4 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"629.333 923 OFFCURVE",
"578.667 913.333 OFFCURVE",
"532 896 CURVE",
"544 910.667 OFFCURVE",
"556.667 926.333 OFFCURVE",
"570 941 CURVE",
"1002 1457 LINE",
"726 1457 LINE SMOOTH",
"651.333 1457 OFFCURVE",
"589.333 1426 OFFCURVE",
"560 1386 CURVE SMOOTH",
"232 943 LINE SMOOTH",
"122.667 793.667 OFFCURVE",
"66 651.333 OFFCURVE",
"66 506 CURVE SMOOTH",
"66 352.667 OFFCURVE",
"114.5 222 OFFCURVE",
"204.5 130 CURVE SMOOTH",
"294.5 38 OFFCURVE",
"425.333 -16 OFFCURVE",
"588 -16 CURVE SMOOTH",
"746.667 -16 OFFCURVE",
"879.833 41.167 OFFCURVE",
"972.5 132.5 CURVE SMOOTH",
"1065.167 223.833 OFFCURVE",
"1118 350 OFFCURVE",
"1118 486 CURVE SMOOTH",
"1118 635.333 OFFCURVE",
"1063.333 745 OFFCURVE",
"982 817 CURVE SMOOTH",
"900.667 889 OFFCURVE",
"793.333 923 OFFCURVE",
"688 923 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"364 603.769 OFFCURVE",
"451.167 699 OFFCURVE",
"578 699 CURVE SMOOTH",
"718.424 699 OFFCURVE",
"808 609.648 OFFCURVE",
"808 463 CURVE SMOOTH",
"808 331.239 OFFCURVE",
"709.701 229 OFFCURVE",
"582 229 CURVE SMOOTH",
"434.922 229 OFFCURVE",
"364 318.828 OFFCURVE",
"364 464 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 46 44 36 34 23 21 11 9 0 29 1 29 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
27 1 4 0 1 30 5 1 0 2 4 2 0 4 50 0 4 3 2 4 3 48 0 2 2 11 31 0 3 3 1 1 2 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
27 1 4 0 1 30 0 2 0 2 52 5 1 0 4 0 52 0 4 3 4 52 0 3 1 1 3 1 0 35 0 3 3 1 1 2 36 0 1 3 1 1 2 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"82 1457 LINE",
"82 1253 LINE SMOOTH",
"82 1217.501 OFFCURVE",
"115.953 1185 OFFCURVE",
"152 1185 CURVE SMOOTH",
"793 1185 LINE",
"754.333 1143.667 OFFCURVE",
"722 1100.333 OFFCURVE",
"694 1043 CURVE SMOOTH",
"174 0 LINE",
"400 0 LINE SMOOTH",
"485.333 0 OFFCURVE",
"535.333 44.667 OFFCURVE",
"562 102 CURVE SMOOTH",
"1071 1180 LINE SMOOTH",
"1085.667 1212 OFFCURVE",
"1106 1253.667 OFFCURVE",
"1106 1327 CURVE SMOOTH",
"1106 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
0 0 0 20 0 20 15 13 9 7 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
0 1 1 2 0 0 36 3 1 2 2 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
0 0 1 0 53 3 1 2 1 1 2 0 0 35 3 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"734.667 -16 OFFCURVE",
"865.167 27.167 OFFCURVE",
"956.5 102.5 CURVE SMOOTH",
"1047.833 177.833 OFFCURVE",
"1100 286.333 OFFCURVE",
"1100 417 CURVE SMOOTH",
"1100 495.667 OFFCURVE",
"1081.833 566.5 OFFCURVE",
"1042.5 624.5 CURVE SMOOTH",
"1003.167 682.5 OFFCURVE",
"941.667 728.333 OFFCURVE",
"855 759 CURVE",
"987 819 OFFCURVE",
"1052 926.667 OFFCURVE",
"1052 1076 CURVE SMOOTH",
"1052 1189.333 OFFCURVE",
"1003 1288.333 OFFCURVE",
"919 1359 CURVE SMOOTH",
"835 1429.667 OFFCURVE",
"717.333 1473 OFFCURVE",
"580 1473 CURVE SMOOTH",
"442.667 1473 OFFCURVE",
"325 1429.667 OFFCURVE",
"241 1359 CURVE SMOOTH",
"157 1288.333 OFFCURVE",
"108 1189.333 OFFCURVE",
"108 1076 CURVE SMOOTH",
"108 926.667 OFFCURVE",
"171.667 819 OFFCURVE",
"305 759 CURVE",
"217 728.333 OFFCURVE",
"155.833 682.5 OFFCURVE",
"116.5 624.5 CURVE SMOOTH",
"77.167 566.5 OFFCURVE",
"60 495.667 OFFCURVE",
"60 417 CURVE SMOOTH",
"60 286.333 OFFCURVE",
"112.167 177.833 OFFCURVE",
"203.5 102.5 CURVE SMOOTH",
"294.833 27.167 OFFCURVE",
"425.333 -16 OFFCURVE",
"580 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"444.923 218 OFFCURVE",
"380 303.326 OFFCURVE",
"380 423 CURVE SMOOTH",
"380 554.702 OFFCURVE",
"433.883 634 OFFCURVE",
"580 634 CURVE SMOOTH",
"726.117 634 OFFCURVE",
"780 554.702 OFFCURVE",
"780 423 CURVE SMOOTH",
"780 302.894 OFFCURVE",
"714.706 218 OFFCURVE",
"580 218 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"448.685 870 OFFCURVE",
"410 958.254 OFFCURVE",
"410 1070 CURVE SMOOTH",
"410 1167.805 OFFCURVE",
"461.977 1247 OFFCURVE",
"580 1247 CURVE SMOOTH",
"697.209 1247 OFFCURVE",
"750 1167.778 OFFCURVE",
"750 1070 CURVE SMOOTH",
"750 958.254 OFFCURVE",
"711.315 870 OFFCURVE",
"580 870 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
57 56 37 36 1 0 67 65 56 75 57 75 47 45 36 55 37 55 19 17 0 35 1 35 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
26 10 2 3 4 1 30 8 1 4 0 3 2 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 17 31 7 1 2 2 0 1 0 36 6 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
26 10 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 0 0 2 1 0 35 7 1 2 2 0 1 0 36 6 1 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"589.333 568 OFFCURVE",
"661 584 OFFCURVE",
"721 616 CURVE",
"705 594.667 OFFCURVE",
"688.667 574.667 OFFCURVE",
"670 552 CURVE SMOOTH",
"208 0 LINE",
"494 0 LINE SMOOTH",
"566 0 OFFCURVE",
"627.333 30.333 OFFCURVE",
"654 69 CURVE SMOOTH",
"968 515 LINE SMOOTH",
"1016 583 OFFCURVE",
"1055.167 651.833 OFFCURVE",
"1082.5 728.5 CURVE SMOOTH",
"1109.833 805.167 OFFCURVE",
"1126 888 OFFCURVE",
"1126 984 CURVE SMOOTH",
"1126 1128 OFFCURVE",
"1078.5 1249.333 OFFCURVE",
"992.5 1336 CURVE SMOOTH",
"906.5 1422.667 OFFCURVE",
"781.333 1473 OFFCURVE",
"624 1473 CURVE SMOOTH",
"469.333 1473 OFFCURVE",
"342.5 1418 OFFCURVE",
"252.5 1330 CURVE SMOOTH",
"162.5 1242 OFFCURVE",
"112 1121 OFFCURVE",
"112 989 CURVE SMOOTH",
"112 845 OFFCURVE",
"164.833 740.333 OFFCURVE",
"241.5 671 CURVE SMOOTH",
"318.167 601.667 OFFCURVE",
"417.333 568 OFFCURVE",
"512 568 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"830 880 OFFCURVE",
"756 794 OFFCURVE",
"624 794 CURVE SMOOTH",
"489.333 794 OFFCURVE",
"422 866.667 OFFCURVE",
"422 1012 CURVE SMOOTH",
"422 1135.349 OFFCURVE",
"496.7 1228 OFFCURVE",
"620 1228 CURVE SMOOTH",
"746.899 1228 OFFCURVE",
"830 1149.616 OFFCURVE",
"830 1012 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 45 43 38 36 25 23 11 9 0 31 1 31 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
29 1 0 4 1 30 0 4 5 1 0 2 4 0 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
29 1 0 4 1 30 0 2 0 2 53 0 1 0 3 4 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 5 1 0 4 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"150 900 LINE",
"602 900 LINE",
"602 1036 LINE",
"500 1036 LINE",
"500 1650 LINE",
"314 1650 LINE",
"72 1451 LINE",
"140 1361 LINE SMOOTH",
"149.333 1349 OFFCURVE",
"170 1337 OFFCURVE",
"194 1337 CURVE SMOOTH",
"208.667 1337 OFFCURVE",
"222.667 1341.667 OFFCURVE",
"236 1351 CURVE SMOOTH",
"286 1388 LINE",
"280 1334 LINE",
"280 1036 LINE",
"150 1036 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
16 15 14 13 12 11 7 5 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
10 3 2 1 2 2 1 0 1 2 30 0 2 1 2 52 0 1 0 1 52 0 4 4 0 0 0 36 3 1 0 0 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
10 3 2 1 2 2 1 0 1 2 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
10 3 2 1 2 2 1 0 1 2 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = onesuperior;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"191.637 1658 OFFCURVE",
"79.543 1583.569 OFFCURVE",
"56 1424 CURVE",
"180 1405 LINE SMOOTH",
"190.667 1403 OFFCURVE",
"200.667 1402 OFFCURVE",
"210 1402 CURVE SMOOTH",
"247.333 1402 OFFCURVE",
"263.333 1418.333 OFFCURVE",
"282 1445 CURVE",
"298 1474.333 OFFCURVE",
"312 1487 OFFCURVE",
"340 1487 CURVE SMOOTH",
"374.667 1487 OFFCURVE",
"386 1458 OFFCURVE",
"386 1426 CURVE SMOOTH",
"386 1374.794 OFFCURVE",
"338.965 1296.965 OFFCURVE",
"290 1248 CURVE SMOOTH",
"92 1054 LINE SMOOTH",
"65.333 1028.667 OFFCURVE",
"56 995.667 OFFCURVE",
"56 969 CURVE SMOOTH",
"56 900 LINE",
"626 900 LINE",
"626 1026 LINE SMOOTH",
"626 1067.333 OFFCURVE",
"598.667 1094 OFFCURVE",
"552 1094 CURVE SMOOTH",
"484 1094 LINE SMOOTH",
"449.333 1094 OFFCURVE",
"405 1085.333 OFFCURVE",
"361 1072 CURVE",
"462 1175 LINE SMOOTH",
"537.743 1256.153 OFFCURVE",
"610 1326.06 OFFCURVE",
"610 1434 CURVE SMOOTH",
"610 1563.445 OFFCURVE",
"513.509 1658 OFFCURVE",
"352 1658 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 40 38 34 32 20 19 16 13 0 46 1 46 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
42 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 2 2 1 1 0 36 0 1 1 20 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
42 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = twosuperior;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"216.003 1658 OFFCURVE",
"105.157 1580.956 OFFCURVE",
"82 1424 CURVE",
"196 1405 LINE SMOOTH",
"208.667 1403 OFFCURVE",
"219.667 1402 OFFCURVE",
"229 1402 CURVE SMOOTH",
"262.333 1402 OFFCURVE",
"276.667 1416.333 OFFCURVE",
"294 1447 CURVE",
"306 1471 OFFCURVE",
"320 1483 OFFCURVE",
"352 1483 CURVE SMOOTH",
"394.667 1483 OFFCURVE",
"404 1456.667 OFFCURVE",
"404 1422 CURVE SMOOTH",
"404 1366.211 OFFCURVE",
"376.11 1348 OFFCURVE",
"280 1348 CURVE",
"280 1208 LINE",
"373.459 1208 OFFCURVE",
"406 1202.594 OFFCURVE",
"406 1132 CURVE SMOOTH",
"406 1093.333 OFFCURVE",
"382 1068 OFFCURVE",
"342 1068 CURVE SMOOTH",
"318 1068 OFFCURVE",
"290.667 1079.333 OFFCURVE",
"272 1114 CURVE SMOOTH",
"260.667 1135.333 OFFCURVE",
"239.333 1146 OFFCURVE",
"208 1146 CURVE SMOOTH",
"192.667 1146 OFFCURVE",
"176.667 1143 OFFCURVE",
"160 1137 CURVE SMOOTH",
"64 1099 LINE",
"120.22 938.007 OFFCURVE",
"207.819 892 OFFCURVE",
"354 892 CURVE SMOOTH",
"495.91 892 OFFCURVE",
"628 973.275 OFFCURVE",
"628 1140 CURVE SMOOTH",
"628 1216 OFFCURVE",
"590 1260.667 OFFCURVE",
"514 1286 CURVE",
"587.333 1320.667 OFFCURVE",
"616 1378.333 OFFCURVE",
"616 1461 CURVE SMOOTH",
"616 1567.122 OFFCURVE",
"515.621 1658 OFFCURVE",
"364 1658 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 53 51 47 45 39 38 37 36 30 28 25 23 17 15 0 59 1 59 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
66 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
55 1 7 6 8 1 4 5 21 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 1 1 3 1 0 36 0 3 3 20 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
55 1 7 6 8 1 4 5 21 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 668;
}
);
note = threesuperior;
unicode = 00B3;
},
{
glyphname = fraction;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"974 1457 LINE",
"842 1457 LINE SMOOTH",
"770 1457 OFFCURVE",
"722 1421.667 OFFCURVE",
"682 1359 CURVE SMOOTH",
"-166 0 LINE",
"-34 0 LINE SMOOTH",
"33.389 0 OFFCURVE",
"77.365 21.507 OFFCURVE",
"118 85 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
11 9 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 800;
}
);
note = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"967.637 758 OFFCURVE",
"855.543 683.569 OFFCURVE",
"832 524 CURVE",
"956 505 LINE SMOOTH",
"966.667 503 OFFCURVE",
"976.667 502 OFFCURVE",
"986 502 CURVE SMOOTH",
"1023.333 502 OFFCURVE",
"1039.333 518.333 OFFCURVE",
"1058 545 CURVE",
"1074 574.333 OFFCURVE",
"1088 587 OFFCURVE",
"1116 587 CURVE SMOOTH",
"1150.667 587 OFFCURVE",
"1162 558 OFFCURVE",
"1162 526 CURVE SMOOTH",
"1162 474.794 OFFCURVE",
"1114.965 396.965 OFFCURVE",
"1066 348 CURVE SMOOTH",
"868 154 LINE SMOOTH",
"841.333 128.667 OFFCURVE",
"832 95.667 OFFCURVE",
"832 69 CURVE SMOOTH",
"832 0 LINE",
"1402 0 LINE",
"1402 126 LINE SMOOTH",
"1402 167.333 OFFCURVE",
"1374.667 194 OFFCURVE",
"1328 194 CURVE SMOOTH",
"1260 194 LINE SMOOTH",
"1225.333 194 OFFCURVE",
"1181 185.333 OFFCURVE",
"1137 172 CURVE",
"1238 275 LINE SMOOTH",
"1313.743 356.153 OFFCURVE",
"1386 426.06 OFFCURVE",
"1386 534 CURVE SMOOTH",
"1386 663.445 OFFCURVE",
"1289.509 758 OFFCURVE",
"1128 758 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"130 708 LINE",
"582 708 LINE",
"582 844 LINE",
"480 844 LINE",
"480 1458 LINE",
"294 1458 LINE",
"52 1259 LINE",
"120 1169 LINE SMOOTH",
"129.333 1157 OFFCURVE",
"150 1145 OFFCURVE",
"174 1145 CURVE SMOOTH",
"188.667 1145 OFFCURVE",
"202.667 1149.667 OFFCURVE",
"216 1159 CURVE SMOOTH",
"266 1196 LINE",
"260 1142 LINE",
"260 844 LINE",
"130 844 LINE"
);
},
{
closed = 1;
nodes = (
"1294 1457 LINE",
"1162 1457 LINE SMOOTH",
"1090 1457 OFFCURVE",
"1042 1421.667 OFFCURVE",
"1002 1359 CURVE SMOOTH",
"154 0 LINE",
"286 0 LINE SMOOTH",
"353.389 0 OFFCURVE",
"397.365 21.507 OFFCURVE",
"438 85 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
1 0 75 73 70 68 63 62 61 60 59 58 54 52 48 47 40 38 34 32 20 19 16 13 0 46 1 46 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
57 50 2 6 7 49 1 5 6 42 1 4 3 11 1 2 1 4 30 0 6 7 5 7 6 5 50 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 0 38 11 1 7 7 11 31 0 1 1 2 1 0 36 10 1 2 2 12 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
57 50 2 6 7 49 1 5 6 42 1 4 3 11 1 2 1 4 30 11 1 7 6 7 52 0 6 5 6 52 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 10 1 2 1 2 1 0 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 88 values pushed */
57 50 2 6 11 49 1 5 6 42 1 4 3 11 1 2 1 4 30 0 7 11 7 52 0 11 6 11 52 0 6 5 6 52 0 4 3 1 3 4 1 50 8 1 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 2 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 10 1 2 1 2 1 0 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 101 values pushed */
57 50 2 6 11 49 1 5 6 42 1 4 3 11 1 10 1 4 30 0 7 11 7 52 0 11 6 11 52 0 6 5 6 52 0 8 5 0 5 8 42 0 4 3 1 3 4 1 50 0 10 1 2 1 10 2 50 0 5 0 9 3 5 9 0 2 38 12 1 0 0 3 4 0 3 1 2 38 0 1 10 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1342 750 LINE",
"1128 750 LINE",
"800 285 LINE",
"818 193 LINE SMOOTH",
"823.333 167.667 OFFCURVE",
"845.333 149 OFFCURVE",
"884 149 CURVE SMOOTH",
"1158 149 LINE",
"1158 0 LINE",
"1342 0 LINE",
"1342 149 LINE",
"1382 149 LINE SMOOTH",
"1406 149 OFFCURVE",
"1422 168 OFFCURVE",
"1422 188 CURVE SMOOTH",
"1422 295 LINE",
"1342 295 LINE"
);
},
{
closed = 1;
nodes = (
"130 708 LINE",
"582 708 LINE",
"582 844 LINE",
"480 844 LINE",
"480 1458 LINE",
"294 1458 LINE",
"52 1259 LINE",
"120 1169 LINE SMOOTH",
"129.333 1157 OFFCURVE",
"150 1145 OFFCURVE",
"174 1145 CURVE SMOOTH",
"188.667 1145 OFFCURVE",
"202.667 1149.667 OFFCURVE",
"216 1159 CURVE SMOOTH",
"266 1196 LINE",
"260 1142 LINE",
"260 844 LINE",
"130 844 LINE"
);
},
{
closed = 1;
nodes = (
"1158 295 LINE",
"999 295 LINE",
"1165 525 LINE",
"1159.667 481 OFFCURVE",
"1158 438.667 OFFCURVE",
"1158 404 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1332 1457 LINE",
"1200 1457 LINE SMOOTH",
"1128 1457 OFFCURVE",
"1080 1421.667 OFFCURVE",
"1040 1359 CURVE SMOOTH",
"192 0 LINE",
"324 0 LINE SMOOTH",
"391.389 0 OFFCURVE",
"435.365 21.507 OFFCURVE",
"476 85 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
51 49 46 44 39 38 33 32 31 30 29 28 24 22 18 17 16 15 11 9 8 7 6 4 1 0 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
27 20 2 6 7 19 1 5 6 37 1 0 9 3 30 0 6 7 5 7 6 5 50 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 12 1 7 7 11 31 0 4 4 2 1 0 36 11 1 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
27 20 2 6 7 19 1 5 6 37 1 0 9 3 30 12 1 7 6 7 52 0 6 5 6 52 0 4 9 2 4 0 0 35 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 1 0 36 11 1 2 4 2 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
27 20 2 6 12 19 1 5 6 37 1 0 9 3 30 0 7 12 7 52 0 12 6 12 52 0 6 5 6 52 0 4 9 2 4 0 0 35 8 1 5 0 9 0 5 9 0 2 38 10 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 1 2 36 11 1 2 4 2 1 2 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 98 values pushed */
27 20 2 6 12 19 1 5 6 37 1 0 9 3 30 0 7 12 7 52 0 12 6 12 52 0 6 5 6 52 0 8 5 4 5 8 42 0 11 1 2 1 11 2 50 0 4 9 2 4 0 0 35 0 5 0 9 0 5 9 0 2 38 0 10 0 3 1 10 3 1 0 38 0 0 0 1 11 0 1 1 0 38 0 4 4 2 0 2 36 0 2 4 2 0 2 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1342 750 LINE",
"1128 750 LINE",
"800 285 LINE",
"818 193 LINE SMOOTH",
"823.333 167.667 OFFCURVE",
"845.333 149 OFFCURVE",
"884 149 CURVE SMOOTH",
"1158 149 LINE",
"1158 0 LINE",
"1342 0 LINE",
"1342 149 LINE",
"1382 149 LINE SMOOTH",
"1406 149 OFFCURVE",
"1422 168 OFFCURVE",
"1422 188 CURVE SMOOTH",
"1422 295 LINE",
"1342 295 LINE"
);
},
{
closed = 1;
nodes = (
"196.003 1466 OFFCURVE",
"85.157 1388.956 OFFCURVE",
"62 1232 CURVE",
"176 1213 LINE SMOOTH",
"188.667 1211 OFFCURVE",
"199.667 1210 OFFCURVE",
"209 1210 CURVE SMOOTH",
"242.333 1210 OFFCURVE",
"256.667 1224.333 OFFCURVE",
"274 1255 CURVE",
"286 1279 OFFCURVE",
"300 1291 OFFCURVE",
"332 1291 CURVE SMOOTH",
"374.667 1291 OFFCURVE",
"384 1264.667 OFFCURVE",
"384 1230 CURVE SMOOTH",
"384 1174.211 OFFCURVE",
"356.11 1156 OFFCURVE",
"260 1156 CURVE",
"260 1016 LINE",
"353.459 1016 OFFCURVE",
"386 1010.594 OFFCURVE",
"386 940 CURVE SMOOTH",
"386 901.333 OFFCURVE",
"362 876 OFFCURVE",
"322 876 CURVE SMOOTH",
"298 876 OFFCURVE",
"270.667 887.333 OFFCURVE",
"252 922 CURVE SMOOTH",
"240.667 943.333 OFFCURVE",
"219.333 954 OFFCURVE",
"188 954 CURVE SMOOTH",
"172.667 954 OFFCURVE",
"156.667 951 OFFCURVE",
"140 945 CURVE SMOOTH",
"44 907 LINE",
"100.22 746.007 OFFCURVE",
"187.819 700 OFFCURVE",
"334 700 CURVE SMOOTH",
"475.91 700 OFFCURVE",
"608 781.275 OFFCURVE",
"608 948 CURVE SMOOTH",
"608 1024 OFFCURVE",
"570 1068.667 OFFCURVE",
"494 1094 CURVE",
"567.333 1128.667 OFFCURVE",
"596 1186.333 OFFCURVE",
"596 1269 CURVE SMOOTH",
"596 1375.122 OFFCURVE",
"495.621 1466 OFFCURVE",
"344 1466 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1158 295 LINE",
"999 295 LINE",
"1165 525 LINE",
"1159.667 481 OFFCURVE",
"1158 438.667 OFFCURVE",
"1158 404 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1332 1457 LINE",
"1200 1457 LINE SMOOTH",
"1128 1457 OFFCURVE",
"1080 1421.667 OFFCURVE",
"1040 1359 CURVE SMOOTH",
"192 0 LINE",
"324 0 LINE SMOOTH",
"391.389 0 OFFCURVE",
"435.365 21.507 OFFCURVE",
"476 85 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
18 17 94 92 89 87 82 81 70 68 64 62 56 55 54 53 47 45 42 40 34 32 17 76 18 76 16 15 11 9 8 7 6 4 1 0 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 8 7 42 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 11 11 5 1 0 36 15 16 2 5 5 11 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 8 7 42 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 11 11 5 1 0 36 15 16 2 5 5 17 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 8 7 42 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 11 11 5 1 0 36 15 16 2 5 5 11 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 8 7 42 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 11 11 5 1 0 36 15 16 2 5 5 17 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
52 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 95 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 11 11 5 1 0 36 15 16 2 5 5 17 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 99 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 10 0 9 7 10 9 1 0 38 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 15 15 11 31 0 11 11 5 1 0 36 16 1 5 5 17 31 0 4 4 2 1 2 36 14 1 2 2 12 2 32 11 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 109 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 15 5 11 5 15 11 50 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 16 1 5 0 11 12 5 11 1 0 38 0 10 0 9 7 10 9 1 0 38 0 4 6 2 4 0 0 35 0 8 0 6 0 8 6 1 2 38 13 1 0 3 1 1 2 0 1 1 0 38 0 4 4 2 1 2 36 14 1 2 4 2 1 2 33 11 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 124 values pushed */
72 1 12 11 25 1 9 10 38 1 8 7 80 1 0 6 4 30 0 15 5 11 5 15 11 50 0 12 11 10 11 12 10 50 0 7 9 8 9 7 8 50 0 14 1 2 1 14 2 50 16 1 5 0 11 12 5 11 1 0 38 0 10 0 9 7 10 9 1 0 38 0 4 6 2 4 0 0 35 0 8 0 6 0 8 6 1 2 38 0 13 0 3 1 13 3 1 0 38 0 0 0 1 14 0 1 1 0 38 0 4 4 2 0 2 36 0 2 4 2 0 2 33 13 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1424;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = period;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"60 59.388 OFFCURVE",
"136.294 -14 OFFCURVE",
"236 -14 CURVE SMOOTH",
"334.829 -14 OFFCURVE",
"412 60.052 OFFCURVE",
"412 157 CURVE SMOOTH",
"412 251.99 OFFCURVE",
"334.331 328 OFFCURVE",
"236 328 CURVE SMOOTH",
"136.786 328 OFFCURVE",
"60 252.642 OFFCURVE",
"60 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"68 83.193 OFFCURVE",
"129.02 12.798 OFFCURVE",
"220 5 CURVE",
"202.556 -64.776 OFFCURVE",
"146.74 -124.26 OFFCURVE",
"110 -161 CURVE",
"96.667 -173 OFFCURVE",
"86 -189.667 OFFCURVE",
"86 -203 CURVE SMOOTH",
"86 -221.667 OFFCURVE",
"93.333 -232.333 OFFCURVE",
"108 -247 CURVE",
"162 -295 LINE",
"243.333 -235 OFFCURVE",
"306.5 -159 OFFCURVE",
"348.5 -83 CURVE SMOOTH",
"390.5 -7 OFFCURVE",
"412 70.333 OFFCURVE",
"412 137 CURVE SMOOTH",
"412 242.846 OFFCURVE",
"351.89 328 OFFCURVE",
"236 328 CURVE SMOOTH",
"138.481 328 OFFCURVE",
"68 262.039 OFFCURVE",
"68 176 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 4 1 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 10 values pushed */
27 15 2 0 27 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"100 59.388 OFFCURVE",
"176.294 -14 OFFCURVE",
"276 -14 CURVE SMOOTH",
"374.829 -14 OFFCURVE",
"452 60.052 OFFCURVE",
"452 157 CURVE SMOOTH",
"452 251.99 OFFCURVE",
"374.331 328 OFFCURVE",
"276 328 CURVE SMOOTH",
"176.786 328 OFFCURVE",
"100 252.642 OFFCURVE",
"100 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"100 742.388 OFFCURVE",
"176.294 669 OFFCURVE",
"276 669 CURVE SMOOTH",
"374.829 669 OFFCURVE",
"452 743.052 OFFCURVE",
"452 840 CURVE SMOOTH",
"452 934.99 OFFCURVE",
"374.331 1011 OFFCURVE",
"276 1011 CURVE SMOOTH",
"176.786 1011 OFFCURVE",
"100 935.642 OFFCURVE",
"100 840 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 18 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"108 83.193 OFFCURVE",
"169.02 12.798 OFFCURVE",
"260 5 CURVE",
"242.556 -64.776 OFFCURVE",
"186.74 -124.26 OFFCURVE",
"150 -161 CURVE",
"136.667 -173 OFFCURVE",
"126 -189.667 OFFCURVE",
"126 -203 CURVE SMOOTH",
"126 -221.667 OFFCURVE",
"133.333 -232.333 OFFCURVE",
"148 -247 CURVE",
"202 -295 LINE",
"283.333 -235 OFFCURVE",
"346.5 -159 OFFCURVE",
"388.5 -83 CURVE SMOOTH",
"430.5 -7 OFFCURVE",
"452 70.333 OFFCURVE",
"452 137 CURVE SMOOTH",
"452 242.846 OFFCURVE",
"391.89 328 OFFCURVE",
"276 328 CURVE SMOOTH",
"178.481 328 OFFCURVE",
"108 262.039 OFFCURVE",
"108 176 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"100 742.388 OFFCURVE",
"176.294 669 OFFCURVE",
"276 669 CURVE SMOOTH",
"374.829 669 OFFCURVE",
"452 743.052 OFFCURVE",
"452 840 CURVE SMOOTH",
"452 934.99 OFFCURVE",
"374.331 1011 OFFCURVE",
"276 1011 CURVE SMOOTH",
"176.786 1011 OFFCURVE",
"100 935.642 OFFCURVE",
"100 840 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
48 46 38 36 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
27 15 2 0 27 0 0 2 0 53 0 2 2 1 1 0 36 0 1 1 14 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
27 15 2 0 27 0 0 2 0 53 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"60 59.388 OFFCURVE",
"136.294 -14 OFFCURVE",
"236 -14 CURVE SMOOTH",
"334.829 -14 OFFCURVE",
"412 60.052 OFFCURVE",
"412 157 CURVE SMOOTH",
"412 251.99 OFFCURVE",
"334.331 328 OFFCURVE",
"236 328 CURVE SMOOTH",
"136.786 328 OFFCURVE",
"60 252.642 OFFCURVE",
"60 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1164 59.388 OFFCURVE",
"1240.294 -14 OFFCURVE",
"1340 -14 CURVE SMOOTH",
"1438.829 -14 OFFCURVE",
"1516 60.052 OFFCURVE",
"1516 157 CURVE SMOOTH",
"1516 251.99 OFFCURVE",
"1438.331 328 OFFCURVE",
"1340 328 CURVE SMOOTH",
"1240.786 328 OFFCURVE",
"1164 252.642 OFFCURVE",
"1164 157 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"612 59.388 OFFCURVE",
"688.294 -14 OFFCURVE",
"788 -14 CURVE SMOOTH",
"886.829 -14 OFFCURVE",
"964 60.052 OFFCURVE",
"964 157 CURVE SMOOTH",
"964 251.99 OFFCURVE",
"886.331 328 OFFCURVE",
"788 328 CURVE SMOOTH",
"688.786 328 OFFCURVE",
"612 252.642 OFFCURVE",
"612 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 46 44 36 34 26 24 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
4 2 2 0 1 1 0 1 0 35 4 2 2 0 0 1 1 0 36 5 3 2 1 0 1 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 0 2 1 0 1 0 35 0 4 0 5 3 4 5 1 0 38 0 2 0 3 1 2 3 1 0 38 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1576;
}
);
note = ellipsis;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"234 1457 LINE",
"234 885 LINE SMOOTH",
"234 762.333 OFFCURVE",
"250 643.333 OFFCURVE",
"274 518 CURVE",
"484 518 LINE",
"508 643.333 OFFCURVE",
"524 762.333 OFFCURVE",
"524 885 CURVE SMOOTH",
"524 1457 LINE"
);
},
{
closed = 1;
nodes = (
"200 59.388 OFFCURVE",
"276.294 -14 OFFCURVE",
"376 -14 CURVE SMOOTH",
"474.829 -14 OFFCURVE",
"552 60.052 OFFCURVE",
"552 157 CURVE SMOOTH",
"552 251.99 OFFCURVE",
"474.331 328 OFFCURVE",
"376 328 CURVE SMOOTH",
"276.786 328 OFFCURVE",
"200 252.642 OFFCURVE",
"200 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 26 24 16 14 0 9 0 9 5 4 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 0 0 1 0 0 36 4 1 1 1 11 31 0 2 2 3 1 0 36 0 3 3 18 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 3 3 2 1 0 35 0 2 2 3 1 0 36 0 3 2 3 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 752;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"524 -329 LINE",
"524 198 LINE SMOOTH",
"524 320.667 OFFCURVE",
"508 441 OFFCURVE",
"484 565 CURVE",
"274 565 LINE",
"250 441 OFFCURVE",
"234 320.667 OFFCURVE",
"234 198 CURVE SMOOTH",
"234 -329 LINE"
);
},
{
closed = 1;
nodes = (
"200 786.358 OFFCURVE",
"276.786 711 OFFCURVE",
"376 711 CURVE SMOOTH",
"474.331 711 OFFCURVE",
"552 787.01 OFFCURVE",
"552 882 CURVE SMOOTH",
"552 978.948 OFFCURVE",
"474.829 1053 OFFCURVE",
"376 1053 CURVE SMOOTH",
"276.294 1053 OFFCURVE",
"200 979.612 OFFCURVE",
"200 882 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 26 24 16 14 0 9 0 9 5 4 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 3 2 1 0 36 0 2 2 20 31 0 0 0 1 0 0 36 4 1 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 4 1 1 0 1 0 0 37 0 3 3 2 1 0 36 0 2 2 20 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 4 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 752;
}
);
note = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"120 1198 LINE",
"134 1173.333 OFFCURVE",
"155.333 1161 OFFCURVE",
"184 1161 CURVE SMOOTH",
"206.518 1161 OFFCURVE",
"238.012 1181.418 OFFCURVE",
"266.5 1196.5 CURVE SMOOTH",
"300.5 1214.5 OFFCURVE",
"345.333 1232 OFFCURVE",
"416 1232 CURVE SMOOTH",
"508 1232 OFFCURVE",
"564 1181 OFFCURVE",
"564 1101 CURVE SMOOTH",
"564 1067.667 OFFCURVE",
"557 1038.833 OFFCURVE",
"543 1014.5 CURVE SMOOTH",
"515 965.833 OFFCURVE",
"470.333 927.5 OFFCURVE",
"421 893.5 CURVE SMOOTH",
"396.333 876.5 OFFCURVE",
"373.333 858.833 OFFCURVE",
"352 840.5 CURVE SMOOTH",
"309.333 803.833 OFFCURVE",
"278 761.667 OFFCURVE",
"278 703 CURVE SMOOTH",
"278 695 OFFCURVE",
"278.667 687 OFFCURVE",
"280 679 CURVE SMOOTH",
"302 518 LINE",
"514 518 LINE",
"542 658 LINE SMOOTH",
"552.433 711.906 OFFCURVE",
"651.145 778.085 OFFCURVE",
"706.5 820.5 CURVE SMOOTH",
"732.167 840.167 OFFCURVE",
"755.833 863.667 OFFCURVE",
"777.5 891 CURVE SMOOTH",
"820.833 945.667 OFFCURVE",
"852 1016.333 OFFCURVE",
"852 1119 CURVE SMOOTH",
"852 1225.667 OFFCURVE",
"812.667 1314.5 OFFCURVE",
"742 1376.5 CURVE SMOOTH",
"671.333 1438.5 OFFCURVE",
"569.333 1473 OFFCURVE",
"444 1473 CURVE SMOOTH",
"354.667 1473 OFFCURVE",
"278.667 1456.833 OFFCURVE",
"212 1429.5 CURVE SMOOTH",
"145.333 1402.167 OFFCURVE",
"87.333 1365.333 OFFCURVE",
"38 1324 CURVE"
);
},
{
closed = 1;
nodes = (
"222 59.388 OFFCURVE",
"298.294 -14 OFFCURVE",
"398 -14 CURVE SMOOTH",
"496.829 -14 OFFCURVE",
"574 60.052 OFFCURVE",
"574 157 CURVE SMOOTH",
"574 251.99 OFFCURVE",
"496.331 328 OFFCURVE",
"398 328 CURVE SMOOTH",
"298.786 328 OFFCURVE",
"222 252.642 OFFCURVE",
"222 157 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
57 55 47 45 39 37 34 32 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 2 2 0 1 0 36 0 0 0 17 31 0 4 4 5 1 0 36 0 5 5 18 5 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 882;
}
);
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"782 -70 LINE",
"768 -45.333 OFFCURVE",
"746.667 -33 OFFCURVE",
"718 -33 CURVE SMOOTH",
"695.482 -33 OFFCURVE",
"663.988 -53.418 OFFCURVE",
"635.5 -68.5 CURVE SMOOTH",
"601.5 -86.5 OFFCURVE",
"555.333 -104 OFFCURVE",
"486 -104 CURVE SMOOTH",
"394 -104 OFFCURVE",
"338 -53 OFFCURVE",
"338 27 CURVE SMOOTH",
"338 58.333 OFFCURVE",
"345 84.5 OFFCURVE",
"359 105.5 CURVE SMOOTH",
"387 147.5 OFFCURVE",
"431.667 177.5 OFFCURVE",
"481 203.5 CURVE SMOOTH",
"505.667 216.5 OFFCURVE",
"528.667 230.667 OFFCURVE",
"550 246 CURVE SMOOTH",
"592.667 276.667 OFFCURVE",
"624 315.667 OFFCURVE",
"624 377 CURVE SMOOTH",
"624 385 OFFCURVE",
"623.333 393 OFFCURVE",
"622 405 CURVE SMOOTH",
"600 565 LINE",
"388 565 LINE",
"360 426 LINE SMOOTH",
"349.846 371.846 OFFCURVE",
"250.281 316.783 OFFCURVE",
"195.5 280.5 CURVE SMOOTH",
"169.833 263.5 OFFCURVE",
"146.167 242.833 OFFCURVE",
"124.5 218.5 CURVE SMOOTH",
"81.167 169.833 OFFCURVE",
"50 101.333 OFFCURVE",
"50 0 CURVE SMOOTH",
"50 -106.667 OFFCURVE",
"89.333 -193.167 OFFCURVE",
"160 -252.5 CURVE SMOOTH",
"230.667 -311.833 OFFCURVE",
"332.667 -345 OFFCURVE",
"458 -345 CURVE SMOOTH",
"547.333 -345 OFFCURVE",
"623.333 -328.833 OFFCURVE",
"690 -301.5 CURVE SMOOTH",
"756.667 -274.167 OFFCURVE",
"813.333 -237.333 OFFCURVE",
"864 -196 CURVE"
);
},
{
closed = 1;
nodes = (
"324 785.388 OFFCURVE",
"400.294 712 OFFCURVE",
"500 712 CURVE SMOOTH",
"598.829 712 OFFCURVE",
"676 786.052 OFFCURVE",
"676 883 CURVE SMOOTH",
"676 977.99 OFFCURVE",
"598.331 1054 OFFCURVE",
"500 1054 CURVE SMOOTH",
"400.786 1054 OFFCURVE",
"324 978.642 OFFCURVE",
"324 883 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
57 55 47 45 39 37 34 32 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 5 5 4 1 0 36 0 4 4 20 31 0 2 2 0 1 2 36 0 0 0 22 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 2 0 0 2 0 1 2 37 0 5 5 4 1 0 36 0 4 4 20 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 0 2 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 4 0 5 1 4 5 1 0 38 0 2 0 0 2 1 0 35 0 2 2 0 1 2 36 0 0 2 0 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 882;
}
);
note = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"60 475.828 OFFCURVE",
"160.602 379 OFFCURVE",
"284 379 CURVE SMOOTH",
"409.075 379 OFFCURVE",
"510 474.915 OFFCURVE",
"510 596 CURVE SMOOTH",
"510 717.941 OFFCURVE",
"409.573 814 OFFCURVE",
"284 814 CURVE SMOOTH",
"160.116 814 OFFCURVE",
"60 717.014 OFFCURVE",
"60 596 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 570;
}
);
note = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"84 460 OFFCURVE",
"139.667 338.667 OFFCURVE",
"229 252 CURVE SMOOTH",
"318.333 165.333 OFFCURVE",
"442 111 OFFCURVE",
"578 111 CURVE SMOOTH",
"715.333 111 OFFCURVE",
"838.5 165.333 OFFCURVE",
"928.5 252 CURVE SMOOTH",
"1018.5 338.667 OFFCURVE",
"1074 460 OFFCURVE",
"1074 592 CURVE SMOOTH",
"1074 725.333 OFFCURVE",
"1018.5 846 OFFCURVE",
"928.5 934 CURVE SMOOTH",
"838.5 1022 OFFCURVE",
"715.333 1076 OFFCURVE",
"578 1076 CURVE SMOOTH",
"442 1076 OFFCURVE",
"318.333 1022 OFFCURVE",
"229 934 CURVE SMOOTH",
"139.667 846 OFFCURVE",
"84 725.333 OFFCURVE",
"84 592 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
43 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 1 0 36 0 0 0 20 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
lastChange = "2020-02-16 19:04:54 +0000";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"586 242 LINE",
"586 462 LINE SMOOTH",
"586 498 OFFCURVE",
"581 531 OFFCURVE",
"570 561 CURVE",
"595 536 OFFCURVE",
"620 518 OFFCURVE",
"652 499 CURVE SMOOTH",
"837 389 LINE",
"928 540 LINE",
"743 650 LINE SMOOTH",
"712 669 OFFCURVE",
"679 685 OFFCURVE",
"644 690 CURVE",
"679 697 OFFCURVE",
"709 710 OFFCURVE",
"743 729 CURVE SMOOTH",
"928 837 LINE",
"837 989 LINE",
"652 880 LINE SMOOTH",
"621 862 OFFCURVE",
"595 843 OFFCURVE",
"573 818 CURVE",
"583 849 OFFCURVE",
"586 884 OFFCURVE",
"586 919 CURVE SMOOTH",
"586 1137 LINE",
"402 1137 LINE",
"402 917 LINE SMOOTH",
"402 880 OFFCURVE",
"407 848 OFFCURVE",
"417 818 CURVE",
"394 843 OFFCURVE",
"367 861 OFFCURVE",
"336 880 CURVE SMOOTH",
"151 991 LINE",
"60 839 LINE",
"245 729 LINE SMOOTH",
"276 710 OFFCURVE",
"308 694 OFFCURVE",
"342 689 CURVE",
"308 682 OFFCURVE",
"276 668 OFFCURVE",
"245 650 CURVE SMOOTH",
"60 542 LINE",
"151 391 LINE",
"336 499 LINE SMOOTH",
"367 517 OFFCURVE",
"393 534 OFFCURVE",
"415 559 CURVE",
"405 530 OFFCURVE",
"402 494 OFFCURVE",
"402 460 CURVE SMOOTH",
"402 242 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 51 0 51 26 25 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
48 44 43 39 35 34 30 22 18 17 13 9 8 4 14 1 0 1 30 2 1 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
48 44 43 39 35 34 30 22 18 17 13 9 8 4 14 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 2 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 993;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1060 395 LINE",
"1076 491 LINE SMOOTH",
"1078.667 505.667 OFFCURVE",
"1080 519 OFFCURVE",
"1080 531 CURVE SMOOTH",
"1080 589.667 OFFCURVE",
"1050.667 612 OFFCURVE",
"1000 612 CURVE SMOOTH",
"891 612 LINE",
"933 848 LINE",
"996 848 LINE SMOOTH",
"1084 848 OFFCURVE",
"1120 875.333 OFFCURVE",
"1132 938 CURVE SMOOTH",
"1156 1064 LINE",
"962 1064 LINE",
"1014 1355 LINE SMOOTH",
"1014.667 1358.333 OFFCURVE",
"1015 1361.167 OFFCURVE",
"1015 1363.5 CURVE SMOOTH",
"1015 1365.833 OFFCURVE",
"1015 1368.333 OFFCURVE",
"1015 1371 CURVE SMOOTH",
"1015 1421.667 OFFCURVE",
"974.667 1457 OFFCURVE",
"916 1457 CURVE SMOOTH",
"778 1457 LINE",
"708 1064 LINE",
"542 1064 LINE",
"612 1457 LINE",
"470 1457 LINE SMOOTH",
"406 1457 OFFCURVE",
"350.667 1419.667 OFFCURVE",
"340 1357 CURVE SMOOTH",
"288 1064 LINE",
"220 1064 LINE SMOOTH",
"132 1064 OFFCURVE",
"96 1035.333 OFFCURVE",
"84 974 CURVE SMOOTH",
"60 848 LINE",
"259 848 LINE",
"217 612 LINE",
"40 612 LINE",
"24 516 LINE SMOOTH",
"21.333 501.333 OFFCURVE",
"20 488 OFFCURVE",
"20 476 CURVE SMOOTH",
"20 417.333 OFFCURVE",
"49.333 395 OFFCURVE",
"100 395 CURVE SMOOTH",
"188 395 LINE",
"118 0 LINE",
"256 0 LINE SMOOTH",
"323.849 0 OFFCURVE",
"381.214 33.839 OFFCURVE",
"394 108 CURVE SMOOTH",
"443 395 LINE",
"608 395 LINE",
"560 123 LINE SMOOTH",
"558.667 116.333 OFFCURVE",
"558 107.667 OFFCURVE",
"558 101 CURVE SMOOTH",
"558 45.9 OFFCURVE",
"596.576 0 OFFCURVE",
"648 0 CURVE SMOOTH",
"792 0 LINE",
"862 395 LINE"
);
},
{
closed = 1;
nodes = (
"513 848 LINE",
"679 848 LINE",
"637 612 LINE",
"471 612 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
0 0 71 70 69 68 0 67 0 67 61 59 58 56 53 52 46 44 43 42 41 39 36 34 31 30 29 28 22 20 19 17 12 11 3 1 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 15 11 2 5 5 6 0 0 36 10 8 2 6 6 14 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
9 1 7 6 7 52 2 1 0 1 0 53 10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 1 1 4 0 0 35 14 12 2 4 4 1 0 0 36 16 13 3 3 1 4 1 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 96 values pushed */
0 7 9 7 52 0 9 6 9 52 0 2 1 0 1 2 0 50 0 0 0 51 0 8 0 15 11 8 15 0 2 38 0 10 0 11 5 10 11 1 2 38 0 6 0 5 4 6 5 0 0 38 0 14 13 1 14 0 0 35 0 12 16 1 13 3 12 13 0 0 38 0 4 0 3 1 4 3 1 0 38 0 14 14 1 0 0 36 0 1 14 1 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
lastChange = "2020-02-16 19:05:14 +0000";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"832 1497 LINE",
"700 1497 LINE SMOOTH",
"628 1497 OFFCURVE",
"570.667 1460 OFFCURVE",
"544 1392 CURVE SMOOTH",
"-24 -99 LINE",
"108 -99 LINE SMOOTH",
"176.01 -99 OFFCURVE",
"241.229 -58.62 OFFCURVE",
"270 12 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
11 9 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 53 0 1 1 13 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 800;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"526 12 LINE SMOOTH",
"552.04 -58.308 OFFCURVE",
"622.683 -99 OFFCURVE",
"688 -99 CURVE SMOOTH",
"820 -99 LINE",
"252 1392 LINE SMOOTH",
"225.333 1460 OFFCURVE",
"168 1497 OFFCURVE",
"96 1497 CURVE SMOOTH",
"-36 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
7 5 2 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 808;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"348 758 OFFCURVE",
"362.667 893.5 OFFCURVE",
"392 1023.5 CURVE SMOOTH",
"421.333 1153.5 OFFCURVE",
"464 1278.333 OFFCURVE",
"520 1389 CURVE SMOOTH",
"530.667 1410.333 OFFCURVE",
"535 1427.333 OFFCURVE",
"535 1442 CURVE SMOOTH",
"535 1472.667 OFFCURVE",
"514.667 1491.333 OFFCURVE",
"492 1506 CURVE",
"354 1586 LINE",
"256.667 1435.333 OFFCURVE",
"188 1280.833 OFFCURVE",
"144 1121.5 CURVE SMOOTH",
"100 962.167 OFFCURVE",
"80 796.667 OFFCURVE",
"80 626 CURVE SMOOTH",
"80 455.333 OFFCURVE",
"100 289.833 OFFCURVE",
"144 130.5 CURVE SMOOTH",
"188 -28.833 OFFCURVE",
"256.667 -183.667 OFFCURVE",
"354 -333 CURVE",
"492 -253 LINE SMOOTH",
"516 -238.333 OFFCURVE",
"536 -220 OFFCURVE",
"536 -188 CURVE SMOOTH",
"536 -172 OFFCURVE",
"531.333 -154.333 OFFCURVE",
"522 -135 CURVE SMOOTH",
"467.333 -23 OFFCURVE",
"423.5 100.667 OFFCURVE",
"393.5 230 CURVE SMOOTH",
"363.5 359.333 OFFCURVE",
"348 494 OFFCURVE",
"348 626 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
21 11 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"252 494 OFFCURVE",
"236.5 359.333 OFFCURVE",
"206.5 230 CURVE SMOOTH",
"176.5 100.667 OFFCURVE",
"132.667 -23 OFFCURVE",
"78 -135 CURVE SMOOTH",
"68.667 -154.333 OFFCURVE",
"64 -172 OFFCURVE",
"64 -188 CURVE SMOOTH",
"64 -220 OFFCURVE",
"84 -238.333 OFFCURVE",
"108 -253 CURVE SMOOTH",
"246 -333 LINE",
"439.333 -33 OFFCURVE",
"520 283.333 OFFCURVE",
"520 626 CURVE SMOOTH",
"520 967.333 OFFCURVE",
"439.333 1284.667 OFFCURVE",
"246 1586 CURVE",
"108 1506 LINE",
"85.333 1491.333 OFFCURVE",
"65 1472.667 OFFCURVE",
"65 1442 CURVE SMOOTH",
"65 1427.333 OFFCURVE",
"69.333 1410.333 OFFCURVE",
"80 1389 CURVE SMOOTH",
"136 1278.333 OFFCURVE",
"178.667 1153.5 OFFCURVE",
"208 1023.5 CURVE SMOOTH",
"237.333 893.5 OFFCURVE",
"252 758 OFFCURVE",
"252 626 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
12 18 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
lastChange = "2020-02-16 18:30:43 +0000";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"262 263 OFFCURVE",
"261 151 OFFCURVE",
"261 27 CURVE SMOOTH",
"261 -65 OFFCURVE",
"293 -140 OFFCURVE",
"349 -196 CURVE SMOOTH",
"405 -252 OFFCURVE",
"551 -309 OFFCURVE",
"660 -309 CURVE SMOOTH",
"713 -309 LINE",
"713 -99 LINE SMOOTH",
"713 -72 OFFCURVE",
"689 -61 OFFCURVE",
"673 -61 CURVE SMOOTH",
"653 -61 LINE SMOOTH",
"550 -61 OFFCURVE",
"507 10 OFFCURVE",
"507 126 CURVE SMOOTH",
"507 268 OFFCURVE",
"503 292 OFFCURVE",
"503 423 CURVE SMOOTH",
"503 519 OFFCURVE",
"421 598 OFFCURVE",
"332 622 CURVE",
"423 647 OFFCURVE",
"503 724 OFFCURVE",
"503 822 CURVE SMOOTH",
"503 953 OFFCURVE",
"497 1027 OFFCURVE",
"497 1169 CURVE SMOOTH",
"497 1284 OFFCURVE",
"550 1356 OFFCURVE",
"653 1356 CURVE SMOOTH",
"673 1356 LINE SMOOTH",
"689 1356 OFFCURVE",
"713 1367 OFFCURVE",
"713 1394 CURVE SMOOTH",
"713 1533 LINE",
"660 1533 LINE SMOOTH",
"551 1533 OFFCURVE",
"411 1503 OFFCURVE",
"356 1447 CURVE SMOOTH",
"300 1390 OFFCURVE",
"261 1310 OFFCURVE",
"261 1218 CURVE SMOOTH",
"261 1092 OFFCURVE",
"262 983 OFFCURVE",
"262 860 CURVE SMOOTH",
"262 775 OFFCURVE",
"204 736 OFFCURVE",
"5 736 CURVE",
"5 509 LINE",
"204 509 OFFCURVE",
"262 469 OFFCURVE",
"262 385 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
60 58 53 51 27 25 20 18 5 4 3 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
39 1 0 1 1 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 4 5 1 0 36 0 5 5 16 5 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
39 1 0 1 1 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 758;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
lastChange = "2020-02-16 18:31:34 +0000";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"456 469 OFFCURVE",
"514 509 OFFCURVE",
"713 509 CURVE",
"713 736 LINE",
"514 736 OFFCURVE",
"456 775 OFFCURVE",
"456 860 CURVE SMOOTH",
"456 983 OFFCURVE",
"457 1092 OFFCURVE",
"457 1218 CURVE SMOOTH",
"457 1310 OFFCURVE",
"418 1390 OFFCURVE",
"362 1447 CURVE SMOOTH",
"307 1503 OFFCURVE",
"167 1533 OFFCURVE",
"58 1533 CURVE SMOOTH",
"5 1533 LINE",
"5 1394 LINE SMOOTH",
"5 1367 OFFCURVE",
"29 1356 OFFCURVE",
"45 1356 CURVE SMOOTH",
"65 1356 LINE SMOOTH",
"168 1356 OFFCURVE",
"221 1284 OFFCURVE",
"221 1169 CURVE SMOOTH",
"221 1027 OFFCURVE",
"215 953 OFFCURVE",
"215 822 CURVE SMOOTH",
"215 724 OFFCURVE",
"295 647 OFFCURVE",
"386 622 CURVE",
"297 598 OFFCURVE",
"215 519 OFFCURVE",
"215 423 CURVE SMOOTH",
"215 292 OFFCURVE",
"211 268 OFFCURVE",
"211 126 CURVE SMOOTH",
"211 10 OFFCURVE",
"168 -61 OFFCURVE",
"65 -61 CURVE SMOOTH",
"45 -61 LINE SMOOTH",
"29 -61 OFFCURVE",
"5 -72 OFFCURVE",
"5 -99 CURVE SMOOTH",
"5 -309 LINE",
"58 -309 LINE SMOOTH",
"167 -309 OFFCURVE",
"313 -252 OFFCURVE",
"369 -196 CURVE SMOOTH",
"425 -140 OFFCURVE",
"457 -65 OFFCURVE",
"457 27 CURVE SMOOTH",
"457 151 OFFCURVE",
"456 263 OFFCURVE",
"456 385 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
67 66 65 64 51 49 44 42 18 16 11 9 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
30 1 5 4 1 30 0 3 0 2 4 3 2 1 0 38 0 4 0 5 1 4 5 1 0 38 0 1 1 0 1 0 36 0 0 0 16 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
30 1 5 4 1 30 0 3 0 2 4 3 2 1 0 38 0 4 0 5 1 4 5 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 758;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"538 -324 LINE",
"538 -205 LINE SMOOTH",
"538 -165 OFFCURVE",
"504.667 -131 OFFCURVE",
"458 -131 CURVE SMOOTH",
"348 -131 LINE",
"348 1364 LINE",
"458 1364 LINE SMOOTH",
"504.667 1364 OFFCURVE",
"538 1397.667 OFFCURVE",
"538 1439 CURVE SMOOTH",
"538 1557 LINE",
"90 1557 LINE",
"90 -324 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 13 0 13 10 8 7 5 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 2 3 0 0 36 4 1 3 3 16 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 3 3 2 1 0 35 0 2 2 3 0 0 36 4 1 3 2 3 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"62 1439 LINE SMOOTH",
"62 1397.667 OFFCURVE",
"95.333 1364 OFFCURVE",
"142 1364 CURVE SMOOTH",
"252 1364 LINE",
"252 -131 LINE",
"142 -131 LINE SMOOTH",
"95.333 -131 OFFCURVE",
"62 -165 OFFCURVE",
"62 -205 CURVE SMOOTH",
"62 -324 LINE",
"510 -324 LINE",
"510 1557 LINE",
"62 1557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
11 9 8 6 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 2 1 0 0 36 0 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 0 0 36 0 1 2 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"100 483 LINE",
"640 483 LINE",
"640 733 LINE",
"100 733 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 740;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"100 483 LINE",
"640 483 LINE",
"640 733 LINE",
"100 733 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 740;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"170 501 LINE",
"990 501 LINE",
"990 713 LINE",
"170 713 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"170 501 LINE",
"1552 501 LINE",
"1552 713 LINE",
"170 713 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1722;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = underscore;
lastChange = "2020-02-16 18:26:12 +0000";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"429 229 OFFCURVE",
"338 325 OFFCURVE",
"232 325 CURVE SMOOTH",
"159 325 OFFCURVE",
"88 293 OFFCURVE",
"61 260 CURVE SMOOTH",
"32 225 OFFCURVE",
"5 180 OFFCURVE",
"5 39 CURVE",
"175 39 LINE",
"178 73 OFFCURVE",
"197 105 OFFCURVE",
"291 105 CURVE SMOOTH",
"373 105 OFFCURVE",
"444 1 OFFCURVE",
"550 1 CURVE SMOOTH",
"621 1 OFFCURVE",
"665 28 OFFCURVE",
"717 78 CURVE SMOOTH",
"756 115 OFFCURVE",
"777 251 OFFCURVE",
"777 304 CURVE",
"607 304 LINE",
"606 253 OFFCURVE",
"584 229 OFFCURVE",
"511 229 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
37 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
2 1 1 1 0 0 0 36 0 0 0 16 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 788;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"152 263 LINE SMOOTH",
"124 252.333 OFFCURVE",
"107 233 OFFCURVE",
"107 209 CURVE SMOOTH",
"107 198.333 OFFCURVE",
"110.333 187.667 OFFCURVE",
"117 177 CURVE SMOOTH",
"155.667 114.333 OFFCURVE",
"171 60 OFFCURVE",
"171 12 CURVE SMOOTH",
"171 -69.515 OFFCURVE",
"126.445 -134.424 OFFCURVE",
"92 -172 CURVE",
"82.667 -181.333 OFFCURVE",
"75 -195.333 OFFCURVE",
"75 -210 CURVE SMOOTH",
"75 -223.333 OFFCURVE",
"82 -236.333 OFFCURVE",
"98 -247 CURVE",
"196 -305 LINE",
"341.333 -194.333 OFFCURVE",
"417 -61.667 OFFCURVE",
"417 81 CURVE SMOOTH",
"417 163.667 OFFCURVE",
"391.333 248 OFFCURVE",
"338 332 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"152 263 LINE SMOOTH",
"124 252.333 OFFCURVE",
"107 233 OFFCURVE",
"107 209 CURVE SMOOTH",
"107 198.333 OFFCURVE",
"110.333 187.667 OFFCURVE",
"117 177 CURVE SMOOTH",
"155.667 114.333 OFFCURVE",
"171 60 OFFCURVE",
"171 12 CURVE SMOOTH",
"171 -69.515 OFFCURVE",
"126.445 -134.424 OFFCURVE",
"92 -172 CURVE",
"82.667 -181.333 OFFCURVE",
"75 -195.333 OFFCURVE",
"75 -210 CURVE SMOOTH",
"75 -223.333 OFFCURVE",
"82 -236.333 OFFCURVE",
"98 -247 CURVE",
"196 -305 LINE",
"341.333 -194.333 OFFCURVE",
"417 -61.667 OFFCURVE",
"417 81 CURVE SMOOTH",
"417 163.667 OFFCURVE",
"391.333 248 OFFCURVE",
"338 332 CURVE"
);
},
{
closed = 1;
nodes = (
"510 263 LINE SMOOTH",
"482 252.333 OFFCURVE",
"465 233 OFFCURVE",
"465 209 CURVE SMOOTH",
"465 198.333 OFFCURVE",
"468.333 187.667 OFFCURVE",
"475 177 CURVE SMOOTH",
"513.667 114.333 OFFCURVE",
"529 60 OFFCURVE",
"529 12 CURVE SMOOTH",
"529 -69.515 OFFCURVE",
"484.445 -134.424 OFFCURVE",
"450 -172 CURVE",
"440.667 -181.333 OFFCURVE",
"433 -195.333 OFFCURVE",
"433 -210 CURVE SMOOTH",
"433 -223.333 OFFCURVE",
"440 -236.333 OFFCURVE",
"456 -247 CURVE",
"554 -305 LINE",
"699.333 -194.333 OFFCURVE",
"775 -61.667 OFFCURVE",
"775 81 CURVE SMOOTH",
"775 163.667 OFFCURVE",
"749.333 248 OFFCURVE",
"696 332 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
27 33 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 830;
}
);
note = quotedblbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"350 1018 LINE SMOOTH",
"378 1028.667 OFFCURVE",
"395 1048 OFFCURVE",
"395 1072 CURVE SMOOTH",
"395 1082.667 OFFCURVE",
"391.667 1093.333 OFFCURVE",
"385 1104 CURVE SMOOTH",
"346.333 1166.667 OFFCURVE",
"331 1221 OFFCURVE",
"331 1269 CURVE SMOOTH",
"331 1349.818 OFFCURVE",
"375.763 1415.651 OFFCURVE",
"410 1453 CURVE",
"419.333 1462.333 OFFCURVE",
"427 1476.333 OFFCURVE",
"427 1491 CURVE SMOOTH",
"427 1504.333 OFFCURVE",
"420 1517.333 OFFCURVE",
"404 1528 CURVE",
"306 1586 LINE",
"160.667 1475.333 OFFCURVE",
"85 1341.667 OFFCURVE",
"85 1199 CURVE SMOOTH",
"85 1116.333 OFFCURVE",
"110.667 1033 OFFCURVE",
"164 949 CURVE"
);
},
{
closed = 1;
nodes = (
"708 1018 LINE SMOOTH",
"736 1028.667 OFFCURVE",
"753 1048 OFFCURVE",
"753 1072 CURVE SMOOTH",
"753 1082.667 OFFCURVE",
"749.667 1093.333 OFFCURVE",
"743 1104 CURVE SMOOTH",
"704.333 1166.667 OFFCURVE",
"689 1221 OFFCURVE",
"689 1269 CURVE SMOOTH",
"689 1349.818 OFFCURVE",
"733.763 1415.651 OFFCURVE",
"768 1453 CURVE",
"777.333 1462.333 OFFCURVE",
"785 1476.333 OFFCURVE",
"785 1491 CURVE SMOOTH",
"785 1504.333 OFFCURVE",
"778 1517.333 OFFCURVE",
"762 1528 CURVE",
"664 1586 LINE",
"518.667 1475.333 OFFCURVE",
"443 1341.667 OFFCURVE",
"443 1199 CURVE SMOOTH",
"443 1116.333 OFFCURVE",
"468.667 1033 OFFCURVE",
"522 949 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
33 27 6 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 830;
}
);
note = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"152 1482 LINE SMOOTH",
"124 1471.333 OFFCURVE",
"107 1452 OFFCURVE",
"107 1428 CURVE SMOOTH",
"107 1417.333 OFFCURVE",
"110.333 1406.667 OFFCURVE",
"117 1396 CURVE SMOOTH",
"155.667 1333.333 OFFCURVE",
"171 1279 OFFCURVE",
"171 1231 CURVE SMOOTH",
"171 1149.485 OFFCURVE",
"126.445 1084.576 OFFCURVE",
"92 1047 CURVE",
"82.667 1037.667 OFFCURVE",
"75 1023.667 OFFCURVE",
"75 1009 CURVE SMOOTH",
"75 995.667 OFFCURVE",
"82 982.667 OFFCURVE",
"98 972 CURVE",
"196 914 LINE",
"341.333 1024.667 OFFCURVE",
"417 1157.333 OFFCURVE",
"417 1300 CURVE SMOOTH",
"417 1382.667 OFFCURVE",
"391.333 1467 OFFCURVE",
"338 1551 CURVE"
);
},
{
closed = 1;
nodes = (
"510 1482 LINE SMOOTH",
"482 1471.333 OFFCURVE",
"465 1452 OFFCURVE",
"465 1428 CURVE SMOOTH",
"465 1417.333 OFFCURVE",
"468.333 1406.667 OFFCURVE",
"475 1396 CURVE SMOOTH",
"513.667 1333.333 OFFCURVE",
"529 1279 OFFCURVE",
"529 1231 CURVE SMOOTH",
"529 1149.485 OFFCURVE",
"484.445 1084.576 OFFCURVE",
"450 1047 CURVE",
"440.667 1037.667 OFFCURVE",
"433 1023.667 OFFCURVE",
"433 1009 CURVE SMOOTH",
"433 995.667 OFFCURVE",
"440 982.667 OFFCURVE",
"456 972 CURVE",
"554 914 LINE",
"699.333 1024.667 OFFCURVE",
"775 1157.333 OFFCURVE",
"775 1300 CURVE SMOOTH",
"775 1382.667 OFFCURVE",
"749.333 1467 OFFCURVE",
"696 1551 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
27 33 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 830;
}
);
note = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"350 1018 LINE SMOOTH",
"378 1028.667 OFFCURVE",
"395 1048 OFFCURVE",
"395 1072 CURVE SMOOTH",
"395 1082.667 OFFCURVE",
"391.667 1093.333 OFFCURVE",
"385 1104 CURVE SMOOTH",
"346.333 1166.667 OFFCURVE",
"331 1221 OFFCURVE",
"331 1269 CURVE SMOOTH",
"331 1349.818 OFFCURVE",
"375.763 1415.651 OFFCURVE",
"410 1453 CURVE",
"419.333 1462.333 OFFCURVE",
"427 1476.333 OFFCURVE",
"427 1491 CURVE SMOOTH",
"427 1504.333 OFFCURVE",
"420 1517.333 OFFCURVE",
"404 1528 CURVE",
"306 1586 LINE",
"160.667 1475.333 OFFCURVE",
"85 1341.667 OFFCURVE",
"85 1199 CURVE SMOOTH",
"85 1116.333 OFFCURVE",
"110.667 1033 OFFCURVE",
"164 949 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = quoteleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"152 1482 LINE SMOOTH",
"124 1471.333 OFFCURVE",
"107 1452 OFFCURVE",
"107 1428 CURVE SMOOTH",
"107 1417.333 OFFCURVE",
"110.333 1406.667 OFFCURVE",
"117 1396 CURVE SMOOTH",
"155.667 1333.333 OFFCURVE",
"171 1279 OFFCURVE",
"171 1231 CURVE SMOOTH",
"171 1149.485 OFFCURVE",
"126.445 1084.576 OFFCURVE",
"92 1047 CURVE",
"82.667 1037.667 OFFCURVE",
"75 1023.667 OFFCURVE",
"75 1009 CURVE SMOOTH",
"75 995.667 OFFCURVE",
"82 982.667 OFFCURVE",
"98 972 CURVE",
"196 914 LINE",
"341.333 1024.667 OFFCURVE",
"417 1157.333 OFFCURVE",
"417 1300 CURVE SMOOTH",
"417 1382.667 OFFCURVE",
"391.333 1467 OFFCURVE",
"338 1551 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 472;
}
);
note = quoteright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"372 123 LINE",
"474 169 LINE SMOOTH",
"506 183.667 OFFCURVE",
"521 205.333 OFFCURVE",
"521 232 CURVE SMOOTH",
"521 248 OFFCURVE",
"516 264.667 OFFCURVE",
"506 282 CURVE SMOOTH",
"386 498 LINE SMOOTH",
"374 518 OFFCURVE",
"362 533.333 OFFCURVE",
"350 544 CURVE",
"362.667 555.333 OFFCURVE",
"374.667 571 OFFCURVE",
"386 591 CURVE SMOOTH",
"506 806 LINE SMOOTH",
"516 824 OFFCURVE",
"521 841 OFFCURVE",
"521 857 CURVE SMOOTH",
"521 883.667 OFFCURVE",
"506 905.333 OFFCURVE",
"474 920 CURVE SMOOTH",
"372 966 LINE",
"110 564 LINE",
"110 525 LINE"
);
},
{
closed = 1;
nodes = (
"732 123 LINE",
"834 169 LINE SMOOTH",
"866 183.667 OFFCURVE",
"881 205.333 OFFCURVE",
"881 232 CURVE SMOOTH",
"881 248 OFFCURVE",
"876 264.667 OFFCURVE",
"866 282 CURVE SMOOTH",
"746 498 LINE SMOOTH",
"734 518 OFFCURVE",
"722 533.333 OFFCURVE",
"710 544 CURVE",
"722.667 555.333 OFFCURVE",
"734.667 571 OFFCURVE",
"746 591 CURVE SMOOTH",
"866 806 LINE SMOOTH",
"876 824 OFFCURVE",
"881 841 OFFCURVE",
"881 857 CURVE SMOOTH",
"881 883.667 OFFCURVE",
"866 905.333 OFFCURVE",
"834 920 CURVE SMOOTH",
"732 966 LINE",
"470 564 LINE",
"470 525 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
23 41 2 20 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 1012;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"542 525 LINE",
"542 564 LINE",
"280 966 LINE",
"178 920 LINE SMOOTH",
"146 905.333 OFFCURVE",
"131 883.667 OFFCURVE",
"131 857 CURVE SMOOTH",
"131 841 OFFCURVE",
"136 824 OFFCURVE",
"146 806 CURVE SMOOTH",
"266 591 LINE SMOOTH",
"276.667 572.333 OFFCURVE",
"288.667 556 OFFCURVE",
"302 544 CURVE",
"288 532 OFFCURVE",
"276 516.667 OFFCURVE",
"266 498 CURVE SMOOTH",
"146 282 LINE SMOOTH",
"136 264.667 OFFCURVE",
"131 248 OFFCURVE",
"131 232 CURVE SMOOTH",
"131 205.333 OFFCURVE",
"146 183.667 OFFCURVE",
"178 169 CURVE SMOOTH",
"280 123 LINE"
);
},
{
closed = 1;
nodes = (
"640 966 LINE",
"538 920 LINE SMOOTH",
"506 905.333 OFFCURVE",
"491 883.667 OFFCURVE",
"491 857 CURVE SMOOTH",
"491 841 OFFCURVE",
"496 824 OFFCURVE",
"506 806 CURVE SMOOTH",
"626 591 LINE SMOOTH",
"636.667 572.333 OFFCURVE",
"648.667 556 OFFCURVE",
"662 544 CURVE",
"648 532 OFFCURVE",
"636 516.667 OFFCURVE",
"626 498 CURVE SMOOTH",
"506 282 LINE SMOOTH",
"496 264.667 OFFCURVE",
"491 248 OFFCURVE",
"491 232 CURVE SMOOTH",
"491 205.333 OFFCURVE",
"506 183.667 OFFCURVE",
"538 169 CURVE SMOOTH",
"640 123 LINE",
"902 525 LINE",
"902 564 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
43 24 19 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 1012;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"372 123 LINE",
"474 169 LINE SMOOTH",
"506 183.667 OFFCURVE",
"521 205.333 OFFCURVE",
"521 232 CURVE SMOOTH",
"521 248 OFFCURVE",
"516 264.667 OFFCURVE",
"506 282 CURVE SMOOTH",
"386 498 LINE SMOOTH",
"374 518 OFFCURVE",
"362 533.333 OFFCURVE",
"350 544 CURVE",
"362.667 555.333 OFFCURVE",
"374.667 571 OFFCURVE",
"386 591 CURVE SMOOTH",
"506 806 LINE SMOOTH",
"516 824 OFFCURVE",
"521 841 OFFCURVE",
"521 857 CURVE SMOOTH",
"521 883.667 OFFCURVE",
"506 905.333 OFFCURVE",
"474 920 CURVE SMOOTH",
"372 966 LINE",
"110 564 LINE",
"110 525 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
2 20 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 652;
}
);
note = guilsinglleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"542 525 LINE",
"542 564 LINE",
"280 966 LINE",
"178 920 LINE SMOOTH",
"146 905.333 OFFCURVE",
"131 883.667 OFFCURVE",
"131 857 CURVE SMOOTH",
"131 841 OFFCURVE",
"136 824 OFFCURVE",
"146 806 CURVE SMOOTH",
"266 591 LINE SMOOTH",
"276.667 572.333 OFFCURVE",
"288.667 556 OFFCURVE",
"302 544 CURVE",
"288 532 OFFCURVE",
"276 516.667 OFFCURVE",
"266 498 CURVE SMOOTH",
"146 282 LINE SMOOTH",
"136 264.667 OFFCURVE",
"131 248 OFFCURVE",
"131 232 CURVE SMOOTH",
"131 205.333 OFFCURVE",
"146 183.667 OFFCURVE",
"178 169 CURVE SMOOTH",
"280 123 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
19 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 652;
}
);
note = guilsinglright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"110 1457 LINE",
"110 1171 LINE",
"138 1013 LINE SMOOTH",
"151.333 941 OFFCURVE",
"184 902 OFFCURVE",
"244 902 CURVE SMOOTH",
"314.667 902 OFFCURVE",
"340 941 OFFCURVE",
"352 1013 CURVE SMOOTH",
"380 1171 LINE",
"380 1457 LINE"
);
},
{
closed = 1;
nodes = (
"510 1457 LINE",
"510 1171 LINE",
"538 1013 LINE SMOOTH",
"551.333 941 OFFCURVE",
"584 902 OFFCURVE",
"644 902 CURVE SMOOTH",
"714.667 902 OFFCURVE",
"740 941 OFFCURVE",
"752 1013 CURVE SMOOTH",
"780 1171 LINE",
"780 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 11 0 0 11 21 11 21 17 15 0 10 0 10 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
20 12 9 1 4 0 1 1 30 2 1 0 0 1 0 0 36 5 3 4 3 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
20 12 9 1 4 0 1 1 30 5 3 4 3 1 0 0 1 0 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
20 12 9 1 4 2 3 1 30 4 1 1 3 0 1 0 0 35 5 1 3 0 2 0 3 2 1 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 890;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"110 1457 LINE",
"110 1171 LINE",
"138 1013 LINE SMOOTH",
"151.333 941 OFFCURVE",
"184 902 OFFCURVE",
"244 902 CURVE SMOOTH",
"314.667 902 OFFCURVE",
"340 941 OFFCURVE",
"352 1013 CURVE SMOOTH",
"380 1171 LINE",
"380 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 10 0 10 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
9 1 2 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
9 1 2 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 490;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = CR;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 0;
}
);
note = CR;
},
{
glyphname = .notdef;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"312 1025 LINE",
"325.333 1001 OFFCURVE",
"346.333 989 OFFCURVE",
"375 989 CURVE SMOOTH",
"421.282 989 OFFCURVE",
"452.1 1022 OFFCURVE",
"525 1022 CURVE SMOOTH",
"573 1022 OFFCURVE",
"587 998.667 OFFCURVE",
"587 968 CURVE SMOOTH",
"587 910.043 OFFCURVE",
"538.644 871.889 OFFCURVE",
"490.5 837.5 CURVE SMOOTH",
"439.407 801.005 OFFCURVE",
"402.28 754.76 OFFCURVE",
"417 683 CURVE SMOOTH",
"439 571 LINE",
"651 571 LINE",
"678 661 LINE SMOOTH",
"689.147 700.015 OFFCURVE",
"744.062 735.97 OFFCURVE",
"785.5 773 CURVE SMOOTH",
"825.755 808.973 OFFCURVE",
"874 908.846 OFFCURVE",
"874 987 CURVE SMOOTH",
"874 1069.667 OFFCURVE",
"845.667 1139 OFFCURVE",
"791 1187 CURVE SMOOTH",
"736.333 1235 OFFCURVE",
"657 1263 OFFCURVE",
"553 1263 CURVE SMOOTH",
"413 1263 OFFCURVE",
"312.667 1216 OFFCURVE",
"230 1152 CURVE"
);
},
{
closed = 1;
nodes = (
"374 242.901 OFFCURVE",
"442.969 175 OFFCURVE",
"535 175 CURVE SMOOTH",
"623.043 175 OFFCURVE",
"694 243 OFFCURVE",
"694 331 CURVE SMOOTH",
"694 419 OFFCURVE",
"623.043 487 OFFCURVE",
"535 487 CURVE SMOOTH",
"442.969 487 OFFCURVE",
"374 419.099 OFFCURVE",
"374 331 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"40 0 LINE",
"1083 0 LINE",
"1083 1457 LINE",
"40 1457 LINE"
);
},
{
closed = 1;
nodes = (
"117 1377 LINE",
"996 1377 LINE",
"996 80 LINE",
"117 80 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
63 62 61 60 59 58 57 56 52 50 42 40 34 32 29 27 17 16 4 2 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
14 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 1 2 0 1 30 0 1 2 4 2 1 4 50 0 0 3 1 2 1 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 7 7 8 0 0 35 0 8 8 7 0 0 36 0 7 8 7 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1123;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 386;
}
);
note = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 386;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = at;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1292.667 182 OFFCURVE",
"1402.5 240.5 OFFCURVE",
"1480.5 334.5 CURVE SMOOTH",
"1558.5 428.5 OFFCURVE",
"1604 558.333 OFFCURVE",
"1604 701 CURVE SMOOTH",
"1604 771.667 OFFCURVE",
"1594.667 838.167 OFFCURVE",
"1576 900.5 CURVE SMOOTH",
"1538.667 1025.167 OFFCURVE",
"1471.167 1128.667 OFFCURVE",
"1378.5 1210 CURVE SMOOTH",
"1332.167 1250.667 OFFCURVE",
"1281.5 1285 OFFCURVE",
"1226.5 1313 CURVE SMOOTH",
"1116.5 1369 OFFCURVE",
"991.333 1399 OFFCURVE",
"862 1399 CURVE SMOOTH",
"784.667 1399 OFFCURVE",
"711 1389 OFFCURVE",
"641 1369 CURVE SMOOTH",
"501 1329 OFFCURVE",
"380.333 1255 OFFCURVE",
"283 1155 CURVE SMOOTH",
"234.333 1105 OFFCURVE",
"192.667 1050.333 OFFCURVE",
"158 991 CURVE SMOOTH",
"88.667 872.333 OFFCURVE",
"50 735 OFFCURVE",
"50 595 CURVE SMOOTH",
"50 339 OFFCURVE",
"140.5 129.333 OFFCURVE",
"294.5 -16 CURVE SMOOTH",
"448.5 -161.333 OFFCURVE",
"663.333 -242 OFFCURVE",
"914 -242 CURVE SMOOTH",
"1036.667 -242 OFFCURVE",
"1144.5 -226 OFFCURVE",
"1238.5 -198 CURVE SMOOTH",
"1332.5 -170 OFFCURVE",
"1413.333 -132 OFFCURVE",
"1480 -88 CURVE",
"1438 20 LINE SMOOTH",
"1428.667 44.667 OFFCURVE",
"1412.333 57 OFFCURVE",
"1389 57 CURVE SMOOTH",
"1376.333 57 OFFCURVE",
"1362.667 53 OFFCURVE",
"1348 45 CURVE SMOOTH",
"1308 22.333 OFFCURVE",
"1252 -1.5 OFFCURVE",
"1180 -19.5 CURVE SMOOTH",
"1108 -37.5 OFFCURVE",
"1019.333 -50 OFFCURVE",
"914 -50 CURVE SMOOTH",
"731.333 -50 OFFCURVE",
"570.5 4 OFFCURVE",
"456.5 112 CURVE SMOOTH",
"342.5 220 OFFCURVE",
"274 381.667 OFFCURVE",
"274 595 CURVE SMOOTH",
"274 764.333 OFFCURVE",
"335 917.167 OFFCURVE",
"439 1028.5 CURVE SMOOTH",
"543 1139.833 OFFCURVE",
"690 1208 OFFCURVE",
"862 1208 CURVE SMOOTH",
"1019.333 1208 OFFCURVE",
"1150.167 1163.333 OFFCURVE",
"1241.5 1078 CURVE SMOOTH",
"1332.833 992.667 OFFCURVE",
"1384 866.333 OFFCURVE",
"1384 701 CURVE SMOOTH",
"1384 605 OFFCURVE",
"1364.667 522 OFFCURVE",
"1334 462 CURVE SMOOTH",
"1303.333 402 OFFCURVE",
"1260 366 OFFCURVE",
"1212 366 CURVE SMOOTH",
"1161.333 366 OFFCURVE",
"1129 387.333 OFFCURVE",
"1129 454 CURVE SMOOTH",
"1129 477.333 OFFCURVE",
"1134 508.667 OFFCURVE",
"1144 548 CURVE SMOOTH",
"1242 927 LINE",
"1161.29 960.397 OFFCURVE",
"1091.724 977 OFFCURVE",
"980 977 CURVE SMOOTH",
"918 977 OFFCURVE",
"861.5 970 OFFCURVE",
"810.5 956 CURVE SMOOTH",
"708.5 928 OFFCURVE",
"628.833 880.167 OFFCURVE",
"569.5 815.5 CURVE SMOOTH",
"539.833 783.167 OFFCURVE",
"515.333 748.833 OFFCURVE",
"496 712.5 CURVE SMOOTH",
"457.333 639.833 OFFCURVE",
"438 559 OFFCURVE",
"438 483 CURVE SMOOTH",
"438 308.416 OFFCURVE",
"527.646 183 OFFCURVE",
"700 183 CURVE SMOOTH",
"800 183 OFFCURVE",
"885 217 OFFCURVE",
"965 305 CURVE",
"998.57 217.202 OFFCURVE",
"1079.916 182 OFFCURVE",
"1166 182 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"707.333 374 OFFCURVE",
"676 412.333 OFFCURVE",
"676 491 CURVE SMOOTH",
"676 649.137 OFFCURVE",
"789.909 791 OFFCURVE",
"928 791 CURVE SMOOTH",
"944 791 OFFCURVE",
"960 790 OFFCURVE",
"976 788 CURVE",
"906 515 LINE SMOOTH",
"881.88 418.52 OFFCURVE",
"828.85 374 OFFCURVE",
"762 374 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
91 90 1 0 99 97 90 105 91 105 79 77 67 65 59 57 52 50 42 40 32 30 21 19 9 7 0 89 1 89 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
25 1 10 2 96 1 3 10 5 1 0 3 61 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 3 2 10 1 0 38 12 9 2 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 90 values pushed */
25 1 10 2 96 1 9 10 5 1 0 3 61 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 3 0 9 1 0 35 0 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 91 values pushed */
25 1 10 2 96 1 9 10 5 1 1 3 61 1 7 5 4 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 0 1 0 9 1 1 0 38 0 3 11 1 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1646;
}
);
note = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"526.667 1473 OFFCURVE",
"420.167 1428.5 OFFCURVE",
"347.5 1358.5 CURVE SMOOTH",
"274.833 1288.5 OFFCURVE",
"236 1193 OFFCURVE",
"236 1089 CURVE SMOOTH",
"236 1001 OFFCURVE",
"262.333 907.333 OFFCURVE",
"325 810 CURVE",
"243.667 768.667 OFFCURVE",
"173.333 712.833 OFFCURVE",
"124 645.5 CURVE SMOOTH",
"74.667 578.167 OFFCURVE",
"46 499 OFFCURVE",
"46 411 CURVE SMOOTH",
"46 280.333 OFFCURVE",
"104.333 173.5 OFFCURVE",
"191 99.5 CURVE SMOOTH",
"277.667 25.5 OFFCURVE",
"394 -16 OFFCURVE",
"510 -16 CURVE SMOOTH",
"679.333 -16 OFFCURVE",
"830.333 34 OFFCURVE",
"957 122 CURVE",
"1020 56 LINE SMOOTH",
"1061.907 11.474 OFFCURVE",
"1091.686 0 OFFCURVE",
"1154 0 CURVE SMOOTH",
"1460 0 LINE",
"1154 322 LINE",
"1250 462 OFFCURVE",
"1304 631.333 OFFCURVE",
"1304 826 CURVE",
"1108 826 LINE SMOOTH",
"1072 826 OFFCURVE",
"1048.667 803.333 OFFCURVE",
"1046 766 CURVE SMOOTH",
"1036.667 672.667 OFFCURVE",
"1016 586 OFFCURVE",
"980 506 CURVE",
"620 886 LINE SMOOTH",
"550.501 957.896 OFFCURVE",
"524 1017.217 OFFCURVE",
"524 1091 CURVE SMOOTH",
"524 1173.475 OFFCURVE",
"574.537 1245 OFFCURVE",
"664 1245 CURVE SMOOTH",
"730.667 1245 OFFCURVE",
"767.333 1208.333 OFFCURVE",
"798 1139 CURVE SMOOTH",
"811.333 1109.667 OFFCURVE",
"832 1095 OFFCURVE",
"860 1095 CURVE SMOOTH",
"865.333 1095 OFFCURVE",
"869.333 1095.667 OFFCURVE",
"876 1097 CURVE SMOOTH",
"1076 1137 LINE",
"1066.667 1222.333 OFFCURVE",
"1028 1307.5 OFFCURVE",
"960 1369.5 CURVE SMOOTH",
"892 1431.5 OFFCURVE",
"793.333 1473 OFFCURVE",
"664 1473 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"362 513.333 OFFCURVE",
"389.667 585 OFFCURVE",
"463 645 CURVE",
"798 290 LINE",
"731.333 247.333 OFFCURVE",
"655.333 223 OFFCURVE",
"566 223 CURVE SMOOTH",
"442.602 223 OFFCURVE",
"362 310.111 OFFCURVE",
"362 436 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 70 68 47 45 38 36 32 30 15 13 10 8 0 63 1 63 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
73 72 56 35 25 5 6 3 43 1 4 6 2 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 5 1 4 4 12 31 0 6 6 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
73 72 56 35 25 5 6 3 43 1 4 6 2 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 0 4 4 12 31 0 6 6 5 1 0 36 0 5 5 18 5 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
73 72 56 35 25 5 6 3 43 1 4 6 2 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 6 4 5 6 1 0 35 0 3 0 4 5 3 4 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1446;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"486 1457 LINE SMOOTH",
"347.333 1457 OFFCURVE",
"231.167 1413 OFFCURVE",
"150.5 1337 CURVE SMOOTH",
"69.833 1261 OFFCURVE",
"24 1153.333 OFFCURVE",
"24 1028 CURVE SMOOTH",
"24 913.333 OFFCURVE",
"69.833 808.167 OFFCURVE",
"150.5 731.5 CURVE SMOOTH",
"231.167 654.833 OFFCURVE",
"347.333 606 OFFCURVE",
"486 606 CURVE",
"486 -216 LINE",
"756 -216 LINE",
"756 1206 LINE",
"952 1206 LINE",
"952 -216 LINE",
"1222 -216 LINE",
"1222 1206 LINE",
"1432 1206 LINE",
"1432 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 19 0 18 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 2 1 0 0 5 1 0 36 6 1 5 5 11 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 6 1 5 0 0 5 1 0 35 6 1 5 5 0 0 0 36 2 1 0 5 0 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 2 5 0 0 2 42 0 4 0 3 0 4 3 50 0 3 1 0 3 1 48 0 1 1 51 6 1 5 2 0 5 1 2 35 6 1 5 5 0 0 0 36 0 0 5 0 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1458;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"904 1337 LINE",
"822.52 1418.48 OFFCURVE",
"689.359 1471 OFFCURVE",
"546 1471 CURVE SMOOTH",
"408.667 1471 OFFCURVE",
"306 1433 OFFCURVE",
"238 1373 CURVE SMOOTH",
"170 1313 OFFCURVE",
"136 1231 OFFCURVE",
"136 1143 CURVE SMOOTH",
"136 1039 OFFCURVE",
"175.333 970.333 OFFCURVE",
"234 917 CURVE",
"127.333 866.333 OFFCURVE",
"76 779 OFFCURVE",
"76 675 CURVE SMOOTH",
"76 500.043 OFFCURVE",
"201.631 425.4 OFFCURVE",
"348 368 CURVE SMOOTH",
"402.921 346.462 OFFCURVE",
"491.158 317.075 OFFCURVE",
"535 294 CURVE SMOOTH",
"585.667 267.333 OFFCURVE",
"620 235.333 OFFCURVE",
"620 186 CURVE SMOOTH",
"620 123.333 OFFCURVE",
"568.667 92 OFFCURVE",
"482 92 CURVE SMOOTH",
"375.123 92 OFFCURVE",
"297.409 168 OFFCURVE",
"232 168 CURVE SMOOTH",
"193.333 168 OFFCURVE",
"171.333 151.667 OFFCURVE",
"154 125 CURVE SMOOTH",
"82 11 LINE",
"164.677 -63.409 OFFCURVE",
"320.935 -117 OFFCURVE",
"454 -117 CURVE SMOOTH",
"595.333 -117 OFFCURVE",
"704.5 -80.667 OFFCURVE",
"778.5 -18 CURVE SMOOTH",
"852.5 44.667 OFFCURVE",
"890 133.333 OFFCURVE",
"890 236 CURVE SMOOTH",
"890 326.667 OFFCURVE",
"851.333 388.667 OFFCURVE",
"794 438 CURVE",
"903.333 494 OFFCURVE",
"950 586.333 OFFCURVE",
"950 693 CURVE SMOOTH",
"950 848.1 OFFCURVE",
"820.884 930.227 OFFCURVE",
"680 991 CURVE SMOOTH",
"566.412 1039.999 OFFCURVE",
"410 1085.369 OFFCURVE",
"410 1157 CURVE SMOOTH",
"410 1213 OFFCURVE",
"456 1253 OFFCURVE",
"552 1253 CURVE SMOOTH",
"646.558 1253 OFFCURVE",
"714.727 1194 OFFCURVE",
"774 1194 CURVE SMOOTH",
"802 1194 OFFCURVE",
"818 1202.667 OFFCURVE",
"834 1228 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"350 762.667 OFFCURVE",
"365.333 789.667 OFFCURVE",
"404 815 CURVE",
"458.819 790.278 OFFCURVE",
"548.166 757.141 OFFCURVE",
"593 733 CURVE SMOOTH",
"645 705 OFFCURVE",
"680 673 OFFCURVE",
"680 625 CURVE SMOOTH",
"680 589 OFFCURVE",
"665.333 555.667 OFFCURVE",
"628 533 CURVE",
"571.953 556.712 OFFCURVE",
"481.973 590.707 OFFCURVE",
"437 615.5 CURVE SMOOTH",
"385 644.167 OFFCURVE",
"350 677.333 OFFCURVE",
"350 724 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
69 67 46 44 41 39 32 30 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
73 1 1 5 87 79 60 23 4 3 0 36 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 4 0 2 4 2 1 0 37 0 1 1 5 1 0 36 0 5 5 17 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
73 1 1 5 87 79 60 23 4 3 0 36 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1014;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"938.684 539.734 OFFCURVE",
"888.738 486 OFFCURVE",
"800 486 CURVE SMOOTH",
"685.829 486 OFFCURVE",
"618 582.703 OFFCURVE",
"618 732 CURVE SMOOTH",
"618 884 OFFCURVE",
"687.333 979 OFFCURVE",
"822 979 CURVE SMOOTH",
"903.766 979 OFFCURVE",
"958.01 921 OFFCURVE",
"1004 921 CURVE SMOOTH",
"1030.667 921 OFFCURVE",
"1045.333 939.333 OFFCURVE",
"1056 950 CURVE",
"1138 1059 LINE",
"1070 1139 OFFCURVE",
"959.333 1199 OFFCURVE",
"806 1199 CURVE SMOOTH",
"676.667 1199 OFFCURVE",
"561.833 1150.833 OFFCURVE",
"478.5 1067.5 CURVE SMOOTH",
"395.167 984.167 OFFCURVE",
"344 868 OFFCURVE",
"344 732 CURVE SMOOTH",
"344 601.333 OFFCURVE",
"387 485.167 OFFCURVE",
"463 400.5 CURVE SMOOTH",
"539 315.833 OFFCURVE",
"649.333 264 OFFCURVE",
"784 264 CURVE SMOOTH",
"937.333 264 OFFCURVE",
"1056 316 OFFCURVE",
"1128 416 CURVE",
"1026 521 LINE",
"1015.333 533 OFFCURVE",
"1000 542 OFFCURVE",
"984 542 CURVE"
);
},
{
closed = 1;
nodes = (
"40 660.333 OFFCURVE",
"48.833 594.5 OFFCURVE",
"66.5 531.5 CURVE SMOOTH",
"101.833 405.5 OFFCURVE",
"167.333 294.667 OFFCURVE",
"258 204 CURVE SMOOTH",
"303.333 158.667 OFFCURVE",
"353.667 119.833 OFFCURVE",
"409 87.5 CURVE SMOOTH",
"519.667 22.833 OFFCURVE",
"648 -14 OFFCURVE",
"784 -14 CURVE SMOOTH",
"852.667 -14 OFFCURVE",
"918.833 -5.167 OFFCURVE",
"982.5 12.5 CURVE SMOOTH",
"1109.833 47.833 OFFCURVE",
"1220.167 113.333 OFFCURVE",
"1311.5 204 CURVE SMOOTH",
"1357.167 249.333 OFFCURVE",
"1396.167 299.5 OFFCURVE",
"1428.5 354.5 CURVE SMOOTH",
"1493.167 464.5 OFFCURVE",
"1530 593 OFFCURVE",
"1530 729 CURVE SMOOTH",
"1530 797.667 OFFCURVE",
"1521.167 863.667 OFFCURVE",
"1503.5 927 CURVE SMOOTH",
"1468.167 1053.667 OFFCURVE",
"1402.833 1164.333 OFFCURVE",
"1311.5 1255 CURVE SMOOTH",
"1265.833 1300.333 OFFCURVE",
"1215.5 1339.167 OFFCURVE",
"1160.5 1371.5 CURVE SMOOTH",
"1050.5 1436.167 OFFCURVE",
"921.333 1473 OFFCURVE",
"784 1473 CURVE SMOOTH",
"715.333 1473 OFFCURVE",
"649.5 1464.167 OFFCURVE",
"586.5 1446.5 CURVE SMOOTH",
"460.5 1411.167 OFFCURVE",
"348.667 1345.667 OFFCURVE",
"258 1255 CURVE SMOOTH",
"212.667 1209.667 OFFCURVE",
"173.833 1159.5 OFFCURVE",
"141.5 1104.5 CURVE SMOOTH",
"76.833 994.5 OFFCURVE",
"40 866.333 OFFCURVE",
"40 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"206 898.333 OFFCURVE",
"269 1050.5 OFFCURVE",
"373 1160.5 CURVE SMOOTH",
"477 1270.5 OFFCURVE",
"621.333 1337 OFFCURVE",
"784 1337 CURVE SMOOTH",
"838.667 1337 OFFCURVE",
"891 1329.833 OFFCURVE",
"941 1315.5 CURVE SMOOTH",
"1041 1286.833 OFFCURVE",
"1128.333 1234.5 OFFCURVE",
"1199 1160.5 CURVE SMOOTH",
"1234.333 1123.5 OFFCURVE",
"1264.5 1082.5 OFFCURVE",
"1289.5 1037.5 CURVE SMOOTH",
"1339.5 947.5 OFFCURVE",
"1368 842.333 OFFCURVE",
"1368 729 CURVE SMOOTH",
"1368 559.667 OFFCURVE",
"1304.333 409.167 OFFCURVE",
"1199 300.5 CURVE SMOOTH",
"1093.667 191.833 OFFCURVE",
"948 126 OFFCURVE",
"784 126 CURVE SMOOTH",
"621.333 126 OFFCURVE",
"477 191.833 OFFCURVE",
"373 300.5 CURVE SMOOTH",
"269 409.167 OFFCURVE",
"206 559.667 OFFCURVE",
"206 729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 88 86 76 74 64 62 50 48 38 36 30 28 25 23 18 16 8 6 0 41 1 41 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
20 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 18 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
20 1 4 2 4 1 1 5 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 7 7 8 1 0 35 0 8 8 7 1 0 36 0 7 8 7 1 0 33 9 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1570;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"40 660.333 OFFCURVE",
"48.833 594.5 OFFCURVE",
"66.5 531.5 CURVE SMOOTH",
"101.833 405.5 OFFCURVE",
"167.333 294.667 OFFCURVE",
"258 204 CURVE SMOOTH",
"303.333 158.667 OFFCURVE",
"353.667 119.833 OFFCURVE",
"409 87.5 CURVE SMOOTH",
"519.667 22.833 OFFCURVE",
"648 -14 OFFCURVE",
"784 -14 CURVE SMOOTH",
"852.667 -14 OFFCURVE",
"918.833 -5.167 OFFCURVE",
"982.5 12.5 CURVE SMOOTH",
"1109.833 47.833 OFFCURVE",
"1220.167 113.333 OFFCURVE",
"1311.5 204 CURVE SMOOTH",
"1357.167 249.333 OFFCURVE",
"1396.167 299.5 OFFCURVE",
"1428.5 354.5 CURVE SMOOTH",
"1493.167 464.5 OFFCURVE",
"1530 593 OFFCURVE",
"1530 729 CURVE SMOOTH",
"1530 797.667 OFFCURVE",
"1521.167 863.667 OFFCURVE",
"1503.5 927 CURVE SMOOTH",
"1468.167 1053.667 OFFCURVE",
"1402.833 1164.333 OFFCURVE",
"1311.5 1255 CURVE SMOOTH",
"1265.833 1300.333 OFFCURVE",
"1215.5 1339.167 OFFCURVE",
"1160.5 1371.5 CURVE SMOOTH",
"1050.5 1436.167 OFFCURVE",
"921.333 1473 OFFCURVE",
"784 1473 CURVE SMOOTH",
"715.333 1473 OFFCURVE",
"649.5 1464.167 OFFCURVE",
"586.5 1446.5 CURVE SMOOTH",
"460.5 1411.167 OFFCURVE",
"348.667 1345.667 OFFCURVE",
"258 1255 CURVE SMOOTH",
"212.667 1209.667 OFFCURVE",
"173.833 1159.5 OFFCURVE",
"141.5 1104.5 CURVE SMOOTH",
"76.833 994.5 OFFCURVE",
"40 866.333 OFFCURVE",
"40 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"206 898.333 OFFCURVE",
"269 1050.5 OFFCURVE",
"373 1160.5 CURVE SMOOTH",
"477 1270.5 OFFCURVE",
"621.333 1337 OFFCURVE",
"784 1337 CURVE SMOOTH",
"838.667 1337 OFFCURVE",
"891 1329.833 OFFCURVE",
"941 1315.5 CURVE SMOOTH",
"1041 1286.833 OFFCURVE",
"1128.333 1234.5 OFFCURVE",
"1199 1160.5 CURVE SMOOTH",
"1234.333 1123.5 OFFCURVE",
"1264.5 1082.5 OFFCURVE",
"1289.5 1037.5 CURVE SMOOTH",
"1339.5 947.5 OFFCURVE",
"1368 842.333 OFFCURVE",
"1368 729 CURVE SMOOTH",
"1368 562.333 OFFCURVE",
"1307.333 417 OFFCURVE",
"1206 309 CURVE",
"1082 566 LINE SMOOTH",
"1060.667 610 OFFCURVE",
"1035.667 641 OFFCURVE",
"997 661 CURVE",
"1113.204 704.899 OFFCURVE",
"1168 798.927 OFFCURVE",
"1168 914 CURVE SMOOTH",
"1168 999.333 OFFCURVE",
"1139.5 1066.667 OFFCURVE",
"1077.5 1112 CURVE SMOOTH",
"1015.5 1157.333 OFFCURVE",
"919.333 1182 OFFCURVE",
"786 1182 CURVE SMOOTH",
"434 1182 LINE",
"434 281 LINE",
"702 281 LINE",
"702 583 LINE",
"734 583 LINE SMOOTH",
"766 583 OFFCURVE",
"779.333 573.667 OFFCURVE",
"794 551 CURVE",
"886 320 LINE",
"900 294 OFFCURVE",
"925.333 281 OFFCURVE",
"962 281 CURVE SMOOTH",
"1178 281 LINE",
"1074 183.667 OFFCURVE",
"937.333 126 OFFCURVE",
"784 126 CURVE SMOOTH",
"621.333 126 OFFCURVE",
"477 191.833 OFFCURVE",
"373 300.5 CURVE SMOOTH",
"269 409.167 OFFCURVE",
"206 559.667 OFFCURVE",
"206 729 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"702 986 LINE",
"786 986 LINE SMOOTH",
"884.428 986 OFFCURVE",
"904 956.738 OFFCURVE",
"904 880 CURVE SMOOTH",
"904 797.139 OFFCURVE",
"883.873 767 OFFCURVE",
"766 767 CURVE SMOOTH",
"702 767 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
89 87 79 77 73 71 49 47 46 45 44 42 38 36 34 32 22 20 8 6 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
58 1 4 8 62 1 3 4 2 30 5 1 3 4 2 4 3 2 50 0 6 0 9 8 6 9 1 0 38 0 8 0 4 3 8 4 1 0 38 0 7 7 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
58 1 4 8 62 1 3 4 2 30 5 1 3 4 2 4 3 2 50 0 0 0 7 6 0 7 1 0 38 0 6 0 9 8 6 9 1 0 38 0 8 0 4 3 8 4 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
58 1 4 8 62 1 5 4 2 30 0 5 4 3 4 5 3 50 0 3 2 4 3 2 48 0 0 0 7 6 0 7 1 0 38 0 6 0 9 8 6 9 1 0 38 0 8 0 4 5 8 4 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1570;
}
);
note = registered;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"862 1426 LINE",
"840.99 1452.263 OFFCURVE",
"828.613 1457 OFFCURVE",
"794 1457 CURVE SMOOTH",
"610 1457 LINE",
"610 844 LINE",
"796 844 LINE",
"796 1096 LINE",
"784 1204 LINE",
"904 940 LINE SMOOTH",
"917.333 912 OFFCURVE",
"944 896 OFFCURVE",
"976 896 CURVE SMOOTH",
"1006 896 LINE SMOOTH",
"1038 896 OFFCURVE",
"1064.667 912 OFFCURVE",
"1078 940 CURVE SMOOTH",
"1204 1209 LINE",
"1190 1096 LINE",
"1190 844 LINE",
"1376 844 LINE",
"1376 1457 LINE",
"1192 1457 LINE SMOOTH",
"1157.333 1457 OFFCURVE",
"1146.667 1452.667 OFFCURVE",
"1124 1426 CURVE",
"1024 1209 LINE SMOOTH",
"1010.667 1181 OFFCURVE",
"998.333 1153 OFFCURVE",
"989 1125 CURVE",
"979.667 1153 OFFCURVE",
"968.667 1181 OFFCURVE",
"956 1209 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"50 1457 LINE",
"50 1288 LINE",
"198 1288 LINE",
"198 844 LINE",
"410 844 LINE",
"410 1288 LINE",
"560 1288 LINE",
"560 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
34 34 34 41 34 41 40 39 38 37 36 35 29 27 26 25 20 17 12 11 10 8 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
24 23 14 13 2 5 2 5 1 30 0 2 5 1 5 2 1 50 7 1 5 5 0 1 0 36 9 8 4 3 0 0 11 31 6 3 2 1 1 0 1 0 36 9 8 4 3 0 0 11 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
24 23 14 13 2 5 2 5 1 30 0 2 5 1 5 2 1 50 9 8 4 3 0 7 1 5 2 0 5 0 0 38 9 8 4 3 0 0 1 0 0 36 6 3 2 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
24 23 14 13 2 5 2 5 1 30 0 7 8 5 5 7 42 0 2 5 6 5 2 6 50 0 6 3 5 6 3 48 0 0 4 1 0 1 0 35 9 1 8 0 5 2 8 5 0 0 38 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1462;
}
);
note = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"40 1023 OFFCURVE",
"79.667 934 OFFCURVE",
"145 870 CURVE SMOOTH",
"210.333 806 OFFCURVE",
"301.333 765 OFFCURVE",
"404 765 CURVE SMOOTH",
"506.667 765 OFFCURVE",
"598.5 806 OFFCURVE",
"664.5 870 CURVE SMOOTH",
"730.5 934 OFFCURVE",
"770 1023 OFFCURVE",
"770 1119 CURVE SMOOTH",
"770 1217.667 OFFCURVE",
"730.5 1307 OFFCURVE",
"664.5 1371 CURVE SMOOTH",
"598.5 1435 OFFCURVE",
"506.667 1475 OFFCURVE",
"404 1475 CURVE SMOOTH",
"301.333 1475 OFFCURVE",
"210.333 1435 OFFCURVE",
"145 1371 CURVE SMOOTH",
"79.667 1307 OFFCURVE",
"40 1217.667 OFFCURVE",
"40 1119 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"254 1207.088 OFFCURVE",
"315.422 1278 OFFCURVE",
"404 1278 CURVE SMOOTH",
"492.578 1278 OFFCURVE",
"554 1207.088 OFFCURVE",
"554 1117 CURVE SMOOTH",
"554 1028.703 OFFCURVE",
"491.428 960 OFFCURVE",
"404 960 CURVE SMOOTH",
"316.572 960 OFFCURVE",
"254 1028.703 OFFCURVE",
"254 1117 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 810;
}
);
note = degree;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"180 -329 LINE",
"420 -329 LINE",
"420 1557 LINE",
"180 1557 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 0 0 36 0 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"180 738 LINE",
"420 738 LINE",
"420 1557 LINE",
"180 1557 LINE"
);
},
{
closed = 1;
nodes = (
"180 -329 LINE",
"420 -329 LINE",
"420 490 LINE",
"180 490 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 2 3 0 0 36 0 3 3 16 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"52 809 LINE",
"464 809 LINE",
"464 505 LINE",
"424 -314 LINE",
"468 -339.333 OFFCURVE",
"524 -353 OFFCURVE",
"584 -353 CURVE SMOOTH",
"644 -353 OFFCURVE",
"700 -339.333 OFFCURVE",
"744 -314 CURVE",
"704 505 LINE",
"704 809 LINE",
"1116 809 LINE",
"1116 909 LINE SMOOTH",
"1116 982.488 OFFCURVE",
"1064.498 1037 OFFCURVE",
"972 1037 CURVE SMOOTH",
"933.333 1037 OFFCURVE",
"890.5 1029.5 OFFCURVE",
"844.5 1019.5 CURVE SMOOTH",
"807.633 1011.485 OFFCURVE",
"742.623 995.725 OFFCURVE",
"704 988 CURVE",
"744 1477 LINE",
"700 1502.333 OFFCURVE",
"644 1515 OFFCURVE",
"584 1515 CURVE SMOOTH",
"524 1515 OFFCURVE",
"468 1502.333 OFFCURVE",
"424 1477 CURVE",
"463 988 LINE",
"424.255 995.749 OFFCURVE",
"359.537 1011.44 OFFCURVE",
"323 1019.5 CURVE SMOOTH",
"277.667 1029.5 OFFCURVE",
"233.333 1037 OFFCURVE",
"196 1037 CURVE SMOOTH",
"102.673 1037 OFFCURVE",
"52 982.488 OFFCURVE",
"52 909 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
41 40 36 34 30 29 24 22 15 13 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
17 11 2 0 1 18 10 2 3 0 38 32 2 4 3 3 30 0 1 1 19 31 5 1 3 3 0 1 0 36 2 1 0 0 14 31 0 4 4 22 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
17 11 2 0 1 18 10 2 3 0 38 32 2 4 3 3 30 5 1 3 3 0 1 0 36 2 1 0 0 14 31 0 4 4 1 1 0 36 0 1 1 19 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
17 11 2 0 1 18 10 2 3 0 38 32 2 4 3 3 30 0 1 0 4 1 4 1 0 37 5 1 3 3 0 1 0 36 2 1 0 0 14 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
17 11 2 0 1 18 10 2 3 0 38 32 2 4 3 3 30 0 1 0 4 1 1 0 35 2 1 0 5 1 3 4 0 3 0 0 38 0 1 1 4 1 0 36 0 4 1 4 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
17 11 2 0 1 18 10 2 5 2 38 32 2 4 3 3 30 0 1 0 4 1 1 0 35 0 0 0 5 3 0 5 0 0 38 0 2 0 3 4 2 3 0 0 38 0 1 1 4 1 0 36 0 4 1 4 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"52 254 LINE SMOOTH",
"52 180.267 OFFCURVE",
"102.19 125 OFFCURVE",
"196 125 CURVE SMOOTH",
"233.333 125 OFFCURVE",
"277.667 132.5 OFFCURVE",
"323 142.5 CURVE SMOOTH",
"359.537 150.56 OFFCURVE",
"424.255 166.251 OFFCURVE",
"463 174 CURVE",
"424 -314 LINE",
"468 -339.333 OFFCURVE",
"524 -353 OFFCURVE",
"584 -353 CURVE SMOOTH",
"644 -353 OFFCURVE",
"700 -339.333 OFFCURVE",
"744 -314 CURVE",
"704 174 LINE",
"742.623 166.275 OFFCURVE",
"807.633 150.515 OFFCURVE",
"844.5 142.5 CURVE SMOOTH",
"890.5 132.5 OFFCURVE",
"933.333 125 OFFCURVE",
"972 125 CURVE SMOOTH",
"1064.99 125 OFFCURVE",
"1116 179.598 OFFCURVE",
"1116 254 CURVE SMOOTH",
"1116 353 LINE",
"704 353 LINE",
"704 809 LINE",
"1116 809 LINE",
"1116 909 LINE SMOOTH",
"1116 982.488 OFFCURVE",
"1064.498 1037 OFFCURVE",
"972 1037 CURVE SMOOTH",
"933.333 1037 OFFCURVE",
"890.5 1029.5 OFFCURVE",
"844.5 1019.5 CURVE SMOOTH",
"807.633 1011.485 OFFCURVE",
"742.623 995.725 OFFCURVE",
"704 988 CURVE",
"744 1477 LINE",
"700 1502.333 OFFCURVE",
"644 1515 OFFCURVE",
"584 1515 CURVE SMOOTH",
"524 1515 OFFCURVE",
"468 1502.333 OFFCURVE",
"424 1477 CURVE",
"463 988 LINE",
"424.255 995.749 OFFCURVE",
"359.537 1011.44 OFFCURVE",
"323 1019.5 CURVE SMOOTH",
"277.667 1029.5 OFFCURVE",
"233.333 1037 OFFCURVE",
"196 1037 CURVE SMOOTH",
"102.673 1037 OFFCURVE",
"52 982.488 OFFCURVE",
"52 909 CURVE SMOOTH",
"52 809 LINE",
"464 809 LINE",
"464 353 LINE",
"52 353 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
61 59 52 50 43 41 36 35 34 33 28 26 19 17 10 8 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
21 15 2 2 3 22 14 2 1 2 55 47 2 7 0 54 48 2 8 7 4 30 6 1 0 9 1 7 8 0 7 1 0 38 0 3 3 19 31 5 1 1 1 2 1 0 36 4 1 2 2 14 31 0 8 8 22 8 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
21 15 2 2 3 22 14 2 1 2 55 47 2 7 0 54 48 2 8 7 4 30 6 1 0 9 1 7 8 0 7 1 0 38 5 1 1 1 2 1 0 36 4 1 2 2 14 31 0 8 8 3 1 0 36 0 3 3 19 8 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
21 15 2 2 3 22 14 2 1 2 55 47 2 7 0 54 48 2 8 7 4 30 6 1 0 9 1 7 8 0 7 1 0 38 0 3 0 8 3 8 1 0 37 5 1 1 1 2 1 0 36 4 1 2 2 14 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
21 15 2 2 3 22 14 2 1 2 55 47 2 7 0 54 48 2 8 7 4 30 0 3 2 8 3 1 0 35 4 1 2 5 1 1 0 2 1 0 0 38 6 1 0 9 1 7 8 0 7 1 0 38 0 3 3 8 1 0 36 0 8 3 8 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 85 values pushed */
21 15 2 2 3 22 14 2 5 4 55 47 2 9 6 54 48 2 8 7 4 30 0 3 2 8 3 1 0 35 0 4 0 5 1 4 5 0 0 38 0 2 0 1 0 2 1 0 0 38 0 0 0 9 7 0 9 1 0 38 0 6 0 7 8 6 7 1 0 38 0 3 3 8 1 0 36 0 8 3 8 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = cent;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"498 -211 LINE",
"612 -211 LINE SMOOTH",
"658.667 -211 OFFCURVE",
"690 -174 OFFCURVE",
"694 -138 CURVE SMOOTH",
"706 -12 LINE",
"841.774 -1.138 OFFCURVE",
"976.016 47.817 OFFCURVE",
"1078 160 CURVE",
"992 267 LINE SMOOTH",
"980 281.667 OFFCURVE",
"960 292 OFFCURVE",
"936 292 CURVE SMOOTH",
"880.772 292 OFFCURVE",
"821.65 224.928 OFFCURVE",
"729 212 CURVE",
"790 810 LINE",
"840.81 792.327 OFFCURVE",
"892.603 760 OFFCURVE",
"926 760 CURVE SMOOTH",
"958 760 OFFCURVE",
"970.667 772.333 OFFCURVE",
"988 795 CURVE SMOOTH",
"1068 900 LINE",
"996 968 OFFCURVE",
"913 1013.333 OFFCURVE",
"813 1036 CURVE",
"836 1263 LINE",
"722 1263 LINE SMOOTH",
"675.333 1263 OFFCURVE",
"644 1226 OFFCURVE",
"640 1190 CURVE SMOOTH",
"626 1050 LINE",
"458 1042 OFFCURVE",
"329 981.667 OFFCURVE",
"241 887 CURVE SMOOTH",
"153 792.333 OFFCURVE",
"108 663 OFFCURVE",
"108 519 CURVE SMOOTH",
"108 371 OFFCURVE",
"152.5 250.333 OFFCURVE",
"226.5 161 CURVE SMOOTH",
"300.5 71.667 OFFCURVE",
"403.333 15.333 OFFCURVE",
"518 -6 CURVE"
);
},
{
closed = 1;
nodes = (
"414 685.667 OFFCURVE",
"471.333 793.333 OFFCURVE",
"602 820 CURVE",
"543 236 LINE",
"459 280 OFFCURVE",
"414 375 OFFCURVE",
"414 519 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
48 46 35 33 24 22 15 13 10 9 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
53 19 16 3 2 0 52 38 29 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 4 4 0 1 0 36 0 0 0 20 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
53 19 16 3 2 0 52 38 29 0 4 4 3 2 30 0 1 0 1 52 0 2 0 3 0 2 3 50 0 3 4 0 3 4 48 0 0 2 4 0 1 0 35 0 0 0 4 1 0 36 0 4 0 4 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"200 606 OFFCURVE",
"217.333 542.667 OFFCURVE",
"248 488 CURVE",
"96 338 LINE",
"250 188 LINE",
"403 338 LINE",
"456.333 311.333 OFFCURVE",
"516 296 OFFCURVE",
"580 296 CURVE SMOOTH",
"646.667 296 OFFCURVE",
"708.333 312.667 OFFCURVE",
"763 342 CURVE",
"914 194 LINE",
"1070 343 LINE",
"915 495 LINE",
"944.333 548.333 OFFCURVE",
"960 608.667 OFFCURVE",
"960 674 CURVE SMOOTH",
"960 742 OFFCURVE",
"941.667 804.333 OFFCURVE",
"911 859 CURVE",
"1064 1010 LINE",
"910 1160 LINE",
"757 1008 LINE",
"703.667 1036 OFFCURVE",
"644 1052 OFFCURVE",
"580 1052 CURVE SMOOTH",
"512 1052 OFFCURVE",
"450.667 1035.333 OFFCURVE",
"396 1006 CURVE",
"246 1154 LINE",
"90 1006 LINE",
"244 853 LINE",
"216 799.667 OFFCURVE",
"200 739.333 OFFCURVE",
"200 674 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"428 762.943 OFFCURVE",
"495.41 835 OFFCURVE",
"580 835 CURVE SMOOTH",
"665.751 835 OFFCURVE",
"734 762.963 OFFCURVE",
"734 674 CURVE SMOOTH",
"734 587.527 OFFCURVE",
"665.259 515 OFFCURVE",
"580 515 CURVE SMOOTH",
"495.925 515 OFFCURVE",
"428 587.548 OFFCURVE",
"428 674 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
52 50 42 40 28 26 10 8 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
15 14 12 6 4 3 6 3 0 33 32 30 24 22 21 6 1 2 2 30 13 5 2 0 28 31 23 2 1 27 0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 20 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
15 14 12 6 4 3 6 3 0 33 32 30 24 22 21 6 1 2 2 30 13 5 2 0 28 31 23 2 1 27 0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"410 -211 LINE",
"524 -211 LINE SMOOTH",
"570.667 -211 OFFCURVE",
"602 -175.333 OFFCURVE",
"606 -138 CURVE SMOOTH",
"618 -13 LINE",
"772.667 -1 OFFCURVE",
"893.333 55.667 OFFCURVE",
"976 141 CURVE SMOOTH",
"1058.667 226.333 OFFCURVE",
"1102 340.333 OFFCURVE",
"1102 467 CURVE SMOOTH",
"1102 509 OFFCURVE",
"1096.667 546.5 OFFCURVE",
"1086 579.5 CURVE SMOOTH",
"1064.667 645.5 OFFCURVE",
"1025.833 695.667 OFFCURVE",
"974.5 733 CURVE SMOOTH",
"948.833 751.667 OFFCURVE",
"921.167 768.167 OFFCURVE",
"891.5 782.5 CURVE SMOOTH",
"832.167 811.167 OFFCURVE",
"767 832.333 OFFCURVE",
"703 851 CURVE",
"738 1206 LINE",
"805.097 1186.52 OFFCURVE",
"888.099 1138 OFFCURVE",
"928 1138 CURVE SMOOTH",
"960 1138 OFFCURVE",
"981.333 1152.667 OFFCURVE",
"1004 1186 CURVE SMOOTH",
"1080 1297 LINE",
"1008 1365 OFFCURVE",
"906 1430.333 OFFCURVE",
"762 1457 CURVE",
"782 1654 LINE",
"668 1654 LINE SMOOTH",
"621.333 1654 OFFCURVE",
"590 1618.333 OFFCURVE",
"586 1581 CURVE SMOOTH",
"575 1470 LINE",
"420.333 1462 OFFCURVE",
"299.5 1407 OFFCURVE",
"217.5 1327 CURVE SMOOTH",
"135.5 1247 OFFCURVE",
"92 1143.333 OFFCURVE",
"92 1038 CURVE SMOOTH",
"92 895.333 OFFCURVE",
"144 804.333 OFFCURVE",
"220 743 CURVE SMOOTH",
"296 681.667 OFFCURVE",
"395 649.667 OFFCURVE",
"491 623 CURVE",
"454 245 LINE",
"358.345 270.508 OFFCURVE",
"263.582 355 OFFCURVE",
"206 355 CURVE SMOOTH",
"175.333 355 OFFCURVE",
"146 337.667 OFFCURVE",
"130 315 CURVE SMOOTH",
"34 176 LINE",
"130 86.667 OFFCURVE",
"276.667 20.333 OFFCURVE",
"430 -5 CURVE"
);
},
{
closed = 1;
nodes = (
"808 319 OFFCURVE",
"753 258.333 OFFCURVE",
"643 239 CURVE",
"675 569 LINE",
"755 538.333 OFFCURVE",
"808 497 OFFCURVE",
"808 421 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"384 1146.537 OFFCURVE",
"439.706 1196.216 OFFCURVE",
"550 1213 CURVE",
"520 911 LINE",
"438.667 944.333 OFFCURVE",
"384 989.333 OFFCURVE",
"384 1068 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
59 57 37 35 28 26 23 22 8 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
70 32 29 3 3 1 69 63 42 13 4 0 3 64 3 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 4 4 1 1 0 36 0 1 1 17 4 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
70 32 29 3 3 1 69 63 42 13 4 0 3 64 3 0 3 4 0 3 30 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 1 3 4 1 1 0 35 0 1 1 4 1 0 36 0 4 1 4 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"40 785 LINE",
"139 785 LINE",
"138.333 775.667 OFFCURVE",
"138 766.333 OFFCURVE",
"138 757 CURVE SMOOTH",
"138 747.667 OFFCURVE",
"138 738.333 OFFCURVE",
"138 729 CURVE SMOOTH",
"138 694 LINE",
"40 694 LINE",
"40 529 LINE",
"153 529 LINE",
"178.333 366.333 OFFCURVE",
"237.833 230.667 OFFCURVE",
"330.5 136 CURVE SMOOTH",
"423.167 41.333 OFFCURVE",
"549.333 -14 OFFCURVE",
"708 -14 CURVE SMOOTH",
"898.667 -14 OFFCURVE",
"1052 65.333 OFFCURVE",
"1144 216 CURVE",
"1008 337 LINE",
"993.333 351.667 OFFCURVE",
"982.667 356 OFFCURVE",
"964 356 CURVE SMOOTH",
"933.708 356 OFFCURVE",
"907.728 326.098 OFFCURVE",
"882.5 300 CURVE SMOOTH",
"852.07 268.52 OFFCURVE",
"796.045 244 OFFCURVE",
"724 244 CURVE SMOOTH",
"598.667 244 OFFCURVE",
"508.667 335.667 OFFCURVE",
"474 529 CURVE",
"760 529 LINE SMOOTH",
"807.553 529 OFFCURVE",
"844 564.422 OFFCURVE",
"844 602 CURVE SMOOTH",
"844 694 LINE",
"458 694 LINE",
"458 729 LINE SMOOTH",
"458 738.333 OFFCURVE",
"458 747.667 OFFCURVE",
"458 757 CURVE SMOOTH",
"458 766.333 OFFCURVE",
"458.333 775.667 OFFCURVE",
"459 785 CURVE",
"856 785 LINE SMOOTH",
"903.553 785 OFFCURVE",
"940 820.422 OFFCURVE",
"940 858 CURVE SMOOTH",
"940 950 LINE",
"480 950 LINE",
"521.333 1123.333 OFFCURVE",
"612.667 1213 OFFCURVE",
"738 1213 CURVE SMOOTH",
"847.835 1213 OFFCURVE",
"904.389 1116 OFFCURVE",
"962 1116 CURVE SMOOTH",
"991.333 1116 OFFCURVE",
"1007.333 1131 OFFCURVE",
"1022 1147 CURVE SMOOTH",
"1136 1265 LINE",
"1052 1389 OFFCURVE",
"913.333 1471 OFFCURVE",
"724 1471 CURVE SMOOTH",
"584 1471 OFFCURVE",
"459.333 1419.667 OFFCURVE",
"362 1329 CURVE SMOOTH",
"264.667 1238.333 OFFCURVE",
"193.333 1107.333 OFFCURVE",
"160 950 CURVE",
"40 950 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
71 70 66 65 64 63 59 57 52 50 45 43 41 39 34 33 29 27 22 21 19 17 14 12 7 5 1 0 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
9 1 3 1 55 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 8 8 10 1 0 36 0 10 10 18 10 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
9 1 3 1 55 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 99 values pushed */
9 1 3 1 55 1 10 8 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 0 0 0 13 5 0 13 0 0 38 0 4 0 5 6 4 5 1 0 38 0 12 0 11 7 12 11 0 0 38 0 6 0 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1024 727 LINE",
"1024 939 LINE",
"755 939 LINE",
"772 1064 LINE SMOOTH",
"789.333 1189.333 OFFCURVE",
"848 1236 OFFCURVE",
"944 1236 CURVE SMOOTH",
"1010.667 1236 OFFCURVE",
"1040 1256 OFFCURVE",
"1040 1320 CURVE SMOOTH",
"1040 1485 LINE",
"857.333 1485 OFFCURVE",
"724 1449.167 OFFCURVE",
"632 1380.5 CURVE SMOOTH",
"540 1311.833 OFFCURVE",
"489.333 1209 OFFCURVE",
"472 1073 CURVE SMOOTH",
"455 939 LINE",
"266 939 LINE",
"266 817 LINE SMOOTH",
"266 774.333 OFFCURVE",
"290 752.667 OFFCURVE",
"334 742 CURVE SMOOTH",
"429 722 LINE",
"350 82 LINE SMOOTH",
"334.576 -38.824 OFFCURVE",
"287.065 -90 OFFCURVE",
"186 -90 CURVE SMOOTH",
"119.333 -90 OFFCURVE",
"90 -118 OFFCURVE",
"90 -182 CURVE SMOOTH",
"90 -339 LINE",
"271.333 -339 OFFCURVE",
"405 -308.667 OFFCURVE",
"497 -242 CURVE SMOOTH",
"589 -175.333 OFFCURVE",
"640.667 -73.333 OFFCURVE",
"658 72 CURVE SMOOTH",
"737 727 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 38 0 38 37 36 33 31 28 27 22 21 11 9 6 5 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
16 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 4 4 3 1 0 36 0 3 3 17 31 0 1 1 0 1 0 36 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
83 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
16 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 0 1 0 37 0 4 4 3 1 0 36 0 3 3 17 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
16 1 1 6 1 30 0 3 0 4 2 3 4 1 0 38 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
16 1 1 6 1 30 0 2 4 5 4 2 5 50 0 3 0 4 2 3 4 1 0 38 0 5 7 1 6 1 5 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"28 589 LINE",
"214 589 LINE",
"214 351 LINE SMOOTH",
"214 256.127 OFFCURVE",
"136.464 202.448 OFFCURVE",
"46 186 CURVE",
"46 0 LINE",
"1000 0 LINE SMOOTH",
"1075.913 0 OFFCURVE",
"1132 64.106 OFFCURVE",
"1132 128 CURVE SMOOTH",
"1132 255 LINE",
"630 255 LINE SMOOTH",
"568.667 255 OFFCURVE",
"509 247.333 OFFCURVE",
"449 234 CURVE",
"499.667 290 OFFCURVE",
"532 353 OFFCURVE",
"532 433 CURVE SMOOTH",
"532 589 LINE",
"826 589 LINE SMOOTH",
"873.355 589 OFFCURVE",
"912 625.134 OFFCURVE",
"912 666 CURVE SMOOTH",
"912 784 LINE",
"532 784 LINE",
"532 1001 LINE SMOOTH",
"532 1142.333 OFFCURVE",
"584 1220 OFFCURVE",
"692 1220 CURVE SMOOTH",
"750.667 1220 OFFCURVE",
"785.333 1195 OFFCURVE",
"836 1143 CURVE SMOOTH",
"860.667 1117.667 OFFCURVE",
"888.333 1105 OFFCURVE",
"919 1105 CURVE SMOOTH",
"941.667 1105 OFFCURVE",
"965.333 1111.667 OFFCURVE",
"990 1125 CURVE",
"1114 1203 LINE",
"1075.333 1279 OFFCURVE",
"1024.167 1346.833 OFFCURVE",
"955.5 1395.5 CURVE SMOOTH",
"886.833 1444.167 OFFCURVE",
"800 1473 OFFCURVE",
"692 1473 CURVE SMOOTH",
"529.333 1473 OFFCURVE",
"410.833 1417.667 OFFCURVE",
"331.5 1331 CURVE SMOOTH",
"252.167 1244.333 OFFCURVE",
"214 1126.667 OFFCURVE",
"214 1000 CURVE SMOOTH",
"214 784 LINE",
"130 784 LINE SMOOTH",
"62 784 OFFCURVE",
"28 738.333 OFFCURVE",
"28 685 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
58 57 50 48 43 41 35 33 28 27 24 22 19 17 11 9 4 2 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
15 1 2 3 51 39 2 7 6 2 30 0 2 3 0 3 2 0 50 4 1 0 8 1 5 6 0 5 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 6 6 7 1 0 36 0 7 7 12 7 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
15 1 2 3 51 39 2 7 6 2 30 0 2 3 0 3 2 0 50 0 1 0 3 2 1 3 1 0 38 4 1 0 8 1 5 6 0 5 1 0 38 0 6 7 7 6 1 0 35 0 6 6 7 1 0 36 0 7 6 7 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
15 1 2 3 51 39 2 7 6 2 30 0 2 3 0 3 2 0 50 0 1 0 3 2 1 3 1 0 38 0 0 0 8 5 0 8 0 0 38 0 4 0 5 6 4 5 1 0 38 0 6 7 7 6 1 0 35 0 6 6 7 1 0 36 0 7 6 7 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"122 474 LINE",
"422 474 LINE",
"422 386 LINE",
"122 386 LINE",
"122 221 LINE",
"422 221 LINE",
"422 0 LINE",
"732 0 LINE",
"732 221 LINE",
"1032 221 LINE",
"1032 386 LINE",
"732 386 LINE",
"732 474 LINE",
"1032 474 LINE",
"1032 639 LINE",
"783 639 LINE",
"1174 1457 LINE",
"914 1457 LINE SMOOTH",
"858 1457 OFFCURVE",
"818.667 1422.667 OFFCURVE",
"804 1384 CURVE SMOOTH",
"640 959 LINE SMOOTH",
"613.333 888.333 OFFCURVE",
"592 832 OFFCURVE",
"580 772 CURVE",
"566.667 830.667 OFFCURVE",
"544 887 OFFCURVE",
"516 959 CURVE SMOOTH",
"350 1384 LINE SMOOTH",
"331.333 1429.333 OFFCURVE",
"296.667 1457 OFFCURVE",
"238 1457 CURVE SMOOTH",
"-20 1457 LINE",
"370 639 LINE",
"122 639 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 4 2 1 0 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 2 1 1 1 11 31 0 7 7 12 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 7 6 7 53 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 6 6 5 0 0 35 9 1 5 5 6 0 0 36 8 1 6 5 6 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 7 6 7 53 0 0 0 10 4 0 10 0 2 38 0 3 0 4 5 3 4 0 2 38 0 5 9 6 5 0 0 35 0 9 0 8 6 9 8 0 0 38 0 5 5 6 0 0 36 0 6 5 6 0 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"452 1179 LINE",
"452 783 LINE",
"84 783 LINE",
"84 561 LINE",
"452 561 LINE",
"452 163 LINE",
"704 163 LINE",
"704 561 LINE",
"1074 561 LINE",
"1074 783 LINE",
"704 783 LINE",
"704 1179 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 5 0 2 5 0 0 35 4 1 0 3 1 1 2 0 1 0 0 38 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
6 1 5 0 2 5 0 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 0 38 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"124 561 LINE",
"1034 561 LINE",
"1034 783 LINE",
"124 783 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = minus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"884 1139 LINE",
"577 832 LINE",
"268 1141 LINE",
"106 984 LINE",
"417 672 LINE",
"86 341 LINE",
"250 184 LINE",
"578 512 LINE",
"904 186 LINE",
"1068 343 LINE",
"738 672 LINE",
"1048 982 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
9 5 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"84 561 LINE",
"1074 561 LINE",
"1074 783 LINE",
"84 783 LINE"
);
},
{
closed = 1;
nodes = (
"402 930.388 OFFCURVE",
"478.294 857 OFFCURVE",
"578 857 CURVE SMOOTH",
"676.829 857 OFFCURVE",
"754 931.052 OFFCURVE",
"754 1028 CURVE SMOOTH",
"754 1122.99 OFFCURVE",
"676.331 1199 OFFCURVE",
"578 1199 CURVE SMOOTH",
"478.786 1199 OFFCURVE",
"402 1123.642 OFFCURVE",
"402 1028 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"402 218.388 OFFCURVE",
"478.294 145 OFFCURVE",
"578 145 CURVE SMOOTH",
"676.829 145 OFFCURVE",
"754 219.052 OFFCURVE",
"754 316 CURVE SMOOTH",
"754 410.99 OFFCURVE",
"676.331 487 OFFCURVE",
"578 487 CURVE SMOOTH",
"478.786 487 OFFCURVE",
"402 411.642 OFFCURVE",
"402 316 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
40 38 30 28 20 18 10 8 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 43 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 4 0 1 0 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 5 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"124 377 LINE",
"1034 377 LINE",
"1034 599 LINE",
"124 599 LINE"
);
},
{
closed = 1;
nodes = (
"124 743 LINE",
"1034 743 LINE",
"1034 966 LINE",
"124 966 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"124 743 LINE",
"519 743 LINE",
"443 599 LINE",
"124 599 LINE",
"124 377 LINE",
"327 377 LINE",
"210 154 LINE",
"430 154 LINE",
"547 377 LINE",
"1034 377 LINE",
"1034 599 LINE",
"663 599 LINE",
"739 743 LINE",
"1034 743 LINE",
"1034 966 LINE",
"856 966 LINE",
"964 1170 LINE",
"744 1170 LINE",
"636 966 LINE",
"124 966 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 1 0 0 1 40 0 6 5 5 6 41 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
0 1 0 0 1 40 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 1 0 1 52 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 0 1 52 0 6 5 6 53 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 2 38 0 4 8 5 4 0 0 35 0 8 0 7 5 8 7 0 0 38 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = notequal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1030 735 LINE",
"220 1159 LINE",
"220 944 LINE SMOOTH",
"220 913.333 OFFCURVE",
"235.333 886.667 OFFCURVE",
"270 868 CURVE SMOOTH",
"554 715 LINE SMOOTH",
"587.333 696.333 OFFCURVE",
"627.333 684.667 OFFCURVE",
"670 674 CURVE",
"627.333 663.333 OFFCURVE",
"587.333 653.667 OFFCURVE",
"554 635 CURVE SMOOTH",
"270 481 LINE SMOOTH",
"235.333 462.333 OFFCURVE",
"220 436.667 OFFCURVE",
"220 406 CURVE SMOOTH",
"220 191 LINE",
"1030 614 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
17 1 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 614 LINE",
"940 191 LINE",
"940 406 LINE SMOOTH",
"940 436.667 OFFCURVE",
"924.667 462.333 OFFCURVE",
"890 481 CURVE SMOOTH",
"606 635 LINE SMOOTH",
"571.333 653.667 OFFCURVE",
"532.667 663.333 OFFCURVE",
"490 674 CURVE",
"532.667 684.667 OFFCURVE",
"571.333 696.333 OFFCURVE",
"606 715 CURVE SMOOTH",
"890 868 LINE SMOOTH",
"924.667 886.667 OFFCURVE",
"940 913.333 OFFCURVE",
"940 944 CURVE SMOOTH",
"940 1159 LINE",
"130 735 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
1 17 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"220 1259 LINE",
"220 1053 LINE SMOOTH",
"220 1022.333 OFFCURVE",
"233.333 994.667 OFFCURVE",
"284 972 CURVE SMOOTH",
"554 855 LINE",
"592.667 841 OFFCURVE",
"635.667 829 OFFCURVE",
"683 819 CURVE",
"636.333 808.333 OFFCURVE",
"592.667 795.667 OFFCURVE",
"554 781 CURVE",
"285 660 LINE SMOOTH",
"234.333 637.333 OFFCURVE",
"220 609.667 OFFCURVE",
"220 579 CURVE SMOOTH",
"220 373 LINE",
"1030 757 LINE",
"1030 878 LINE"
);
},
{
closed = 1;
nodes = (
"1030 302 LINE",
"220 302 LINE",
"220 80 LINE",
"1030 80 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
21 20 19 18 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 31 values pushed */
17 10 2 1 0 5 1 28 0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"130 757 LINE",
"940 373 LINE",
"940 579 LINE SMOOTH",
"940 609.667 OFFCURVE",
"925.667 637.333 OFFCURVE",
"875 660 CURVE SMOOTH",
"606 781 LINE",
"567.333 795.667 OFFCURVE",
"524 808.333 OFFCURVE",
"476 819 CURVE",
"522 829 OFFCURVE",
"565.333 841 OFFCURVE",
"606 855 CURVE",
"876 972 LINE SMOOTH",
"926.667 994.667 OFFCURVE",
"940 1022.333 OFFCURVE",
"940 1053 CURVE SMOOTH",
"940 1259 LINE",
"130 878 LINE"
);
},
{
closed = 1;
nodes = (
"130 80 LINE",
"940 80 LINE",
"940 302 LINE",
"130 302 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
21 20 19 18 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 31 values pushed */
17 16 8 1 0 5 0 28 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"452 1272 LINE",
"452 936 LINE",
"84 936 LINE",
"84 713 LINE",
"452 713 LINE",
"452 394 LINE",
"704 394 LINE",
"704 713 LINE",
"1074 713 LINE",
"1074 936 LINE",
"704 936 LINE",
"704 1272 LINE"
);
},
{
closed = 1;
nodes = (
"84 80 LINE",
"1074 80 LINE",
"1074 302 LINE",
"84 302 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 15 14 13 12 0 11 0 11 10 9 8 7 6 5 4 3 2 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
4 1 0 3 1 1 2 0 1 0 0 38 8 1 5 0 2 6 5 2 0 0 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 0 38 8 1 5 0 2 6 5 2 0 0 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"678.648 926 OFFCURVE",
"533.727 1020 OFFCURVE",
"396 1020 CURVE SMOOTH",
"296.758 1020 OFFCURVE",
"195.621 988.458 OFFCURVE",
"140 909 CURVE",
"182 725 LINE",
"204.258 754.677 OFFCURVE",
"296.177 794 OFFCURVE",
"376 794 CURVE SMOOTH",
"493.352 794 OFFCURVE",
"638.273 700 OFFCURVE",
"776 700 CURVE SMOOTH",
"867.524 700 OFFCURVE",
"964.549 728.706 OFFCURVE",
"1020 800 CURVE",
"986 991 LINE",
"962.702 967.702 OFFCURVE",
"872.666 926 OFFCURVE",
"796 926 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"680.633 556 OFFCURVE",
"531.839 649 OFFCURVE",
"396 649 CURVE SMOOTH",
"296.043 649 OFFCURVE",
"196.77 617.397 OFFCURVE",
"140 539 CURVE",
"182 355 LINE",
"203.173 383.23 OFFCURVE",
"297.011 423 OFFCURVE",
"376 423 CURVE SMOOTH",
"491.367 423 OFFCURVE",
"640.161 330 OFFCURVE",
"776 330 CURVE SMOOTH",
"866.041 330 OFFCURVE",
"965.578 359.029 OFFCURVE",
"1020 429 CURVE",
"986 621 LINE",
"963.977 595.306 OFFCURVE",
"872.797 556 OFFCURVE",
"796 556 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
33 32 1 0 60 58 49 47 44 42 32 63 33 63 28 26 17 15 12 10 0 31 1 31 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
22 6 2 2 0 21 1 1 2 37 1 4 7 54 38 2 6 4 53 1 5 6 5 30 8 1 0 0 1 7 0 1 1 0 38 0 7 0 6 5 7 6 1 0 38 9 1 4 0 5 4 5 1 0 37 0 2 2 3 1 0 36 0 3 3 14 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 80 values pushed */
22 6 2 2 0 21 1 1 2 37 1 4 7 54 38 2 6 4 53 1 5 6 5 30 0 3 0 2 1 3 2 1 0 38 8 1 0 0 1 7 0 1 1 0 38 9 1 4 6 5 4 1 0 35 0 7 0 6 5 7 6 1 0 38 9 1 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"655.1 677 OFFCURVE",
"531.9 752 OFFCURVE",
"410 752 CURVE SMOOTH",
"306 752 OFFCURVE",
"223 716.833 OFFCURVE",
"167 653.5 CURVE SMOOTH",
"111 590.167 OFFCURVE",
"80 498.333 OFFCURVE",
"80 385 CURVE",
"330 385 LINE",
"330 465 OFFCURVE",
"366 507 OFFCURVE",
"430 507 CURVE SMOOTH",
"504.9 507 OFFCURVE",
"628.1 432 OFFCURVE",
"750 432 CURVE SMOOTH",
"854 432 OFFCURVE",
"937 467.167 OFFCURVE",
"993 530.5 CURVE SMOOTH",
"1049 593.833 OFFCURVE",
"1080 685.667 OFFCURVE",
"1080 799 CURVE",
"830 799 LINE",
"830 719 OFFCURVE",
"794 677 OFFCURVE",
"730 677 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 45 values pushed */
0 1 5 1 52 0 4 2 4 53 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"124 561 LINE",
"772 561 LINE",
"772 282 LINE",
"1034 282 LINE",
"1034 783 LINE",
"124 783 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 2 1 41 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 1 2 1 53 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"676 1457 LINE",
"474 1457 LINE",
"88 768 LINE",
"328 768 LINE SMOOTH",
"368 768 OFFCURVE",
"391.333 789.333 OFFCURVE",
"406 816 CURVE SMOOTH",
"526 1053 LINE SMOOTH",
"548.667 1095.667 OFFCURVE",
"565.667 1133.333 OFFCURVE",
"579 1172 CURVE",
"593.667 1133.333 OFFCURVE",
"613.333 1095.667 OFFCURVE",
"636 1053 CURVE SMOOTH",
"760 816 LINE SMOOTH",
"774.667 788 OFFCURVE",
"798 768 OFFCURVE",
"834 768 CURVE SMOOTH",
"1062 768 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 0 2 1 30 1 1 0 2 0 53 0 2 2 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1090.333 214 OFFCURVE",
"1177.167 253.167 OFFCURVE",
"1240.5 320.5 CURVE SMOOTH",
"1303.833 387.833 OFFCURVE",
"1344 481.333 OFFCURVE",
"1344 592 CURVE SMOOTH",
"1344 701.333 OFFCURVE",
"1303.833 796.333 OFFCURVE",
"1240.5 863 CURVE SMOOTH",
"1177.167 929.667 OFFCURVE",
"1090.333 969 OFFCURVE",
"997 969 CURVE SMOOTH",
"857.181 969 OFFCURVE",
"763.245 899.089 OFFCURVE",
"689 802 CURVE",
"612.04 898.913 OFFCURVE",
"521.496 969 OFFCURVE",
"381 969 CURVE SMOOTH",
"287.667 969 OFFCURVE",
"200.833 929.667 OFFCURVE",
"137.5 863 CURVE SMOOTH",
"74.167 796.333 OFFCURVE",
"34 701.333 OFFCURVE",
"34 592 CURVE SMOOTH",
"34 481.333 OFFCURVE",
"74.167 387.833 OFFCURVE",
"137.5 320.5 CURVE SMOOTH",
"200.833 253.167 OFFCURVE",
"287.667 214 OFFCURVE",
"381 214 CURVE SMOOTH",
"520.956 214 OFFCURVE",
"613.643 283.315 OFFCURVE",
"689 381 CURVE",
"761.653 283.198 OFFCURVE",
"857.723 214 OFFCURVE",
"997 214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"326.147 456 OFFCURVE",
"276 499.399 OFFCURVE",
"276 592 CURVE SMOOTH",
"276 684.601 OFFCURVE",
"326.147 728 OFFCURVE",
"394 728 CURVE SMOOTH",
"464.152 728 OFFCURVE",
"511.757 664.892 OFFCURVE",
"557 592 CURVE",
"511.757 519.108 OFFCURVE",
"464.152 456 OFFCURVE",
"394 456 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"914.595 456 OFFCURVE",
"866.134 519.285 OFFCURVE",
"821 592 CURVE",
"866.134 664.715 OFFCURVE",
"914.595 728 OFFCURVE",
"985 728 CURVE SMOOTH",
"1052.411 728 OFFCURVE",
"1102 685.508 OFFCURVE",
"1102 592 CURVE SMOOTH",
"1102 498.986 OFFCURVE",
"1054.426 456 OFFCURVE",
"985 456 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
61 60 41 40 1 0 71 69 60 79 61 79 51 49 40 59 41 59 31 29 21 19 11 9 0 39 1 39 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
25 1 5 2 75 45 2 4 5 5 1 0 4 3 30 3 1 2 7 1 5 4 2 5 1 0 38 10 6 9 3 4 0 0 4 1 0 35 10 6 9 3 4 4 0 1 0 36 1 8 2 0 4 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
25 1 7 3 75 45 2 4 5 5 1 1 6 3 30 0 3 0 7 5 3 7 1 0 38 0 2 0 5 4 2 5 1 0 38 10 1 6 1 0 6 1 0 35 9 1 4 0 1 0 4 1 1 0 38 10 1 6 6 0 1 0 36 8 1 0 6 0 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1376;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"218 63 LINE SMOOTH",
"204.154 -64.381 OFFCURVE",
"166.241 -110 OFFCURVE",
"20 -110 CURVE SMOOTH",
"-38.622 -110 OFFCURVE",
"-52.011 -127.085 OFFCURVE",
"-58 -172 CURVE SMOOTH",
"-74 -298 LINE",
"-19.333 -326 OFFCURVE",
"43.333 -336 OFFCURVE",
"94 -336 CURVE SMOOTH",
"207.333 -336 OFFCURVE",
"303 -304.833 OFFCURVE",
"375 -237.5 CURVE SMOOTH",
"447 -170.167 OFFCURVE",
"494.333 -68 OFFCURVE",
"513 72 CURVE SMOOTH",
"640 1057 LINE SMOOTH",
"653.942 1168.539 OFFCURVE",
"690.383 1219 OFFCURVE",
"810 1219 CURVE SMOOTH",
"856.809 1219 OFFCURVE",
"870.772 1253.495 OFFCURVE",
"874 1289 CURVE SMOOTH",
"888 1436 LINE",
"833.333 1462.667 OFFCURVE",
"770.667 1473 OFFCURVE",
"720 1473 CURVE SMOOTH",
"605.333 1473 OFFCURVE",
"518.333 1436.167 OFFCURVE",
"457 1371.5 CURVE SMOOTH",
"395.667 1306.833 OFFCURVE",
"358.333 1213 OFFCURVE",
"345 1097 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
35 33 26 24 15 13 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
8 1 1 0 28 1 2 3 2 30 0 1 0 3 0 1 3 50 0 0 0 17 31 0 3 3 2 1 0 36 0 2 2 16 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
8 1 1 0 28 1 2 3 2 30 0 1 0 3 0 1 3 50 0 3 0 2 3 2 1 0 37 0 0 0 17 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
8 1 1 0 28 1 2 3 2 30 0 0 1 0 52 0 1 3 1 52 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 0 2 3 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 850;
}
);
note = integral;
unicode = 222B;
},
{
glyphname = Ohm;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"1298 0 LINE SMOOTH",
"1366 0 OFFCURVE",
"1410 42 OFFCURVE",
"1410 102 CURVE SMOOTH",
"1410 268 LINE",
"1048 268 LINE",
"1048 378 LINE",
"1168 412.667 OFFCURVE",
"1258.667 481.667 OFFCURVE",
"1320 571 CURVE SMOOTH",
"1381.333 660.333 OFFCURVE",
"1412 771 OFFCURVE",
"1412 891 CURVE SMOOTH",
"1412 942.333 OFFCURVE",
"1404.833 992.333 OFFCURVE",
"1390.5 1041 CURVE SMOOTH",
"1361.833 1138.333 OFFCURVE",
"1307.667 1224.833 OFFCURVE",
"1229 1297.5 CURVE SMOOTH",
"1189.667 1333.833 OFFCURVE",
"1144.833 1365 OFFCURVE",
"1094.5 1391 CURVE SMOOTH",
"993.833 1443 OFFCURVE",
"872.667 1473 OFFCURVE",
"734 1473 CURVE SMOOTH",
"664.667 1473 OFFCURVE",
"599.833 1465.833 OFFCURVE",
"539.5 1451.5 CURVE SMOOTH",
"418.833 1422.833 OFFCURVE",
"317.667 1370.167 OFFCURVE",
"239 1297.5 CURVE SMOOTH",
"199.667 1261.167 OFFCURVE",
"166.5 1221.5 OFFCURVE",
"139.5 1178.5 CURVE SMOOTH",
"85.5 1092.5 OFFCURVE",
"56 993.667 OFFCURVE",
"56 891 CURVE SMOOTH",
"56 771 OFFCURVE",
"86.833 660.333 OFFCURVE",
"147.5 571 CURVE SMOOTH",
"208.167 481.667 OFFCURVE",
"300 412.667 OFFCURVE",
"420 378 CURVE",
"420 268 LINE",
"58 268 LINE",
"58 102 LINE SMOOTH",
"58 42 OFFCURVE",
"102 0 OFFCURVE",
"170 0 CURVE SMOOTH",
"680 0 LINE",
"680 544 LINE",
"602.667 554.667 OFFCURVE",
"533.5 583.667 OFFCURVE",
"483.5 637 CURVE SMOOTH",
"433.5 690.333 OFFCURVE",
"402 767.333 OFFCURVE",
"402 874 CURVE SMOOTH",
"402 1090 OFFCURVE",
"515.333 1213 OFFCURVE",
"734 1213 CURVE SMOOTH",
"951.333 1213 OFFCURVE",
"1066 1090 OFFCURVE",
"1066 874 CURVE SMOOTH",
"1066 767.333 OFFCURVE",
"1034.5 690.333 OFFCURVE",
"984.5 637 CURVE SMOOTH",
"934.5 583.667 OFFCURVE",
"865.333 554.667 OFFCURVE",
"788 544 CURVE",
"788 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 55 0 54 51 50 38 36 24 23 20 18 10 8 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
49 25 17 1 4 2 0 1 30 0 0 0 3 1 0 36 0 3 3 17 31 4 1 2 2 1 1 0 36 6 5 2 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
49 25 17 1 4 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 1 1 2 0 0 35 4 1 2 2 1 1 0 36 6 5 2 1 2 1 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
49 25 17 1 4 2 0 1 30 0 3 0 0 2 3 0 1 0 38 0 2 4 1 2 0 0 35 0 4 6 1 5 1 4 5 1 0 38 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1468;
}
);
note = Omega;
unicode = 2126;
},
{
glyphname = increment;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"10 0 LINE",
"1524 0 LINE",
"920 1457 LINE",
"614 1457 LINE"
);
},
{
closed = 1;
nodes = (
"712 954 LINE SMOOTH",
"729.333 998 OFFCURVE",
"749.667 1057.333 OFFCURVE",
"767 1124 CURVE",
"776.333 1090.667 OFFCURVE",
"786.167 1059.833 OFFCURVE",
"796.5 1031.5 CURVE SMOOTH",
"806.833 1003.167 OFFCURVE",
"816 978 OFFCURVE",
"824 956 CURVE SMOOTH",
"1081 258 LINE",
"453 258 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
9 1 2 0 1 30 0 0 0 11 31 0 2 2 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
9 1 2 0 1 30 0 0 2 0 52 0 2 1 1 2 0 0 35 0 2 2 1 0 2 36 0 1 2 1 0 2 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1534;
}
);
note = Delta;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"40 1457 LINE",
"40 1206 LINE",
"190 1206 LINE",
"190 -329 LINE",
"510 -329 LINE",
"510 1206 LINE",
"866 1206 LINE",
"866 -329 LINE",
"1186 -329 LINE",
"1186 1206 LINE",
"1336 1206 LINE",
"1336 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 2 2 0 0 5 0 0 36 6 1 5 5 11 31 3 1 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
3 1 1 0 1 53 4 2 2 0 0 5 0 0 36 6 1 5 5 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
3 1 1 0 1 53 6 1 5 0 0 5 0 0 35 6 1 5 5 0 0 0 36 4 2 2 0 5 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 4 5 2 2 4 42 0 0 2 3 2 0 42 0 3 1 2 3 1 48 0 1 1 51 6 1 5 4 2 5 0 2 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1376;
}
);
note = product;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"80 1354 LINE SMOOTH",
"80 1324.667 OFFCURVE",
"89.333 1290.667 OFFCURVE",
"112 1264 CURVE SMOOTH",
"676 568 LINE",
"112 -137 LINE SMOOTH",
"90.667 -163.667 OFFCURVE",
"80 -196.667 OFFCURVE",
"80 -226 CURVE SMOOTH",
"80 -329 LINE",
"1296 -329 LINE",
"1296 -79 LINE",
"553 -79 LINE",
"1018 520 LINE",
"1018 608 LINE",
"554 1206 LINE",
"1296 1206 LINE",
"1296 1457 LINE",
"80 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
9 8 7 6 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
14 5 4 3 2 1 1 30 0 1 1 0 0 0 36 0 0 0 11 31 0 2 2 3 0 0 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
14 5 4 3 2 1 1 30 0 2 0 3 2 3 0 0 37 0 1 1 0 0 0 36 0 0 0 11 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
14 5 4 3 2 1 1 30 0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1376;
}
);
note = summation;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"474 0 LINE",
"736 0 LINE",
"1282 1701 LINE",
"1076 1701 LINE SMOOTH",
"1036 1701 OFFCURVE",
"1004.667 1677.667 OFFCURVE",
"994 1647 CURVE",
"650 518 LINE SMOOTH",
"632.667 462 OFFCURVE",
"622.333 410 OFFCURVE",
"613 358 CURVE",
"603.667 426 OFFCURVE",
"591.333 492 OFFCURVE",
"570 556 CURVE",
"512 787 LINE SMOOTH",
"504 817.667 OFFCURVE",
"470 841 OFFCURVE",
"426 841 CURVE SMOOTH",
"58 841 LINE",
"58 745 LINE SMOOTH",
"58 662.288 OFFCURVE",
"107.152 624 OFFCURVE",
"174 624 CURVE SMOOTH",
"247 624 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
25 24 23 21 9 7 2 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
15 1 3 0 1 30 0 2 1 2 52 0 1 0 0 3 1 0 1 0 38 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
15 1 3 0 1 30 0 2 1 2 52 0 3 0 3 53 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1182;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = micro;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"100 1037 LINE",
"100 -205 LINE SMOOTH",
"100 -285 OFFCURVE",
"149.333 -329 OFFCURVE",
"236 -329 CURVE SMOOTH",
"390 -329 LINE",
"390 -120 LINE SMOOTH",
"390 -60 OFFCURVE",
"384 12.667 OFFCURVE",
"364 74 CURVE",
"409.333 40.667 OFFCURVE",
"464 22 OFFCURVE",
"528 22 CURVE SMOOTH",
"619.773 22 OFFCURVE",
"678.426 46.141 OFFCURVE",
"753 113 CURVE",
"772 52 LINE SMOOTH",
"782.667 17.333 OFFCURVE",
"809.333 0 OFFCURVE",
"848 0 CURVE SMOOTH",
"1040 0 LINE",
"1040 1037 LINE",
"730 1037 LINE",
"730 298 LINE",
"674 247.333 OFFCURVE",
"616 218 OFFCURVE",
"548 218 CURVE SMOOTH",
"460 218 OFFCURVE",
"410 273.667 OFFCURVE",
"410 371 CURVE SMOOTH",
"410 1037 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 32 0 32 29 27 21 19 12 10 9 8 5 3 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
22 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
7 1 0 1 23 15 2 2 0 2 30 6 5 2 1 1 14 31 0 0 0 2 1 0 36 3 1 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
45 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
7 1 0 1 23 15 2 3 0 2 30 6 5 2 1 1 14 31 0 0 0 3 1 0 36 0 3 3 12 31 0 2 2 12 31 0 4 4 16 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
7 1 0 1 23 15 2 3 0 2 30 0 0 0 3 2 0 3 1 0 38 6 5 2 1 1 14 31 0 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
7 1 0 1 23 15 2 3 0 2 30 0 0 0 3 2 0 3 1 0 38 0 2 2 12 31 0 4 4 1 0 0 36 6 5 2 1 1 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
7 1 0 1 23 15 2 3 0 2 30 0 0 0 3 2 0 3 1 0 38 6 5 2 1 0 2 4 1 2 1 0 38 6 5 2 1 1 4 1 0 36 0 4 1 4 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
7 1 0 5 23 15 2 3 0 2 30 6 1 5 0 4 5 0 0 35 0 0 0 3 2 0 3 1 0 38 0 1 0 2 4 1 2 1 0 38 6 1 5 5 4 1 0 36 0 4 5 4 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = mu;
unicode = 00B5;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"334 1218 LINE SMOOTH",
"358 1179.333 OFFCURVE",
"379.333 1170 OFFCURVE",
"402 1170 CURVE SMOOTH",
"450.837 1170 OFFCURVE",
"544.241 1234 OFFCURVE",
"622 1234 CURVE SMOOTH",
"683.333 1234 OFFCURVE",
"737.5 1207.5 OFFCURVE",
"775.5 1153.5 CURVE SMOOTH",
"813.5 1099.5 OFFCURVE",
"836 1016.667 OFFCURVE",
"836 906 CURVE SMOOTH",
"836 869 LINE",
"776 935.667 OFFCURVE",
"693.333 973 OFFCURVE",
"572 973 CURVE SMOOTH",
"425.333 973 OFFCURVE",
"292.833 913.5 OFFCURVE",
"197.5 815.5 CURVE SMOOTH",
"102.167 717.5 OFFCURVE",
"44 580.333 OFFCURVE",
"44 423 CURVE SMOOTH",
"44 288.333 OFFCURVE",
"91.333 179 OFFCURVE",
"170 103 CURVE SMOOTH",
"248.667 27 OFFCURVE",
"359.333 -16 OFFCURVE",
"486 -16 CURVE SMOOTH",
"698 -16 OFFCURVE",
"855 74 OFFCURVE",
"959 234 CURVE SMOOTH",
"1063 394 OFFCURVE",
"1114 625.333 OFFCURVE",
"1114 908 CURVE SMOOTH",
"1114 1082.667 OFFCURVE",
"1066 1222.667 OFFCURVE",
"986 1320 CURVE SMOOTH",
"906 1417.333 OFFCURVE",
"794 1470 OFFCURVE",
"666 1470 CURVE SMOOTH",
"576.667 1470 OFFCURVE",
"504.833 1456.833 OFFCURVE",
"441.5 1433.5 CURVE SMOOTH",
"378.167 1410.167 OFFCURVE",
"322 1375.667 OFFCURVE",
"266 1333 CURVE"
);
},
{
closed = 1;
nodes = (
"422 216 OFFCURVE",
"364 292.333 OFFCURVE",
"364 427 CURVE SMOOTH",
"364 519 OFFCURVE",
"382.333 598.167 OFFCURVE",
"421 653.5 CURVE SMOOTH",
"459.667 708.833 OFFCURVE",
"520 741 OFFCURVE",
"604 741 CURVE SMOOTH",
"716.921 741 OFFCURVE",
"770.22 669.39 OFFCURVE",
"796 572 CURVE",
"772 437.333 OFFCURVE",
"732.167 347.833 OFFCURVE",
"683.5 292.5 CURVE SMOOTH",
"634.833 237.167 OFFCURVE",
"578 216 OFFCURVE",
"522 216 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
44 43 54 52 43 60 44 60 40 38 35 33 26 24 16 14 6 4 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
0 1 3 0 28 1 6 2 48 1 5 6 3 30 0 4 3 2 3 4 2 50 0 2 0 6 5 2 6 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 7 1 5 5 1 1 0 36 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
0 1 3 0 28 1 6 2 48 1 5 6 3 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 1 1 5 1 0 35 7 1 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = partialdiff;
unicode = 2202;
},
{
glyphname = percent;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"748 1214.667 OFFCURVE",
"711.5 1306 OFFCURVE",
"649.5 1370 CURVE SMOOTH",
"587.5 1434 OFFCURVE",
"499.333 1471 OFFCURVE",
"398 1471 CURVE SMOOTH",
"296.667 1471 OFFCURVE",
"210.5 1434 OFFCURVE",
"148.5 1370 CURVE SMOOTH",
"86.5 1306 OFFCURVE",
"50 1214.667 OFFCURVE",
"50 1104 CURVE SMOOTH",
"50 997.333 OFFCURVE",
"86.5 907.833 OFFCURVE",
"148.5 844.5 CURVE SMOOTH",
"210.5 781.167 OFFCURVE",
"296.667 745 OFFCURVE",
"398 745 CURVE SMOOTH",
"490 745 OFFCURVE",
"578 781.167 OFFCURVE",
"642 844.5 CURVE SMOOTH",
"706 907.833 OFFCURVE",
"748 997.333 OFFCURVE",
"748 1104 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"510 989.83 OFFCURVE",
"472.152 938 OFFCURVE",
"398 938 CURVE SMOOTH",
"324.522 938 OFFCURVE",
"290 989.64 OFFCURVE",
"290 1104 CURVE SMOOTH",
"290 1225.016 OFFCURVE",
"323.72 1278 OFFCURVE",
"398 1278 CURVE SMOOTH",
"472.434 1278 OFFCURVE",
"510 1224.406 OFFCURVE",
"510 1104 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"108 0 LINE",
"340 0 LINE SMOOTH",
"382.667 0 OFFCURVE",
"412 18.667 OFFCURVE",
"432 44 CURVE SMOOTH",
"1530 1457 LINE",
"1304 1457 LINE SMOOTH",
"1252 1457 OFFCURVE",
"1226 1433.667 OFFCURVE",
"1206 1411 CURVE"
);
},
{
closed = 1;
nodes = (
"1586 452.667 OFFCURVE",
"1549.5 544 OFFCURVE",
"1487.5 608 CURVE SMOOTH",
"1425.5 672 OFFCURVE",
"1337.333 709 OFFCURVE",
"1236 709 CURVE SMOOTH",
"1134.667 709 OFFCURVE",
"1048.5 672 OFFCURVE",
"986.5 608 CURVE SMOOTH",
"924.5 544 OFFCURVE",
"888 452.667 OFFCURVE",
"888 342 CURVE SMOOTH",
"888 235.333 OFFCURVE",
"924.5 144.833 OFFCURVE",
"986.5 81.5 CURVE SMOOTH",
"1048.5 18.167 OFFCURVE",
"1134.667 -18 OFFCURVE",
"1236 -18 CURVE SMOOTH",
"1328 -18 OFFCURVE",
"1416 18.167 OFFCURVE",
"1480 81.5 CURVE SMOOTH",
"1544 144.833 OFFCURVE",
"1586 235.333 OFFCURVE",
"1586 342 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1348 227.83 OFFCURVE",
"1310.152 176 OFFCURVE",
"1236 176 CURVE SMOOTH",
"1162.522 176 OFFCURVE",
"1128 227.64 OFFCURVE",
"1128 342 CURVE SMOOTH",
"1128 461.767 OFFCURVE",
"1161.927 515 OFFCURVE",
"1236 515 CURVE SMOOTH",
"1310.733 515 OFFCURVE",
"1348 461.564 OFFCURVE",
"1348 342 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 9 9 5 1 2 36 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 0 9 9 6 1 2 36 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 0 9 9 6 1 2 36 0 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 69 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 5 6 9 1 0 35 0 9 9 6 1 2 36 0 6 9 6 1 2 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1636;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"748 1214.667 OFFCURVE",
"711.5 1306 OFFCURVE",
"649.5 1370 CURVE SMOOTH",
"587.5 1434 OFFCURVE",
"499.333 1471 OFFCURVE",
"398 1471 CURVE SMOOTH",
"296.667 1471 OFFCURVE",
"210.5 1434 OFFCURVE",
"148.5 1370 CURVE SMOOTH",
"86.5 1306 OFFCURVE",
"50 1214.667 OFFCURVE",
"50 1104 CURVE SMOOTH",
"50 997.333 OFFCURVE",
"86.5 907.833 OFFCURVE",
"148.5 844.5 CURVE SMOOTH",
"210.5 781.167 OFFCURVE",
"296.667 745 OFFCURVE",
"398 745 CURVE SMOOTH",
"490 745 OFFCURVE",
"578 781.167 OFFCURVE",
"642 844.5 CURVE SMOOTH",
"706 907.833 OFFCURVE",
"748 997.333 OFFCURVE",
"748 1104 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"510 989.83 OFFCURVE",
"472.152 938 OFFCURVE",
"398 938 CURVE SMOOTH",
"324.522 938 OFFCURVE",
"290 989.64 OFFCURVE",
"290 1104 CURVE SMOOTH",
"290 1225.016 OFFCURVE",
"323.72 1278 OFFCURVE",
"398 1278 CURVE SMOOTH",
"472.434 1278 OFFCURVE",
"510 1224.406 OFFCURVE",
"510 1104 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"108 0 LINE",
"340 0 LINE SMOOTH",
"382.667 0 OFFCURVE",
"412 18.667 OFFCURVE",
"432 44 CURVE SMOOTH",
"1530 1457 LINE",
"1304 1457 LINE SMOOTH",
"1252 1457 OFFCURVE",
"1226 1433.667 OFFCURVE",
"1206 1411 CURVE"
);
},
{
closed = 1;
nodes = (
"1586 452.667 OFFCURVE",
"1549.5 544 OFFCURVE",
"1487.5 608 CURVE SMOOTH",
"1425.5 672 OFFCURVE",
"1337.333 709 OFFCURVE",
"1236 709 CURVE SMOOTH",
"1134.667 709 OFFCURVE",
"1048.5 672 OFFCURVE",
"986.5 608 CURVE SMOOTH",
"924.5 544 OFFCURVE",
"888 452.667 OFFCURVE",
"888 342 CURVE SMOOTH",
"888 235.333 OFFCURVE",
"924.5 144.833 OFFCURVE",
"986.5 81.5 CURVE SMOOTH",
"1048.5 18.167 OFFCURVE",
"1134.667 -18 OFFCURVE",
"1236 -18 CURVE SMOOTH",
"1328 -18 OFFCURVE",
"1416 18.167 OFFCURVE",
"1480 81.5 CURVE SMOOTH",
"1544 144.833 OFFCURVE",
"1586 235.333 OFFCURVE",
"1586 342 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1348 227.83 OFFCURVE",
"1310.152 176 OFFCURVE",
"1236 176 CURVE SMOOTH",
"1162.522 176 OFFCURVE",
"1128 227.64 OFFCURVE",
"1128 342 CURVE SMOOTH",
"1128 461.767 OFFCURVE",
"1161.927 515 OFFCURVE",
"1236 515 CURVE SMOOTH",
"1310.733 515 OFFCURVE",
"1348 461.564 OFFCURVE",
"1348 342 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2334 452.667 OFFCURVE",
"2297.5 544 OFFCURVE",
"2235.5 608 CURVE SMOOTH",
"2173.5 672 OFFCURVE",
"2085.333 709 OFFCURVE",
"1984 709 CURVE SMOOTH",
"1882.667 709 OFFCURVE",
"1796.5 672 OFFCURVE",
"1734.5 608 CURVE SMOOTH",
"1672.5 544 OFFCURVE",
"1636 452.667 OFFCURVE",
"1636 342 CURVE SMOOTH",
"1636 235.333 OFFCURVE",
"1672.5 144.833 OFFCURVE",
"1734.5 81.5 CURVE SMOOTH",
"1796.5 18.167 OFFCURVE",
"1882.667 -18 OFFCURVE",
"1984 -18 CURVE SMOOTH",
"2076 -18 OFFCURVE",
"2164 18.167 OFFCURVE",
"2228 81.5 CURVE SMOOTH",
"2292 144.833 OFFCURVE",
"2334 235.333 OFFCURVE",
"2334 342 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2096 227.83 OFFCURVE",
"2058.152 176 OFFCURVE",
"1984 176 CURVE SMOOTH",
"1910.522 176 OFFCURVE",
"1876 227.64 OFFCURVE",
"1876 342 CURVE SMOOTH",
"1876 461.767 OFFCURVE",
"1909.927 515 OFFCURVE",
"1984 515 CURVE SMOOTH",
"2058.733 515 OFFCURVE",
"2096 461.564 OFFCURVE",
"2096 342 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
126 124 116 114 106 104 96 94 86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 13 1 9 9 5 1 2 36 10 6 2 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
35 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 2 36 10 1 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 2 36 10 1 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 13 1 9 5 6 9 1 0 35 13 1 9 9 6 1 2 36 10 1 6 9 6 1 2 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 4 1 2 1 4 2 50 0 5 13 10 13 5 10 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 11 0 12 8 11 12 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 13 6 9 1 0 35 0 13 0 10 6 13 10 1 0 38 0 9 9 6 1 2 36 0 6 9 6 1 2 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2384;
}
);
note = perthousand;
unicode = 2030;
},
{
glyphname = lozenge;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"472 -70 LINE",
"688 -70 LINE",
"1060 734 LINE",
"688 1538 LINE",
"472 1538 LINE",
"100 734 LINE"
);
},
{
closed = 1;
nodes = (
"540 1171 LINE SMOOTH",
"556 1211 OFFCURVE",
"569.333 1244.667 OFFCURVE",
"580 1278 CURVE",
"590 1244.667 OFFCURVE",
"603.333 1209 OFFCURVE",
"620 1171 CURVE SMOOTH",
"814 734 LINE",
"620 298 LINE SMOOTH",
"601.333 258 OFFCURVE",
"590.667 223.333 OFFCURVE",
"580 190 CURVE",
"569.333 223.333 OFFCURVE",
"557.333 258 OFFCURVE",
"540 298 CURVE SMOOTH",
"352 734 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
5 4 2 1 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
24 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 1 1 0 0 0 36 0 0 0 13 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = "quarternote-musical";
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"-2 -329 LINE",
"2 -329 LINE",
"2 1497 LINE",
"-2 1497 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 0 13 31 0 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 0;
}
);
note = uni2669;
unicode = 2669;
},
{
glyphname = dieresis;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"298 1382.497 OFFCURVE",
"223.309 1454 OFFCURVE",
"134 1454 CURVE SMOOTH",
"49.569 1454 OFFCURVE",
"-24 1381.959 OFFCURVE",
"-24 1295 CURVE SMOOTH",
"-24 1210.528 OFFCURVE",
"49.824 1142 OFFCURVE",
"134 1142 CURVE SMOOTH",
"223.076 1142 OFFCURVE",
"298 1209.965 OFFCURVE",
"298 1295 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"684 1382.886 OFFCURVE",
"612.078 1454 OFFCURVE",
"522 1454 CURVE SMOOTH",
"433.581 1454 OFFCURVE",
"362 1382.637 OFFCURVE",
"362 1295 CURVE SMOOTH",
"362 1209.835 OFFCURVE",
"433.814 1142 OFFCURVE",
"522 1142 CURVE SMOOTH",
"611.845 1142 OFFCURVE",
"684 1209.59 OFFCURVE",
"684 1295 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
2 1 0 0 1 1 0 36 3 1 1 1 11 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"518 1421.806 OFFCURVE",
"431.9 1504 OFFCURVE",
"328 1504 CURVE SMOOTH",
"227.081 1504 OFFCURVE",
"144 1420.728 OFFCURVE",
"144 1322 CURVE SMOOTH",
"144 1222.594 OFFCURVE",
"227.181 1142 OFFCURVE",
"328 1142 CURVE SMOOTH",
"431.375 1142 OFFCURVE",
"518 1221.931 OFFCURVE",
"518 1322 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
252 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 19 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"-38 1473 LINE",
"222 1210 LINE SMOOTH",
"252.667 1179.333 OFFCURVE",
"275.333 1168 OFFCURVE",
"322 1168 CURVE SMOOTH",
"498 1168 LINE",
"362 1413 LINE SMOOTH",
"339.333 1451.667 OFFCURVE",
"314.667 1473 OFFCURVE",
"252 1473 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 1 1 0 1 0 36 2 1 0 0 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 0 1 1 0 1 0 35 2 1 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"426 1473 LINE SMOOTH",
"363.333 1473 OFFCURVE",
"338.667 1451.667 OFFCURVE",
"316 1413 CURVE SMOOTH",
"180 1168 LINE",
"366 1168 LINE SMOOTH",
"412.667 1168 OFFCURVE",
"435.333 1179.333 OFFCURVE",
"466 1210 CURVE SMOOTH",
"726 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 9 0 8 5 3 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 15 values pushed */
0 0 0 1 1 0 36 2 1 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 1 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"272 1473 LINE SMOOTH",
"209.333 1473 OFFCURVE",
"180.667 1453 OFFCURVE",
"162 1413 CURVE SMOOTH",
"46 1168 LINE",
"172 1168 LINE SMOOTH",
"218.667 1168 OFFCURVE",
"245.333 1176.667 OFFCURVE",
"272 1210 CURVE SMOOTH",
"472 1473 LINE"
);
},
{
closed = 1;
nodes = (
"632 1473 LINE SMOOTH",
"572.852 1473 OFFCURVE",
"550.625 1453.074 OFFCURVE",
"522 1413 CURVE SMOOTH",
"346 1168 LINE",
"492 1168 LINE SMOOTH",
"538.667 1168 OFFCURVE",
"561.333 1179.333 OFFCURVE",
"592 1210 CURVE SMOOTH",
"852 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 21 10 20 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
2 1 0 0 1 1 0 36 5 3 4 3 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"476 1457 LINE",
"184 1457 LINE",
"-50 1168 LINE",
"164 1168 LINE SMOOTH",
"188 1168 OFFCURVE",
"212 1177.333 OFFCURVE",
"224 1188 CURVE SMOOTH",
"310 1260 LINE SMOOTH",
"318 1266.667 OFFCURVE",
"327 1274.333 OFFCURVE",
"335 1285 CURVE",
"343 1274.333 OFFCURVE",
"350.667 1266.667 OFFCURVE",
"360 1260 CURVE",
"444 1188 LINE",
"460 1176 OFFCURVE",
"480 1168 OFFCURVE",
"504 1168 CURVE SMOOTH",
"710 1168 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 0 2 1 30 1 1 0 2 0 53 0 2 2 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"184 1168 LINE",
"476 1168 LINE",
"710 1457 LINE",
"504 1457 LINE SMOOTH",
"480 1457 OFFCURVE",
"456 1446 OFFCURVE",
"444 1438 CURVE",
"360 1366 LINE",
"350 1358.667 OFFCURVE",
"341.333 1349.667 OFFCURVE",
"334 1339 CURVE",
"326 1349.667 OFFCURVE",
"316 1359.333 OFFCURVE",
"308 1366 CURVE SMOOTH",
"224 1438 LINE SMOOTH",
"212 1448.667 OFFCURVE",
"188 1457 OFFCURVE",
"164 1457 CURVE SMOOTH",
"-50 1457 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 16 15 13 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 0 2 0 2 53 1 1 0 0 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"455.333 1159 OFFCURVE",
"537.333 1193.5 OFFCURVE",
"588 1247.5 CURVE SMOOTH",
"638.667 1301.5 OFFCURVE",
"658 1375.667 OFFCURVE",
"658 1457 CURVE",
"442 1457 LINE",
"442 1380.476 OFFCURVE",
"418.172 1347 OFFCURVE",
"330 1347 CURVE SMOOTH",
"241.058 1347 OFFCURVE",
"218 1380.591 OFFCURVE",
"218 1457 CURVE",
"2 1457 LINE",
"2 1375.667 OFFCURVE",
"21.333 1301.5 OFFCURVE",
"72 1247.5 CURVE SMOOTH",
"122.667 1193.5 OFFCURVE",
"204.667 1159 OFFCURVE",
"330 1159 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 17 16 12 10 6 5 0 21 1 21 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 4 1 0 2 0 1 0 37 3 1 1 1 11 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"86 1205.715 OFFCURVE",
"199.542 1119 OFFCURVE",
"328 1119 CURVE SMOOTH",
"460.889 1119 OFFCURVE",
"576 1205.414 OFFCURVE",
"576 1334 CURVE SMOOTH",
"576 1466.156 OFFCURVE",
"461.108 1554 OFFCURVE",
"328 1554 CURVE SMOOTH",
"198.874 1554 OFFCURVE",
"86 1466.319 OFFCURVE",
"86 1334 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"252 1384.667 OFFCURVE",
"277.333 1416 OFFCURVE",
"332 1416 CURVE SMOOTH",
"380 1416 OFFCURVE",
"410 1384.667 OFFCURVE",
"410 1334 CURVE SMOOTH",
"410 1287.333 OFFCURVE",
"380 1254 OFFCURVE",
"332 1254 CURVE SMOOTH",
"277.333 1254 OFFCURVE",
"252 1287.333 OFFCURVE",
"252 1334 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"387.539 1387 OFFCURVE",
"298.722 1461 OFFCURVE",
"216 1461 CURVE SMOOTH",
"82.271 1461 OFFCURVE",
"-14 1345.904 OFFCURVE",
"-14 1186 CURVE",
"176 1186 LINE",
"176 1240.667 OFFCURVE",
"196 1254 OFFCURVE",
"228 1254 CURVE SMOOTH",
"276.627 1254 OFFCURVE",
"382.453 1180 OFFCURVE",
"446 1180 CURVE SMOOTH",
"582.493 1180 OFFCURVE",
"676 1292.15 OFFCURVE",
"676 1453 CURVE",
"488 1453 LINE",
"488 1398.333 OFFCURVE",
"466 1387 OFFCURVE",
"434 1387 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
6 1 0 4 1 2 0 2 1 2 37 0 3 3 1 1 0 36 5 1 1 1 11 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
6 1 0 4 1 2 0 2 1 2 37 0 1 1 11 31 0 3 3 5 1 0 36 0 5 5 11 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
94 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
0 4 3 2 3 4 2 50 6 1 0 0 2 0 2 1 2 37 0 1 1 11 31 0 3 3 5 1 0 36 0 5 5 11 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 2 36 0 2 0 2 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"20 1201 LINE",
"640 1201 LINE",
"640 1391 LINE",
"20 1391 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"175.333 -210 OFFCURVE",
"164 -219 OFFCURVE",
"160 -237 CURVE",
"132 -331 LINE",
"182.667 -341.667 OFFCURVE",
"225.333 -347 OFFCURVE",
"280 -347 CURVE SMOOTH",
"426.003 -347 OFFCURVE",
"548 -293.662 OFFCURVE",
"548 -194 CURVE SMOOTH",
"548 -120.104 OFFCURVE",
"500.275 -71.607 OFFCURVE",
"393 -43 CURVE",
"410 17 LINE",
"218 17 LINE",
"172 -136 LINE",
"220.667 -142.667 OFFCURVE",
"255.167 -149.5 OFFCURVE",
"275.5 -156.5 CURVE SMOOTH",
"295.833 -163.5 OFFCURVE",
"306 -174 OFFCURVE",
"306 -188 CURVE SMOOTH",
"306 -202.667 OFFCURVE",
"292.667 -218 OFFCURVE",
"258 -218 CURVE SMOOTH",
"244 -218 OFFCURVE",
"232.333 -216.667 OFFCURVE",
"223 -214 CURVE SMOOTH",
"213.667 -211.333 OFFCURVE",
"204 -210 OFFCURVE",
"194 -210 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 23 21 11 10 4 2 0 27 1 27 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
12 9 2 0 2 25 1 3 0 2 30 0 2 0 0 2 40 1 4 2 0 0 3 1 2 36 0 3 3 22 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
12 9 2 0 2 25 1 3 0 2 30 0 2 0 2 52 1 4 2 0 0 3 1 2 36 0 3 3 22 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
12 9 2 0 2 25 1 3 0 2 30 0 2 0 2 52 1 4 2 0 3 3 0 1 0 35 1 4 2 0 0 3 1 2 36 0 3 0 3 1 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
12 9 2 0 2 25 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 3 3 1 1 0 35 0 1 1 3 1 2 36 0 3 1 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"462.715 -167 OFFCURVE",
"431.735 -175 OFFCURVE",
"412 -175 CURVE SMOOTH",
"376 -175 OFFCURVE",
"358 -154 OFFCURVE",
"358 -122 CURVE SMOOTH",
"358 -71.333 OFFCURVE",
"400 -28 OFFCURVE",
"452 0 CURVE",
"292 12 LINE",
"177.333 -49.333 OFFCURVE",
"128 -124.667 OFFCURVE",
"128 -198 CURVE SMOOTH",
"128 -284.667 OFFCURVE",
"203.333 -347 OFFCURVE",
"346 -347 CURVE SMOOTH",
"424.667 -347 OFFCURVE",
"497.333 -325 OFFCURVE",
"544 -297 CURVE",
"498 -186 LINE",
"493.333 -173.333 OFFCURVE",
"484 -167 OFFCURVE",
"470 -167 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
1 0 20 18 7 5 0 23 1 23 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
3 1 1 0 1 30 13 12 2 0 28 2 3 2 0 0 1 1 0 36 0 1 1 22 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
58 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
3 1 1 0 1 30 13 12 2 0 28 2 3 2 0 1 1 0 1 0 35 2 3 2 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
3 1 1 2 1 30 13 12 2 0 28 3 1 0 2 0 52 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = dieresis.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"266 1752.255 OFFCURVE",
"193.509 1821 OFFCURVE",
"106 1821 CURVE SMOOTH",
"25.456 1821 OFFCURVE",
"-46 1751.076 OFFCURVE",
"-46 1668 CURVE SMOOTH",
"-46 1584.565 OFFCURVE",
"25.654 1518 OFFCURVE",
"106 1518 CURVE SMOOTH",
"193.266 1518 OFFCURVE",
"266 1583.395 OFFCURVE",
"266 1668 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"706 1752.455 OFFCURVE",
"634.706 1821 OFFCURVE",
"550 1821 CURVE SMOOTH",
"465.294 1821 OFFCURVE",
"394 1752.455 OFFCURVE",
"394 1668 CURVE SMOOTH",
"394 1583.211 OFFCURVE",
"465.503 1518 OFFCURVE",
"550 1518 CURVE SMOOTH",
"634.497 1518 OFFCURVE",
"706 1583.211 OFFCURVE",
"706 1668 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = dieresis.case;
},
{
glyphname = dotaccent.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"508 1797.944 OFFCURVE",
"424.124 1877 OFFCURVE",
"326 1877 CURVE SMOOTH",
"232.507 1877 OFFCURVE",
"152 1796.497 OFFCURVE",
"152 1702 CURVE SMOOTH",
"152 1611.51 OFFCURVE",
"232.531 1532 OFFCURVE",
"326 1532 CURVE SMOOTH",
"424.118 1532 OFFCURVE",
"508 1610.063 OFFCURVE",
"508 1702 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = dotaccent.case;
},
{
glyphname = grave.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"-118 1798 LINE",
"182 1580 LINE SMOOTH",
"213.912 1556.066 OFFCURVE",
"238.221 1551 OFFCURVE",
"282 1551 CURVE SMOOTH",
"528 1551 LINE",
"346 1749 LINE SMOOTH",
"310.648 1787.072 OFFCURVE",
"283.578 1798 OFFCURVE",
"224 1798 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 8 6 0 13 1 13 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 0 1 0 52 0 1 1 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = grave.case;
},
{
glyphname = acute.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"432 1798 LINE SMOOTH",
"374.693 1798 OFFCURVE",
"344.06 1788.454 OFFCURVE",
"309 1748 CURVE SMOOTH",
"128 1551 LINE",
"374 1551 LINE SMOOTH",
"419.333 1551 OFFCURVE",
"444.333 1557.333 OFFCURVE",
"479 1584 CURVE SMOOTH",
"774 1798 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 11 0 10 5 3 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = acute.case;
},
{
glyphname = hungarumlaut.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"284 1779 LINE SMOOTH",
"221.333 1779 OFFCURVE",
"186.667 1753.667 OFFCURVE",
"160 1719 CURVE SMOOTH",
"36 1551 LINE",
"182 1551 LINE SMOOTH",
"228.667 1551 OFFCURVE",
"251.333 1566 OFFCURVE",
"282 1594 CURVE SMOOTH",
"484 1779 LINE"
);
},
{
closed = 1;
nodes = (
"644 1779 LINE SMOOTH",
"581.333 1779 OFFCURVE",
"545.333 1751 OFFCURVE",
"512 1719 CURVE SMOOTH",
"336 1551 LINE",
"502 1551 LINE SMOOTH",
"548.667 1551 OFFCURVE",
"576 1568.667 OFFCURVE",
"612 1594 CURVE SMOOTH",
"874 1779 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 19 10 18 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = hungarumlaut.case;
},
{
glyphname = circumflex.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"486 1778 LINE",
"174 1778 LINE",
"-70 1551 LINE",
"164 1551 LINE SMOOTH",
"188 1551 OFFCURVE",
"219.333 1558.333 OFFCURVE",
"238 1569 CURVE SMOOTH",
"312 1614 LINE",
"315.333 1615.333 OFFCURVE",
"318.333 1617 OFFCURVE",
"321 1619 CURVE SMOOTH",
"323.667 1621 OFFCURVE",
"326.667 1623 OFFCURVE",
"330 1625 CURVE",
"333.333 1623 OFFCURVE",
"336.333 1621 OFFCURVE",
"339 1619 CURVE SMOOTH",
"341.667 1617 OFFCURVE",
"344.667 1615.333 OFFCURVE",
"348 1614 CURVE",
"422 1569 LINE SMOOTH",
"440.667 1558.333 OFFCURVE",
"472 1551 OFFCURVE",
"496 1551 CURVE SMOOTH",
"730 1551 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
8 1 0 2 1 30 0 2 0 0 2 0 0 35 0 2 2 0 1 0 36 1 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
8 1 1 2 1 30 0 1 2 0 0 1 42 0 2 1 0 2 0 2 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = circumflex.case;
},
{
glyphname = caron.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"174 1551 LINE",
"486 1551 LINE",
"730 1778 LINE",
"496 1778 LINE SMOOTH",
"472 1778 OFFCURVE",
"440.667 1770.667 OFFCURVE",
"422 1760 CURVE SMOOTH",
"348 1715 LINE SMOOTH",
"341.333 1711 OFFCURVE",
"335.333 1707 OFFCURVE",
"330 1703 CURVE",
"323.333 1708.333 OFFCURVE",
"318.667 1711 OFFCURVE",
"312 1715 CURVE SMOOTH",
"238 1760 LINE SMOOTH",
"219.333 1770.667 OFFCURVE",
"188 1778 OFFCURVE",
"164 1778 CURVE SMOOTH",
"-70 1778 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
8 1 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
8 1 2 1 1 30 0 1 0 2 0 1 42 0 0 1 2 0 1 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = caron.case;
},
{
glyphname = breve.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"435.333 1526 OFFCURVE",
"519.5 1551 OFFCURVE",
"577.5 1595 CURVE SMOOTH",
"635.5 1639 OFFCURVE",
"668 1702 OFFCURVE",
"668 1778 CURVE",
"472 1778 LINE",
"472 1720.667 OFFCURVE",
"422 1703 OFFCURVE",
"330 1703 CURVE SMOOTH",
"238 1703 OFFCURVE",
"188 1720.667 OFFCURVE",
"188 1778 CURVE",
"-8 1778 LINE",
"-8 1691.333 OFFCURVE",
"24.5 1629.5 OFFCURVE",
"82.5 1587.5 CURVE SMOOTH",
"140.5 1545.5 OFFCURVE",
"224.667 1526 OFFCURVE",
"330 1526 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 13 12 10 8 6 5 0 17 1 17 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = breve.case;
},
{
glyphname = ring.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"106 1583.504 OFFCURVE",
"210.855 1504 OFFCURVE",
"328 1504 CURVE SMOOTH",
"450.046 1504 OFFCURVE",
"556 1582.944 OFFCURVE",
"556 1701 CURVE SMOOTH",
"556 1822.438 OFFCURVE",
"450.955 1904 OFFCURVE",
"328 1904 CURVE SMOOTH",
"209.931 1904 OFFCURVE",
"106 1821.878 OFFCURVE",
"106 1701 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"252 1751.667 OFFCURVE",
"277.333 1783 OFFCURVE",
"332 1783 CURVE SMOOTH",
"380 1783 OFFCURVE",
"410 1751.667 OFFCURVE",
"410 1701 CURVE SMOOTH",
"410 1654.333 OFFCURVE",
"380 1621 OFFCURVE",
"332 1621 CURVE SMOOTH",
"277.333 1621 OFFCURVE",
"252 1654.333 OFFCURVE",
"252 1701 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = ring.case;
},
{
glyphname = tilde.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"402.007 1729 OFFCURVE",
"298.324 1787 OFFCURVE",
"212 1787 CURVE SMOOTH",
"82.709 1787 OFFCURVE",
"2 1683.972 OFFCURVE",
"2 1541 CURVE",
"172 1541 LINE",
"172 1578.333 OFFCURVE",
"192 1594 OFFCURVE",
"220 1594 CURVE SMOOTH",
"273.548 1594 OFFCURVE",
"374.31 1535 OFFCURVE",
"462 1535 CURVE SMOOTH",
"594.043 1535 OFFCURVE",
"672 1635.296 OFFCURVE",
"672 1780 CURVE",
"504 1780 LINE",
"504 1741.333 OFFCURVE",
"482 1729 OFFCURVE",
"454 1729 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
68 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 2 36 4 1 2 0 2 1 2 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
77 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 2 36 4 1 2 0 2 1 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 2 36 0 2 0 2 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = tilde.case;
},
{
glyphname = macron.case;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
paths = (
{
closed = 1;
nodes = (
"40 1554 LINE",
"620 1554 LINE",
"620 1725 LINE",
"40 1725 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 660;
}
);
note = macron.case;
},
{
glyphname = firsttonechinese;
layers = (
{
components = (
{
alignment = -1;
name = macron;
}
);
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 660;
}
);
note = uni02C9;
unicode = 02C9;
},
{
glyphname = NULL;
layers = (
{
layerId = "0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
isBold = 1;
name = Bold;
weightClass = Bold;
}
);
kerning = {
"0F82F74C-23B9-402A-A6A2-E1A5FCDC2DA6" = {
A = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Aacute = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Acircumflex = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Adieresis = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Agrave = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Aogonek = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Aring = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
Atilde = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
C = {
bullet = -140;
emdash = -140;
endash = -140;
guillemetleft = -140;
guillemetright = -140;
guilsinglleft = -140;
guilsinglright = -140;
hyphen = -140;
periodcentered = -140;
softhyphen = -140;
};
Cacute = {
bullet = -140;
emdash = -140;
endash = -140;
guillemetleft = -140;
guillemetright = -140;
guilsinglleft = -140;
guilsinglright = -140;
hyphen = -140;
periodcentered = -140;
softhyphen = -140;
};
Ccedilla = {
bullet = -140;
emdash = -140;
endash = -140;
guillemetleft = -140;
guillemetright = -140;
guilsinglleft = -140;
guilsinglright = -140;
hyphen = -140;
periodcentered = -140;
softhyphen = -140;
};
D = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Eth = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
F = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
J = -180;
ampersand = -160;
c = -60;
cacute = -60;
ccedilla = -60;
colon = -60;
comma = -180;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
increment = -160;
m = -60;
micro = -60;
n = -60;
nacute = -60;
ntilde = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
p = -60;
period = -180;
q = -60;
question = 30;
quotedblbase = -180;
quotesinglbase = -180;
r = -60;
semicolon = -60;
slash = -160;
u = -60;
uacute = -60;
ucircumflex = -60;
udieresis = -60;
ugrave = -60;
};
J = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
K = {
C = -30;
Cacute = -30;
Ccedilla = -30;
G = -30;
O = -30;
OE = -30;
Oacute = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
at = -30;
bullet = -70;
c = -50;
cacute = -50;
ccedilla = -50;
d = -50;
e = -50;
eacute = -50;
ecircumflex = -50;
edieresis = -50;
egrave = -50;
emdash = -70;
endash = -70;
eogonek = -50;
eth = -50;
f = -60;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -50;
oacute = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
oslash = -50;
otilde = -50;
periodcentered = -70;
q = -50;
softhyphen = -70;
t = -100;
v = -80;
w = -50;
y = -80;
};
L = {
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
T = -180;
V = -200;
W = -180;
Y = -240;
Yacute = -240;
Ydieresis = -240;
asterisk = -280;
at = -80;
backslash = -200;
bullet = -160;
c = -40;
cacute = -40;
ccedilla = -40;
comma = 60;
d = -40;
degree = -280;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
emdash = -160;
endash = -160;
eogonek = -40;
eth = -40;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
onesuperior = -220;
ordfeminine = -280;
ordmasculine = -280;
oslash = -40;
otilde = -40;
period = 60;
periodcentered = -160;
q = -40;
question = -50;
quotedbl = -280;
quotedblbase = 60;
quotedblleft = -280;
quotedblright = -280;
quoteleft = -280;
quoteright = -280;
quotesinglbase = 60;
quotesingle = -280;
softhyphen = -160;
threesuperior = -220;
trademark = -280;
twosuperior = -220;
v = -130;
w = -80;
y = -130;
};
Lslash = {
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -140;
backslash = -180;
bullet = -100;
degree = -140;
emdash = -100;
endash = -100;
guillemetleft = -100;
guillemetright = -100;
guilsinglleft = -100;
guilsinglright = -100;
hyphen = -100;
onesuperior = -140;
ordfeminine = -140;
ordmasculine = -140;
periodcentered = -100;
quotedbl = -140;
quotedblleft = -140;
quotedblright = -140;
quoteleft = -140;
quoteright = -140;
quotesingle = -140;
softhyphen = -100;
threesuperior = -140;
trademark = -140;
twosuperior = -140;
v = -60;
y = -60;
};
O = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Oacute = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Ocircumflex = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Odieresis = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Ograve = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
Otilde = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
P = {
A = -170;
AE = -170;
Aacute = -170;
Acircumflex = -170;
Adieresis = -170;
Agrave = -170;
Aogonek = -170;
Aring = -170;
Atilde = -170;
J = -200;
a = -50;
aacute = -50;
acircumflex = -50;
adieresis = -50;
ae = -50;
agrave = -50;
ampersand = -170;
aogonek = -50;
aring = -50;
atilde = -50;
c = -30;
cacute = -30;
ccedilla = -30;
comma = -280;
d = -30;
e = -30;
eacute = -30;
ecircumflex = -30;
edieresis = -30;
egrave = -30;
eogonek = -30;
eth = -30;
increment = -170;
o = -30;
oacute = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
oslash = -30;
otilde = -30;
period = -280;
q = -30;
quotedblbase = -280;
quotesinglbase = -280;
slash = -170;
};
Q = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
R = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -60;
U = -60;
Uacute = -60;
Ucircumflex = -60;
Udieresis = -60;
Ugrave = -60;
at = -50;
};
T = {
A = -160;
AE = -160;
Aacute = -160;
Acircumflex = -160;
Adieresis = -160;
Agrave = -160;
Aogonek = -160;
Aring = -160;
Atilde = -160;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -200;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -240;
aacute = -240;
acircumflex = -240;
adieresis = -240;
ae = -240;
agrave = -240;
ampersand = -160;
aogonek = -240;
aring = -240;
at = -60;
atilde = -240;
bullet = -180;
c = -200;
cacute = -200;
ccedilla = -200;
colon = -160;
comma = -180;
d = -200;
e = -200;
eacute = -200;
ecircumflex = -200;
edieresis = -200;
egrave = -200;
emdash = -180;
endash = -180;
eogonek = -200;
eth = -200;
g = -175;
guillemetleft = -180;
guillemetright = -180;
guilsinglleft = -180;
guilsinglright = -180;
hyphen = -180;
increment = -160;
m = -160;
micro = -160;
n = -160;
nacute = -160;
ntilde = -160;
o = -200;
oacute = -200;
ocircumflex = -200;
odieresis = -200;
oe = -200;
ograve = -200;
oslash = -200;
otilde = -200;
p = -160;
period = -180;
periodcentered = -180;
q = -200;
quotedblbase = -180;
quotesinglbase = -180;
r = -160;
s = -120;
semicolon = -160;
slash = -160;
softhyphen = -180;
u = -160;
uacute = -160;
ucircumflex = -160;
udieresis = -160;
ugrave = -160;
v = -180;
w = -140;
x = -130;
y = -180;
z = -120;
};
Thorn = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
U = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
Uacute = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
Ucircumflex = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
Udieresis = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
Ugrave = {
A = -50;
AE = -50;
Aacute = -50;
Acircumflex = -50;
Adieresis = -50;
Agrave = -50;
Aogonek = -50;
Aring = -50;
Atilde = -50;
ampersand = -50;
comma = -50;
increment = -50;
period = -50;
quotedblbase = -50;
quotesinglbase = -50;
slash = -50;
};
V = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -160;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -130;
aacute = -130;
acircumflex = -130;
adieresis = -130;
ae = -130;
agrave = -130;
ampersand = -200;
aogonek = -130;
aring = -130;
asterisk = 40;
at = -60;
atilde = -130;
bullet = -120;
c = -130;
cacute = -130;
ccedilla = -130;
colon = -110;
comma = -200;
d = -130;
degree = 40;
e = -130;
eacute = -130;
ecircumflex = -130;
edieresis = -130;
egrave = -130;
emdash = -120;
endash = -120;
eogonek = -130;
eth = -130;
f = -30;
g = -140;
guillemetleft = -120;
guillemetright = -120;
guilsinglleft = -120;
guilsinglright = -120;
hyphen = -120;
increment = -200;
m = -110;
micro = -110;
n = -110;
nacute = -110;
ntilde = -110;
o = -130;
oacute = -130;
ocircumflex = -130;
odieresis = -130;
oe = -130;
ograve = -130;
onesuperior = 40;
ordfeminine = 40;
ordmasculine = 40;
oslash = -130;
otilde = -130;
p = -110;
period = -200;
periodcentered = -120;
q = -130;
question = 30;
quotedbl = 40;
quotedblbase = -200;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -200;
quotesingle = 40;
r = -110;
s = -110;
semicolon = -110;
slash = -200;
softhyphen = -120;
t = -50;
threesuperior = 40;
trademark = 40;
twosuperior = 40;
u = -110;
uacute = -110;
ucircumflex = -110;
udieresis = -110;
ugrave = -110;
v = -70;
x = -80;
y = -70;
z = -100;
};
W = {
A = -140;
AE = -140;
Aacute = -140;
Acircumflex = -140;
Adieresis = -140;
Agrave = -140;
Aogonek = -140;
Aring = -140;
Atilde = -140;
J = -120;
a = -110;
aacute = -110;
acircumflex = -110;
adieresis = -110;
ae = -110;
agrave = -110;
ampersand = -140;
aogonek = -110;
aring = -110;
asterisk = 40;
atilde = -110;
bullet = -40;
c = -50;
cacute = -50;
ccedilla = -50;
comma = -140;
d = -50;
degree = 40;
e = -50;
eacute = -50;
ecircumflex = -50;
edieresis = -50;
egrave = -50;
emdash = -40;
endash = -40;
eogonek = -50;
eth = -50;
g = -95;
guillemetleft = -40;
guillemetright = -40;
guilsinglleft = -40;
guilsinglright = -40;
hyphen = -40;
increment = -140;
o = -50;
oacute = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
onesuperior = 40;
ordfeminine = 40;
ordmasculine = 40;
oslash = -50;
otilde = -50;
period = -140;
periodcentered = -40;
q = -50;
question = 30;
quotedbl = 40;
quotedblbase = -140;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -140;
quotesingle = 40;
s = -60;
slash = -140;
softhyphen = -40;
threesuperior = 40;
trademark = 40;
twosuperior = 40;
};
X = {
C = -30;
Cacute = -30;
Ccedilla = -30;
G = -30;
O = -30;
OE = -30;
Oacute = -30;
Ocircumflex = -30;
Odieresis = -30;
Ograve = -30;
Oslash = -30;
Otilde = -30;
Q = -30;
at = -30;
bullet = -70;
c = -50;
cacute = -50;
ccedilla = -50;
d = -50;
e = -50;
eacute = -50;
ecircumflex = -50;
edieresis = -50;
egrave = -50;
emdash = -70;
endash = -70;
eogonek = -50;
eth = -50;
f = -60;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
o = -50;
oacute = -50;
ocircumflex = -50;
odieresis = -50;
oe = -50;
ograve = -50;
oslash = -50;
otilde = -50;
periodcentered = -70;
q = -50;
softhyphen = -70;
t = -100;
v = -80;
w = -50;
y = -80;
};
Y = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -160;
aacute = -160;
acircumflex = -160;
adieresis = -160;
ae = -160;
agrave = -160;
ampersand = -200;
aogonek = -160;
aring = -160;
asterisk = 40;
at = -80;
atilde = -160;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -140;
comma = -180;
d = -160;
degree = 40;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -180;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
m = -140;
micro = -140;
n = -140;
nacute = -140;
ntilde = -140;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 60;
ordfeminine = 40;
ordmasculine = 40;
oslash = -160;
otilde = -160;
p = -140;
period = -180;
periodcentered = -160;
q = -160;
question = 30;
quotedbl = 40;
quotedblbase = -180;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -180;
quotesingle = 40;
r = -140;
s = -150;
semicolon = -140;
slash = -200;
softhyphen = -160;
threesuperior = 60;
trademark = 40;
twosuperior = 60;
u = -140;
uacute = -140;
ucircumflex = -140;
udieresis = -140;
ugrave = -140;
v = -100;
w = -100;
x = -140;
y = -100;
};
Yacute = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -160;
aacute = -160;
acircumflex = -160;
adieresis = -160;
ae = -160;
agrave = -160;
ampersand = -200;
aogonek = -160;
aring = -160;
asterisk = 40;
at = -80;
atilde = -160;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -140;
comma = -180;
d = -160;
degree = 40;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -180;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
m = -140;
micro = -140;
n = -140;
nacute = -140;
ntilde = -140;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 60;
ordfeminine = 40;
ordmasculine = 40;
oslash = -160;
otilde = -160;
p = -140;
period = -180;
periodcentered = -160;
q = -160;
question = 30;
quotedbl = 40;
quotedblbase = -180;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -180;
quotesingle = 40;
r = -140;
s = -150;
semicolon = -140;
slash = -200;
softhyphen = -160;
threesuperior = 60;
trademark = 40;
twosuperior = 60;
u = -140;
uacute = -140;
ucircumflex = -140;
udieresis = -140;
ugrave = -140;
v = -100;
w = -100;
x = -140;
y = -100;
};
Ydieresis = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -80;
Cacute = -80;
Ccedilla = -80;
G = -80;
J = -200;
O = -80;
OE = -80;
Oacute = -80;
Ocircumflex = -80;
Odieresis = -80;
Ograve = -80;
Oslash = -80;
Otilde = -80;
Q = -80;
a = -160;
aacute = -160;
acircumflex = -160;
adieresis = -160;
ae = -160;
agrave = -160;
ampersand = -200;
aogonek = -160;
aring = -160;
asterisk = 40;
at = -80;
atilde = -160;
bullet = -160;
c = -160;
cacute = -160;
ccedilla = -160;
colon = -140;
comma = -180;
d = -160;
degree = 40;
e = -160;
eacute = -160;
ecircumflex = -160;
edieresis = -160;
egrave = -160;
emdash = -160;
endash = -160;
eogonek = -160;
eth = -160;
g = -180;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
m = -140;
micro = -140;
n = -140;
nacute = -140;
ntilde = -140;
o = -160;
oacute = -160;
ocircumflex = -160;
odieresis = -160;
oe = -160;
ograve = -160;
onesuperior = 60;
ordfeminine = 40;
ordmasculine = 40;
oslash = -160;
otilde = -160;
p = -140;
period = -180;
periodcentered = -160;
q = -160;
question = 30;
quotedbl = 40;
quotedblbase = -180;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -180;
quotesingle = 40;
r = -140;
s = -150;
semicolon = -140;
slash = -200;
softhyphen = -160;
threesuperior = 60;
trademark = 40;
twosuperior = 60;
u = -140;
uacute = -140;
ucircumflex = -140;
udieresis = -140;
ugrave = -140;
v = -100;
w = -100;
x = -140;
y = -100;
};
Z = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -60;
c = -20;
cacute = -20;
ccedilla = -20;
d = -20;
e = -20;
eacute = -20;
ecircumflex = -20;
edieresis = -20;
egrave = -20;
emdash = -60;
endash = -60;
eogonek = -20;
eth = -20;
guillemetleft = -60;
guillemetright = -60;
guilsinglleft = -60;
guilsinglright = -60;
hyphen = -60;
o = -20;
oacute = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
oslash = -20;
otilde = -20;
periodcentered = -60;
q = -20;
question = 30;
s = -10;
softhyphen = -60;
v = -30;
y = -30;
};
Zacute = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -60;
c = -20;
cacute = -20;
ccedilla = -20;
d = -20;
e = -20;
eacute = -20;
ecircumflex = -20;
edieresis = -20;
egrave = -20;
emdash = -60;
endash = -60;
eogonek = -20;
eth = -20;
guillemetleft = -60;
guillemetright = -60;
guilsinglleft = -60;
guilsinglright = -60;
hyphen = -60;
o = -20;
oacute = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
oslash = -20;
otilde = -20;
periodcentered = -60;
q = -20;
question = 30;
s = -10;
softhyphen = -60;
v = -30;
y = -30;
};
Zcaron = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -60;
c = -20;
cacute = -20;
ccedilla = -20;
d = -20;
e = -20;
eacute = -20;
ecircumflex = -20;
edieresis = -20;
egrave = -20;
emdash = -60;
endash = -60;
eogonek = -20;
eth = -20;
guillemetleft = -60;
guillemetright = -60;
guilsinglleft = -60;
guilsinglright = -60;
hyphen = -60;
o = -20;
oacute = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
oslash = -20;
otilde = -20;
periodcentered = -60;
q = -20;
question = 30;
s = -10;
softhyphen = -60;
v = -30;
y = -30;
};
Zdotaccent = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
bullet = -60;
c = -20;
cacute = -20;
ccedilla = -20;
d = -20;
e = -20;
eacute = -20;
ecircumflex = -20;
edieresis = -20;
egrave = -20;
emdash = -60;
endash = -60;
eogonek = -20;
eth = -20;
guillemetleft = -60;
guillemetright = -60;
guilsinglleft = -60;
guilsinglright = -60;
hyphen = -60;
o = -20;
oacute = -20;
ocircumflex = -20;
odieresis = -20;
oe = -20;
ograve = -20;
oslash = -20;
otilde = -20;
periodcentered = -60;
q = -20;
question = 30;
s = -10;
softhyphen = -60;
v = -30;
y = -30;
};
a = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
aacute = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
acircumflex = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
adieresis = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
ae = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
agrave = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
aogonek = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
aring = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
asterisk = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = 80;
softhyphen = -160;
};
at = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
atilde = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
b = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
backslash = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
braceleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
c = -40;
cacute = -40;
ccedilla = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
};
bracketleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
c = -40;
cacute = -40;
ccedilla = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
};
bullet = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
comma = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -180;
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -50;
backslash = -180;
bullet = -130;
degree = -200;
emdash = -130;
endash = -130;
guillemetleft = -130;
guillemetright = -130;
guilsinglleft = -130;
guilsinglright = -130;
hyphen = -130;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -130;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -130;
trademark = -200;
v = -140;
w = -80;
y = -140;
};
degree = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
e = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
eacute = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
ecircumflex = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
edieresis = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
egrave = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
emdash = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
endash = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
eogonek = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
f = {
asterisk = 60;
comma = -120;
degree = 60;
onesuperior = 100;
ordfeminine = 60;
ordmasculine = 60;
period = -120;
quotedbl = 60;
quotedblbase = -120;
quotedblleft = 60;
quotedblright = 60;
quoteleft = 60;
quoteright = 60;
quotesinglbase = -120;
quotesingle = 60;
threesuperior = 100;
trademark = 60;
twosuperior = 100;
};
guillemetleft = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
guillemetright = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
guilsinglleft = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
guilsinglright = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
h = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
hyphen = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
increment = {
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = 60;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
T = -160;
U = -50;
Uacute = -50;
Ucircumflex = -50;
Udieresis = -50;
Ugrave = -50;
V = -200;
W = -120;
Y = -200;
Yacute = -200;
Ydieresis = -200;
asterisk = -200;
at = -60;
backslash = -200;
bullet = -80;
degree = -200;
emdash = -80;
endash = -80;
guillemetleft = -80;
guillemetright = -80;
guilsinglleft = -80;
guilsinglright = -80;
hyphen = -80;
onesuperior = -220;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -80;
question = -70;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -80;
threesuperior = -220;
trademark = -200;
twosuperior = -220;
v = -100;
y = -100;
};
k = {
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
m = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
n = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
nacute = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
ntilde = {
asterisk = -80;
degree = -80;
onesuperior = -80;
ordfeminine = -80;
ordmasculine = -80;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
threesuperior = -80;
trademark = -80;
twosuperior = -80;
v = -40;
w = -20;
y = -40;
};
o = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
oacute = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
ocircumflex = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
odieresis = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
oe = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
ograve = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
onesuperior = {
A = -220;
AE = -220;
Aacute = -220;
Acircumflex = -220;
Adieresis = -220;
Agrave = -220;
Aogonek = -220;
Aring = -220;
Atilde = -220;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -220;
backslash = 40;
increment = -220;
slash = -220;
};
ordfeminine = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
ordmasculine = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
oslash = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
otilde = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
p = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
parenleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
at = -40;
c = -40;
cacute = -40;
ccedilla = -40;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
q = -40;
};
period = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -180;
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -50;
backslash = -180;
bullet = -130;
degree = -200;
emdash = -130;
endash = -130;
guillemetleft = -130;
guillemetright = -130;
guilsinglleft = -130;
guilsinglright = -130;
hyphen = -130;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -130;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -130;
trademark = -200;
v = -140;
w = -80;
y = -140;
};
periodcentered = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
quotedbl = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
quotedblbase = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -180;
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -50;
backslash = -180;
bullet = -130;
degree = -200;
emdash = -130;
endash = -130;
guillemetleft = -130;
guillemetright = -130;
guilsinglleft = -130;
guilsinglright = -130;
hyphen = -130;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -130;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -130;
trademark = -200;
v = -140;
w = -80;
y = -140;
};
quotedblleft = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
quotedblright = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
quoteleft = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
quoteright = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
quotesinglbase = {
C = -50;
Cacute = -50;
Ccedilla = -50;
G = -50;
O = -50;
OE = -50;
Oacute = -50;
Ocircumflex = -50;
Odieresis = -50;
Ograve = -50;
Oslash = -50;
Otilde = -50;
Q = -50;
T = -180;
V = -180;
W = -140;
Y = -180;
Yacute = -180;
Ydieresis = -180;
asterisk = -200;
at = -50;
backslash = -180;
bullet = -130;
degree = -200;
emdash = -130;
endash = -130;
guillemetleft = -130;
guillemetright = -130;
guilsinglleft = -130;
guilsinglright = -130;
hyphen = -130;
ordfeminine = -200;
ordmasculine = -200;
periodcentered = -130;
quotedbl = -200;
quotedblleft = -200;
quotedblright = -200;
quoteleft = -200;
quoteright = -200;
quotesingle = -200;
softhyphen = -130;
trademark = -200;
v = -140;
w = -80;
y = -140;
};
quotesingle = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
r = {
a = -20;
aacute = -20;
acircumflex = -20;
adieresis = -20;
ae = -20;
agrave = -20;
aogonek = -20;
aring = -20;
atilde = -20;
comma = -140;
period = -140;
quotedblbase = -140;
quotesinglbase = -140;
};
registered = {
A = -60;
AE = -60;
Aacute = -60;
Acircumflex = -60;
Adieresis = -60;
Agrave = -60;
Aogonek = -60;
Aring = -60;
Atilde = -60;
T = -60;
V = -60;
X = -30;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -60;
Zacute = -60;
Zcaron = -60;
Zdotaccent = -60;
ampersand = -60;
asterisk = -40;
backslash = -60;
braceright = -40;
bracketright = -40;
comma = -50;
degree = -40;
increment = -60;
ordfeminine = -40;
ordmasculine = -40;
parenright = -40;
period = -50;
quotedbl = -40;
quotedblbase = -50;
quotedblleft = -40;
quotedblright = -40;
quoteleft = -40;
quoteright = -40;
quotesinglbase = -50;
quotesingle = -40;
slash = -60;
trademark = -40;
};
slash = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -60;
Cacute = -60;
Ccedilla = -60;
G = -60;
J = -160;
O = -60;
OE = -60;
Oacute = -60;
Ocircumflex = -60;
Odieresis = -60;
Ograve = -60;
Oslash = -60;
Otilde = -60;
Q = -60;
a = -130;
aacute = -130;
acircumflex = -130;
adieresis = -130;
ae = -130;
agrave = -130;
ampersand = -200;
aogonek = -130;
aring = -130;
asterisk = 40;
at = -60;
atilde = -130;
bullet = -120;
c = -130;
cacute = -130;
ccedilla = -130;
colon = -110;
comma = -200;
d = -130;
degree = 40;
e = -130;
eacute = -130;
ecircumflex = -130;
edieresis = -130;
egrave = -130;
emdash = -120;
endash = -120;
eogonek = -130;
eth = -130;
f = -30;
g = -140;
guillemetleft = -120;
guillemetright = -120;
guilsinglleft = -120;
guilsinglright = -120;
hyphen = -120;
increment = -200;
m = -110;
micro = -110;
n = -110;
nacute = -110;
ntilde = -110;
o = -130;
oacute = -130;
ocircumflex = -130;
odieresis = -130;
oe = -130;
ograve = -130;
onesuperior = 40;
ordfeminine = 40;
ordmasculine = 40;
oslash = -130;
otilde = -130;
p = -110;
period = -200;
periodcentered = -120;
q = -130;
question = 30;
quotedbl = 40;
quotedblbase = -200;
quotedblleft = 40;
quotedblright = 40;
quoteleft = 40;
quoteright = 40;
quotesinglbase = -200;
quotesingle = 40;
r = -110;
s = -110;
semicolon = -110;
slash = -200;
softhyphen = -120;
t = -50;
threesuperior = 40;
trademark = 40;
twosuperior = 40;
u = -110;
uacute = -110;
ucircumflex = -110;
udieresis = -110;
ugrave = -110;
v = -70;
x = -80;
y = -70;
z = -100;
};
softhyphen = {
A = -80;
AE = -80;
Aacute = -80;
Acircumflex = -80;
Adieresis = -80;
Agrave = -80;
Aogonek = -80;
Aring = -80;
Atilde = -80;
T = -180;
V = -120;
W = -40;
X = -70;
Y = -160;
Yacute = -160;
Ydieresis = -160;
Z = -50;
Zacute = -50;
Zcaron = -50;
Zdotaccent = -50;
ampersand = -80;
asterisk = -160;
backslash = -120;
comma = -130;
degree = -160;
increment = -80;
ordfeminine = -160;
ordmasculine = -160;
period = -130;
quotedbl = -160;
quotedblbase = -130;
quotedblleft = -160;
quotedblright = -160;
quoteleft = -160;
quoteright = -160;
quotesinglbase = -130;
quotesingle = -160;
slash = -80;
trademark = -160;
};
thorn = {
V = -130;
W = -50;
asterisk = -100;
backslash = -130;
braceright = -40;
bracketright = -40;
degree = -100;
ordfeminine = -100;
ordmasculine = -100;
parenright = -40;
quotedbl = -100;
quotedblleft = -100;
quotedblright = -100;
quoteleft = -100;
quoteright = -100;
quotesingle = -100;
trademark = -100;
v = -40;
x = -60;
y = -40;
};
threesuperior = {
A = -220;
AE = -220;
Aacute = -220;
Acircumflex = -220;
Adieresis = -220;
Agrave = -220;
Aogonek = -220;
Aring = -220;
Atilde = -220;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -220;
backslash = 40;
increment = -220;
slash = -220;
};
trademark = {
A = -200;
AE = -200;
Aacute = -200;
Acircumflex = -200;
Adieresis = -200;
Agrave = -200;
Aogonek = -200;
Aring = -200;
Atilde = -200;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
a = -68;
aacute = -68;
acircumflex = -68;
adieresis = -68;
ae = -68;
agrave = -68;
ampersand = -200;
aogonek = -68;
aring = -68;
at = -40;
atilde = -68;
backslash = 40;
bullet = -160;
c = -100;
cacute = -100;
ccedilla = -100;
comma = -200;
d = -100;
e = -100;
eacute = -100;
ecircumflex = -100;
edieresis = -100;
egrave = -100;
emdash = -160;
endash = -160;
eogonek = -100;
eth = -100;
guillemetleft = -160;
guillemetright = -160;
guilsinglleft = -160;
guilsinglright = -160;
hyphen = -160;
increment = -200;
o = -100;
oacute = -100;
ocircumflex = -100;
odieresis = -100;
oe = -100;
ograve = -100;
oslash = -100;
otilde = -100;
period = -200;
periodcentered = -160;
q = -100;
quotedblbase = -200;
quotesinglbase = -200;
slash = -200;
softhyphen = -160;
};
twosuperior = {
A = -220;
AE = -220;
Aacute = -220;
Acircumflex = -220;
Adieresis = -220;
Agrave = -220;
Aogonek = -220;
Aring = -220;
Atilde = -220;
V = 40;
W = 40;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -220;
backslash = 40;
increment = -220;
slash = -220;
};
v = {
A = -100;
AE = -100;
Aacute = -100;
Acircumflex = -100;
Adieresis = -100;
Agrave = -100;
Aogonek = -100;
Aring = -100;
Atilde = -100;
ampersand = -100;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -140;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
increment = -100;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -140;
q = -40;
quotedblbase = -140;
quotesinglbase = -140;
slash = -100;
};
w = {
comma = -80;
period = -80;
quotedblbase = -80;
quotesinglbase = -80;
};
x = {
c = -60;
cacute = -60;
ccedilla = -60;
d = -60;
e = -60;
eacute = -60;
ecircumflex = -60;
edieresis = -60;
egrave = -60;
eogonek = -60;
eth = -60;
o = -60;
oacute = -60;
ocircumflex = -60;
odieresis = -60;
oe = -60;
ograve = -60;
oslash = -60;
otilde = -60;
q = -60;
};
y = {
A = -100;
AE = -100;
Aacute = -100;
Acircumflex = -100;
Adieresis = -100;
Agrave = -100;
Aogonek = -100;
Aring = -100;
Atilde = -100;
ampersand = -100;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -140;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
eogonek = -40;
eth = -40;
increment = -100;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -140;
q = -40;
quotedblbase = -140;
quotesinglbase = -140;
slash = -100;
};
};
};
manufacturer = Truebase;
manufacturerURL = "http://www.truebase.com/";
unitsPerEm = 2000;
versionMajor = 1;
versionMinor = 104;
}
