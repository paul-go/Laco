{
.appVersion = "99";
copyright = "Copyright (c) 2010-2011 by tyPoland Lukasz Dziedzic with Reserved Font Name \"Lato\". Licensed under the SIL Open Font License, Version 1.1.";
date = "2011-09-12 07:00:00 +0000";
designer = "Paul Go";
designerURL = "http://www.github.com/paul-go";
familyName = "Lato Code";
featurePrefixes = (
{
automatic = 1;
code = "languagesystem DFLT dflt;\012";
name = Languagesystems;
}
);
features = (
{
automatic = 1;
code = "feature frac;\012feature ordn;\012";
name = aalt;
},
{
automatic = 1;
code = "sub one slash four by onequarter;\012sub one slash two by onehalf;\012sub three slash four by threequarters;\012";
name = frac;
},
{
automatic = 1;
code = "sub [zero one two three four five six seven eight nine] [A a]' by ordfeminine;\012sub [zero one two three four five six seven eight nine] [O o]' by ordmasculine;\012";
name = ordn;
},
{
automatic = 1;
code = "sub f i by fi;\012sub f l by fl;\012";
name = liga;
}
);
fontMaster = (
{
ascender = 1610;
capHeight = 1433;
custom = Italic;
customParameters = (
{
name = "Prep Table Assembly";
value = "PUSHW[ ]	/* 2 values pushed */\0122048 2048 \012MUL[ ]	/* Multiply */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012SWAP[ ]	/* SwapTopStack */\012WCVTF[ ]	/* WriteCVTInFUnits */\012PUSHB[ ]	/* 1 value pushed */\01220 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01240 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0122 \012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\0129 10 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01211 16 3 2 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 4 values pushed */\01217 22 3 2 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 3 values pushed */\0124 40 6 \012RCVT[ ]	/* ReadCVT */\012GT[ ]	/* GreaterThan */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 4 values pushed */\01211 16 4 2 \012CALL[ ]	/* CallFunction */";
},
{
name = "Fpgm Table Assembly";
value = "PUSHB[ ]	/* 1 value pushed */\0120 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012AND[ ]	/* LogicalAnd */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RCVT[ ]	/* ReadCVT */\012OR[ ]	/* LogicalOr */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012ROLL[ ]	/* RollTopThreeStack */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01280 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01256 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012PUSHB[ ]	/* 1 value pushed */\01240 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01248 \012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\012192 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012FLOOR[ ]	/* Floor */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\01254 \012ADD[ ]	/* Add */\012ELSE[ ]	/* Else */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0122 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0126 \012RS[ ]	/* ReadStore */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0127 \012RS[ ]	/* ReadStore */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01222 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0123 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0124 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 2 values pushed */\0126 4 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RCVT[ ]	/* ReadCVT */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ABS[ ]	/* Absolute */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01232 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01248 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\01264 \012EIF[ ]	/* EndIf */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012NEG[ ]	/* Negate */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012WCVTP[ ]	/* WriteCVTInPixels */\012WCVTP[ ]	/* WriteCVTInPixels */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0125 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0129 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012MD[1]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0120 \012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01210 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0126 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 0 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\0129 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 2 values pushed */\01210 2 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0129 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\01210 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0120 0 \012SZP0[ ]	/* SetZonePointer0 */\012SWAP[ ]	/* SwapTopStack */\012WCVTP[ ]	/* WriteCVTInPixels */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012MIAP[0]	/* MoveIndirectAbsPt */\012PUSHB[ ]	/* 3 values pushed */\0121 1 1 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012WS[ ]	/* WriteStore */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0127 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 4 values pushed */\01211 11 1 0 \012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 2 values pushed */\0126 2 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01211 \012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012RS[ ]	/* ReadStore */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\01218 \012NEG[ ]	/* Negate */\012JMPR[ ]	/* Jump */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0129 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0128 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01210 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012NEQ[ ]	/* NotEqual */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01211 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01210 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01212 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012SHC[1]	/* ShiftContourByLastPt */\012PUSHB[ ]	/* 1 value pushed */\0121 \012ADD[ ]	/* Add */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01213 \012FDEF[ ]	/* FunctionDefinition */\012SVTCA[0]	/* SetFreedomAndProjectionVectorToAxis */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 5 values pushed */\0120 0 0 0 0 \012WCVTP[ ]	/* WriteCVTInPixels */\012MIAP[0]	/* MoveIndirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\01212 1 \012SZP2[ ]	/* SetZonePointer2 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01214 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01215 \012FDEF[ ]	/* FunctionDefinition */\012MDAP[0]	/* MoveDirectAbsPt */\012SLOOP[ ]	/* SetLoopVariable */\012ALIGNRP[ ]	/* AlignRelativePt */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01216 \012FDEF[ ]	/* FunctionDefinition */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RS[ ]	/* ReadStore */\012MUL[ ]	/* Multiply */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0122 0 \012SZPS[ ]	/* SetZonePointerS */\012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\01216 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012NEG[ ]	/* Negate */\012ROLL[ ]	/* RollTopThreeStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012SWAP[ ]	/* SwapTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SWAP[ ]	/* SwapTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0120 \012EQ[ ]	/* Equal */\012IF[ ]	/* If */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0126 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012CINDEX[ ]	/* CopyXToTopStack */\012MD[0]	/* MeasureDistance */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012MUL[ ]	/* Multiply */\012SWAP[ ]	/* SwapTopStack */\012DIV[ ]	/* Divide */\012MUL[ ]	/* Multiply */\012PUSHB[ ]	/* 1 value pushed */\0121 \012RCVT[ ]	/* ReadCVT */\012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012SWAP[ ]	/* SwapTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0128 \012RS[ ]	/* ReadStore */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012ADD[ ]	/* Add */\012PUSHB[ ]	/* 1 value pushed */\01232 \012ADD[ ]	/* Add */\012FLOOR[ ]	/* Floor */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01224 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01225 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01226 \012FDEF[ ]	/* FunctionDefinition */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01227 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01228 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZP2[ ]	/* SetZonePointer2 */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 3 values pushed */\0120 1 1 \012SZP2[ ]	/* SetZonePointer2 */\012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\01214 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01229 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0120 1 \012SZP1[ ]	/* SetZonePointer1 */\012SZP0[ ]	/* SetZonePointer0 */\012PUSHB[ ]	/* 1 value pushed */\01215 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01230 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01217 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01235 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01238 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012ROLL[ ]	/* RollTopThreeStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012ROLL[ ]	/* RollTopThreeStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[0]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012GT[ ]	/* GreaterThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012EIF[ ]	/* EndIf */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01236 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012MINDEX[ ]	/* MoveXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01233 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 2 values pushed */\0128 4 \012CINDEX[ ]	/* CopyXToTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012CINDEX[ ]	/* CopyXToTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\0121 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01296 \012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\01264 \012LTEQ[ ]	/* LessThenOrEqual */\012IF[ ]	/* If */\012PUSHB[ ]	/* 4 values pushed */\0123 32 4 32 \012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 4 values pushed */\0123 38 4 26 \012EIF[ ]	/* EndIf */\012WS[ ]	/* WriteStore */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012ADD[ ]	/* Add */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012DUP[ ]	/* DuplicateTopStack */\012ROLL[ ]	/* RollTopThreeStack */\012ROLL[ ]	/* RollTopThreeStack */\012SUB[ ]	/* Subtract */\012DUP[ ]	/* DuplicateTopStack */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012ABS[ ]	/* Absolute */\012SWAP[ ]	/* SwapTopStack */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ABS[ ]	/* Absolute */\012LT[ ]	/* LessThan */\012IF[ ]	/* If */\012PUSHB[ ]	/* 1 value pushed */\0123 \012RS[ ]	/* ReadStore */\012SUB[ ]	/* Subtract */\012ELSE[ ]	/* Else */\012PUSHB[ ]	/* 1 value pushed */\0124 \012RS[ ]	/* ReadStore */\012ADD[ ]	/* Add */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 1 value pushed */\0123 \012CINDEX[ ]	/* CopyXToTopStack */\012PUSHB[ ]	/* 1 value pushed */\012128 \012DIV[ ]	/* Divide */\012SUB[ ]	/* Subtract */\012PUSHB[ ]	/* 1 value pushed */\0122 \012CINDEX[ ]	/* CopyXToTopStack */\012GC[0]	/* GetCoordOnPVector */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012ELSE[ ]	/* Else */\012POP[ ]	/* PopTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012SWAP[ ]	/* SwapTopStack */\012GC[1]	/* GetCoordOnPVector */\012PUSHB[ ]	/* 1 value pushed */\0120 \012CALL[ ]	/* CallFunction */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012POP[ ]	/* PopTopStack */\012EIF[ ]	/* EndIf */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01232 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0128 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012PUSHB[ ]	/* 1 value pushed */\01231 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01234 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01218 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01237 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01219 \012CALL[ ]	/* CallFunction */\012POP[ ]	/* PopTopStack */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012DUP[ ]	/* DuplicateTopStack */\012ALIGNRP[ ]	/* AlignRelativePt */\012PUSHB[ ]	/* 1 value pushed */\0125 \012SWAP[ ]	/* SwapTopStack */\012WS[ ]	/* WriteStore */\012SWAP[ ]	/* SwapTopStack */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\0125 \012RS[ ]	/* ReadStore */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 1 value pushed */\0129 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01231 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012RCVT[ ]	/* ReadCVT */\012SWAP[ ]	/* SwapTopStack */\012DUP[ ]	/* DuplicateTopStack */\012MDAP[0]	/* MoveDirectAbsPt */\012DUP[ ]	/* DuplicateTopStack */\012GC[0]	/* GetCoordOnPVector */\012ROLL[ ]	/* RollTopThreeStack */\012SWAP[ ]	/* SwapTopStack */\012SUB[ ]	/* Subtract */\012SHPIX[ ]	/* ShiftZoneByPixel */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01239 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01240 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01241 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01242 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\0120 \012SZPS[ ]	/* SetZonePointerS */\012PUSHB[ ]	/* 1 value pushed */\01220 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01243 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01244 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01245 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01246 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01221 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01247 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01248 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01249 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01250 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01222 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01251 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012MDAP[0]	/* MoveDirectAbsPt */\012PUSHB[ ]	/* 2 values pushed */\0129 1 \012SZP1[ ]	/* SetZonePointer1 */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01252 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01224 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01253 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01225 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01254 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01223 \012CALL[ ]	/* CallFunction */\012PUSHB[ ]	/* 1 value pushed */\01226 \012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012FDEF[ ]	/* FunctionDefinition */\012CALL[ ]	/* CallFunction */\012ENDF[ ]	/* EndFunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01256 \012FDEF[ ]	/* FunctionDefinition */\012PUSHB[ ]	/* 1 value pushed */\01255 \012LOOPCALL[ ]	/* LoopAndCallFunction */\012PUSHB[ ]	/* 1 value pushed */\0121 \012SZP2[ ]	/* SetZonePointer2 */\012IUP[0]	/* InterpolateUntPts */\012ENDF[ ]	/* EndFunctionDefinition */";
},
{
name = "CVT Table";
value = (
0,
0,
0,
0,
0,
179,
139,
179,
179,
139,
140,
1433,
0,
1466,
1013,
0,
-343,
1449,
-16,
1466,
1027,
-14,
-364
);
}
);
descender = -390;
id = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
italicAngle = 7;
weightValue = 400;
widthValue = 5;
xHeight = 1013;
}
);
glyphs = (
{
glyphname = A;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"829 1433 LINE",
"640 1433 LINE",
"-63 0 LINE",
"83 0 LINE SMOOTH",
"113.667 0 OFFCURVE",
"140 21 OFFCURVE",
"152 45 CURVE SMOOTH",
"316 395 LINE",
"900 395 LINE",
"978 45 LINE SMOOTH",
"984.667 18.333 OFFCURVE",
"1002.667 0 OFFCURVE",
"1036 0 CURVE SMOOTH",
"1180 0 LINE"
);
},
{
closed = 1;
nodes = (
"657 1123 LINE SMOOTH",
"674.333 1157.667 OFFCURVE",
"694.333 1203.333 OFFCURVE",
"713 1254 CURVE",
"719.667 1203.333 OFFCURVE",
"730 1158.667 OFFCURVE",
"738 1124 CURVE SMOOTH",
"870 531 LINE",
"379 531 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
15 14 13 12 11 9 6 5 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
19 1 4 3 1 30 0 4 0 1 0 4 1 0 2 38 0 3 3 11 31 2 1 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
19 1 4 3 1 30 0 3 4 3 52 0 4 0 1 0 4 1 0 2 38 2 1 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
19 1 4 3 1 30 0 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
19 1 4 3 1 30 0 3 4 3 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1237;
}
);
note = A;
unicode = 0041;
},
{
glyphname = Aacute;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 351, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Aacute;
unicode = 00C1;
},
{
glyphname = Acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 335, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Acircumflex;
unicode = 00C2;
},
{
glyphname = Adieresis;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 335, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Adieresis;
unicode = 00C4;
},
{
glyphname = Agrave;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 335, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Agrave;
unicode = 00C0;
},
{
glyphname = Aogonek;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1178.741 -214 OFFCURVE",
"1132.128 -238 OFFCURVE",
"1102 -238 CURVE SMOOTH",
"1059.333 -238 OFFCURVE",
"1030 -209.667 OFFCURVE",
"1030 -167 CURVE SMOOTH",
"1030 -91.325 OFFCURVE",
"1098.196 -34.173 OFFCURVE",
"1158 0 CURVE",
"1180 0 LINE",
"829 1433 LINE",
"640 1433 LINE",
"-63 0 LINE",
"83 0 LINE SMOOTH",
"113.667 0 OFFCURVE",
"140 21 OFFCURVE",
"152 45 CURVE SMOOTH",
"316 395 LINE",
"900 395 LINE",
"978 45 LINE SMOOTH",
"984.667 18.333 OFFCURVE",
"1002.667 0 OFFCURVE",
"1036 0 CURVE SMOOTH",
"1049 0 LINE",
"961 -54.667 OFFCURVE",
"897 -130 OFFCURVE",
"897 -214 CURVE SMOOTH",
"897 -291.333 OFFCURVE",
"953.667 -342 OFFCURVE",
"1055 -342 CURVE SMOOTH",
"1119 -342 OFFCURVE",
"1182 -320.667 OFFCURVE",
"1222 -290 CURVE",
"1204 -226 LINE SMOOTH",
"1202 -218 OFFCURVE",
"1196.667 -214 OFFCURVE",
"1188 -214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"657 1123 LINE SMOOTH",
"674.333 1157.667 OFFCURVE",
"694.333 1203.333 OFFCURVE",
"713 1254 CURVE",
"719.667 1203.333 OFFCURVE",
"730 1158.667 OFFCURVE",
"738 1124 CURVE SMOOTH",
"870 531 LINE",
"379 531 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 41 40 36 34 27 26 25 24 23 21 18 17 14 12 7 5 0 39 1 39 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
45 1 8 5 3 1 1 0 2 30 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 7 9 2 0 0 1 1 0 36 0 1 1 16 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
45 1 8 5 3 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 5 5 11 31 6 4 2 2 2 12 31 0 7 7 1 1 0 36 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
45 1 8 5 3 1 1 7 2 30 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 7 0 1 7 1 1 0 37 0 5 5 11 31 6 4 2 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
45 1 8 5 3 1 1 7 2 30 0 5 8 5 52 9 1 0 2 7 2 0 7 50 0 8 0 3 2 8 3 0 2 38 0 7 0 1 7 1 1 0 37 6 4 2 2 2 15 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
45 1 8 5 3 1 1 7 2 30 0 5 8 5 52 6 4 2 2 3 0 3 2 0 50 9 1 0 7 3 0 7 48 0 8 0 3 2 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 78 values pushed */
45 1 8 5 3 1 1 7 2 30 0 5 8 5 52 0 6 3 4 3 6 4 50 0 4 2 3 4 2 48 0 2 0 3 2 0 48 9 1 0 7 3 0 7 48 0 8 0 3 6 8 3 0 2 38 0 7 1 1 7 1 0 35 0 7 7 1 1 0 36 0 1 7 1 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1237;
}
);
note = Aogonek;
unicode = 0104;
},
{
glyphname = Aring;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = ring.case;
transform = "{1, 0, 0, 1, 336, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Aring;
unicode = 00C5;
},
{
glyphname = Atilde;
layers = (
{
components = (
{
alignment = -1;
name = A;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 335, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1237;
}
);
note = Atilde;
unicode = 00C3;
},
{
glyphname = AE;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"-88 0 LINE",
"57 0 LINE SMOOTH",
"89 0 OFFCURVE",
"115.333 21 OFFCURVE",
"130 45 CURVE SMOOTH",
"335 395 LINE",
"840 395 LINE",
"840 0 LINE",
"1550 0 LINE",
"1570 152 LINE",
"1016 152 LINE",
"1016 649 LINE",
"1509 649 LINE",
"1528 796 LINE",
"1016 796 LINE",
"1016 1280 LINE",
"1708 1280 LINE",
"1726 1433 LINE",
"772 1433 LINE"
);
},
{
closed = 1;
nodes = (
"779 1151 LINE SMOOTH",
"801.667 1189.667 OFFCURVE",
"821.333 1232 OFFCURVE",
"840 1280 CURVE",
"840 531 LINE",
"415 531 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
20 19 18 16 13 12 11 10 9 8 7 6 5 4 3 2 1 0 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
21 1 1 1 29 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 1 1 0 0 0 36 0 0 0 11 31 0 4 4 5 1 0 36 7 1 5 5 12 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
21 1 1 1 29 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 4 5 1 0 36 7 1 5 5 15 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
21 1 1 1 29 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 5 5 4 0 0 35 0 4 4 5 1 0 36 7 1 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
21 1 1 1 29 0 7 4 5 4 7 5 50 0 0 0 1 2 0 1 0 0 38 0 2 0 3 8 2 3 0 0 38 0 8 0 6 4 8 6 0 0 38 0 4 7 5 4 0 0 35 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1705;
}
);
note = AE;
unicode = 00C6;
},
{
glyphname = B;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"569 0 LINE SMOOTH",
"730.333 0 OFFCURVE",
"860.667 46 OFFCURVE",
"950 126 CURVE SMOOTH",
"1039.333 206 OFFCURVE",
"1088 318 OFFCURVE",
"1088 450 CURVE SMOOTH",
"1088 599.333 OFFCURVE",
"1001 697.333 OFFCURVE",
"829 736 CURVE",
"927.667 766.667 OFFCURVE",
"1001.667 818.667 OFFCURVE",
"1051 884 CURVE SMOOTH",
"1100.333 949.333 OFFCURVE",
"1125 1027.667 OFFCURVE",
"1125 1113 CURVE SMOOTH",
"1125 1210.333 OFFCURVE",
"1092.333 1291.167 OFFCURVE",
"1023 1346.5 CURVE SMOOTH",
"953.667 1401.833 OFFCURVE",
"847.333 1433 OFFCURVE",
"698 1433 CURVE SMOOTH",
"274 1433 LINE",
"97 0 LINE"
);
},
{
closed = 1;
nodes = (
"646 655 LINE SMOOTH",
"818 655 OFFCURVE",
"903 573.667 OFFCURVE",
"903 447 CURVE SMOOTH",
"903 355 OFFCURVE",
"876.333 281 OFFCURVE",
"823 229 CURVE SMOOTH",
"769.667 177 OFFCURVE",
"689.333 148 OFFCURVE",
"584 148 CURVE SMOOTH",
"302 148 LINE",
"365 655 LINE"
);
},
{
closed = 1;
nodes = (
"443 1286 LINE",
"681 1286 LINE SMOOTH",
"854.333 1286 OFFCURVE",
"935 1217.333 OFFCURVE",
"935 1080 CURVE SMOOTH",
"935 993.333 OFFCURVE",
"908.5 919.833 OFFCURVE",
"854.5 868.5 CURVE SMOOTH",
"800.5 817.167 OFFCURVE",
"720 787 OFFCURVE",
"612 787 CURVE SMOOTH",
"381 787 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
21 21 0 0 42 40 34 32 21 31 21 30 24 22 0 20 0 19 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
12 1 3 4 1 30 0 4 7 1 3 2 4 3 1 0 38 0 5 5 0 1 0 36 0 0 0 11 31 0 2 2 1 1 0 36 6 1 1 1 12 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 2 1 1 0 36 6 1 1 1 15 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
12 1 3 4 1 30 0 0 0 5 4 0 5 1 0 38 0 4 7 1 3 2 4 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 6 1 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1191;
}
);
note = B;
unicode = 0042;
},
{
glyphname = C;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"565.667 145 OFFCURVE",
"469.167 190.5 OFFCURVE",
"400.5 272.5 CURVE SMOOTH",
"331.833 354.5 OFFCURVE",
"291 473 OFFCURVE",
"291 621 CURVE SMOOTH",
"291 825 OFFCURVE",
"351.333 991.167 OFFCURVE",
"450 1106.5 CURVE SMOOTH",
"548.667 1221.833 OFFCURVE",
"687.333 1286 OFFCURVE",
"842 1286 CURVE SMOOTH",
"958 1286 OFFCURVE",
"1026.5 1253.833 OFFCURVE",
"1072.5 1222.5 CURVE SMOOTH",
"1107.57 1198.611 OFFCURVE",
"1143.788 1159 OFFCURVE",
"1165 1159 CURVE SMOOTH",
"1185 1159 OFFCURVE",
"1197.333 1168.667 OFFCURVE",
"1208 1182 CURVE SMOOTH",
"1272 1260 LINE",
"1224 1317.333 OFFCURVE",
"1170 1364.667 OFFCURVE",
"1102 1398 CURVE SMOOTH",
"1034 1431.333 OFFCURVE",
"952.333 1449 OFFCURVE",
"851 1449 CURVE SMOOTH",
"640.333 1449 OFFCURVE",
"452.833 1363.167 OFFCURVE",
"317.5 1214.5 CURVE SMOOTH",
"182.167 1065.833 OFFCURVE",
"100 855.333 OFFCURVE",
"100 606 CURVE SMOOTH",
"100 423.333 OFFCURVE",
"151.5 268.5 OFFCURVE",
"245.5 158.5 CURVE SMOOTH",
"339.5 48.5 OFFCURVE",
"477.333 -16 OFFCURVE",
"648 -16 CURVE SMOOTH",
"865.333 -16 OFFCURVE",
"1024.667 63 OFFCURVE",
"1150 199 CURVE",
"1085 280 LINE SMOOTH",
"1079.667 286.667 OFFCURVE",
"1072 292 OFFCURVE",
"1060 292 CURVE SMOOTH",
"1042.817 292 OFFCURVE",
"984.96 241.517 OFFCURVE",
"952.5 218.5 CURVE SMOOTH",
"934.167 205.5 OFFCURVE",
"912 193.667 OFFCURVE",
"886 183 CURVE SMOOTH",
"834 161.667 OFFCURVE",
"767 145 OFFCURVE",
"679 145 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 39 37 34 32 25 23 15 13 8 6 0 47 1 47 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
29 1 4 5 11 1 0 1 2 30 0 4 5 1 5 4 1 50 0 1 0 5 1 0 48 0 5 5 3 1 0 36 0 3 3 17 31 6 1 0 0 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
29 1 4 5 11 1 0 1 2 30 0 4 5 1 5 4 1 50 0 1 0 5 1 0 48 0 3 0 5 4 3 5 1 0 38 6 1 0 0 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
29 1 4 5 11 1 0 1 2 30 0 4 5 1 5 4 1 50 0 1 0 5 1 0 48 0 3 0 5 4 3 5 1 0 38 6 1 0 2 2 0 1 0 35 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1234;
}
);
note = C;
unicode = 0043;
},
{
glyphname = Cacute;
layers = (
{
components = (
{
alignment = -1;
name = C;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 444, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1258;
}
);
note = Cacute;
unicode = 0106;
},
{
glyphname = Ccedilla;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"497 -249 OFFCURVE",
"489.333 -254.667 OFFCURVE",
"484 -266 CURVE SMOOTH",
"461 -319 LINE",
"497 -339 OFFCURVE",
"541.333 -351 OFFCURVE",
"592 -351 CURVE SMOOTH",
"714.836 -351 OFFCURVE",
"813 -297.158 OFFCURVE",
"813 -198 CURVE SMOOTH",
"813 -136.667 OFFCURVE",
"770.667 -94.667 OFFCURVE",
"672 -72 CURVE",
"694 -14 LINE",
"888.667 -3.333 OFFCURVE",
"1034 73.667 OFFCURVE",
"1150 199 CURVE",
"1085 280 LINE SMOOTH",
"1079.667 286.667 OFFCURVE",
"1072 292 OFFCURVE",
"1060 292 CURVE SMOOTH",
"1042.817 292 OFFCURVE",
"984.96 241.517 OFFCURVE",
"952.5 218.5 CURVE SMOOTH",
"934.167 205.5 OFFCURVE",
"912 193.667 OFFCURVE",
"886 183 CURVE SMOOTH",
"834 161.667 OFFCURVE",
"767 145 OFFCURVE",
"679 145 CURVE SMOOTH",
"565.667 145 OFFCURVE",
"469.167 190.5 OFFCURVE",
"400.5 272.5 CURVE SMOOTH",
"331.833 354.5 OFFCURVE",
"291 473 OFFCURVE",
"291 621 CURVE SMOOTH",
"291 825 OFFCURVE",
"351.333 991.167 OFFCURVE",
"450 1106.5 CURVE SMOOTH",
"548.667 1221.833 OFFCURVE",
"687.333 1286 OFFCURVE",
"842 1286 CURVE SMOOTH",
"958 1286 OFFCURVE",
"1026.5 1253.833 OFFCURVE",
"1072.5 1222.5 CURVE SMOOTH",
"1107.57 1198.611 OFFCURVE",
"1143.788 1159 OFFCURVE",
"1165 1159 CURVE SMOOTH",
"1185 1159 OFFCURVE",
"1197.333 1168.667 OFFCURVE",
"1208 1182 CURVE SMOOTH",
"1272 1260 LINE",
"1224 1317.333 OFFCURVE",
"1170 1364.667 OFFCURVE",
"1102 1398 CURVE SMOOTH",
"1034 1431.333 OFFCURVE",
"952.333 1449 OFFCURVE",
"851 1449 CURVE SMOOTH",
"640.333 1449 OFFCURVE",
"452.833 1363.167 OFFCURVE",
"317.5 1214.5 CURVE SMOOTH",
"182.167 1065.833 OFFCURVE",
"100 855.333 OFFCURVE",
"100 606 CURVE SMOOTH",
"100 435.333 OFFCURVE",
"145 287 OFFCURVE",
"229 179 CURVE SMOOTH",
"313 71 OFFCURVE",
"435 1.667 OFFCURVE",
"587 -13 CURVE",
"539 -131 LINE",
"627 -143 OFFCURVE",
"676 -157.333 OFFCURVE",
"676 -204 CURVE SMOOTH",
"676 -244 OFFCURVE",
"646.333 -274 OFFCURVE",
"593 -274 CURVE SMOOTH",
"564.197 -274 OFFCURVE",
"521.145 -249 OFFCURVE",
"507 -249 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 70 68 60 59 54 52 47 45 37 35 32 30 23 21 6 4 0 74 1 74 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 18 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 0 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 82 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 31 0 1 1 8 1 0 36 0 8 8 16 8 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 1 0 8 1 8 1 0 37 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 7 1 0 36 0 7 7 21 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 77 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 2 0 4 3 2 4 1 0 38 0 1 0 8 1 8 1 0 37 0 5 5 7 1 0 36 0 7 7 21 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 87 values pushed */
27 1 3 4 57 1 5 6 61 12 11 3 0 7 72 1 8 1 4 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 2 0 4 3 2 4 1 0 38 0 5 0 7 0 5 7 1 0 38 0 1 8 8 1 1 0 35 0 1 1 8 1 0 36 0 8 1 8 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1234;
}
);
note = Ccedilla;
unicode = 00C7;
},
{
glyphname = D;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1341 998.333 OFFCURVE",
"1285.667 1152.833 OFFCURVE",
"1187 1261.5 CURVE SMOOTH",
"1088.333 1370.167 OFFCURVE",
"944 1433 OFFCURVE",
"768 1433 CURVE SMOOTH",
"274 1433 LINE",
"97 0 LINE",
"592 0 LINE SMOOTH",
"808 0 OFFCURVE",
"995.833 82.167 OFFCURVE",
"1128.5 225.5 CURVE SMOOTH",
"1261.167 368.833 OFFCURVE",
"1341 573 OFFCURVE",
"1341 817 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1149 606.333 OFFCURVE",
"1093.667 441.5 OFFCURVE",
"999 327.5 CURVE SMOOTH",
"904.333 213.5 OFFCURVE",
"770 151 OFFCURVE",
"610 151 CURVE SMOOTH",
"304 151 LINE",
"444 1281 LINE",
"750 1281 LINE SMOOTH",
"874 1281 OFFCURVE",
"973.833 1236.167 OFFCURVE",
"1042.5 1155.5 CURVE SMOOTH",
"1111.167 1074.833 OFFCURVE",
"1149 957 OFFCURVE",
"1149 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 20 19 17 9 7 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 11 31 0 3 3 0 1 0 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 3 0 1 0 36 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1385;
}
);
note = D;
unicode = 0044;
},
{
glyphname = Eth;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"69 667 LINE",
"248 667 LINE",
"167 0 LINE",
"661 0 LINE SMOOTH",
"877 0 OFFCURVE",
"1062.667 82.167 OFFCURVE",
"1196 225.5 CURVE SMOOTH",
"1329.333 368.833 OFFCURVE",
"1408 573 OFFCURVE",
"1408 817 CURVE SMOOTH",
"1408 998.333 OFFCURVE",
"1353.833 1152.833 OFFCURVE",
"1254.5 1261.5 CURVE SMOOTH",
"1155.167 1370.167 OFFCURVE",
"1012 1433 OFFCURVE",
"836 1433 CURVE SMOOTH",
"342 1433 LINE",
"262 777 LINE",
"83 777 LINE"
);
},
{
closed = 1;
nodes = (
"1216 606.333 OFFCURVE",
"1161.667 441.5 OFFCURVE",
"1067 327.5 CURVE SMOOTH",
"972.333 213.5 OFFCURVE",
"839 151 OFFCURVE",
"679 151 CURVE SMOOTH",
"373 151 LINE",
"436 667 LINE",
"784 667 LINE",
"797 777 LINE",
"449 777 LINE",
"511 1281 LINE",
"818 1281 LINE SMOOTH",
"942 1281 OFFCURVE",
"1042 1236.167 OFFCURVE",
"1110 1155.5 CURVE SMOOTH",
"1178 1074.833 OFFCURVE",
"1216 957 OFFCURVE",
"1216 813 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
30 28 27 26 25 24 23 21 16 15 14 12 4 2 1 0 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
5 1 0 6 1 3 7 0 3 0 0 38 0 4 4 1 1 0 36 0 1 1 11 31 0 7 7 2 1 0 36 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 7 2 1 0 36 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 0 4 0 1 4 1 0 38 5 1 0 6 1 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
0 1 0 4 0 1 4 1 0 38 0 5 0 6 3 5 6 0 0 38 0 0 0 3 7 0 3 0 0 38 0 7 2 2 7 1 0 35 0 7 7 2 1 0 36 0 2 7 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1452;
}
);
note = Eth;
unicode = 00D0;
},
{
glyphname = E;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1089 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"914 0 LINE",
"933 152 LINE",
"304 152 LINE",
"365 650 LINE",
"872 650 LINE",
"891 797 LINE",
"383 797 LINE",
"443 1280 LINE",
"1070 1280 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 5 0 0 36 0 5 5 11 31 0 3 3 4 0 0 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
0 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 4 0 0 36 0 4 4 15 4 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 5 0 0 1 5 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 4 4 3 0 0 35 0 3 3 4 0 0 36 0 4 3 4 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = E;
unicode = 0045;
},
{
glyphname = Eacute;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1067;
}
);
note = Eacute;
unicode = 00C9;
},
{
glyphname = Ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1067;
}
);
note = Ecircumflex;
unicode = 00CA;
},
{
glyphname = Edieresis;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1067;
}
);
note = Edieresis;
unicode = 00CB;
},
{
glyphname = Egrave;
layers = (
{
components = (
{
alignment = -1;
name = E;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 292, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1067;
}
);
note = Egrave;
unicode = 00C8;
},
{
glyphname = Eogonek;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"829.741 -214 OFFCURVE",
"783.128 -238 OFFCURVE",
"753 -238 CURVE SMOOTH",
"710.333 -238 OFFCURVE",
"681 -209.667 OFFCURVE",
"681 -167 CURVE SMOOTH",
"681 -91.325 OFFCURVE",
"749.196 -34.173 OFFCURVE",
"809 0 CURVE",
"914 0 LINE",
"933 152 LINE",
"304 152 LINE",
"365 650 LINE",
"872 650 LINE",
"891 797 LINE",
"383 797 LINE",
"443 1280 LINE",
"1070 1280 LINE",
"1089 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"700 0 LINE",
"612 -54.667 OFFCURVE",
"548 -130 OFFCURVE",
"548 -214 CURVE SMOOTH",
"548 -291.333 OFFCURVE",
"604.667 -342 OFFCURVE",
"706 -342 CURVE SMOOTH",
"770 -342 OFFCURVE",
"833 -320.667 OFFCURVE",
"873 -290 CURVE",
"855 -226 LINE SMOOTH",
"853 -218 OFFCURVE",
"847.667 -214 OFFCURVE",
"839 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 34 32 25 24 23 22 21 20 19 18 17 16 15 14 13 12 7 5 0 37 1 37 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
3 1 1 0 1 30 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 9 10 2 0 0 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 5 0 6 7 5 6 0 0 38 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 31 0 9 9 1 1 0 36 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 5 0 6 7 5 6 0 0 38 0 9 0 1 9 1 1 0 37 0 4 4 3 0 0 36 0 3 3 11 31 0 7 7 2 0 0 36 8 1 2 2 12 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 9 0 1 9 1 1 0 37 0 7 7 2 0 0 36 8 1 2 2 15 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
3 1 1 9 1 30 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 8 1 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
3 1 1 9 1 30 0 8 7 2 2 8 42 10 1 0 2 9 2 0 9 50 0 3 0 4 5 3 4 0 0 38 0 5 0 6 7 5 6 0 0 38 0 7 0 2 0 7 2 0 0 38 0 9 1 1 9 1 0 35 0 9 9 1 1 0 36 0 1 9 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = Eogonek;
unicode = 0118;
},
{
glyphname = F;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1089 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"286 0 LINE",
"362 618 LINE",
"896 618 LINE",
"917 770 LINE",
"380 770 LINE",
"443 1280 LINE",
"1070 1280 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
9 8 7 6 5 4 3 2 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 0 2 3 1 2 0 0 38 0 0 0 4 0 0 36 0 4 4 11 31 0 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 4 0 0 1 4 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
0 3 2 3 53 0 4 0 0 1 4 0 0 0 38 0 1 2 2 1 0 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1041;
}
);
note = F;
unicode = 0046;
},
{
glyphname = G;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"578.667 135 OFFCURVE",
"476 181 OFFCURVE",
"404 265 CURVE SMOOTH",
"332 349 OFFCURVE",
"291 470.333 OFFCURVE",
"291 621 CURVE SMOOTH",
"291 822.333 OFFCURVE",
"348.5 989 OFFCURVE",
"446.5 1105 CURVE SMOOTH",
"544.5 1221 OFFCURVE",
"684 1286 OFFCURVE",
"848 1286 CURVE SMOOTH",
"948 1286 OFFCURVE",
"1016.5 1265.167 OFFCURVE",
"1066.5 1240.5 CURVE SMOOTH",
"1105.8 1221.112 OFFCURVE",
"1154.673 1182.375 OFFCURVE",
"1179 1168 CURVE SMOOTH",
"1189.667 1161.333 OFFCURVE",
"1200.667 1158 OFFCURVE",
"1212 1158 CURVE SMOOTH",
"1230.667 1158 OFFCURVE",
"1243.667 1167.667 OFFCURVE",
"1257 1185 CURVE SMOOTH",
"1317 1263 LINE",
"1267.667 1316.333 OFFCURVE",
"1209.333 1362.667 OFFCURVE",
"1136 1396 CURVE SMOOTH",
"1062.667 1429.333 OFFCURVE",
"972.667 1449 OFFCURVE",
"862 1449 CURVE SMOOTH",
"642 1449 OFFCURVE",
"451.833 1363.833 OFFCURVE",
"316.5 1216.5 CURVE SMOOTH",
"181.167 1069.167 OFFCURVE",
"100 860.667 OFFCURVE",
"100 614 CURVE SMOOTH",
"100 430 OFFCURVE",
"156 271.833 OFFCURVE",
"256 160.5 CURVE SMOOTH",
"356 49.167 OFFCURVE",
"498.667 -16 OFFCURVE",
"672 -16 CURVE SMOOTH",
"781.333 -16 OFFCURVE",
"874.667 -3.5 OFFCURVE",
"960 22.5 CURVE SMOOTH",
"1045.333 48.5 OFFCURVE",
"1121 87 OFFCURVE",
"1193 139 CURVE",
"1260 686 LINE",
"850 686 LINE",
"841 607 LINE SMOOTH",
"840.499 602.075 OFFCURVE",
"838.501 579.925 OFFCURVE",
"838 575 CURVE",
"838 556.333 OFFCURVE",
"851.333 543 OFFCURVE",
"874 543 CURVE SMOOTH",
"1073 543 LINE",
"1034 219 LINE",
"934.896 163.942 OFFCURVE",
"836.572 135 OFFCURVE",
"704 135 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 50 48 43 41 34 32 24 22 17 16 8 6 0 58 1 58 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
38 1 5 6 10 1 1 2 2 30 0 5 6 2 6 5 2 50 0 2 0 1 0 2 1 1 0 38 0 6 6 4 1 0 36 0 4 4 17 31 7 1 0 0 3 1 0 36 0 3 3 18 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
38 1 5 6 10 1 1 2 2 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 0 3 1 0 36 0 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
38 1 5 6 10 1 1 2 2 30 0 5 6 2 6 5 2 50 0 4 0 6 5 4 6 1 0 38 0 2 0 1 0 2 1 1 0 38 7 1 0 3 3 0 1 0 35 7 1 0 0 3 1 0 36 0 3 0 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1349;
}
);
note = G;
unicode = 0047;
},
{
glyphname = H;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1349 1433 LINE",
"1161 1433 LINE",
"1082 790 LINE",
"383 790 LINE",
"462 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"286 0 LINE",
"366 654 LINE",
"1065 654 LINE",
"984 0 LINE",
"1173 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
11 10 9 8 7 6 5 4 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 4 0 1 0 4 1 0 2 38 5 1 3 3 11 31 2 1 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
5 1 3 4 3 52 0 4 0 1 0 4 1 0 2 38 2 1 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
5 1 3 4 3 52 2 1 0 1 0 53 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
0 3 5 3 52 0 5 4 5 52 0 2 1 0 1 2 0 50 0 0 0 51 0 4 1 1 4 0 0 35 0 4 4 1 0 2 36 0 1 4 1 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1392;
}
);
note = H;
unicode = 0048;
},
{
glyphname = I;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"492 1433 LINE",
"304 1433 LINE",
"129 0 LINE",
"317 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 0 0 36 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 566;
}
);
note = I;
unicode = 0049;
},
{
glyphname = Iacute;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 1, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 566;
}
);
note = Iacute;
unicode = 00CD;
},
{
glyphname = Icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 1, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 566;
}
);
note = Icircumflex;
unicode = 00CE;
},
{
glyphname = Idieresis;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 1, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 566;
}
);
note = Idieresis;
unicode = 00CF;
},
{
glyphname = Igrave;
layers = (
{
components = (
{
alignment = -1;
name = I;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 1, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 566;
}
);
note = Igrave;
unicode = 00CC;
},
{
glyphname = J;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"774 1433 LINE",
"587 1433 LINE",
"470 471 LINE SMOOTH",
"455.333 348.333 OFFCURVE",
"420.333 266 OFFCURVE",
"371 214 CURVE SMOOTH",
"321.667 162 OFFCURVE",
"259.333 141 OFFCURVE",
"190 141 CURVE SMOOTH",
"130.743 141 OFFCURVE",
"77.322 158 OFFCURVE",
"50 158 CURVE SMOOTH",
"23.333 158 OFFCURVE",
"11.667 141 OFFCURVE",
"9 121 CURVE SMOOTH",
"-5 12 LINE",
"59 -6.667 OFFCURVE",
"119 -16 OFFCURVE",
"191 -16 CURVE SMOOTH",
"455 -16 OFFCURVE",
"618.333 157.667 OFFCURVE",
"657 475 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
22 21 16 14 11 9 4 2 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
6 1 0 1 1 30 0 3 3 11 31 2 1 1 1 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
6 1 0 2 1 30 0 1 3 2 3 1 2 50 0 3 3 11 31 0 2 2 0 1 0 36 0 0 0 18 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
6 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 2 0 1 0 36 0 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
6 1 0 2 1 30 0 3 1 3 52 0 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 817;
}
);
note = J;
unicode = 004A;
},
{
glyphname = K;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"476 1433 LINE",
"289 1433 LINE",
"114 0 LINE",
"300 0 LINE",
"381 658 LINE",
"462 658 LINE SMOOTH",
"519.333 658 OFFCURVE",
"538.667 644 OFFCURVE",
"560 612 CURVE SMOOTH",
"936 40 LINE SMOOTH",
"953.841 13.238 OFFCURVE",
"968.86 0 OFFCURVE",
"1014 0 CURVE SMOOTH",
"1175 0 LINE",
"743 679 LINE SMOOTH",
"720.333 713.667 OFFCURVE",
"699 736.667 OFFCURVE",
"667 750 CURVE",
"693.667 762 OFFCURVE",
"717 782.333 OFFCURVE",
"745 813 CURVE SMOOTH",
"1317 1433 LINE",
"1158 1433 LINE SMOOTH",
"1118 1433 OFFCURVE",
"1091.667 1422.667 OFFCURVE",
"1061 1388 CURVE SMOOTH",
"565 844 LINE SMOOTH",
"537 813.333 OFFCURVE",
"510.667 802 OFFCURVE",
"464 802 CURVE SMOOTH",
"398 802 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
32 31 30 29 28 26 19 17 9 7 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 5 1 1 1 11 31 4 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 5 1 1 1 2 1 0 36 4 1 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
13 1 3 0 1 30 5 1 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 2 38 5 1 1 1 2 1 0 36 4 1 2 1 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
13 1 3 0 1 30 0 5 1 0 1 5 0 50 0 4 3 2 3 4 2 50 0 1 5 2 1 1 0 35 0 0 0 3 4 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1257;
}
);
note = K;
unicode = 004B;
},
{
glyphname = L;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"461 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"851 0 LINE",
"870 158 LINE",
"303 158 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
0 2 0 2 52 0 0 0 1 0 2 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 947;
}
);
note = L;
unicode = 004C;
},
{
glyphname = Lslash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"515 1433 LINE",
"328 1433 LINE",
"239 715 LINE",
"72 628 LINE SMOOTH",
"55.333 619.333 OFFCURVE",
"46 606.333 OFFCURVE",
"44 589 CURVE SMOOTH",
"28 461 LINE",
"220 557 LINE",
"151 0 LINE",
"905 0 LINE",
"924 158 LINE",
"357 158 LINE",
"418 649 LINE",
"757 830 LINE SMOOTH",
"774.333 839.333 OFFCURVE",
"784.333 853.333 OFFCURVE",
"787 872 CURVE SMOOTH",
"802 997 LINE",
"437 806 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 16 9 8 7 6 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
11 10 1 0 4 0 2 1 30 0 2 2 11 31 0 0 0 1 0 2 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
11 10 1 0 4 0 2 1 30 0 2 0 2 52 0 0 0 1 0 2 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
11 10 1 0 4 0 2 1 30 0 2 0 2 52 0 0 1 1 0 0 0 35 0 0 0 1 0 2 36 0 1 0 1 0 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1001;
}
);
note = Lslash;
unicode = 0141;
},
{
glyphname = M;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"820 500 LINE",
"473 1401 LINE SMOOTH",
"462.333 1431.667 OFFCURVE",
"444.333 1433 OFFCURVE",
"411 1433 CURVE SMOOTH",
"274 1433 LINE",
"97 0 LINE",
"262 0 LINE",
"392 1062 LINE SMOOTH",
"394.667 1088.667 OFFCURVE",
"395.667 1120 OFFCURVE",
"397 1152 CURVE",
"742 252 LINE SMOOTH",
"753.333 223.333 OFFCURVE",
"774.333 209 OFFCURVE",
"805 209 CURVE SMOOTH",
"831 209 LINE SMOOTH",
"862.333 209 OFFCURVE",
"886.667 223.333 OFFCURVE",
"904 252 CURVE SMOOTH",
"1461 1150 LINE",
"1454.333 1116.667 OFFCURVE",
"1447.667 1085.667 OFFCURVE",
"1445 1059 CURVE SMOOTH",
"1314 0 LINE",
"1478 0 LINE",
"1654 1433 LINE",
"1515 1433 LINE SMOOTH",
"1481.667 1433 OFFCURVE",
"1465.667 1431.667 OFFCURVE",
"1447 1401 CURVE SMOOTH",
"884 500 LINE SMOOTH",
"868 474 OFFCURVE",
"854 447 OFFCURVE",
"842 419 CURVE",
"835.333 447 OFFCURVE",
"828 472 OFFCURVE",
"820 500 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
31 29 28 27 21 18 12 11 10 8 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
23 3 2 2 0 1 30 0 2 0 1 0 2 1 50 4 1 0 0 11 31 3 1 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
23 3 2 2 0 1 30 4 1 0 2 0 52 0 2 1 2 52 3 1 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
23 3 2 2 0 1 30 4 1 0 2 0 52 0 2 1 2 52 3 1 1 1 43 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 32 values pushed */
23 3 2 2 4 1 30 0 0 4 0 52 0 4 2 4 52 0 2 3 2 52 0 3 1 3 52 0 1 1 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1696;
}
);
note = M;
unicode = 004D;
},
{
glyphname = N;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"370 1433 LINE",
"274 1433 LINE",
"97 0 LINE",
"262 0 LINE",
"392 1060 LINE SMOOTH",
"394.401 1076.808 OFFCURVE",
"398 1121.728 OFFCURVE",
"398 1131 CURVE",
"1015 35 LINE SMOOTH",
"1029.667 8.333 OFFCURVE",
"1048.333 0 OFFCURVE",
"1079 0 CURVE SMOOTH",
"1173 0 LINE",
"1349 1433 LINE",
"1184 1433 LINE",
"1056 389 LINE SMOOTH",
"1053.333 363.667 OFFCURVE",
"1050.667 336.667 OFFCURVE",
"1048 306 CURVE",
"430 1401 LINE SMOOTH",
"414 1427.667 OFFCURVE",
"403.333 1433 OFFCURVE",
"370 1433 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
24 23 22 21 12 10 9 8 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 1 2 0 1 30 4 1 2 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 1 2 0 1 30 4 1 2 0 2 0 52 3 1 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
15 1 2 0 1 30 4 1 2 0 2 0 52 3 1 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
15 1 3 4 1 30 0 0 1 0 52 0 1 4 1 52 0 4 3 4 52 0 3 2 3 52 0 2 2 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1391;
}
);
note = N;
unicode = 004E;
},
{
glyphname = Nacute;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 410, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1391;
}
);
note = Nacute;
unicode = 0143;
},
{
glyphname = Ntilde;
layers = (
{
components = (
{
alignment = -1;
name = N;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 410, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1391;
}
);
note = Ntilde;
unicode = 00D1;
},
{
glyphname = O;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1422 1000.667 OFFCURVE",
"1367.833 1158 OFFCURVE",
"1268.5 1270 CURVE SMOOTH",
"1169.167 1382 OFFCURVE",
"1027 1449 OFFCURVE",
"851 1449 CURVE SMOOTH",
"636.333 1449 OFFCURVE",
"448.5 1362 OFFCURVE",
"314.5 1214 CURVE SMOOTH",
"180.5 1066 OFFCURVE",
"100 857 OFFCURVE",
"100 613 CURVE SMOOTH",
"100 430.333 OFFCURVE",
"154.167 273.833 OFFCURVE",
"253.5 162.5 CURVE SMOOTH",
"352.833 51.167 OFFCURVE",
"495 -15 OFFCURVE",
"671 -15 CURVE SMOOTH",
"742.333 -15 OFFCURVE",
"810.5 -5.667 OFFCURVE",
"875.5 13 CURVE SMOOTH",
"1005.5 50.333 OFFCURVE",
"1117.5 120.333 OFFCURVE",
"1207.5 219 CURVE SMOOTH",
"1252.5 268.333 OFFCURVE",
"1290.833 323.833 OFFCURVE",
"1322.5 385.5 CURVE SMOOTH",
"1385.833 508.833 OFFCURVE",
"1422 655.333 OFFCURVE",
"1422 818 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1230 608.667 OFFCURVE",
"1174.667 440.167 OFFCURVE",
"1080 323.5 CURVE SMOOTH",
"985.333 206.833 OFFCURVE",
"851 142 OFFCURVE",
"691 142 CURVE SMOOTH",
"567 142 OFFCURVE",
"467.167 188.333 OFFCURVE",
"398.5 271 CURVE SMOOTH",
"329.833 353.667 OFFCURVE",
"291 472.667 OFFCURVE",
"291 618 CURVE SMOOTH",
"291 823.333 OFFCURVE",
"347.333 991.667 OFFCURVE",
"442 1109 CURVE SMOOTH",
"536.667 1226.333 OFFCURVE",
"671.667 1292 OFFCURVE",
"829 1292 CURVE SMOOTH",
"953 1292 OFFCURVE",
"1053.833 1244.667 OFFCURVE",
"1122.5 1162 CURVE SMOOTH",
"1191.167 1079.333 OFFCURVE",
"1230 959.333 OFFCURVE",
"1230 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
38 36 28 26 18 16 8 6 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 1 1 0 36 0 1 1 17 31 0 3 3 0 1 0 36 0 0 0 18 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 3 0 1 0 36 0 0 0 21 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 0 2 3 1 2 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 0 36 0 0 3 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1465;
}
);
note = O;
unicode = 004F;
},
{
glyphname = Oacute;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 446, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1465;
}
);
note = Oacute;
unicode = 00D3;
},
{
glyphname = Ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 446, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1465;
}
);
note = Ocircumflex;
unicode = 00D4;
},
{
glyphname = Odieresis;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 446, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1465;
}
);
note = Odieresis;
unicode = 00D6;
},
{
glyphname = Ograve;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 446, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1465;
}
);
note = Ograve;
unicode = 00D2;
},
{
glyphname = Oslash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1422 994 OFFCURVE",
"1371 1145 OFFCURVE",
"1279 1257 CURVE",
"1471 1497 LINE",
"1375 1497 LINE SMOOTH",
"1332.579 1497 OFFCURVE",
"1316.064 1483.717 OFFCURVE",
"1288 1448 CURVE SMOOTH",
"1199 1336 LINE",
"1107 1408 OFFCURVE",
"989.667 1449 OFFCURVE",
"851 1449 CURVE SMOOTH",
"636.333 1449 OFFCURVE",
"448.5 1362 OFFCURVE",
"314.5 1214 CURVE SMOOTH",
"180.5 1066 OFFCURVE",
"100 857 OFFCURVE",
"100 613 CURVE SMOOTH",
"100 426.333 OFFCURVE",
"156.333 268 OFFCURVE",
"259 156 CURVE",
"48 -109 LINE",
"122 -109 LINE SMOOTH",
"158 -109 OFFCURVE",
"202 -95 OFFCURVE",
"234 -55 CURVE SMOOTH",
"343 82 LINE",
"432.333 19.333 OFFCURVE",
"541.667 -15 OFFCURVE",
"671 -15 CURVE SMOOTH",
"742.333 -15 OFFCURVE",
"810.5 -5.667 OFFCURVE",
"875.5 13 CURVE SMOOTH",
"1005.5 50.333 OFFCURVE",
"1117.5 120.333 OFFCURVE",
"1207.5 219 CURVE SMOOTH",
"1252.5 268.333 OFFCURVE",
"1290.833 323.833 OFFCURVE",
"1322.5 385.5 CURVE SMOOTH",
"1385.833 508.833 OFFCURVE",
"1422 655.333 OFFCURVE",
"1422 818 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"291 823.333 OFFCURVE",
"347.333 991.667 OFFCURVE",
"442 1109 CURVE SMOOTH",
"536.667 1226.333 OFFCURVE",
"671.667 1292 OFFCURVE",
"829 1292 CURVE SMOOTH",
"934.333 1292 OFFCURVE",
"1021.333 1258.333 OFFCURVE",
"1088 1197 CURVE",
"375 302 LINE",
"320.333 382 OFFCURVE",
"291 488.667 OFFCURVE",
"291 618 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1230 608.667 OFFCURVE",
"1174.667 440.167 OFFCURVE",
"1080 323.5 CURVE SMOOTH",
"985.333 206.833 OFFCURVE",
"851 142 OFFCURVE",
"691 142 CURVE SMOOTH",
"595 142 OFFCURVE",
"516 168.333 OFFCURVE",
"452 219 CURVE",
"1160 1108 LINE",
"1205.333 1029.333 OFFCURVE",
"1230 931.333 OFFCURVE",
"1230 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
58 56 46 44 34 32 25 23 15 13 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
27 1 4 2 53 42 41 35 16 5 5 4 10 1 0 5 3 30 0 1 0 1 53 0 3 3 13 31 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
27 1 4 2 53 42 41 35 16 5 5 4 10 1 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 17 31 0 5 5 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
27 1 4 2 53 42 41 35 16 5 5 4 10 1 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 5 0 1 0 36 0 0 0 21 0 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 61 values pushed */
27 1 4 2 53 42 41 35 16 5 5 4 10 1 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 0 5 0 0 5 1 0 35 0 5 5 0 1 0 36 0 0 5 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
note = Oslash;
unicode = 00D8;
},
{
glyphname = Otilde;
layers = (
{
components = (
{
alignment = -1;
name = O;
},
{
alignment = -1;
name = tilde.case;
transform = "{1, 0, 0, 1, 446, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1465;
}
);
note = Otilde;
unicode = 00D5;
},
{
glyphname = OE;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1241 1433 LINE",
"1209 1176 LINE",
"1169 1260 OFFCURVE",
"1113.833 1328.167 OFFCURVE",
"1042.5 1375.5 CURVE SMOOTH",
"971.167 1422.833 OFFCURVE",
"885 1449 OFFCURVE",
"785 1449 CURVE SMOOTH",
"590.333 1449 OFFCURVE",
"418.667 1360.5 OFFCURVE",
"296 1210.5 CURVE SMOOTH",
"173.333 1060.5 OFFCURVE",
"100 849.667 OFFCURVE",
"100 603 CURVE SMOOTH",
"100 423 OFFCURVE",
"148.167 268.167 OFFCURVE",
"235.5 159.5 CURVE SMOOTH",
"322.833 50.833 OFFCURVE",
"450 -14 OFFCURVE",
"606 -14 CURVE SMOOTH",
"806 -14 OFFCURVE",
"973 74 OFFCURVE",
"1093 226 CURVE",
"1065 0 LINE",
"1857 0 LINE",
"1876 152 LINE",
"1251 152 LINE",
"1312 649 LINE",
"1816 649 LINE",
"1833 796 LINE",
"1330 796 LINE",
"1389 1280 LINE",
"2015 1280 LINE",
"2033 1433 LINE"
);
},
{
closed = 1;
nodes = (
"1137 616 OFFCURVE",
"1086.833 445 OFFCURVE",
"999.5 325 CURVE SMOOTH",
"912.167 205 OFFCURVE",
"789.333 137 OFFCURVE",
"644 137 CURVE SMOOTH",
"533.333 137 OFFCURVE",
"445.167 183.333 OFFCURVE",
"384.5 266 CURVE SMOOTH",
"323.833 348.667 OFFCURVE",
"291 465.333 OFFCURVE",
"291 608 CURVE SMOOTH",
"291 814.667 OFFCURVE",
"342 986.833 OFFCURVE",
"430 1107.5 CURVE SMOOTH",
"518 1228.167 OFFCURVE",
"641.667 1297 OFFCURVE",
"787 1297 CURVE SMOOTH",
"897.667 1297 OFFCURVE",
"985 1249.667 OFFCURVE",
"1045 1167 CURVE SMOOTH",
"1105 1084.333 OFFCURVE",
"1137 965.333 OFFCURVE",
"1137 824 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
0 0 47 45 37 35 0 30 0 30 25 23 15 13 10 9 8 7 6 5 4 3 2 1 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
29 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 8 1 0 0 6 1 0 36 10 7 2 6 6 17 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 64 values pushed */
29 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 10 7 2 6 6 17 31 0 0 0 6 1 0 36 10 7 2 6 6 17 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
29 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 9 1 3 3 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
29 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 0 3 3 4 1 0 36 5 1 4 4 12 31 0 9 9 4 1 0 36 5 1 4 4 12 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
29 1 1 0 11 1 3 2 2 30 0 1 0 2 3 1 2 0 0 38 0 8 8 6 1 0 36 0 6 6 17 31 0 0 0 7 0 0 36 10 1 7 7 11 31 0 3 3 4 0 0 36 0 4 4 12 31 0 9 9 5 1 0 36 0 5 5 21 5 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
29 1 1 0 11 1 3 2 2 30 0 6 0 8 0 6 8 1 0 38 10 1 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 3 3 4 0 0 36 0 4 4 15 31 0 9 9 5 1 0 36 0 5 5 21 5 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
29 1 1 0 11 1 3 2 2 30 0 6 0 8 0 6 8 1 0 38 10 1 7 0 0 1 7 0 0 0 38 0 1 0 2 3 1 2 0 0 38 0 9 4 5 9 1 0 35 0 3 0 4 5 3 4 0 0 38 0 9 9 5 1 0 36 0 5 9 5 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2011;
}
);
note = OE;
unicode = 0152;
},
{
glyphname = P;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"574 538 LINE SMOOTH",
"751.333 538 OFFCURVE",
"890.5 592.333 OFFCURVE",
"984.5 683 CURVE SMOOTH",
"1078.5 773.667 OFFCURVE",
"1129 902.333 OFFCURVE",
"1129 1053 CURVE SMOOTH",
"1129 1167.667 OFFCURVE",
"1093.167 1262.333 OFFCURVE",
"1020.5 1329 CURVE SMOOTH",
"947.833 1395.667 OFFCURVE",
"836 1433 OFFCURVE",
"684 1433 CURVE SMOOTH",
"289 1433 LINE",
"114 0 LINE",
"300 0 LINE",
"366 538 LINE"
);
},
{
closed = 1;
nodes = (
"666 1286 LINE SMOOTH",
"758 1286 OFFCURVE",
"827.667 1261.833 OFFCURVE",
"873 1218.5 CURVE SMOOTH",
"918.333 1175.167 OFFCURVE",
"941 1113.333 OFFCURVE",
"941 1036 CURVE SMOOTH",
"941 934.667 OFFCURVE",
"909.667 846.5 OFFCURVE",
"851 784.5 CURVE SMOOTH",
"792.333 722.5 OFFCURVE",
"705.333 686 OFFCURVE",
"592 686 CURVE SMOOTH",
"384 686 LINE",
"458 1286 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
15 15 0 0 15 27 15 26 18 16 0 14 0 13 5 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 3 5 1 2 0 3 2 1 0 38 6 1 4 4 1 1 0 36 0 1 1 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 6 1 4 3 1 4 1 0 38 0 3 5 1 2 0 3 2 1 0 38 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
0 0 2 0 53 0 1 6 1 4 3 1 4 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 5 1 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1128;
}
);
note = P;
unicode = 0050;
},
{
glyphname = Thorn;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"536 1433 LINE",
"349 1433 LINE",
"174 0 LINE",
"360 0 LINE",
"393 273 LINE",
"602 273 LINE SMOOTH",
"779.333 273 OFFCURVE",
"917.333 326.167 OFFCURVE",
"1012 417.5 CURVE SMOOTH",
"1106.667 508.833 OFFCURVE",
"1157 637.333 OFFCURVE",
"1157 788 CURVE SMOOTH",
"1157 901.333 OFFCURVE",
"1121.333 995.5 OFFCURVE",
"1048 1061.5 CURVE SMOOTH",
"974.667 1127.5 OFFCURVE",
"864 1165 OFFCURVE",
"712 1165 CURVE SMOOTH",
"503 1165 LINE"
);
},
{
closed = 1;
nodes = (
"693 1018 LINE SMOOTH",
"879.667 1018 OFFCURVE",
"969 925.667 OFFCURVE",
"969 771 CURVE SMOOTH",
"969 669.667 OFFCURVE",
"937.667 581.5 OFFCURVE",
"879 519.5 CURVE SMOOTH",
"820.333 457.5 OFFCURVE",
"733.333 421 OFFCURVE",
"620 421 CURVE SMOOTH",
"411 421 LINE",
"485 1018 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 17 17 27 17 26 20 18 16 15 14 13 12 10 2 0 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 0 6 1 5 4 0 5 1 2 38 0 4 0 1 2 4 1 1 0 38 0 3 3 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
0 3 0 3 52 0 0 6 1 5 4 0 5 1 2 38 0 4 0 1 2 4 1 1 0 38 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
0 3 0 3 52 0 2 1 2 53 0 0 6 1 5 4 0 5 1 2 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1128;
}
);
note = Thorn;
unicode = 00DE;
},
{
glyphname = Q;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1422 1000.667 OFFCURVE",
"1367.833 1158 OFFCURVE",
"1268.5 1270 CURVE SMOOTH",
"1169.167 1382 OFFCURVE",
"1027 1449 OFFCURVE",
"851 1449 CURVE SMOOTH",
"636.333 1449 OFFCURVE",
"448.5 1362 OFFCURVE",
"314.5 1214 CURVE SMOOTH",
"180.5 1066 OFFCURVE",
"100 857 OFFCURVE",
"100 613 CURVE SMOOTH",
"100 430.333 OFFCURVE",
"154.167 273.833 OFFCURVE",
"253.5 162.5 CURVE SMOOTH",
"352.833 51.167 OFFCURVE",
"495 -15 OFFCURVE",
"671 -15 CURVE SMOOTH",
"751 -15 OFFCURVE",
"826 -2.667 OFFCURVE",
"898 20 CURVE",
"1095 -253 LINE SMOOTH",
"1119 -286.333 OFFCURVE",
"1154.667 -297 OFFCURVE",
"1200 -297 CURVE SMOOTH",
"1351 -297 LINE",
"1062 96 LINE",
"1171.333 165.333 OFFCURVE",
"1261.333 266.333 OFFCURVE",
"1324 389 CURVE SMOOTH",
"1386.667 511.667 OFFCURVE",
"1422 656.667 OFFCURVE",
"1422 818 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1230 608.667 OFFCURVE",
"1174.667 440.167 OFFCURVE",
"1080 323.5 CURVE SMOOTH",
"985.333 206.833 OFFCURVE",
"851 142 OFFCURVE",
"691 142 CURVE SMOOTH",
"567 142 OFFCURVE",
"467.167 188.333 OFFCURVE",
"398.5 271 CURVE SMOOTH",
"329.833 353.667 OFFCURVE",
"291 472.667 OFFCURVE",
"291 618 CURVE SMOOTH",
"291 823.333 OFFCURVE",
"347.333 991.667 OFFCURVE",
"442 1109 CURVE SMOOTH",
"536.667 1226.333 OFFCURVE",
"671.667 1292 OFFCURVE",
"829 1292 CURVE SMOOTH",
"953 1292 OFFCURVE",
"1053.833 1244.667 OFFCURVE",
"1122.5 1162 CURVE SMOOTH",
"1191.167 1079.333 OFFCURVE",
"1230 959.333 OFFCURVE",
"1230 814 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
45 43 35 33 25 23 15 13 8 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 3 3 2 1 0 36 0 2 2 17 31 0 4 4 1 1 0 36 0 1 1 18 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 4 1 1 0 36 0 1 1 21 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
11 5 2 1 4 1 30 0 0 1 0 53 0 2 0 3 4 2 3 1 0 38 0 4 1 1 4 1 0 35 0 4 4 1 1 0 36 0 1 4 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1464;
}
);
note = Q;
unicode = 0051;
},
{
glyphname = R;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"506 601 LINE SMOOTH",
"555.333 601 OFFCURVE",
"572.667 589.333 OFFCURVE",
"590 556 CURVE SMOOTH",
"860 40 LINE SMOOTH",
"874 13.333 OFFCURVE",
"897.333 0 OFFCURVE",
"930 0 CURVE SMOOTH",
"1096 0 LINE",
"787 572 LINE SMOOTH",
"773 597.333 OFFCURVE",
"755.333 617.333 OFFCURVE",
"734 632 CURVE",
"850 658.667 OFFCURVE",
"942.667 715.167 OFFCURVE",
"1008 794.5 CURVE SMOOTH",
"1073.333 873.833 OFFCURVE",
"1109 975 OFFCURVE",
"1109 1091 CURVE SMOOTH",
"1109 1195 OFFCURVE",
"1074.167 1281.167 OFFCURVE",
"1001.5 1340.5 CURVE SMOOTH",
"928.833 1399.833 OFFCURVE",
"818 1433 OFFCURVE",
"666 1433 CURVE SMOOTH",
"289 1433 LINE",
"114 0 LINE",
"300 0 LINE",
"374 601 LINE"
);
},
{
closed = 1;
nodes = (
"649 1286 LINE SMOOTH",
"831.667 1286 OFFCURVE",
"923 1207.333 OFFCURVE",
"923 1062 CURVE SMOOTH",
"923 967.333 OFFCURVE",
"892.833 886.5 OFFCURVE",
"833.5 828.5 CURVE SMOOTH",
"774.167 770.5 OFFCURVE",
"687.333 737 OFFCURVE",
"574 737 CURVE SMOOTH",
"391 737 LINE",
"459 1286 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
25 25 0 0 25 35 25 34 28 26 0 24 0 23 19 17 5 3 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
14 1 3 4 1 30 0 4 6 1 3 0 4 3 1 0 38 7 1 5 5 1 1 0 36 0 1 1 11 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
14 1 3 4 1 30 0 1 7 1 5 4 1 5 1 0 38 0 4 6 1 3 0 4 3 1 0 38 2 1 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
14 1 3 4 1 30 2 1 0 3 0 53 0 1 7 1 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
14 1 3 4 1 30 0 2 3 0 3 2 0 50 0 0 0 51 0 1 7 1 5 4 1 5 1 0 38 0 4 3 3 4 1 0 35 0 4 4 3 1 0 36 6 1 3 4 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1188;
}
);
note = R;
unicode = 0052;
},
{
glyphname = S;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"981 1290 LINE",
"905 1387.333 OFFCURVE",
"784.667 1447 OFFCURVE",
"638 1447 CURVE SMOOTH",
"494 1447 OFFCURVE",
"378 1393.667 OFFCURVE",
"298 1311 CURVE SMOOTH",
"218 1228.333 OFFCURVE",
"174 1116.333 OFFCURVE",
"174 999 CURVE SMOOTH",
"174 893.667 OFFCURVE",
"209 824.333 OFFCURVE",
"261 775 CURVE SMOOTH",
"313 725.667 OFFCURVE",
"381.5 696.333 OFFCURVE",
"451.5 671 CURVE SMOOTH",
"594.242 619.341 OFFCURVE",
"729 580.678 OFFCURVE",
"729 437 CURVE SMOOTH",
"729 349 OFFCURVE",
"699.833 275 OFFCURVE",
"648.5 223 CURVE SMOOTH",
"597.167 171 OFFCURVE",
"522 140 OFFCURVE",
"430 140 CURVE SMOOTH",
"330 140 OFFCURVE",
"266.333 175.833 OFFCURVE",
"221 212.5 CURVE SMOOTH",
"185.437 241.264 OFFCURVE",
"147.265 285 OFFCURVE",
"124 285 CURVE SMOOTH",
"105.333 285 OFFCURVE",
"88.667 274.667 OFFCURVE",
"78 260 CURVE SMOOTH",
"12 171 LINE",
"98.667 56.333 OFFCURVE",
"235.333 -16 OFFCURVE",
"406 -16 CURVE SMOOTH",
"560.667 -16 OFFCURVE",
"686.167 41.333 OFFCURVE",
"773.5 132 CURVE SMOOTH",
"860.833 222.667 OFFCURVE",
"909 347 OFFCURVE",
"909 483 CURVE SMOOTH",
"909 581.667 OFFCURVE",
"874 648.667 OFFCURVE",
"822 698 CURVE SMOOTH",
"770 747.333 OFFCURVE",
"699.333 778.167 OFFCURVE",
"630 805.5 CURVE SMOOTH",
"571.529 828.551 OFFCURVE",
"483.31 860.875 OFFCURVE",
"438 890.5 CURVE SMOOTH",
"386 924.5 OFFCURVE",
"351 969.667 OFFCURVE",
"351 1039 CURVE SMOOTH",
"351 1185.039 OFFCURVE",
"455.357 1293 OFFCURVE",
"620 1293 CURVE SMOOTH",
"704 1293 OFFCURVE",
"757.167 1264.833 OFFCURVE",
"796.5 1237.5 CURVE SMOOTH",
"826.935 1216.35 OFFCURVE",
"860.844 1182 OFFCURVE",
"881 1182 CURVE SMOOTH",
"899.667 1182 OFFCURVE",
"911.333 1192.333 OFFCURVE",
"926 1211 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
59 57 40 38 35 33 28 26 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
61 1 0 1 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 17 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
61 1 0 1 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 4 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
61 1 0 1 30 1 4 3 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 977;
}
);
note = S;
unicode = 0053;
},
{
glyphname = Sacute;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 254, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 977;
}
);
note = Sacute;
unicode = 015A;
},
{
glyphname = Scaron;
layers = (
{
components = (
{
alignment = -1;
name = S;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 249, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 977;
}
);
note = Scaron;
unicode = 0160;
},
{
glyphname = T;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"142 1433 LINE",
"123 1276 LINE",
"548 1276 LINE",
"392 0 LINE",
"578 0 LINE",
"734 1276 LINE",
"1157 1276 LINE",
"1177 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 7 0 7 6 5 4 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
2 1 0 0 3 0 0 36 4 1 3 3 11 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
4 1 3 2 1 0 1 3 0 0 0 38 0 1 1 15 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
0 1 0 1 53 4 1 3 0 0 3 0 0 35 4 1 3 3 0 0 0 36 2 1 0 3 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
0 2 3 0 0 2 42 0 1 0 1 53 4 1 3 2 0 3 0 2 35 4 1 3 3 0 0 0 36 0 0 3 0 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1087;
}
);
note = T;
unicode = 0054;
},
{
glyphname = U;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"534 147 OFFCURVE",
"459.5 181 OFFCURVE",
"409.5 241 CURVE SMOOTH",
"359.5 301 OFFCURVE",
"333 385 OFFCURVE",
"333 485 CURVE SMOOTH",
"333 509 OFFCURVE",
"335.333 534.333 OFFCURVE",
"338 561 CURVE SMOOTH",
"445 1433 LINE",
"258 1433 LINE",
"152 560 LINE SMOOTH",
"148 528.667 OFFCURVE",
"146 498 OFFCURVE",
"146 468 CURVE SMOOTH",
"146 326.667 OFFCURVE",
"188.167 205.5 OFFCURVE",
"267.5 119.5 CURVE SMOOTH",
"346.833 33.5 OFFCURVE",
"462 -17 OFFCURVE",
"610 -17 CURVE SMOOTH",
"774 -17 OFFCURVE",
"914 45.167 OFFCURVE",
"1018 148.5 CURVE SMOOTH",
"1122 251.833 OFFCURVE",
"1190 396 OFFCURVE",
"1210 560 CURVE SMOOTH",
"1316 1433 LINE",
"1129 1433 LINE",
"1022 560 LINE SMOOTH",
"1007.333 440 OFFCURVE",
"962.833 336.167 OFFCURVE",
"895.5 263.5 CURVE SMOOTH",
"828.167 190.833 OFFCURVE",
"736.667 147 OFFCURVE",
"630 147 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 22 21 14 12 7 6 0 30 1 30 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 1 11 31 4 1 0 0 2 1 0 36 0 2 2 18 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
3 1 1 0 1 52 4 1 0 0 2 1 0 36 0 2 2 21 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 0 1 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 1 3 1 52 0 3 0 3 52 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 0 2 0 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1343;
}
);
note = U;
unicode = 0055;
},
{
glyphname = Uacute;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 390, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1343;
}
);
note = Uacute;
unicode = 00DA;
},
{
glyphname = Ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = circumflex.case;
transform = "{1, 0, 0, 1, 390, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1343;
}
);
note = Ucircumflex;
unicode = 00DB;
},
{
glyphname = Udieresis;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 390, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1343;
}
);
note = Udieresis;
unicode = 00DC;
},
{
glyphname = Ugrave;
layers = (
{
components = (
{
alignment = -1;
name = U;
},
{
alignment = -1;
name = grave.case;
transform = "{1, 0, 0, 1, 390, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1343;
}
);
note = Ugrave;
unicode = 00D9;
},
{
glyphname = V;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"485 0 LINE",
"654 0 LINE",
"1367 1433 LINE",
"1217 1433 LINE SMOOTH",
"1185 1433 OFFCURVE",
"1158.667 1409.333 OFFCURVE",
"1148 1388 CURVE SMOOTH",
"659 364 LINE SMOOTH",
"637.667 320 OFFCURVE",
"616.667 269 OFFCURVE",
"598 213 CURVE",
"591.333 269 OFFCURVE",
"580.667 321.333 OFFCURVE",
"570 364 CURVE SMOOTH",
"331 1388 LINE SMOOTH",
"324.333 1413.333 OFFCURVE",
"306.333 1433 OFFCURVE",
"273 1433 CURVE SMOOTH",
"124 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 11 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1259;
}
);
note = V;
unicode = 0056;
},
{
glyphname = W;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"365 0 LINE",
"533 0 LINE",
"998 1103 LINE SMOOTH",
"1002.667 1113.667 OFFCURVE",
"1007.167 1125.333 OFFCURVE",
"1011.5 1138 CURVE SMOOTH",
"1015.833 1150.667 OFFCURVE",
"1020.333 1163.667 OFFCURVE",
"1025 1177 CURVE",
"1027.667 1150.333 OFFCURVE",
"1031 1124.333 OFFCURVE",
"1035 1103 CURVE SMOOTH",
"1229 0 LINE",
"1398 0 LINE",
"1985 1433 LINE",
"1839 1433 LINE SMOOTH",
"1807 1433 OFFCURVE",
"1778.333 1410.667 OFFCURVE",
"1769 1388 CURVE SMOOTH",
"1366 374 LINE SMOOTH",
"1359.333 356.667 OFFCURVE",
"1353.167 338.333 OFFCURVE",
"1347.5 319 CURVE SMOOTH",
"1341.833 299.667 OFFCURVE",
"1335.667 279.333 OFFCURVE",
"1329 258 CURVE",
"1326.333 300.667 OFFCURVE",
"1322.667 339.333 OFFCURVE",
"1316 374 CURVE SMOOTH",
"1137 1388 LINE SMOOTH",
"1131.667 1414.667 OFFCURVE",
"1111.333 1433 OFFCURVE",
"1078 1433 CURVE SMOOTH",
"1035 1433 LINE SMOOTH",
"1003 1433 OFFCURVE",
"977.667 1410.667 OFFCURVE",
"967 1388 CURVE",
"538 374 LINE SMOOTH",
"523.333 339.333 OFFCURVE",
"509.333 298.667 OFFCURVE",
"496 256 CURVE",
"495.333 271.333 OFFCURVE",
"494.667 286.333 OFFCURVE",
"494 301 CURVE",
"492.667 313.667 OFFCURVE",
"491.5 326.667 OFFCURVE",
"490.5 340 CURVE SMOOTH",
"489.5 353.333 OFFCURVE",
"488.333 364.667 OFFCURVE",
"487 374 CURVE SMOOTH",
"333 1388 LINE SMOOTH",
"329 1414.667 OFFCURVE",
"308.333 1433 OFFCURVE",
"275 1433 CURVE SMOOTH",
"129 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
44 43 35 34 33 31 19 16 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
39 25 10 8 4 3 0 1 30 2 1 2 0 0 11 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
39 25 10 8 4 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
39 25 10 8 4 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
39 25 10 8 4 4 2 1 30 0 0 1 0 52 0 1 2 1 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1882;
}
);
note = W;
unicode = 0057;
},
{
glyphname = X;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"-70 0 LINE",
"117 0 LINE SMOOTH",
"141 0 OFFCURVE",
"161.667 12 OFFCURVE",
"179 36 CURVE SMOOTH",
"610 631 LINE SMOOTH",
"616.667 639.667 OFFCURVE",
"622.667 649.667 OFFCURVE",
"628 661 CURVE",
"920 36 LINE SMOOTH",
"928 18.667 OFFCURVE",
"942.333 0 OFFCURVE",
"969 0 CURVE SMOOTH",
"1137 0 LINE",
"759 773 LINE",
"1260 1433 LINE",
"1067 1433 LINE SMOOTH",
"1047 1433 OFFCURVE",
"1034.667 1422.667 OFFCURVE",
"1020 1404 CURVE",
"656 902 LINE SMOOTH",
"647.333 890 OFFCURVE",
"640 877.667 OFFCURVE",
"634 865 CURVE",
"378 1405 LINE SMOOTH",
"368.667 1423.667 OFFCURVE",
"360 1433 OFFCURVE",
"332 1433 CURVE SMOOTH",
"163 1433 LINE",
"500 765 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
26 24 17 15 13 11 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
14 0 2 2 0 1 30 1 1 0 0 11 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
14 0 2 2 0 1 30 1 1 0 0 2 1 0 36 3 1 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
14 0 2 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
14 0 2 3 1 1 30 0 0 1 0 52 0 3 1 2 1 3 2 50 0 1 3 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1192;
}
);
note = X;
unicode = 0058;
},
{
glyphname = Y;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1275 1433 LINE",
"1120 1433 LINE SMOOTH",
"1088 1433 OFFCURVE",
"1066.667 1410.333 OFFCURVE",
"1052 1389 CURVE SMOOTH",
"671 815 LINE",
"648.333 776.333 OFFCURVE",
"629 742.667 OFFCURVE",
"613 708 CURVE",
"606.333 742.667 OFFCURVE",
"597.333 776.333 OFFCURVE",
"584 815 CURVE",
"346 1389 LINE SMOOTH",
"335.333 1414.333 OFFCURVE",
"320.333 1433 OFFCURVE",
"287 1433 CURVE SMOOTH",
"121 1433 LINE",
"499 571 LINE",
"428 0 LINE",
"615 0 LINE",
"686 573 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
20 18 6 4 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
12 3 2 0 1 1 30 2 1 1 1 11 31 0 0 0 12 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
12 3 2 0 1 1 30 2 1 1 0 1 52 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
12 3 2 0 1 1 30 2 1 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 22 values pushed */
12 3 2 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1165;
}
);
note = Y;
unicode = 0059;
},
{
glyphname = Yacute;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 316, -1}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1165;
}
);
note = Yacute;
unicode = 00DD;
},
{
glyphname = Ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = Y;
},
{
alignment = -1;
name = dieresis.case;
transform = "{1, 0, 0, 1, 316, -1}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1165;
}
);
note = Ydieresis;
unicode = 0178;
},
{
glyphname = Z;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"228 1433 LINE",
"209 1280 LINE",
"922 1280 LINE",
"46 107 LINE SMOOTH",
"34 91 OFFCURVE",
"26.667 77.667 OFFCURVE",
"24 59 CURVE SMOOTH",
"16 0 LINE",
"1006 0 LINE",
"1026 152 LINE",
"288 152 LINE",
"1164 1324 LINE SMOOTH",
"1176 1340 OFFCURVE",
"1184.333 1354.333 OFFCURVE",
"1187 1373 CURVE SMOOTH",
"1195 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 15 0 15 14 13 8 7 6 5 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 2 2 3 0 0 36 4 1 3 3 11 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 0 1 0 0 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1148;
}
);
note = Z;
unicode = 005A;
},
{
glyphname = Zacute;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = acute.case;
transform = "{1, 0, 0, 1, 312, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1148;
}
);
note = Zacute;
unicode = 0179;
},
{
glyphname = Zcaron;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = caron.case;
transform = "{1, 0, 0, 1, 312, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1148;
}
);
note = Zcaron;
unicode = 017D;
},
{
glyphname = Zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = Z;
},
{
alignment = -1;
name = dotaccent.case;
transform = "{1, 0, 0, 1, 312, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1148;
}
);
note = Zdotaccent;
unicode = 017B;
},
{
glyphname = a;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"937 980 LINE",
"857 1014.667 OFFCURVE",
"775.667 1027 OFFCURVE",
"689 1027 CURVE SMOOTH",
"629 1027 OFFCURVE",
"571.667 1018.5 OFFCURVE",
"517 1001.5 CURVE SMOOTH",
"407.667 967.5 OFFCURVE",
"311.333 904.167 OFFCURVE",
"234 819.5 CURVE SMOOTH",
"195.333 777.167 OFFCURVE",
"162.167 730.667 OFFCURVE",
"134.5 680 CURVE SMOOTH",
"79.167 578.667 OFFCURVE",
"48 463 OFFCURVE",
"48 343 CURVE SMOOTH",
"48 228.333 OFFCURVE",
"74.5 139.167 OFFCURVE",
"120.5 78.5 CURVE SMOOTH",
"166.5 17.833 OFFCURVE",
"233 -14 OFFCURVE",
"313 -14 CURVE SMOOTH",
"386.333 -14 OFFCURVE",
"454.5 13.833 OFFCURVE",
"516.5 62.5 CURVE SMOOTH",
"578.5 111.167 OFFCURVE",
"634 181.667 OFFCURVE",
"682 267 CURVE",
"664 62 LINE",
"664 27.333 OFFCURVE",
"677.333 0 OFFCURVE",
"724 0 CURVE SMOOTH",
"816 0 LINE"
);
},
{
closed = 1;
nodes = (
"277.333 134 OFFCURVE",
"226 214.333 OFFCURVE",
"226 375 CURVE SMOOTH",
"226 421 OFFCURVE",
"231.333 465.833 OFFCURVE",
"242 509.5 CURVE SMOOTH",
"263.333 596.833 OFFCURVE",
"301.667 674.833 OFFCURVE",
"355 739.5 CURVE SMOOTH",
"381.667 771.833 OFFCURVE",
"411.333 799.667 OFFCURVE",
"444 823 CURVE SMOOTH",
"509.333 869.667 OFFCURVE",
"585 897 OFFCURVE",
"665 897 CURVE SMOOTH",
"693 897 OFFCURVE",
"721.667 895.667 OFFCURVE",
"751 889 CURVE",
"708 541 LINE",
"670.667 422.333 OFFCURVE",
"621 321 OFFCURVE",
"565 249 CURVE SMOOTH",
"509 177 OFFCURVE",
"445.333 134 OFFCURVE",
"380 134 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
27 26 36 33 26 43 27 43 23 21 11 9 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
25 1 4 2 32 5 2 3 4 4 1 0 3 3 30 0 4 4 2 1 0 36 0 2 2 20 31 5 1 3 3 0 1 0 36 1 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
25 1 4 2 32 5 2 3 4 4 1 0 3 3 30 0 4 4 2 1 0 36 0 2 2 20 31 0 0 0 12 31 5 1 3 3 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
25 1 4 2 32 5 2 3 4 4 1 0 3 3 30 0 4 4 2 1 0 36 0 2 2 20 31 0 0 0 15 31 5 1 3 3 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
25 1 4 2 32 5 2 3 4 4 1 0 3 3 30 0 0 3 1 3 0 1 50 0 2 0 4 3 2 4 1 0 38 5 1 3 0 1 3 1 0 35 5 1 3 3 1 1 0 36 0 1 3 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1010;
}
);
note = a;
unicode = 0061;
},
{
glyphname = aacute;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 299, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = aacute;
unicode = 00E1;
},
{
glyphname = acircumflex;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 290, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = acircumflex;
unicode = 00E2;
},
{
glyphname = adieresis;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 290, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = adieresis;
unicode = 00E4;
},
{
glyphname = agrave;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 361, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = agrave;
unicode = 00E0;
},
{
glyphname = aogonek;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"820.741 -214 OFFCURVE",
"774.128 -238 OFFCURVE",
"744 -238 CURVE SMOOTH",
"701.333 -238 OFFCURVE",
"672 -209.667 OFFCURVE",
"672 -167 CURVE SMOOTH",
"672 -91.325 OFFCURVE",
"740.196 -34.173 OFFCURVE",
"800 0 CURVE",
"816 0 LINE",
"937 980 LINE",
"857 1014.667 OFFCURVE",
"775.667 1027 OFFCURVE",
"689 1027 CURVE SMOOTH",
"629 1027 OFFCURVE",
"571.667 1018.5 OFFCURVE",
"517 1001.5 CURVE SMOOTH",
"407.667 967.5 OFFCURVE",
"311.333 904.167 OFFCURVE",
"234 819.5 CURVE SMOOTH",
"195.333 777.167 OFFCURVE",
"162.167 730.667 OFFCURVE",
"134.5 680 CURVE SMOOTH",
"79.167 578.667 OFFCURVE",
"48 463 OFFCURVE",
"48 343 CURVE SMOOTH",
"48 228.333 OFFCURVE",
"74.5 139.167 OFFCURVE",
"120.5 78.5 CURVE SMOOTH",
"166.5 17.833 OFFCURVE",
"233 -14 OFFCURVE",
"313 -14 CURVE SMOOTH",
"386.333 -14 OFFCURVE",
"454.5 13.833 OFFCURVE",
"516.5 62.5 CURVE SMOOTH",
"578.5 111.167 OFFCURVE",
"634 181.667 OFFCURVE",
"682 267 CURVE",
"664 62 LINE",
"664 35.333 OFFCURVE",
"671.667 13.333 OFFCURVE",
"697 4 CURVE",
"610.159 -47.083 OFFCURVE",
"539 -127.02 OFFCURVE",
"539 -214 CURVE SMOOTH",
"539 -291.333 OFFCURVE",
"595.667 -342 OFFCURVE",
"697 -342 CURVE SMOOTH",
"761 -342 OFFCURVE",
"824 -320.667 OFFCURVE",
"864 -290 CURVE",
"846 -226 LINE SMOOTH",
"844 -218 OFFCURVE",
"838.667 -214 OFFCURVE",
"830 -214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"277.333 134 OFFCURVE",
"226 214.333 OFFCURVE",
"226 375 CURVE SMOOTH",
"226 421 OFFCURVE",
"231.333 465.833 OFFCURVE",
"242 509.5 CURVE SMOOTH",
"263.333 596.833 OFFCURVE",
"301.667 674.833 OFFCURVE",
"355 739.5 CURVE SMOOTH",
"381.667 771.833 OFFCURVE",
"411.333 799.667 OFFCURVE",
"444 823 CURVE SMOOTH",
"509.333 869.667 OFFCURVE",
"585 897 OFFCURVE",
"665 897 CURVE SMOOTH",
"693 897 OFFCURVE",
"721.667 895.667 OFFCURVE",
"751 889 CURVE",
"708 541 LINE",
"670.667 422.333 OFFCURVE",
"621 321 OFFCURVE",
"565 249 CURVE SMOOTH",
"509 177 OFFCURVE",
"445.333 134 OFFCURVE",
"380 134 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
54 53 1 0 63 60 53 70 54 70 49 47 40 39 36 34 24 22 7 5 0 52 1 52 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 2 6 3 1 1 0 4 30 0 7 7 3 1 0 36 0 3 3 20 31 9 1 6 6 2 1 0 36 4 1 2 2 18 31 5 8 2 0 0 1 1 0 36 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 2 6 3 1 1 0 4 30 0 7 7 3 1 0 36 0 3 3 20 31 9 1 6 6 2 1 0 36 4 1 2 2 21 31 5 8 2 0 0 1 1 0 36 0 1 1 16 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 2 6 3 1 1 5 4 30 8 1 0 2 5 2 0 5 50 0 7 7 3 1 0 36 0 3 3 20 31 9 1 6 6 2 1 0 36 4 1 2 2 21 31 0 5 5 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 73 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 4 6 3 1 1 5 4 30 8 1 0 2 5 2 0 5 50 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 12 31 9 1 6 6 2 1 0 36 0 2 2 21 31 0 5 5 1 1 0 36 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 4 6 3 1 1 5 4 30 8 1 0 2 5 2 0 5 50 0 5 0 1 5 1 1 0 37 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 12 31 9 1 6 6 2 1 0 36 0 2 2 21 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 4 6 3 1 1 5 4 30 8 1 0 2 5 2 0 5 50 0 5 0 1 5 1 1 0 37 0 7 7 3 1 0 36 0 3 3 20 31 0 4 4 15 31 9 1 6 6 2 1 0 36 0 2 2 21 2 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 81 values pushed */
38 1 7 3 59 18 2 6 7 17 14 2 4 6 3 1 1 5 4 30 0 4 6 2 6 4 2 50 8 1 0 2 5 2 0 5 50 0 3 0 7 6 3 7 1 0 38 9 1 6 0 2 0 6 2 1 0 38 0 5 1 1 5 1 0 35 0 5 5 1 1 0 36 0 1 5 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1012;
}
);
note = aogonek;
unicode = 0105;
},
{
glyphname = aring;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = ring;
transform = "{1, 0, 0, 1, 310, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = aring;
unicode = 00E5;
},
{
glyphname = atilde;
layers = (
{
components = (
{
alignment = -1;
name = a;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 290, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1010;
}
);
note = atilde;
unicode = 00E3;
},
{
glyphname = ae;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"969 1027 OFFCURVE",
"853 961 OFFCURVE",
"773 849 CURVE",
"743.667 962.333 OFFCURVE",
"665 1030 OFFCURVE",
"521 1030 CURVE SMOOTH",
"382.333 1030 OFFCURVE",
"269 977 OFFCURVE",
"153 869 CURVE",
"176 814 LINE SMOOTH",
"184 795.333 OFFCURVE",
"200 782 OFFCURVE",
"224 782 CURVE SMOOTH",
"251.077 782 OFFCURVE",
"290.023 812.412 OFFCURVE",
"325.5 835.5 CURVE SMOOTH",
"367.5 862.833 OFFCURVE",
"422 889 OFFCURVE",
"502 889 CURVE SMOOTH",
"604.667 889 OFFCURVE",
"656 829.333 OFFCURVE",
"656 710 CURVE SMOOTH",
"656 692.262 OFFCURVE",
"651.661 647.374 OFFCURVE",
"644 588 CURVE",
"416 581.333 OFFCURVE",
"263 537.5 OFFCURVE",
"167 471.5 CURVE SMOOTH",
"71 405.5 OFFCURVE",
"31 317.667 OFFCURVE",
"31 223 CURVE SMOOTH",
"31 63 OFFCURVE",
"130.667 -16 OFFCURVE",
"308 -16 CURVE SMOOTH",
"373.333 -16 OFFCURVE",
"446.333 -0.333 OFFCURVE",
"513 37 CURVE SMOOTH",
"579.667 74.333 OFFCURVE",
"641.333 131.333 OFFCURVE",
"684 214 CURVE",
"736 62 OFFCURVE",
"847 -14 OFFCURVE",
"987 -14 CURVE SMOOTH",
"1072.333 -14 OFFCURVE",
"1145 1.833 OFFCURVE",
"1213 34.5 CURVE SMOOTH",
"1281 67.167 OFFCURVE",
"1344 117.667 OFFCURVE",
"1412 187 CURVE",
"1368 242 LINE SMOOTH",
"1358.667 253.333 OFFCURVE",
"1347.333 259 OFFCURVE",
"1334 259 CURVE SMOOTH",
"1305.528 259 OFFCURVE",
"1263.773 221.49 OFFCURVE",
"1226.5 192.5 CURVE SMOOTH",
"1187.625 162.264 OFFCURVE",
"1089.963 126 OFFCURVE",
"1021 126 CURVE SMOOTH",
"877 126 OFFCURVE",
"791 229.333 OFFCURVE",
"791 436 CURVE SMOOTH",
"791 442.667 OFFCURVE",
"791 449.333 OFFCURVE",
"791 456 CURVE SMOOTH",
"791 462.667 OFFCURVE",
"791.333 469.333 OFFCURVE",
"792 476 CURVE",
"1029.333 480 OFFCURVE",
"1181.167 519.833 OFFCURVE",
"1272.5 576.5 CURVE SMOOTH",
"1363.833 633.167 OFFCURVE",
"1396 708 OFFCURVE",
"1396 784 CURVE SMOOTH",
"1396 924.679 OFFCURVE",
"1273.25 1027 OFFCURVE",
"1117 1027 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"621 401 LINE SMOOTH",
"609 302.333 OFFCURVE",
"572.5 228.333 OFFCURVE",
"522.5 179 CURVE SMOOTH",
"472.5 129.667 OFFCURVE",
"409.333 105 OFFCURVE",
"340 105 CURVE SMOOTH",
"253.333 105 OFFCURVE",
"197 150 OFFCURVE",
"197 246 CURVE SMOOTH",
"197 312.667 OFFCURVE",
"224.833 367 OFFCURVE",
"293.5 407 CURVE SMOOTH",
"362.167 447 OFFCURVE",
"471 472.333 OFFCURVE",
"631 479 CURVE"
);
},
{
closed = 1;
nodes = (
"1188.333 900 OFFCURVE",
"1240 851 OFFCURVE",
"1240 775 CURVE SMOOTH",
"1240 727 OFFCURVE",
"1216.5 683.5 OFFCURVE",
"1150.5 649.5 CURVE SMOOTH",
"1084.5 615.5 OFFCURVE",
"975.333 590.333 OFFCURVE",
"802 581 CURVE",
"818 677 OFFCURVE",
"851.833 757 OFFCURVE",
"900.5 813 CURVE SMOOTH",
"949.167 869 OFFCURVE",
"1015 900 OFFCURVE",
"1095 900 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
87 86 1 0 92 91 86 98 87 98 81 79 73 72 67 65 60 58 55 53 47 46 40 38 32 30 24 22 17 15 10 9 0 71 1 71 16 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 11 1 2 2 4 1 0 36 5 1 4 4 18 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 11 1 2 2 4 1 0 36 5 1 4 4 21 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
44 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 12 2 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 21 31 0 11 11 4 1 0 36 5 1 4 4 21 4 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 97 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 13 1 6 10 1 1 3 6 1 1 0 38 15 1 12 12 0 1 0 36 9 14 2 0 0 20 31 0 7 7 0 1 0 36 9 14 2 0 0 20 31 0 2 2 4 1 0 36 5 1 4 4 21 31 0 11 11 4 1 0 36 5 1 4 4 21 4 32 12 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
143 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 93 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 15 1 12 7 0 12 1 0 35 9 14 2 0 0 7 8 0 7 1 0 38 13 1 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
200 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 94 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 14 1 0 15 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 13 1 6 10 1 1 3 6 1 1 0 38 0 2 11 4 2 1 0 35 0 11 4 4 11 1 0 35 0 11 11 4 1 0 36 5 1 4 11 4 1 0 33 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 95 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 1 2 1 3 2 50 14 1 0 15 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 13 1 6 10 1 1 3 6 1 1 0 38 0 11 4 5 11 1 0 35 0 2 0 4 5 2 4 1 0 38 0 11 11 5 1 0 36 0 5 11 5 1 0 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 103 values pushed */
69 63 2 8 7 34 26 2 2 3 2 30 0 8 7 6 7 8 6 50 0 3 10 2 10 3 2 50 14 1 0 15 1 12 7 0 12 1 0 38 0 9 0 7 8 9 7 1 0 38 0 13 0 1 10 13 1 1 0 38 0 6 0 10 3 6 10 1 0 38 0 11 4 5 11 1 0 35 0 2 0 4 5 2 4 1 0 38 0 11 11 5 1 0 36 0 5 11 5 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1446;
}
);
note = ae;
unicode = 00E6;
},
{
glyphname = b;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"174 0 LINE SMOOTH",
"214 0 OFFCURVE",
"226.333 17.333 OFFCURVE",
"237 52 CURVE",
"250 117 LINE",
"306 33 OFFCURVE",
"396 -14 OFFCURVE",
"504 -14 CURVE SMOOTH",
"550.667 -14 OFFCURVE",
"595.333 -5 OFFCURVE",
"638 13 CURVE SMOOTH",
"723.333 49 OFFCURVE",
"796.167 113.5 OFFCURVE",
"855.5 199.5 CURVE SMOOTH",
"885.167 242.5 OFFCURVE",
"910.5 288.833 OFFCURVE",
"931.5 338.5 CURVE SMOOTH",
"973.5 437.833 OFFCURVE",
"997 549.667 OFFCURVE",
"997 659 CURVE SMOOTH",
"997 900.333 OFFCURVE",
"896 1028 OFFCURVE",
"724 1028 CURVE SMOOTH",
"652 1028 OFFCURVE",
"582 1000.667 OFFCURVE",
"518 954 CURVE SMOOTH",
"454 907.333 OFFCURVE",
"394.667 838.333 OFFCURVE",
"344 757 CURVE",
"432 1473 LINE",
"257 1473 LINE",
"79 0 LINE"
);
},
{
closed = 1;
nodes = (
"761 885 OFFCURVE",
"821 800.667 OFFCURVE",
"821 642 CURVE SMOOTH",
"821 602 OFFCURVE",
"817.333 561.5 OFFCURVE",
"810 520.5 CURVE SMOOTH",
"795.333 438.5 OFFCURVE",
"768 360.833 OFFCURVE",
"728 293.5 CURVE SMOOTH",
"708 259.833 OFFCURVE",
"685.333 230.5 OFFCURVE",
"660 205.5 CURVE SMOOTH",
"609.333 155.5 OFFCURVE",
"547.333 124 OFFCURVE",
"478 124 CURVE SMOOTH",
"404.667 124 OFFCURVE",
"329.667 151 OFFCURVE",
"279 223 CURVE",
"311 486 LINE",
"349.667 602 OFFCURVE",
"404.833 701.333 OFFCURVE",
"465.5 772 CURVE SMOOTH",
"526.167 842.667 OFFCURVE",
"593 885 OFFCURVE",
"657 885 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 0 0 36 34 26 44 27 44 0 25 0 24 19 17 9 7 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
32 3 2 5 4 21 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 2 36 6 3 2 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
32 3 2 5 4 21 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 2 36 6 3 2 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
32 3 2 5 4 21 1 3 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 12 31 0 5 5 2 1 2 36 0 2 2 21 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
32 3 2 5 4 21 1 3 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 6 1 3 3 15 31 0 5 5 2 1 2 36 0 2 2 21 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
32 3 2 5 4 21 1 3 5 2 30 6 1 3 5 2 5 3 2 50 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 5 2 1 2 37 0 0 0 13 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
32 3 2 5 4 21 1 3 5 2 30 0 0 1 0 52 6 1 3 5 2 5 3 2 50 0 1 7 1 4 5 1 4 1 0 38 0 5 3 2 5 1 0 35 0 5 5 2 1 2 36 0 2 5 2 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1050;
}
);
note = b;
unicode = 0062;
},
{
glyphname = c;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"819 182 LINE",
"775 236 LINE SMOOTH",
"765.667 247.333 OFFCURVE",
"754.333 253 OFFCURVE",
"741 253 CURVE SMOOTH",
"715.289 253 OFFCURVE",
"678.891 215.571 OFFCURVE",
"646.5 189.5 CURVE SMOOTH",
"610.933 160.873 OFFCURVE",
"521.273 126 OFFCURVE",
"457 126 CURVE SMOOTH",
"311.243 126 OFFCURVE",
"238 238.133 OFFCURVE",
"238 399 CURVE SMOOTH",
"238 535 OFFCURVE",
"275.667 657.333 OFFCURVE",
"337 744 CURVE SMOOTH",
"398.333 830.667 OFFCURVE",
"483 884 OFFCURVE",
"575 884 CURVE SMOOTH",
"643 884 OFFCURVE",
"683.833 864.167 OFFCURVE",
"712.5 843.5 CURVE SMOOTH",
"734.562 827.594 OFFCURVE",
"758.822 803 OFFCURVE",
"775 803 CURVE SMOOTH",
"789.667 803 OFFCURVE",
"802 810.333 OFFCURVE",
"810 821 CURVE",
"866 888 LINE",
"798 978.667 OFFCURVE",
"712.333 1027 OFFCURVE",
"579 1027 CURVE SMOOTH",
"427 1027 OFFCURVE",
"298 952 OFFCURVE",
"206 836 CURVE SMOOTH",
"114 720 OFFCURVE",
"60 564 OFFCURVE",
"60 400 CURVE SMOOTH",
"60 277.333 OFFCURVE",
"91.833 173.167 OFFCURVE",
"152.5 100.5 CURVE SMOOTH",
"213.167 27.833 OFFCURVE",
"303.667 -14 OFFCURVE",
"421 -14 CURVE SMOOTH",
"498.333 -14 OFFCURVE",
"564.333 -3.5 OFFCURVE",
"627 26.5 CURVE SMOOTH",
"689.667 56.5 OFFCURVE",
"749.667 106 OFFCURVE",
"819 182 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
45 43 38 36 28 26 23 21 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 3 3 1 1 0 36 0 1 1 20 31 0 4 4 0 1 0 36 0 0 0 18 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 3 3 1 1 0 36 0 1 1 20 31 0 4 4 0 1 0 36 0 0 0 21 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
18 1 3 1 1 30 0 2 3 5 3 2 5 50 0 5 4 3 5 4 48 0 1 0 3 2 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 0 0 4 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 866;
}
);
note = c;
unicode = 0063;
},
{
glyphname = cacute;
layers = (
{
components = (
{
alignment = -1;
name = c;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 203, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 866;
}
);
note = cacute;
unicode = 0107;
},
{
glyphname = ccedilla;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"270 -249 OFFCURVE",
"262.333 -254.667 OFFCURVE",
"257 -266 CURVE SMOOTH",
"234 -319 LINE",
"270 -339 OFFCURVE",
"314.333 -351 OFFCURVE",
"365 -351 CURVE SMOOTH",
"487.836 -351 OFFCURVE",
"586 -297.158 OFFCURVE",
"586 -198 CURVE SMOOTH",
"586 -136.667 OFFCURVE",
"543.667 -94.667 OFFCURVE",
"445 -72 CURVE",
"468 -12 LINE",
"533.333 -8 OFFCURVE",
"590 6.5 OFFCURVE",
"646 36.5 CURVE SMOOTH",
"702 66.5 OFFCURVE",
"756.333 114 OFFCURVE",
"819 182 CURVE",
"775 236 LINE SMOOTH",
"765.667 247.333 OFFCURVE",
"754.333 253 OFFCURVE",
"741 253 CURVE SMOOTH",
"715.289 253 OFFCURVE",
"678.891 215.571 OFFCURVE",
"646.5 189.5 CURVE SMOOTH",
"610.933 160.873 OFFCURVE",
"521.273 126 OFFCURVE",
"457 126 CURVE SMOOTH",
"311.243 126 OFFCURVE",
"238 238.133 OFFCURVE",
"238 399 CURVE SMOOTH",
"238 535 OFFCURVE",
"275.667 657.333 OFFCURVE",
"337 744 CURVE SMOOTH",
"398.333 830.667 OFFCURVE",
"483 884 OFFCURVE",
"575 884 CURVE SMOOTH",
"643 884 OFFCURVE",
"683.833 864.167 OFFCURVE",
"712.5 843.5 CURVE SMOOTH",
"734.562 827.594 OFFCURVE",
"758.822 803 OFFCURVE",
"775 803 CURVE SMOOTH",
"789.667 803 OFFCURVE",
"802 810.333 OFFCURVE",
"810 821 CURVE",
"866 888 LINE",
"798 978.667 OFFCURVE",
"712.333 1027 OFFCURVE",
"579 1027 CURVE SMOOTH",
"427 1027 OFFCURVE",
"298 952 OFFCURVE",
"206 836 CURVE SMOOTH",
"114 720 OFFCURVE",
"60 564 OFFCURVE",
"60 400 CURVE SMOOTH",
"60 288 OFFCURVE",
"86.333 191.833 OFFCURVE",
"137 120.5 CURVE SMOOTH",
"187.667 49.167 OFFCURVE",
"263.333 3.333 OFFCURVE",
"362 -10 CURVE",
"312 -131 LINE",
"400 -143 OFFCURVE",
"449 -157.333 OFFCURVE",
"449 -204 CURVE SMOOTH",
"449 -244 OFFCURVE",
"419.333 -274 OFFCURVE",
"366 -274 CURVE SMOOTH",
"337.197 -274 OFFCURVE",
"294.145 -249 OFFCURVE",
"280 -249 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
1 0 69 67 59 58 52 50 45 43 35 33 30 28 23 21 6 4 0 73 1 73 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
25 1 4 2 54 1 5 6 12 1 7 5 60 11 2 0 7 71 1 8 0 5 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 20 31 0 5 5 7 1 0 36 0 7 7 18 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
25 1 4 2 54 1 5 6 12 1 7 5 60 11 2 0 7 71 1 8 0 5 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 0 4 4 2 1 0 36 0 2 2 20 31 0 5 5 7 1 0 36 0 7 7 21 31 1 9 2 0 0 8 1 0 36 0 8 8 16 8 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 85 values pushed */
25 1 4 2 54 1 5 6 12 1 7 5 60 11 2 0 7 71 1 8 1 5 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 4 4 2 1 0 36 0 2 2 20 31 0 5 5 7 1 0 36 0 7 7 21 31 0 1 1 8 1 0 36 0 8 8 16 8 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 82 values pushed */
25 1 4 2 54 1 5 6 12 1 7 5 60 11 2 0 7 71 1 8 1 5 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 1 0 8 1 8 1 0 37 0 4 4 2 1 0 36 0 2 2 20 31 0 5 5 7 1 0 36 0 7 7 21 7 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 90 values pushed */
25 1 4 2 54 1 5 6 12 1 7 5 60 11 2 0 7 71 1 8 1 5 30 0 3 4 6 4 3 6 50 0 6 5 4 6 5 48 9 1 0 7 1 7 0 1 50 0 2 0 4 3 2 4 1 0 38 0 5 0 7 0 5 7 1 0 38 0 1 8 8 1 1 0 35 0 1 1 8 1 0 36 0 8 1 8 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 866;
}
);
note = ccedilla;
unicode = 00E7;
},
{
glyphname = d;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"848 0 LINE",
"1030 1473 LINE",
"855 1473 LINE",
"786 916 LINE",
"728.667 988 OFFCURVE",
"644.667 1028 OFFCURVE",
"546 1028 CURVE SMOOTH",
"499.333 1028 OFFCURVE",
"454.667 1019 OFFCURVE",
"412 1001 CURVE SMOOTH",
"326.667 965 OFFCURVE",
"253.833 901.5 OFFCURVE",
"194.5 815.5 CURVE SMOOTH",
"164.833 772.5 OFFCURVE",
"139.5 726 OFFCURVE",
"118.5 676 CURVE SMOOTH",
"76.5 576 OFFCURVE",
"53 464.333 OFFCURVE",
"53 355 CURVE SMOOTH",
"53 115 OFFCURVE",
"152.667 -14 OFFCURVE",
"326 -14 CURVE SMOOTH",
"399.333 -14 OFFCURVE",
"471.5 14.5 OFFCURVE",
"537.5 64.5 CURVE SMOOTH",
"603.5 114.5 OFFCURVE",
"664.333 186.333 OFFCURVE",
"715 273 CURVE",
"696 62 LINE",
"696 27.333 OFFCURVE",
"709.333 0 OFFCURVE",
"756 0 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"289 129 OFFCURVE",
"229 214.333 OFFCURVE",
"229 373 CURVE SMOOTH",
"229 491.667 OFFCURVE",
"262.167 621.167 OFFCURVE",
"321.5 720.5 CURVE SMOOTH",
"380.833 819.833 OFFCURVE",
"466.667 889 OFFCURVE",
"572 889 CURVE SMOOTH",
"644 889 OFFCURVE",
"719.333 862.667 OFFCURVE",
"770 792 CURVE",
"737 524 LINE",
"698.333 409.333 OFFCURVE",
"644.167 310.5 OFFCURVE",
"583.5 240.5 CURVE SMOOTH",
"522.833 170.5 OFFCURVE",
"457 129 OFFCURVE",
"393 129 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 1 0 36 34 26 42 27 42 24 23 20 18 10 8 0 25 1 25 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
22 1 5 2 32 4 2 4 5 3 1 0 4 3 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 7 1 4 4 0 1 0 36 1 6 2 0 0 12 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
22 1 5 2 32 4 2 4 5 3 1 0 4 3 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 12 31 7 1 4 4 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
22 1 5 2 32 4 2 4 5 3 1 0 4 3 30 0 3 3 13 31 0 5 5 2 1 0 36 0 2 2 20 31 6 1 0 0 15 31 7 1 4 4 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
22 1 5 2 32 4 2 4 5 3 1 0 4 3 30 6 1 0 4 1 4 0 1 50 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 1 0 37 0 3 3 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
22 1 5 2 32 4 2 4 5 3 1 0 4 3 30 0 3 2 3 52 6 1 0 4 1 4 0 1 50 0 2 0 5 4 2 5 1 0 38 7 1 4 0 1 4 1 0 35 7 1 4 4 1 1 0 36 0 1 4 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1052;
}
);
note = d;
unicode = 0064;
},
{
glyphname = eth;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"490 1008 LINE",
"680 1146 LINE",
"781.333 1054 OFFCURVE",
"831.333 925.333 OFFCURVE",
"834 744 CURVE",
"770 866.667 OFFCURVE",
"662.333 927 OFFCURVE",
"533 927 CURVE SMOOTH",
"393 927 OFFCURVE",
"274.833 866 OFFCURVE",
"191.5 770 CURVE SMOOTH",
"108.167 674 OFFCURVE",
"60 541 OFFCURVE",
"60 397 CURVE SMOOTH",
"60 270.333 OFFCURVE",
"99.167 168.833 OFFCURVE",
"166.5 97.5 CURVE SMOOTH",
"233.833 26.167 OFFCURVE",
"327.667 -13 OFFCURVE",
"437 -13 CURVE SMOOTH",
"610.333 -13 OFFCURVE",
"744.333 61.667 OFFCURVE",
"835 191 CURVE SMOOTH",
"925.667 320.333 OFFCURVE",
"973 504 OFFCURVE",
"973 724 CURVE SMOOTH",
"973 944 OFFCURVE",
"906 1102 OFFCURVE",
"798 1214 CURVE",
"911 1297 LINE SMOOTH",
"923.667 1306.333 OFFCURVE",
"930 1316.333 OFFCURVE",
"930 1327 CURVE SMOOTH",
"930 1335 OFFCURVE",
"928 1342 OFFCURVE",
"924 1348 CURVE",
"895 1405 LINE",
"721 1281 LINE",
"627.667 1349 OFFCURVE",
"517.333 1390.667 OFFCURVE",
"400 1412 CURVE",
"375 1357 LINE SMOOTH",
"369.667 1344.333 OFFCURVE",
"367 1333.667 OFFCURVE",
"367 1325 CURVE SMOOTH",
"367 1305 OFFCURVE",
"379.333 1291.333 OFFCURVE",
"404 1284 CURVE SMOOTH",
"477.333 1261.333 OFFCURVE",
"541.333 1238 OFFCURVE",
"596 1206 CURVE",
"467 1112 LINE",
"457 1106 OFFCURVE",
"452 1096.667 OFFCURVE",
"452 1084 CURVE SMOOTH",
"452 1077.333 OFFCURVE",
"453 1071.667 OFFCURVE",
"457 1065 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"320.421 121 OFFCURVE",
"231 237.001 OFFCURVE",
"231 406 CURVE SMOOTH",
"231 514 OFFCURVE",
"260.333 610.5 OFFCURVE",
"315 680.5 CURVE SMOOTH",
"369.667 750.5 OFFCURVE",
"450 793 OFFCURVE",
"550 793 CURVE SMOOTH",
"693.655 793 OFFCURVE",
"773.618 691.09 OFFCURVE",
"799 567 CURVE",
"777.667 409.667 OFFCURVE",
"735.667 298 OFFCURVE",
"677 226 CURVE SMOOTH",
"618.333 154 OFFCURVE",
"543.667 121 OFFCURVE",
"457 121 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
51 50 61 59 50 69 51 69 43 41 33 31 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
55 45 2 2 3 1 30 49 48 24 18 17 14 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 2 0 1 0 36 0 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
55 45 2 2 3 1 30 49 48 24 18 17 14 6 7 1 28 0 1 0 3 2 1 3 1 0 38 4 1 2 0 0 2 1 0 35 4 1 2 2 0 1 0 36 0 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1020;
}
);
note = eth;
unicode = 00F0;
},
{
glyphname = e;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"881 845.333 OFFCURVE",
"858 903.667 OFFCURVE",
"810 949 CURVE SMOOTH",
"762 994.333 OFFCURVE",
"687.667 1027 OFFCURVE",
"585 1027 CURVE SMOOTH",
"531 1027 OFFCURVE",
"480.5 1018.667 OFFCURVE",
"433.5 1002 CURVE SMOOTH",
"339.5 968.667 OFFCURVE",
"261.167 910 OFFCURVE",
"200.5 830 CURVE SMOOTH",
"170.167 790 OFFCURVE",
"144.5 746.667 OFFCURVE",
"123.5 700 CURVE SMOOTH",
"81.5 606.667 OFFCURVE",
"59 501 OFFCURVE",
"59 397 CURVE SMOOTH",
"59 271.667 OFFCURVE",
"95 168.833 OFFCURVE",
"159 97.5 CURVE SMOOTH",
"223 26.167 OFFCURVE",
"316 -14 OFFCURVE",
"432 -14 CURVE SMOOTH",
"517.333 -14 OFFCURVE",
"590 0.667 OFFCURVE",
"658 34 CURVE SMOOTH",
"726 67.333 OFFCURVE",
"789 116.333 OFFCURVE",
"857 187 CURVE",
"813 242 LINE",
"803 253.333 OFFCURVE",
"792 259 OFFCURVE",
"780 259 CURVE SMOOTH",
"751.318 259 OFFCURVE",
"708.144 221.001 OFFCURVE",
"671.5 192.5 CURVE SMOOTH",
"632.542 162.2 OFFCURVE",
"535.116 126 OFFCURVE",
"467 126 CURVE SMOOTH",
"309.667 126 OFFCURVE",
"232 222.333 OFFCURVE",
"232 401 CURVE SMOOTH",
"232 408.333 OFFCURVE",
"232 415.5 OFFCURVE",
"232 422.5 CURVE SMOOTH",
"232 429.5 OFFCURVE",
"232.333 436.667 OFFCURVE",
"233 444 CURVE",
"497 470.667 OFFCURVE",
"659 515.167 OFFCURVE",
"755 574.5 CURVE SMOOTH",
"851 633.833 OFFCURVE",
"881 708 OFFCURVE",
"881 796 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"669.505 899 OFFCURVE",
"722 846.921 OFFCURVE",
"722 789 CURVE SMOOTH",
"722 741 OFFCURVE",
"706.667 696.5 OFFCURVE",
"640 658.5 CURVE SMOOTH",
"573.333 620.5 OFFCURVE",
"455.333 587.333 OFFCURVE",
"250 562 CURVE",
"271.333 656.667 OFFCURVE",
"310.333 740.833 OFFCURVE",
"365 801.5 CURVE SMOOTH",
"419.667 862.167 OFFCURVE",
"491 899 OFFCURVE",
"575 899 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
44 43 43 57 44 57 39 37 27 25 19 17 12 10 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
48 1 1 4 21 1 0 1 2 30 0 1 4 0 4 1 0 50 5 1 4 4 3 1 0 36 0 3 3 20 31 0 0 0 2 1 0 36 0 2 2 18 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
48 1 1 4 21 1 0 1 2 30 0 1 4 0 4 1 0 50 5 1 4 4 3 1 0 36 0 3 3 20 31 0 0 0 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
48 1 1 4 21 1 0 1 2 30 0 1 4 0 4 1 0 50 0 3 5 1 4 1 3 4 1 0 38 0 0 2 2 0 1 0 35 0 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 922;
}
);
note = e;
unicode = 0065;
},
{
glyphname = eacute;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 922;
}
);
note = eacute;
unicode = 00E9;
},
{
glyphname = ecircumflex;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 922;
}
);
note = ecircumflex;
unicode = 00EA;
},
{
glyphname = edieresis;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 221, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 922;
}
);
note = edieresis;
unicode = 00EB;
},
{
glyphname = egrave;
layers = (
{
components = (
{
alignment = -1;
name = e;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 252, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 922;
}
);
note = egrave;
unicode = 00E8;
},
{
glyphname = eogonek;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"575.741 -214 OFFCURVE",
"529.128 -238 OFFCURVE",
"499 -238 CURVE SMOOTH",
"456.333 -238 OFFCURVE",
"427 -209.667 OFFCURVE",
"427 -167 CURVE SMOOTH",
"427 -94.613 OFFCURVE",
"492.245 -36.003 OFFCURVE",
"550 -3 CURVE",
"662 19.667 OFFCURVE",
"754.333 80.333 OFFCURVE",
"857 187 CURVE",
"813 242 LINE",
"803 253.333 OFFCURVE",
"792 259 OFFCURVE",
"780 259 CURVE SMOOTH",
"751.318 259 OFFCURVE",
"708.144 221.001 OFFCURVE",
"671.5 192.5 CURVE SMOOTH",
"632.542 162.2 OFFCURVE",
"535.116 126 OFFCURVE",
"467 126 CURVE SMOOTH",
"309.667 126 OFFCURVE",
"232 222.333 OFFCURVE",
"232 401 CURVE SMOOTH",
"232 408.333 OFFCURVE",
"232 415.5 OFFCURVE",
"232 422.5 CURVE SMOOTH",
"232 429.5 OFFCURVE",
"232.333 436.667 OFFCURVE",
"233 444 CURVE",
"497 470.667 OFFCURVE",
"659 515.167 OFFCURVE",
"755 574.5 CURVE SMOOTH",
"851 633.833 OFFCURVE",
"881 708 OFFCURVE",
"881 796 CURVE SMOOTH",
"881 845.333 OFFCURVE",
"858 903.667 OFFCURVE",
"810 949 CURVE SMOOTH",
"762 994.333 OFFCURVE",
"687.667 1027 OFFCURVE",
"585 1027 CURVE SMOOTH",
"531 1027 OFFCURVE",
"480.5 1018.667 OFFCURVE",
"433.5 1002 CURVE SMOOTH",
"339.5 968.667 OFFCURVE",
"261.167 910 OFFCURVE",
"200.5 830 CURVE SMOOTH",
"170.167 790 OFFCURVE",
"144.5 746.667 OFFCURVE",
"123.5 700 CURVE SMOOTH",
"81.5 606.667 OFFCURVE",
"59 501 OFFCURVE",
"59 397 CURVE SMOOTH",
"59 273 OFFCURVE",
"93.167 170.667 OFFCURVE",
"156.5 100 CURVE SMOOTH",
"219.833 29.333 OFFCURVE",
"310.667 -12.667 OFFCURVE",
"424 -14 CURVE",
"348 -67.333 OFFCURVE",
"294 -136.667 OFFCURVE",
"294 -214 CURVE SMOOTH",
"294 -291.333 OFFCURVE",
"350.667 -342 OFFCURVE",
"452 -342 CURVE SMOOTH",
"516 -342 OFFCURVE",
"579 -320.667 OFFCURVE",
"619 -290 CURVE",
"601 -226 LINE SMOOTH",
"599 -218 OFFCURVE",
"593.667 -214 OFFCURVE",
"585 -214 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"669.505 899 OFFCURVE",
"722 846.921 OFFCURVE",
"722 789 CURVE SMOOTH",
"722 741 OFFCURVE",
"706.667 696.5 OFFCURVE",
"640 658.5 CURVE SMOOTH",
"573.333 620.5 OFFCURVE",
"455.333 587.333 OFFCURVE",
"250 562 CURVE",
"271.333 656.667 OFFCURVE",
"310.333 740.833 OFFCURVE",
"365 801.5 CURVE SMOOTH",
"419.667 862.167 OFFCURVE",
"491 899 OFFCURVE",
"575 899 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
67 66 1 0 66 80 67 80 62 60 48 46 41 39 25 23 13 12 7 5 0 65 1 65 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
71 1 5 7 50 1 4 5 3 1 1 0 3 30 0 5 7 4 7 5 4 50 9 1 7 7 3 1 0 36 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 18 31 6 8 2 0 0 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
71 1 5 7 50 1 4 5 3 1 1 0 3 30 0 5 7 4 7 5 4 50 9 1 7 7 3 1 0 36 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 21 31 6 8 2 0 0 1 1 0 36 0 1 1 16 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
71 1 5 7 50 1 4 5 3 1 1 6 3 30 0 5 7 4 7 5 4 50 8 1 0 2 6 2 0 6 50 9 1 7 7 3 1 0 36 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 21 31 0 6 6 1 1 0 36 0 1 1 16 1 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
71 1 5 7 50 1 4 5 3 1 1 6 3 30 0 5 7 4 7 5 4 50 8 1 0 2 6 2 0 6 50 0 6 0 1 6 1 1 0 37 9 1 7 7 3 1 0 36 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 21 2 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
71 1 5 7 50 1 4 5 3 1 1 6 3 30 0 5 7 4 7 5 4 50 8 1 0 2 6 2 0 6 50 0 3 9 1 7 5 3 7 1 0 38 0 4 0 2 0 4 2 1 0 38 0 6 1 1 6 1 0 35 0 6 6 1 1 0 36 0 1 6 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 922;
}
);
note = eogonek;
unicode = 0119;
},
{
glyphname = f;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"620 865 LINE",
"637 993 LINE",
"384 993 LINE",
"396 1086 LINE SMOOTH",
"415.833 1247.147 OFFCURVE",
"489.791 1322 OFFCURVE",
"614 1322 CURVE SMOOTH",
"622 1322 OFFCURVE",
"629.5 1321.833 OFFCURVE",
"636.5 1321.5 CURVE SMOOTH",
"643.5 1321.167 OFFCURVE",
"650 1321 OFFCURVE",
"656 1321 CURVE SMOOTH",
"680 1321 OFFCURVE",
"696.333 1323.333 OFFCURVE",
"699 1342 CURVE",
"716 1434 LINE",
"682 1447.333 OFFCURVE",
"644.333 1454 OFFCURVE",
"603 1454 CURVE SMOOTH",
"505.667 1454 OFFCURVE",
"419.5 1421.5 OFFCURVE",
"353.5 1359.5 CURVE SMOOTH",
"287.5 1297.5 OFFCURVE",
"242.667 1207 OFFCURVE",
"228 1091 CURVE SMOOTH",
"216 993 LINE",
"71 993 LINE",
"63 915 LINE",
"63 892.333 OFFCURVE",
"77.333 881.667 OFFCURVE",
"100 875 CURVE",
"200 862 LINE",
"65 -249 LINE",
"135 -249 LINE SMOOTH",
"185 -249 OFFCURVE",
"215.667 -224 OFFCURVE",
"227 -174 CURVE SMOOTH",
"273 33 LINE",
"374 865 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 35 0 35 34 33 28 23 19 17 12 11 5 3 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
20 1 3 2 10 1 5 1 6 1 0 5 3 30 0 3 3 2 1 0 36 0 2 2 17 31 6 1 5 5 1 0 0 36 4 1 1 1 14 31 0 0 0 1 0 0 36 4 1 1 1 14 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
20 1 3 2 10 1 5 1 6 1 0 5 3 30 6 1 5 0 1 5 0 0 35 4 1 1 0 0 1 0 1 0 37 0 3 3 2 1 0 36 0 2 2 17 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
20 1 3 2 10 1 5 1 6 1 0 5 3 30 0 2 0 3 1 2 3 1 0 38 4 1 1 6 1 5 0 1 5 0 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
20 1 3 2 10 1 5 4 6 1 0 5 3 30 0 2 0 3 1 2 3 1 0 38 0 1 4 0 1 0 0 35 0 4 6 1 5 0 4 5 0 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 605;
}
);
note = f;
unicode = 0066;
},
{
glyphname = g;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"816 774.667 OFFCURVE",
"809 812.333 OFFCURVE",
"797 847 CURVE",
"923 869 LINE SMOOTH",
"948.333 873 OFFCURVE",
"960.333 894.333 OFFCURVE",
"963 917 CURVE SMOOTH",
"971 976 LINE",
"696 976 LINE",
"642 1010.667 OFFCURVE",
"578.333 1028 OFFCURVE",
"505 1028 CURVE SMOOTH",
"374.333 1028 OFFCURVE",
"274 980.167 OFFCURVE",
"206 907.5 CURVE SMOOTH",
"138 834.833 OFFCURVE",
"102 738 OFFCURVE",
"102 642 CURVE SMOOTH",
"102 543.333 OFFCURVE",
"133.333 469.333 OFFCURVE",
"184 420 CURVE SMOOTH",
"234.667 370.667 OFFCURVE",
"303.667 345 OFFCURVE",
"381 345 CURVE SMOOTH",
"461 345 OFFCURVE",
"522.333 364.333 OFFCURVE",
"573 399 CURVE",
"543.667 344.333 OFFCURVE",
"532 302.333 OFFCURVE",
"532 261 CURVE SMOOTH",
"532 229 OFFCURVE",
"540 202.333 OFFCURVE",
"552 177 CURVE",
"505.333 183.667 OFFCURVE",
"458 188 OFFCURVE",
"410 188 CURVE SMOOTH",
"291.333 188 OFFCURVE",
"172.333 166.333 OFFCURVE",
"83 117 CURVE SMOOTH",
"-6.333 67.667 OFFCURVE",
"-66 -7.667 OFFCURVE",
"-66 -113 CURVE SMOOTH",
"-66 -187.667 OFFCURVE",
"-27.833 -251 OFFCURVE",
"39.5 -295 CURVE SMOOTH",
"106.833 -339 OFFCURVE",
"204 -364 OFFCURVE",
"320 -364 CURVE SMOOTH",
"465.333 -364 OFFCURVE",
"583.667 -323.333 OFFCURVE",
"665 -258 CURVE SMOOTH",
"746.333 -192.667 OFFCURVE",
"792 -105.667 OFFCURVE",
"792 -11 CURVE SMOOTH",
"792 131.751 OFFCURVE",
"661 200.958 OFFCURVE",
"661 314 CURVE SMOOTH",
"661 382.297 OFFCURVE",
"700.107 447.16 OFFCURVE",
"738 504 CURVE SMOOTH",
"751.333 524 OFFCURVE",
"763.667 545.333 OFFCURVE",
"775 568 CURVE SMOOTH",
"797.667 613.333 OFFCURVE",
"814.667 665.333 OFFCURVE",
"816 732 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"326 457 OFFCURVE",
"265 521 OFFCURVE",
"265 641 CURVE SMOOTH",
"265 779.499 OFFCURVE",
"346.203 904 OFFCURVE",
"486 904 CURVE SMOOTH",
"590 904 OFFCURVE",
"653 843.333 OFFCURVE",
"653 726 CURVE SMOOTH",
"653 591.387 OFFCURVE",
"568.599 457 OFFCURVE",
"430 457 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"630 -82.333 OFFCURVE",
"599.833 -136.333 OFFCURVE",
"548.5 -175 CURVE SMOOTH",
"497.167 -213.667 OFFCURVE",
"423 -239 OFFCURVE",
"335 -239 CURVE SMOOTH",
"187 -239 OFFCURVE",
"103 -187 OFFCURVE",
"103 -91 CURVE SMOOTH",
"103 -45.667 OFFCURVE",
"128 -2 OFFCURVE",
"180 30 CURVE SMOOTH",
"232 62 OFFCURVE",
"311.667 83 OFFCURVE",
"421 83 CURVE SMOOTH",
"477 83 OFFCURVE",
"540 78 OFFCURVE",
"612 66 CURVE",
"622.667 39.333 OFFCURVE",
"630 9.667 OFFCURVE",
"630 -25 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
61 60 91 89 83 81 69 67 60 75 61 75 52 51 50 48 40 38 28 26 18 16 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
27 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
57 1 5 6 36 1 2 5 30 1 7 1 3 30 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 4 4 14 31 0 6 6 3 1 0 36 0 3 3 20 31 0 8 8 0 1 0 36 0 0 0 22 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
57 1 5 6 36 1 2 5 30 1 7 1 3 30 0 4 3 6 3 4 6 50 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 6 6 3 1 0 36 0 3 3 20 31 0 8 8 0 1 0 36 0 0 0 22 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
57 1 5 6 36 1 2 5 30 1 7 1 3 30 0 4 3 6 3 4 6 50 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 8 0 0 8 0 1 0 37 0 6 6 3 1 0 36 0 3 3 20 6 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 76 values pushed */
57 1 5 6 36 1 2 5 30 1 7 1 3 30 0 4 3 6 3 4 6 50 0 3 0 6 5 3 6 1 0 38 9 1 5 0 2 1 5 2 1 0 38 0 1 0 7 8 1 7 1 0 38 0 8 0 0 8 1 0 35 0 8 8 0 1 0 36 0 0 8 0 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 929;
}
);
note = g;
unicode = 0067;
},
{
glyphname = h;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"257 0 LINE",
"322 537 LINE",
"360.667 641 OFFCURVE",
"414 727 OFFCURVE",
"474 787 CURVE SMOOTH",
"534 847 OFFCURVE",
"599 881 OFFCURVE",
"659 881 CURVE SMOOTH",
"747 881 OFFCURVE",
"786 828.333 OFFCURVE",
"786 719 CURVE SMOOTH",
"786 696.333 OFFCURVE",
"783.667 671.667 OFFCURVE",
"781 645 CURVE SMOOTH",
"705 0 LINE",
"883 0 LINE",
"959 645 LINE SMOOTH",
"963 675.667 OFFCURVE",
"964 704.333 OFFCURVE",
"964 731 CURVE SMOOTH",
"964 924.333 OFFCURVE",
"878.333 1028 OFFCURVE",
"725 1028 CURVE SMOOTH",
"590.333 1028 OFFCURVE",
"457.333 946.333 OFFCURVE",
"352 789 CURVE",
"435 1473 LINE",
"257 1473 LINE",
"79 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 27 0 27 22 20 14 13 7 5 2 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
3 1 2 3 1 30 0 0 0 13 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
3 1 2 3 1 30 0 0 0 13 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 2 3 1 30 5 4 2 2 3 2 53 0 1 0 3 2 1 3 1 0 38 0 0 0 13 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
3 1 2 3 1 30 0 0 1 0 52 5 4 2 2 3 2 53 0 1 3 3 1 1 0 35 0 1 1 3 1 0 36 0 3 1 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
3 1 4 3 1 30 0 0 1 0 52 5 1 4 3 2 3 4 2 50 0 2 2 51 0 1 3 3 1 1 0 35 0 1 1 3 1 0 36 0 3 1 3 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1060;
}
);
note = h;
unicode = 0068;
},
{
glyphname = i;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"217 1013 LINE",
"95 0 LINE",
"270 0 LINE",
"392 1013 LINE"
);
},
{
closed = 1;
nodes = (
"459 1399.968 OFFCURVE",
"401.734 1459 OFFCURVE",
"336 1459 CURVE SMOOTH",
"272.318 1459 OFFCURVE",
"215 1398.158 OFFCURVE",
"215 1331 CURVE SMOOTH",
"215 1263.451 OFFCURVE",
"272.419 1205 OFFCURVE",
"335 1205 CURVE SMOOTH",
"398.416 1205 OFFCURVE",
"459 1264.037 OFFCURVE",
"459 1331 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 20 18 10 8 0 3 0 3 2 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 17 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 13 31 4 1 1 1 14 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
0 2 2 3 1 0 36 0 3 3 13 31 4 1 1 1 14 31 0 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
4 1 1 0 0 1 0 0 0 37 0 2 2 3 1 0 36 0 3 3 13 2 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 35 values pushed */
0 3 0 2 1 3 2 1 0 38 4 1 1 0 0 1 0 0 35 4 1 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 487;
}
);
note = i;
unicode = 0069;
},
{
glyphname = idotless;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"217 1013 LINE",
"95 0 LINE",
"270 0 LINE",
"392 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 14 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 1 14 31 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 487;
}
);
note = dotlessi;
unicode = 0131;
},
{
glyphname = iacute;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, -47, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 487;
}
);
note = iacute;
unicode = 00ED;
},
{
glyphname = icircumflex;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, -47, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 487;
}
);
note = icircumflex;
unicode = 00EE;
},
{
glyphname = idieresis;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, -47, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 487;
}
);
note = idieresis;
unicode = 00EF;
},
{
glyphname = igrave;
layers = (
{
components = (
{
alignment = -1;
name = idotless;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, -16, 0}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 487;
}
);
note = igrave;
unicode = 00EC;
},
{
glyphname = j;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"216 1013 LINE",
"83 -75 LINE SMOOTH",
"69.667 -183 OFFCURVE",
"27.667 -229 OFFCURVE",
"-67 -229 CURVE SMOOTH",
"-74.333 -229 OFFCURVE",
"-80.833 -228.833 OFFCURVE",
"-86.5 -228.5 CURVE SMOOTH",
"-92.167 -228.167 OFFCURVE",
"-97.333 -228 OFFCURVE",
"-102 -228 CURVE SMOOTH",
"-120.667 -228 OFFCURVE",
"-128.333 -230.667 OFFCURVE",
"-135 -248 CURVE",
"-153 -344 LINE",
"-121 -357.333 OFFCURVE",
"-90.667 -364 OFFCURVE",
"-44 -364 CURVE SMOOTH",
"132.043 -364 OFFCURVE",
"235.285 -240.576 OFFCURVE",
"257 -75 CURVE SMOOTH",
"391 1013 LINE"
);
},
{
closed = 1;
nodes = (
"454 1399.968 OFFCURVE",
"396.734 1459 OFFCURVE",
"331 1459 CURVE SMOOTH",
"267.302 1459 OFFCURVE",
"210 1397.62 OFFCURVE",
"210 1331 CURVE SMOOTH",
"210 1263.715 OFFCURVE",
"266.992 1205 OFFCURVE",
"330 1205 CURVE SMOOTH",
"392.969 1205 OFFCURVE",
"454 1263.893 OFFCURVE",
"454 1331 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 37 35 27 25 0 20 0 20 17 12 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 0 3 3 4 1 0 36 0 4 4 17 31 5 1 2 2 14 31 0 1 1 0 1 0 36 0 0 0 22 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 0 3 3 4 1 0 36 0 4 4 13 31 5 1 2 2 14 31 0 1 1 0 1 0 36 0 0 0 22 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
9 1 0 1 1 30 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 13 31 5 1 2 2 14 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 38 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 1 0 0 1 0 1 0 37 0 3 3 4 1 0 36 0 4 4 13 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 48 values pushed */
9 1 0 1 1 30 5 1 2 3 1 3 2 1 50 0 4 0 3 2 4 3 1 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 475;
}
);
note = j;
unicode = 006A;
},
{
glyphname = k;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"259 1473 LINE",
"78 0 LINE",
"254 0 LINE",
"313 484 LINE",
"347 484 LINE SMOOTH",
"384.333 484 OFFCURVE",
"395.667 476.667 OFFCURVE",
"413 450 CURVE SMOOTH",
"671 35 LINE SMOOTH",
"685.667 9.667 OFFCURVE",
"701.667 0 OFFCURVE",
"731 0 CURVE SMOOTH",
"884 0 LINE",
"580 500 LINE SMOOTH",
"565.333 525.333 OFFCURVE",
"552.333 547 OFFCURVE",
"531 563 CURVE",
"553.667 576.333 OFFCURVE",
"572 594.667 OFFCURVE",
"592 616 CURVE SMOOTH",
"983 1013 LINE",
"826 1013 LINE SMOOTH",
"794 1013 OFFCURVE",
"777.333 998.333 OFFCURVE",
"756 977 CURVE SMOOTH",
"421 634 LINE SMOOTH",
"399.667 611.333 OFFCURVE",
"385.667 606 OFFCURVE",
"359 606 CURVE SMOOTH",
"328 606 LINE",
"434 1473 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 30 0 30 29 28 27 25 20 18 10 8 3 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 1 5 5 13 31 0 1 1 14 31 4 1 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 6 1 5 5 13 31 0 1 1 14 31 4 1 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
14 1 3 0 1 30 0 0 0 3 2 0 3 1 2 38 0 1 4 1 2 1 2 1 0 37 6 1 5 5 13 5 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
14 1 3 0 1 30 6 1 5 1 5 52 0 1 0 2 1 1 0 35 0 0 0 3 2 0 3 1 2 38 0 1 1 2 1 0 36 4 1 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
14 1 3 0 1 30 6 1 5 1 5 52 0 4 3 2 3 4 2 50 0 1 0 2 1 1 0 35 0 0 0 3 4 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 959;
}
);
note = k;
unicode = 006B;
},
{
glyphname = l;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"263 0 LINE",
"442 1473 LINE",
"267 1473 LINE",
"88 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 0 13 31 2 1 1 1 12 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 0 13 31 2 1 1 1 15 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 52 2 1 1 1 43 2 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 475;
}
);
note = l;
unicode = 006C;
},
{
glyphname = lslash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"76 621 LINE",
"237 690 LINE",
"153 0 LINE",
"328 0 LINE",
"420 757 LINE",
"583 830 LINE SMOOTH",
"601 837.333 OFFCURVE",
"610 852 OFFCURVE",
"610 874 CURVE SMOOTH",
"610 976 LINE",
"437 902 LINE",
"507 1473 LINE",
"332 1473 LINE",
"254 834 LINE",
"101 766 LINE SMOOTH",
"84.333 758.667 OFFCURVE",
"76 745.333 OFFCURVE",
"76 726 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
13 12 5 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 14 7 6 4 1 0 1 30 0 0 0 13 31 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 14 7 6 4 1 0 1 30 0 0 0 13 31 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
15 14 7 6 4 1 0 1 30 0 1 0 1 53 0 0 0 13 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 19 values pushed */
15 14 7 6 4 1 0 1 30 0 0 1 0 52 0 1 1 43 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 601;
}
);
note = lslash;
unicode = 0142;
},
{
glyphname = m;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"245 0 LINE",
"308 528 LINE",
"345.333 637.333 OFFCURVE",
"390.833 725.833 OFFCURVE",
"443.5 786.5 CURVE SMOOTH",
"496.167 847.167 OFFCURVE",
"556 880 OFFCURVE",
"620 880 CURVE SMOOTH",
"698.667 880 OFFCURVE",
"726 835.667 OFFCURVE",
"726 741 CURVE SMOOTH",
"726 713 OFFCURVE",
"723 681 OFFCURVE",
"719 645 CURVE SMOOTH",
"642 0 LINE",
"818 0 LINE",
"883 551 LINE",
"919 657.667 OFFCURVE",
"965.667 740.167 OFFCURVE",
"1019 795.5 CURVE SMOOTH",
"1072.333 850.833 OFFCURVE",
"1130.667 880 OFFCURVE",
"1188 880 CURVE SMOOTH",
"1266.667 880 OFFCURVE",
"1297 834 OFFCURVE",
"1297 734 CURVE SMOOTH",
"1297 707.333 OFFCURVE",
"1295 677.667 OFFCURVE",
"1291 645 CURVE SMOOTH",
"1215 0 LINE",
"1390 0 LINE",
"1466 645 LINE SMOOTH",
"1470 681 OFFCURVE",
"1473 714.333 OFFCURVE",
"1473 745 CURVE SMOOTH",
"1473 927.667 OFFCURVE",
"1399.333 1028 OFFCURVE",
"1250 1028 CURVE SMOOTH",
"1111.333 1028 OFFCURVE",
"982.333 941.333 OFFCURVE",
"881 756 CURVE",
"881 930.667 OFFCURVE",
"817.333 1028 OFFCURVE",
"680 1028 CURVE SMOOTH",
"548 1028 OFFCURVE",
"428 941 OFFCURVE",
"328 773 CURVE",
"342 954 LINE",
"342 994 OFFCURVE",
"322 1014 OFFCURVE",
"282 1014 CURVE SMOOTH",
"193 1014 LINE",
"71 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 48 0 48 43 41 35 34 29 27 22 21 15 13 9 7 3 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
4 1 4 0 11 5 2 3 4 2 30 6 1 4 4 0 1 0 36 2 1 2 0 0 14 31 8 7 5 3 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
4 1 4 0 11 5 2 3 4 2 30 0 0 0 14 31 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
4 1 4 0 11 5 2 3 4 2 30 0 0 0 14 31 6 1 4 4 1 1 0 36 2 1 1 1 20 31 8 7 5 3 3 3 15 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
4 1 4 0 11 5 2 3 4 2 30 0 0 4 3 0 1 0 35 2 1 1 6 1 4 3 1 4 1 0 38 0 0 0 3 0 0 36 8 7 5 3 3 0 3 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 67 values pushed */
4 1 6 0 11 5 2 7 4 2 30 0 5 7 3 7 5 3 50 0 3 3 51 0 0 6 7 0 1 0 35 0 1 0 6 4 1 6 1 0 38 0 2 0 4 7 2 4 1 0 38 0 0 0 7 0 0 36 8 1 7 0 7 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1567;
}
);
note = m;
unicode = 006D;
},
{
glyphname = n;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"249 0 LINE",
"307 515 LINE",
"344.333 625.667 OFFCURVE",
"398.667 717.167 OFFCURVE",
"460 780.5 CURVE SMOOTH",
"521.333 843.833 OFFCURVE",
"589 880 OFFCURVE",
"653 880 CURVE SMOOTH",
"739.667 880 OFFCURVE",
"779 828.333 OFFCURVE",
"779 719 CURVE SMOOTH",
"779 696.333 OFFCURVE",
"776.667 671.667 OFFCURVE",
"774 645 CURVE SMOOTH",
"698 0 LINE",
"876 0 LINE",
"952 645 LINE SMOOTH",
"956 675.667 OFFCURVE",
"957 703.333 OFFCURVE",
"957 730 CURVE SMOOTH",
"957 924.667 OFFCURVE",
"869.667 1028 OFFCURVE",
"719 1028 CURVE SMOOTH",
"573.667 1028 OFFCURVE",
"434 936.667 OFFCURVE",
"326 758 CURVE",
"341 954 LINE",
"341 994 OFFCURVE",
"321 1014 OFFCURVE",
"281 1014 CURVE SMOOTH",
"192 1014 LINE",
"71 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 29 0 29 24 22 16 15 9 7 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
4 1 3 0 5 1 2 3 2 30 0 3 3 0 1 0 36 1 1 0 0 14 31 5 4 2 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
4 1 3 0 5 1 2 3 2 30 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
4 1 3 0 5 1 2 3 2 30 0 0 0 14 31 0 3 3 1 1 0 36 0 1 1 20 31 5 4 2 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
4 1 3 0 5 1 2 3 2 30 0 0 3 2 0 1 0 35 0 1 0 3 2 1 3 1 0 38 0 0 0 2 0 0 36 5 4 2 2 0 2 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
4 1 3 0 5 1 4 3 2 30 0 2 4 2 53 0 0 3 4 0 1 0 35 0 1 0 3 4 1 3 1 0 38 0 0 0 4 0 0 36 5 1 4 0 4 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1052;
}
);
note = n;
unicode = 006E;
},
{
glyphname = nacute;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 257, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1052;
}
);
note = nacute;
unicode = 0144;
},
{
glyphname = ntilde;
layers = (
{
components = (
{
alignment = -1;
name = n;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 257, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1052;
}
);
note = ntilde;
unicode = 00F1;
},
{
glyphname = o;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"308 125 OFFCURVE",
"234 221.333 OFFCURVE",
"234 408 CURVE SMOOTH",
"234 534.667 OFFCURVE",
"266 654.833 OFFCURVE",
"322 743.5 CURVE SMOOTH",
"378 832.167 OFFCURVE",
"458.333 889 OFFCURVE",
"557 889 CURVE SMOOTH",
"695.667 889 OFFCURVE",
"771 793.667 OFFCURVE",
"771 607 CURVE SMOOTH",
"771 480.333 OFFCURVE",
"739 360.167 OFFCURVE",
"683 271.5 CURVE SMOOTH",
"627 182.833 OFFCURVE",
"545.333 125 OFFCURVE",
"448 125 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"577.333 -14 OFFCURVE",
"707.833 56.667 OFFCURVE",
"800.5 170 CURVE SMOOTH",
"893.167 283.333 OFFCURVE",
"950 438.667 OFFCURVE",
"950 608 CURVE SMOOTH",
"950 740 OFFCURVE",
"910.667 846 OFFCURVE",
"844 918 CURVE SMOOTH",
"777.333 990 OFFCURVE",
"683.667 1029 OFFCURVE",
"573 1029 CURVE SMOOTH",
"426.333 1029 OFFCURVE",
"297.167 959.333 OFFCURVE",
"204.5 846 CURVE SMOOTH",
"111.833 732.667 OFFCURVE",
"55 577.667 OFFCURVE",
"55 407 CURVE SMOOTH",
"55 273.667 OFFCURVE",
"94.333 169 OFFCURVE",
"161 97 CURVE SMOOTH",
"227.667 25 OFFCURVE",
"321.333 -14 OFFCURVE",
"432 -14 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
17 16 1 0 27 25 16 35 17 35 9 7 0 15 1 15 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 1 3 1 0 36 0 3 3 20 31 4 1 0 0 2 1 0 36 5 1 2 2 18 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 1 1 3 1 0 36 0 3 3 20 31 4 1 0 0 2 1 0 36 5 1 2 2 21 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
0 3 0 1 0 3 1 1 0 38 4 1 0 2 2 0 1 0 35 4 1 0 0 2 1 0 36 5 1 2 0 2 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1005;
}
);
note = o;
unicode = 006F;
},
{
glyphname = oacute;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 213, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1005;
}
);
note = oacute;
unicode = 00F3;
},
{
glyphname = ocircumflex;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 213, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1005;
}
);
note = ocircumflex;
unicode = 00F4;
},
{
glyphname = odieresis;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 213, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1005;
}
);
note = odieresis;
unicode = 00F6;
},
{
glyphname = ograve;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 245, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1005;
}
);
note = ograve;
unicode = 00F2;
},
{
glyphname = oslash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"577.333 -14 OFFCURVE",
"707.833 56.667 OFFCURVE",
"800.5 170 CURVE SMOOTH",
"893.167 283.333 OFFCURVE",
"950 438.667 OFFCURVE",
"950 608 CURVE SMOOTH",
"950 724 OFFCURVE",
"920 817.333 OFFCURVE",
"868 888 CURVE",
"996 1061 LINE",
"906 1061 LINE SMOOTH",
"863.333 1061 OFFCURVE",
"848.333 1048.333 OFFCURVE",
"823 1011 CURVE",
"789 965 LINE",
"728.333 1007.667 OFFCURVE",
"656.333 1029 OFFCURVE",
"573 1029 CURVE SMOOTH",
"426.333 1029 OFFCURVE",
"297.167 959.333 OFFCURVE",
"204.5 846 CURVE SMOOTH",
"111.833 732.667 OFFCURVE",
"55 577.667 OFFCURVE",
"55 407 CURVE SMOOTH",
"55 289.667 OFFCURVE",
"84.667 194.667 OFFCURVE",
"138 124 CURVE",
"6 -57 LINE",
"73 -57 LINE SMOOTH",
"111.667 -57 OFFCURVE",
"152.667 -42 OFFCURVE",
"182 -2 CURVE SMOOTH",
"218 47 LINE",
"278 6.333 OFFCURVE",
"349.333 -14 OFFCURVE",
"432 -14 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"223 545.333 OFFCURVE",
"257.167 668.833 OFFCURVE",
"316.5 757.5 CURVE SMOOTH",
"375.833 846.167 OFFCURVE",
"458.333 900 OFFCURVE",
"557 900 CURVE SMOOTH",
"609 900 OFFCURVE",
"653.667 885 OFFCURVE",
"691 855 CURVE",
"249 253 LINE",
"231.667 297 OFFCURVE",
"223 348.667 OFFCURVE",
"223 408 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"396 114 OFFCURVE",
"351.667 128.667 OFFCURVE",
"315 158 CURVE",
"757 758 LINE",
"773 715.333 OFFCURVE",
"782 665.667 OFFCURVE",
"782 607 CURVE SMOOTH",
"782 469.667 OFFCURVE",
"747.833 346.167 OFFCURVE",
"688.5 257.5 CURVE SMOOTH",
"629.167 168.833 OFFCURVE",
"545.333 114 OFFCURVE",
"448 114 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
43 42 1 0 42 52 43 52 38 36 23 21 17 15 7 5 0 31 1 31 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
18 1 4 2 51 50 35 34 24 8 6 5 4 2 1 0 5 3 30 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 20 31 7 1 5 5 0 1 0 36 6 1 0 0 18 31 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
18 1 4 2 51 50 35 34 24 8 6 5 4 2 1 0 5 3 30 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 20 31 7 1 5 5 0 1 0 36 6 1 0 0 21 31 0 1 1 18 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
18 1 4 2 51 50 35 34 24 8 6 5 4 2 1 0 5 3 30 0 1 0 1 53 0 3 3 20 31 0 4 4 2 1 0 36 0 2 2 20 31 7 1 5 5 0 1 0 36 6 1 0 0 21 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
18 1 4 2 51 50 35 34 24 8 6 5 4 2 1 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 4 4 2 1 0 36 0 2 2 20 31 7 1 5 5 0 1 0 36 6 1 0 0 21 0 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
18 1 4 2 51 50 35 34 24 8 6 5 4 2 1 0 5 3 30 0 3 2 3 52 0 1 0 1 53 0 2 0 4 5 2 4 1 0 38 7 1 5 0 0 5 1 0 35 7 1 5 5 0 1 0 36 6 1 0 5 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1005;
}
);
note = oslash;
unicode = 00F8;
},
{
glyphname = otilde;
layers = (
{
components = (
{
alignment = -1;
name = o;
},
{
alignment = -1;
name = tilde;
transform = "{1, 0, 0, 1, 213, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1005;
}
);
note = otilde;
unicode = 00F5;
},
{
glyphname = oe;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1068 1027 OFFCURVE",
"943 955 OFFCURVE",
"859 835 CURVE",
"812.333 956.333 OFFCURVE",
"716.667 1027 OFFCURVE",
"574 1027 CURVE SMOOTH",
"431.333 1027 OFFCURVE",
"300.167 967.667 OFFCURVE",
"203.5 853 CURVE SMOOTH",
"106.833 738.333 OFFCURVE",
"46 568.667 OFFCURVE",
"46 350 CURVE SMOOTH",
"46 254 OFFCURVE",
"73.5 162.833 OFFCURVE",
"127.5 95.5 CURVE SMOOTH",
"181.5 28.167 OFFCURVE",
"263 -14 OFFCURVE",
"371 -14 CURVE SMOOTH",
"543 -14 OFFCURVE",
"683 70.333 OFFCURVE",
"775 217 CURVE",
"827 63.667 OFFCURVE",
"938 -14 OFFCURVE",
"1078 -14 CURVE SMOOTH",
"1163.333 -14 OFFCURVE",
"1237 1.833 OFFCURVE",
"1305 34.5 CURVE SMOOTH",
"1373 67.167 OFFCURVE",
"1436.333 117.667 OFFCURVE",
"1503 187 CURVE",
"1459 242 LINE",
"1449 253.333 OFFCURVE",
"1437.667 259 OFFCURVE",
"1425 259 CURVE SMOOTH",
"1396.528 259 OFFCURVE",
"1354.773 221.49 OFFCURVE",
"1317.5 192.5 CURVE SMOOTH",
"1278.542 162.2 OFFCURVE",
"1181.116 126 OFFCURVE",
"1113 126 CURVE SMOOTH",
"967.667 126 OFFCURVE",
"883 229.333 OFFCURVE",
"883 436 CURVE SMOOTH",
"883 447 LINE",
"967 455.667 OFFCURVE",
"1040.667 466.333 OFFCURVE",
"1104 479 CURVE SMOOTH",
"1230.667 504.333 OFFCURVE",
"1323.667 536.167 OFFCURVE",
"1385 575.5 CURVE SMOOTH",
"1415.667 595.167 OFFCURVE",
"1440.333 616.167 OFFCURVE",
"1459 638.5 CURVE SMOOTH",
"1496.333 683.167 OFFCURVE",
"1510 734.333 OFFCURVE",
"1510 789 CURVE SMOOTH",
"1510 935.81 OFFCURVE",
"1396.166 1027 OFFCURVE",
"1228 1027 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"274.85 121 OFFCURVE",
"220 229.726 OFFCURVE",
"220 360 CURVE SMOOTH",
"220 521.333 OFFCURVE",
"252.333 653.833 OFFCURVE",
"311 746.5 CURVE SMOOTH",
"369.667 839.167 OFFCURVE",
"453 892 OFFCURVE",
"557 892 CURVE SMOOTH",
"686.333 892 OFFCURVE",
"747 795.333 OFFCURVE",
"747 642 CURVE SMOOTH",
"747 491.333 OFFCURVE",
"718.167 362.333 OFFCURVE",
"661.5 269 CURVE SMOOTH",
"604.833 175.667 OFFCURVE",
"521 121 OFFCURVE",
"413 121 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1301.357 901 OFFCURVE",
"1361 854.301 OFFCURVE",
"1361 783 CURVE SMOOTH",
"1361 739 OFFCURVE",
"1340.333 694.667 OFFCURVE",
"1271 656 CURVE SMOOTH",
"1201.667 617.333 OFFCURVE",
"1084.333 582 OFFCURVE",
"891 558 CURVE",
"907 666 OFFCURVE",
"945.667 751.167 OFFCURVE",
"999 810.5 CURVE SMOOTH",
"1052.333 869.833 OFFCURVE",
"1121.333 901 OFFCURVE",
"1200 901 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
72 71 54 53 1 0 71 85 72 85 62 60 53 70 54 70 48 46 38 36 32 30 24 22 17 15 0 52 1 52 12 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 11 8 2 7 7 0 1 0 36 5 9 2 0 0 20 31 10 6 2 1 1 3 1 0 36 4 1 3 3 18 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 11 8 2 7 7 0 1 0 36 5 9 2 0 0 20 31 10 6 2 1 1 3 1 0 36 4 1 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
91 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 11 1 8 8 0 1 0 36 5 9 2 0 0 20 31 0 7 7 0 1 0 36 5 9 2 0 0 20 31 10 6 2 1 1 3 1 0 36 4 1 3 3 21 3 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 79 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 11 1 8 8 0 1 0 36 5 9 2 0 0 20 31 0 7 7 0 1 0 36 5 9 2 0 0 20 31 0 1 1 3 1 0 36 4 1 3 3 21 31 10 1 6 6 3 1 0 36 4 1 3 3 21 3 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 11 1 8 7 0 8 1 0 35 5 9 2 0 0 7 2 0 7 1 0 38 0 1 6 3 1 1 0 35 10 1 6 3 3 6 1 0 35 10 1 6 6 3 1 0 36 4 1 3 6 3 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 77 values pushed */
76 50 12 3 2 7 34 26 2 1 2 2 30 0 2 7 1 7 2 1 50 9 1 0 11 1 8 7 0 8 1 0 38 0 5 0 7 2 5 7 1 0 38 0 1 6 3 1 1 0 35 10 1 6 0 4 3 6 4 1 0 38 0 1 1 3 1 0 36 0 3 1 3 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1544;
}
);
note = oe;
unicode = 0153;
},
{
glyphname = p;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"201 -343 LINE",
"255 100 LINE",
"311 26.667 OFFCURVE",
"396 -14 OFFCURVE",
"496 -14 CURVE SMOOTH",
"542.667 -14 OFFCURVE",
"587.333 -5 OFFCURVE",
"630 13 CURVE SMOOTH",
"715.333 49 OFFCURVE",
"788.167 113.5 OFFCURVE",
"847.5 199.5 CURVE SMOOTH",
"877.167 242.5 OFFCURVE",
"902.5 288.833 OFFCURVE",
"923.5 338.5 CURVE SMOOTH",
"965.5 437.833 OFFCURVE",
"989 549.667 OFFCURVE",
"989 659 CURVE SMOOTH",
"989 900.333 OFFCURVE",
"888 1028 OFFCURVE",
"716 1028 CURVE SMOOTH",
"641.333 1028 OFFCURVE",
"568.5 999.667 OFFCURVE",
"502.5 949 CURVE SMOOTH",
"436.5 898.333 OFFCURVE",
"375.667 826 OFFCURVE",
"325 738 CURVE",
"342 954 LINE",
"342 994 OFFCURVE",
"322 1014 OFFCURVE",
"282 1014 CURVE SMOOTH",
"193 1014 LINE",
"28 -343 LINE"
);
},
{
closed = 1;
nodes = (
"753 885 OFFCURVE",
"813 800.667 OFFCURVE",
"813 642 CURVE SMOOTH",
"813 602 OFFCURVE",
"809.333 561.5 OFFCURVE",
"802 520.5 CURVE SMOOTH",
"787.333 438.5 OFFCURVE",
"760 360.833 OFFCURVE",
"720 293.5 CURVE SMOOTH",
"700 259.833 OFFCURVE",
"677.333 230.5 OFFCURVE",
"652 205.5 CURVE SMOOTH",
"601.333 155.5 OFFCURVE",
"539.333 124 OFFCURVE",
"470 124 CURVE SMOOTH",
"396.667 124 OFFCURVE",
"320.667 150.667 OFFCURVE",
"270 224 CURVE",
"302 482 LINE",
"340.667 598 OFFCURVE",
"394.667 699 OFFCURVE",
"456 771 CURVE SMOOTH",
"517.333 843 OFFCURVE",
"585 885 OFFCURVE",
"649 885 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
26 25 0 0 35 33 25 43 26 43 0 24 0 24 21 19 11 9 3 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
4 1 4 0 31 5 2 5 4 23 1 2 5 3 30 7 1 4 4 0 1 0 36 1 1 0 0 14 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
4 1 4 0 31 5 2 5 4 23 1 2 5 3 30 7 1 4 4 0 1 0 36 1 1 0 0 14 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
4 1 4 0 31 5 2 5 4 23 1 2 5 3 30 0 0 0 14 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
4 1 4 0 31 5 2 5 4 23 1 2 5 3 30 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 0 1 0 36 0 0 0 14 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 60 values pushed */
4 1 4 0 31 5 2 5 4 23 1 2 5 3 30 0 0 4 3 0 1 0 35 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 3 0 0 36 6 1 3 0 3 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1036;
}
);
note = p;
unicode = 0070;
},
{
glyphname = thorn;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"146 -343 LINE SMOOTH",
"186 -343 OFFCURVE",
"214 -313.667 OFFCURVE",
"218 -279 CURVE SMOOTH",
"264 99 LINE",
"321.333 27 OFFCURVE",
"405 -14 OFFCURVE",
"505 -14 CURVE SMOOTH",
"551.667 -14 OFFCURVE",
"596.333 -5 OFFCURVE",
"639 13 CURVE SMOOTH",
"724.333 49 OFFCURVE",
"797.167 113.5 OFFCURVE",
"856.5 199.5 CURVE SMOOTH",
"886.167 242.5 OFFCURVE",
"911.5 288.833 OFFCURVE",
"932.5 338.5 CURVE SMOOTH",
"974.5 437.833 OFFCURVE",
"998 549.667 OFFCURVE",
"998 659 CURVE SMOOTH",
"998 900.333 OFFCURVE",
"897 1028 OFFCURVE",
"725 1028 CURVE SMOOTH",
"653 1028 OFFCURVE",
"583 1000.667 OFFCURVE",
"519 954 CURVE SMOOTH",
"455 907.333 OFFCURVE",
"395.667 838.333 OFFCURVE",
"345 757 CURVE",
"434 1473 LINE",
"258 1473 LINE",
"37 -343 LINE"
);
},
{
closed = 1;
nodes = (
"762 885 OFFCURVE",
"822 800.667 OFFCURVE",
"822 642 CURVE SMOOTH",
"822 602 OFFCURVE",
"818.333 561.5 OFFCURVE",
"811 520.5 CURVE SMOOTH",
"796.333 438.5 OFFCURVE",
"769 360.833 OFFCURVE",
"729 293.5 CURVE SMOOTH",
"709 259.833 OFFCURVE",
"686.333 230.5 OFFCURVE",
"661 205.5 CURVE SMOOTH",
"610.333 155.5 OFFCURVE",
"548.333 124 OFFCURVE",
"479 124 CURVE SMOOTH",
"405.667 124 OFFCURVE",
"329.667 150 OFFCURVE",
"279 222 CURVE",
"312 486 LINE",
"350.667 602 OFFCURVE",
"404.667 701.333 OFFCURVE",
"466 772 CURVE SMOOTH",
"527.333 842.667 OFFCURVE",
"594 885 OFFCURVE",
"658 885 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
27 26 0 0 36 34 26 44 27 44 0 25 0 24 19 17 9 7 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
32 3 2 5 4 21 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 18 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
32 3 2 5 4 21 1 2 5 2 30 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 31 6 1 3 3 16 3 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
32 3 2 5 4 21 1 2 5 2 30 6 1 3 2 3 53 0 0 0 13 31 7 1 4 4 1 1 0 36 0 1 1 20 31 0 5 5 2 1 0 36 0 2 2 21 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
32 3 2 5 4 21 1 2 5 2 30 6 1 3 2 3 53 0 1 7 1 4 5 1 4 1 0 38 0 5 0 2 3 5 2 1 0 38 0 0 0 13 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 56 values pushed */
32 3 2 5 4 21 1 2 5 2 30 0 0 1 0 52 6 1 3 2 3 53 0 1 7 1 4 5 1 4 1 0 38 0 5 2 2 5 1 0 35 0 5 5 2 1 0 36 0 2 5 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1045;
}
);
note = thorn;
unicode = 00FE;
},
{
glyphname = q;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"937 980 LINE",
"857 1014.667 OFFCURVE",
"775.667 1027 OFFCURVE",
"689 1027 CURVE SMOOTH",
"629 1027 OFFCURVE",
"571.667 1018.5 OFFCURVE",
"517 1001.5 CURVE SMOOTH",
"407.667 967.5 OFFCURVE",
"311.333 904.167 OFFCURVE",
"234 819.5 CURVE SMOOTH",
"195.333 777.167 OFFCURVE",
"162.167 730.667 OFFCURVE",
"134.5 680 CURVE SMOOTH",
"79.167 578.667 OFFCURVE",
"48 463 OFFCURVE",
"48 343 CURVE SMOOTH",
"48 228.333 OFFCURVE",
"74.5 139.167 OFFCURVE",
"120.5 78.5 CURVE SMOOTH",
"166.5 17.833 OFFCURVE",
"233 -14 OFFCURVE",
"313 -14 CURVE SMOOTH",
"382.333 -14 OFFCURVE",
"448 10.833 OFFCURVE",
"508 55.5 CURVE SMOOTH",
"568 100.167 OFFCURVE",
"621.333 163.333 OFFCURVE",
"668 242 CURVE",
"609 -229 LINE",
"609 -235.33 OFFCURVE",
"603 -271.518 OFFCURVE",
"603 -281 CURVE SMOOTH",
"603 -314.333 OFFCURVE",
"618.333 -343 OFFCURVE",
"661 -343 CURVE SMOOTH",
"773 -343 LINE"
);
},
{
closed = 1;
nodes = (
"277.333 134 OFFCURVE",
"226 214.333 OFFCURVE",
"226 375 CURVE SMOOTH",
"226 421 OFFCURVE",
"231.333 465.833 OFFCURVE",
"242 509.5 CURVE SMOOTH",
"263.333 596.833 OFFCURVE",
"301.667 674.833 OFFCURVE",
"355 739.5 CURVE SMOOTH",
"381.667 771.833 OFFCURVE",
"411.333 799.667 OFFCURVE",
"444 823 CURVE SMOOTH",
"509.333 869.667 OFFCURVE",
"585 897 OFFCURVE",
"665 897 CURVE SMOOTH",
"693 897 OFFCURVE",
"722 895.667 OFFCURVE",
"750 889 CURVE",
"705 534 LINE",
"667.667 418 OFFCURVE",
"619 317.667 OFFCURVE",
"563 247 CURVE SMOOTH",
"507 176.333 OFFCURVE",
"444 134 OFFCURVE",
"380 134 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
32 31 41 38 31 48 32 48 28 26 16 14 2 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
30 1 4 2 37 10 2 3 4 9 1 0 1 3 30 0 4 4 2 1 0 36 0 2 2 20 31 5 1 3 3 1 1 0 36 0 1 1 18 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
30 1 4 2 37 10 2 3 4 9 1 0 1 3 30 0 4 4 2 1 0 36 0 2 2 20 31 5 1 3 3 1 1 0 36 0 1 1 21 31 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
30 1 4 2 37 10 2 3 4 9 1 0 1 3 30 0 0 1 0 53 0 4 4 2 1 0 36 0 2 2 20 31 5 1 3 3 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 55 values pushed */
30 1 4 2 37 10 2 3 4 9 1 0 1 3 30 0 0 1 0 53 0 2 0 4 3 2 4 1 0 38 5 1 3 1 1 3 1 0 35 5 1 3 3 1 1 0 36 0 1 3 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1010;
}
);
note = q;
unicode = 0071;
},
{
glyphname = r;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"245 0 LINE",
"301 470 LINE",
"369 726 OFFCURVE",
"471.667 851 OFFCURVE",
"601 851 CURVE SMOOTH",
"630.333 851 OFFCURVE",
"660.667 844.667 OFFCURVE",
"692 832 CURVE",
"724 1003 LINE",
"696 1015 OFFCURVE",
"668 1021 OFFCURVE",
"640 1021 CURVE SMOOTH",
"521.333 1021 OFFCURVE",
"411.667 915.667 OFFCURVE",
"325 729 CURVE",
"339 913 LINE",
"339 914.554 OFFCURVE",
"342 951.576 OFFCURVE",
"342 961 CURVE SMOOTH",
"342 997 OFFCURVE",
"319.333 1014 OFFCURVE",
"282 1014 CURVE SMOOTH",
"193 1014 LINE",
"71 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 23 0 23 20 18 15 13 3 1 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
67 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
16 10 2 2 0 17 11 2 3 2 2 30 0 2 2 0 1 0 36 1 1 0 0 14 31 4 1 3 3 12 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
16 10 2 2 0 17 11 2 3 2 2 30 0 0 0 14 31 0 2 2 1 1 0 36 0 1 1 20 31 4 1 3 3 12 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
16 10 2 2 0 17 11 2 3 2 2 30 0 0 0 14 31 0 2 2 1 1 0 36 0 1 1 20 31 4 1 3 3 15 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 46 values pushed */
16 10 2 2 0 17 11 2 3 2 2 30 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 0 0 36 4 1 3 0 3 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 702;
}
);
note = r;
unicode = 0072;
},
{
glyphname = s;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"768 915 LINE",
"701.333 984.333 OFFCURVE",
"609.333 1028 OFFCURVE",
"488 1028 CURVE SMOOTH",
"373.333 1028 OFFCURVE",
"281 988.333 OFFCURVE",
"217 927 CURVE SMOOTH",
"153 865.667 OFFCURVE",
"118 783.333 OFFCURVE",
"118 698 CURVE SMOOTH",
"118 649.333 OFFCURVE",
"128.333 610.333 OFFCURVE",
"149 581 CURVE SMOOTH",
"190.333 522.333 OFFCURVE",
"256 487.833 OFFCURVE",
"328 464.5 CURVE SMOOTH",
"364 452.833 OFFCURVE",
"397.667 440.333 OFFCURVE",
"429 427 CURVE SMOOTH",
"491.667 400.333 OFFCURVE",
"538 364 OFFCURVE",
"538 296 CURVE SMOOTH",
"538 190.948 OFFCURVE",
"451.796 111 OFFCURVE",
"326 111 CURVE SMOOTH",
"251.333 111 OFFCURVE",
"205 133.167 OFFCURVE",
"173 156.5 CURVE SMOOTH",
"146.8 175.604 OFFCURVE",
"119.892 202 OFFCURVE",
"101 202 CURVE SMOOTH",
"78.333 202 OFFCURVE",
"64.667 192.333 OFFCURVE",
"54 175 CURVE SMOOTH",
"10 107 LINE",
"72.667 35 OFFCURVE",
"173.667 -16 OFFCURVE",
"303 -16 CURVE SMOOTH",
"423 -16 OFFCURVE",
"520.833 25.833 OFFCURVE",
"589.5 90.5 CURVE SMOOTH",
"658.167 155.167 OFFCURVE",
"696 243.667 OFFCURVE",
"696 337 CURVE SMOOTH",
"696 385 OFFCURVE",
"685.667 424 OFFCURVE",
"665 454 CURVE SMOOTH",
"623.667 514 OFFCURVE",
"558.167 550.667 OFFCURVE",
"485.5 576 CURVE SMOOTH",
"449.167 588.667 OFFCURVE",
"415.333 601.833 OFFCURVE",
"384 615.5 CURVE SMOOTH",
"321.333 642.833 OFFCURVE",
"275 676.333 OFFCURVE",
"275 739 CURVE SMOOTH",
"275 832.327 OFFCURVE",
"362.325 900 OFFCURVE",
"477 900 CURVE SMOOTH",
"541 900 OFFCURVE",
"585.167 881.5 OFFCURVE",
"616.5 863.5 CURVE SMOOTH",
"641.426 849.181 OFFCURVE",
"670.749 828 OFFCURVE",
"687 828 CURVE SMOOTH",
"703 828 OFFCURVE",
"712.333 835 OFFCURVE",
"723 851 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
55 53 38 36 33 31 26 24 9 7 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
57 1 1 5 28 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 20 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
57 1 1 5 28 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 1 1 5 1 0 36 0 5 5 20 31 0 4 4 2 1 0 36 0 2 2 21 2 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
57 1 1 5 28 1 2 4 2 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 778;
}
);
note = s;
unicode = 0073;
},
{
glyphname = sacute;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 127, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 778;
}
);
note = sacute;
unicode = 015B;
},
{
glyphname = scaron;
layers = (
{
components = (
{
alignment = -1;
name = s;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 126, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 778;
}
);
note = scaron;
unicode = 0161;
},
{
glyphname = germandbls;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"604 1453 OFFCURVE",
"493 1399.333 OFFCURVE",
"405 1314 CURVE SMOOTH",
"317 1228.667 OFFCURVE",
"252.667 1113.667 OFFCURVE",
"222 991 CURVE",
"59 991 LINE",
"51 914 LINE",
"51 892 OFFCURVE",
"64.333 879.333 OFFCURVE",
"91 876 CURVE SMOOTH",
"201 862 LINE",
"65 -249 LINE",
"135 -249 LINE SMOOTH",
"185 -249 OFFCURVE",
"215.667 -224 OFFCURVE",
"227 -174 CURVE SMOOTH",
"273 33 LINE",
"381 905 LINE SMOOTH",
"394.333 1018.333 OFFCURVE",
"434.833 1123.667 OFFCURVE",
"491.5 1201 CURVE SMOOTH",
"548.167 1278.333 OFFCURVE",
"622.333 1326 OFFCURVE",
"705 1326 CURVE SMOOTH",
"831.196 1326 OFFCURVE",
"896 1249.067 OFFCURVE",
"896 1161 CURVE SMOOTH",
"896 1123.667 OFFCURVE",
"887.833 1091.667 OFFCURVE",
"871.5 1065 CURVE SMOOTH",
"838.833 1011.667 OFFCURVE",
"787.5 970.667 OFFCURVE",
"729.5 932 CURVE SMOOTH",
"700.5 912.667 OFFCURVE",
"673.667 891.5 OFFCURVE",
"649 868.5 CURVE SMOOTH",
"599.667 822.5 OFFCURVE",
"563 766.667 OFFCURVE",
"563 684 CURVE SMOOTH",
"563 646.667 OFFCURVE",
"570.667 616 OFFCURVE",
"586 592 CURVE SMOOTH",
"616.667 544 OFFCURVE",
"663.5 510.667 OFFCURVE",
"717.5 484 CURVE SMOOTH",
"744.5 470.667 OFFCURVE",
"769.333 456.333 OFFCURVE",
"792 441 CURVE SMOOTH",
"837.333 410.333 OFFCURVE",
"872 371 OFFCURVE",
"872 307 CURVE SMOOTH",
"872 194.833 OFFCURVE",
"790.259 107 OFFCURVE",
"679 107 CURVE SMOOTH",
"599.087 107 OFFCURVE",
"511.56 199 OFFCURVE",
"471 199 CURVE SMOOTH",
"448.333 199 OFFCURVE",
"434 189 OFFCURVE",
"422 173 CURVE SMOOTH",
"374 107 LINE",
"439.333 35 OFFCURVE",
"531.333 -16 OFFCURVE",
"650 -16 CURVE SMOOTH",
"755.333 -16 OFFCURVE",
"851.5 19.167 OFFCURVE",
"921.5 82.5 CURVE SMOOTH",
"991.5 145.833 OFFCURVE",
"1036 238.333 OFFCURVE",
"1036 353 CURVE SMOOTH",
"1036 396.333 OFFCURVE",
"1028.833 432.667 OFFCURVE",
"1014.5 462 CURVE SMOOTH",
"985.833 520.667 OFFCURVE",
"941.5 559.833 OFFCURVE",
"891.5 588.5 CURVE SMOOTH",
"838.102 619.115 OFFCURVE",
"747 676.052 OFFCURVE",
"747 733 CURVE SMOOTH",
"747 795.743 OFFCURVE",
"846.725 866.483 OFFCURVE",
"904.5 905 CURVE SMOOTH",
"931.5 923 OFFCURVE",
"956.667 944 OFFCURVE",
"980 968 CURVE SMOOTH",
"1026.667 1016 OFFCURVE",
"1062 1077.333 OFFCURVE",
"1062 1168 CURVE SMOOTH",
"1062 1230.667 OFFCURVE",
"1037.5 1302.167 OFFCURVE",
"983.5 1357.5 CURVE SMOOTH",
"929.5 1412.833 OFFCURVE",
"846.667 1453 OFFCURVE",
"728 1453 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 76 75 70 68 61 59 37 35 32 30 25 23 0 80 1 80 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
44 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
74 71 2 2 6 1 30 27 1 3 1 29 0 2 6 3 6 2 3 50 0 4 4 0 1 0 36 7 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 31 0 5 5 6 0 0 36 0 6 6 14 5 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
74 71 2 2 6 1 30 27 1 3 1 29 0 2 6 3 6 2 3 50 0 6 0 5 6 5 1 0 37 0 4 4 0 1 0 36 7 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
74 71 2 2 6 1 30 27 1 3 1 29 0 2 6 3 6 2 3 50 7 1 0 0 4 6 0 4 1 0 38 0 6 0 5 6 5 1 0 37 0 3 3 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 64 values pushed */
74 71 2 2 6 1 30 27 1 3 1 29 0 2 6 3 6 2 3 50 7 1 0 0 4 6 0 4 1 0 38 0 6 2 5 6 0 0 35 0 3 0 1 5 3 1 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1097;
}
);
note = germandbls;
unicode = 00DF;
},
{
glyphname = t;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"161.667 56.333 OFFCURVE",
"240.667 -16 OFFCURVE",
"370 -16 CURVE SMOOTH",
"454 -16 OFFCURVE",
"542 18.667 OFFCURVE",
"606 76 CURVE",
"569 161 LINE",
"562.333 173 OFFCURVE",
"557.667 178 OFFCURVE",
"547 178 CURVE SMOOTH",
"528.772 178 OFFCURVE",
"464.159 130 OFFCURVE",
"424 130 CURVE SMOOTH",
"369.333 130 OFFCURVE",
"336 162 OFFCURVE",
"336 230 CURVE SMOOTH",
"336 233.403 OFFCURVE",
"345.559 329.584 OFFCURVE",
"350 366 CURVE SMOOTH",
"411 864 LINE",
"678 864 LINE",
"693 993 LINE",
"427 993 LINE",
"471 1342 LINE",
"377 1342 LINE SMOOTH",
"355.667 1342 OFFCURVE",
"340.333 1328 OFFCURVE",
"335 1308 CURVE SMOOTH",
"260 995 LINE",
"104 974 LINE",
"101.758 949.335 OFFCURVE",
"95 906.458 OFFCURVE",
"95 895 CURVE SMOOTH",
"95 873.667 OFFCURVE",
"107.667 864 OFFCURVE",
"125 864 CURVE SMOOTH",
"238 864 LINE",
"175 357 LINE SMOOTH",
"166.521 290.579 OFFCURVE",
"159 206.933 OFFCURVE",
"159 191 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
47 45 40 38 35 33 25 24 23 22 21 19 8 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
43 1 6 4 1 30 0 1 2 1 52 0 5 0 4 0 5 4 50 3 1 0 0 2 0 0 36 0 2 2 14 31 0 4 4 6 1 0 36 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
43 1 6 4 1 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 2 3 1 0 5 2 0 1 2 38 0 4 4 6 1 0 36 0 6 6 18 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
43 1 6 4 1 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 2 3 1 0 5 2 0 1 2 38 0 4 4 6 1 0 36 0 6 6 21 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
43 1 6 4 1 30 0 1 2 1 52 0 5 0 4 0 5 4 50 0 2 3 1 0 5 2 0 1 2 38 0 4 6 6 4 1 0 35 0 4 4 6 1 0 36 0 6 4 6 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 59 values pushed */
43 1 6 4 1 30 0 1 2 1 52 0 0 3 5 3 0 5 50 0 5 4 3 5 4 48 0 2 0 3 0 2 3 0 2 38 0 4 6 6 4 1 0 35 0 4 4 6 1 0 36 0 6 4 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 685;
}
);
note = t;
unicode = 0074;
},
{
glyphname = u;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"177 1013 LINE",
"101 369 LINE SMOOTH",
"97 338.333 OFFCURVE",
"96 310.667 OFFCURVE",
"96 284 CURVE SMOOTH",
"96 92 OFFCURVE",
"183.333 -14 OFFCURVE",
"334 -14 CURVE SMOOTH",
"475.333 -14 OFFCURVE",
"613 76 OFFCURVE",
"721 248 CURVE",
"714 167 LINE",
"714 153.499 OFFCURVE",
"706 75.64 OFFCURVE",
"706 57 CURVE SMOOTH",
"706 18.333 OFFCURVE",
"729.667 0 OFFCURVE",
"771 0 CURVE SMOOTH",
"859 0 LINE",
"981 1013 LINE",
"804 1013 LINE",
"741 486 LINE",
"702.333 379.333 OFFCURVE",
"649.167 291.333 OFFCURVE",
"588.5 230 CURVE SMOOTH",
"527.833 168.667 OFFCURVE",
"461.333 134 OFFCURVE",
"400 134 CURVE SMOOTH",
"312 134 OFFCURVE",
"273 186.667 OFFCURVE",
"273 296 CURVE SMOOTH",
"273 318.667 OFFCURVE",
"275.333 342.333 OFFCURVE",
"278 369 CURVE SMOOTH",
"354 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
0 0 0 35 0 35 29 27 17 15 14 13 8 6 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
34 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
25 24 2 0 1 1 30 5 4 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
25 24 2 0 1 1 30 5 4 2 1 1 14 31 0 2 2 12 31 0 0 0 3 1 2 36 0 3 3 21 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
25 24 2 0 1 1 30 5 4 2 1 1 14 31 0 2 2 15 31 0 0 0 3 1 2 36 0 3 3 21 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
25 24 2 0 1 1 30 0 0 2 3 0 1 0 35 5 4 2 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 49 values pushed */
25 24 2 0 4 1 30 5 1 4 1 0 1 4 0 50 0 0 2 3 0 1 0 35 0 1 0 2 3 1 2 1 0 38 0 0 0 3 1 2 36 0 3 0 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1050;
}
);
note = u;
unicode = 0075;
},
{
glyphname = uacute;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 221, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1050;
}
);
note = uacute;
unicode = 00FA;
},
{
glyphname = ucircumflex;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = circumflex;
transform = "{1, 0, 0, 1, 221, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1050;
}
);
note = ucircumflex;
unicode = 00FB;
},
{
glyphname = udieresis;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 221, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1050;
}
);
note = udieresis;
unicode = 00FC;
},
{
glyphname = ugrave;
layers = (
{
components = (
{
alignment = -1;
name = u;
},
{
alignment = -1;
name = grave;
transform = "{1, 0, 0, 1, 252, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 1050;
}
);
note = ugrave;
unicode = 00F9;
},
{
glyphname = v;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"336 0 LINE",
"485 0 LINE",
"993 1013 LINE",
"854 1013 LINE SMOOTH",
"831.333 1013 OFFCURVE",
"811.667 997.333 OFFCURVE",
"801 976 CURVE SMOOTH",
"487 324 LINE SMOOTH",
"463 273.333 OFFCURVE",
"448.667 225 OFFCURVE",
"434 177 CURVE",
"431.333 225 OFFCURVE",
"427.667 274.667 OFFCURVE",
"417 324 CURVE SMOOTH",
"266 976 LINE SMOOTH",
"262 996 OFFCURVE",
"245.667 1013 OFFCURVE",
"219 1013 CURVE SMOOTH",
"75 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 14 31 0 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 2 0 1 30 1 1 0 0 14 31 0 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 952;
}
);
note = v;
unicode = 0076;
},
{
glyphname = w;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"259 0 LINE",
"389 0 LINE SMOOTH",
"406.333 0 OFFCURVE",
"419.667 11.333 OFFCURVE",
"429 34 CURVE SMOOTH",
"722 720 LINE SMOOTH",
"731.333 742.667 OFFCURVE",
"737.333 763.333 OFFCURVE",
"744 786 CURVE",
"745.333 775.333 OFFCURVE",
"746.667 764.5 OFFCURVE",
"748 753.5 CURVE SMOOTH",
"749.333 742.5 OFFCURVE",
"751 731.667 OFFCURVE",
"753 721 CURVE SMOOTH",
"876 34 LINE SMOOTH",
"880 11.333 OFFCURVE",
"889.667 0 OFFCURVE",
"905 0 CURVE SMOOTH",
"1040 0 LINE",
"1465 1013 LINE",
"1337 1013 LINE SMOOTH",
"1313 1013 OFFCURVE",
"1293 997.333 OFFCURVE",
"1285 976 CURVE SMOOTH",
"1029 324 LINE SMOOTH",
"1019.667 300.667 OFFCURVE",
"1011.833 277.833 OFFCURVE",
"1005.5 255.5 CURVE SMOOTH",
"999.167 233.167 OFFCURVE",
"992.667 211.333 OFFCURVE",
"986 190 CURVE",
"982 234 OFFCURVE",
"978 277.333 OFFCURVE",
"970 324 CURVE SMOOTH",
"857 980 LINE",
"854.333 1000 OFFCURVE",
"839.667 1015 OFFCURVE",
"813 1015 CURVE SMOOTH",
"739 1015 LINE SMOOTH",
"716.333 1015 OFFCURVE",
"697 1000 OFFCURVE",
"689 980 CURVE SMOOTH",
"412 324 LINE SMOOTH",
"393.333 277.333 OFFCURVE",
"377 234.667 OFFCURVE",
"361 192 CURVE",
"360.333 213.333 OFFCURVE",
"359.833 234.833 OFFCURVE",
"359.5 256.5 CURVE SMOOTH",
"359.167 278.167 OFFCURVE",
"357.333 300.667 OFFCURVE",
"354 324 CURVE SMOOTH",
"261 976 LINE SMOOTH",
"258.333 998.667 OFFCURVE",
"240.667 1013 OFFCURVE",
"214 1013 CURVE SMOOTH",
"81 1013 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
46 44 34 32 31 29 17 14 2 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 0 14 31 4 1 3 3 12 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 0 14 31 4 1 3 3 15 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
200 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
39 23 8 3 3 0 1 30 2 1 2 0 3 0 52 4 1 3 3 43 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
39 23 8 3 3 0 1 30 0 1 0 1 52 2 1 0 3 0 52 4 1 3 3 43 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
39 23 8 3 4 2 1 30 0 1 0 1 52 0 0 2 0 52 0 2 4 2 52 0 4 3 4 52 0 3 3 43 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1419;
}
);
note = w;
unicode = 0077;
},
{
glyphname = x;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"-50 0 LINE",
"106 0 LINE SMOOTH",
"130 0 OFFCURVE",
"144.667 15.333 OFFCURVE",
"158 34 CURVE SMOOTH",
"434 402 LINE",
"441.333 412.667 OFFCURVE",
"448.333 425.333 OFFCURVE",
"455 440 CURVE",
"646 35 LINE SMOOTH",
"655.333 16.333 OFFCURVE",
"668.333 0 OFFCURVE",
"695 0 CURVE SMOOTH",
"854 0 LINE",
"584 544 LINE",
"946 1013 LINE",
"785 1013 LINE SMOOTH",
"767.667 1013 OFFCURVE",
"757.667 1003.667 OFFCURVE",
"743 985 CURVE SMOOTH",
"514 682 LINE SMOOTH",
"503.333 667.333 OFFCURVE",
"496.667 654.667 OFFCURVE",
"490 640 CURVE",
"320 988 LINE SMOOTH",
"310.667 1006.667 OFFCURVE",
"302.667 1013 OFFCURVE",
"276 1013 CURVE SMOOTH",
"117 1013 LINE",
"360 545 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
28 26 18 16 14 12 3 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
21 15 0 3 2 0 1 30 1 1 0 0 14 31 3 1 2 2 12 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
21 15 0 3 2 0 1 30 1 1 0 0 14 31 3 1 2 2 15 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
21 15 0 3 2 0 1 30 1 1 0 2 2 0 1 0 35 1 1 0 0 2 1 0 36 3 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 41 values pushed */
21 15 0 3 3 1 1 30 0 1 3 2 1 1 0 35 0 0 0 3 2 0 3 1 0 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 937;
}
);
note = x;
unicode = 0078;
},
{
glyphname = y;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1000 1013 LINE",
"859 1013 LINE SMOOTH",
"839 1013 OFFCURVE",
"817.667 999.333 OFFCURVE",
"807 978 CURVE SMOOTH",
"487 339 LINE SMOOTH",
"479.667 325 OFFCURVE",
"473.167 310.833 OFFCURVE",
"467.5 296.5 CURVE SMOOTH",
"461.833 282.167 OFFCURVE",
"456 268 OFFCURVE",
"450 254 CURVE",
"447.333 282 OFFCURVE",
"443.667 310 OFFCURVE",
"437 338 CURVE SMOOTH",
"274 976 LINE SMOOTH",
"268.667 997.333 OFFCURVE",
"256 1013 OFFCURVE",
"228 1013 CURVE SMOOTH",
"81 1013 LINE",
"343 60 LINE",
"124 -343 LINE",
"254 -343 LINE SMOOTH",
"281.333 -343 OFFCURVE",
"302 -329.333 OFFCURVE",
"316 -302 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
21 19 7 5 3 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 20 values pushed */
13 4 2 0 1 1 30 2 1 1 1 14 31 0 0 0 16 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 22 values pushed */
13 4 2 0 1 1 30 0 0 0 1 1 0 36 2 1 1 1 14 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
13 4 2 0 1 1 30 2 1 1 0 0 1 1 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 38 values pushed */
13 4 2 0 2 1 30 0 2 1 0 1 2 0 50 0 1 2 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 952;
}
);
note = y;
unicode = 0079;
},
{
glyphname = yacute;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 187, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 952;
}
);
note = yacute;
unicode = 00FD;
},
{
glyphname = ydieresis;
layers = (
{
components = (
{
alignment = -1;
name = y;
},
{
alignment = -1;
name = dieresis;
transform = "{1, 0, 0, 1, 187, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 952;
}
);
note = ydieresis;
unicode = 00FF;
},
{
glyphname = z;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"857 1013 LINE",
"155 1013 LINE",
"138 873 LINE",
"630 873 LINE",
"43 138 LINE SMOOTH",
"27 116.667 OFFCURVE",
"14.667 91.333 OFFCURVE",
"12 74 CURVE SMOOTH",
"3 0 LINE",
"717 0 LINE",
"733 139 LINE",
"233 139 LINE",
"817 869 LINE SMOOTH",
"831.667 887.667 OFFCURVE",
"845.333 911.667 OFFCURVE",
"848 937 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
15 14 13 12 7 6 5 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 3 0 0 36 0 3 3 14 31 0 0 0 1 0 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 2 2 3 0 0 36 0 3 3 14 31 0 0 0 1 0 0 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 3 0 2 0 3 2 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 858;
}
);
note = z;
unicode = 007A;
},
{
glyphname = zacute;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = acute;
transform = "{1, 0, 0, 1, 150, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 858;
}
);
note = zacute;
unicode = 017A;
},
{
glyphname = zcaron;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = caron;
transform = "{1, 0, 0, 1, 149, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 858;
}
);
note = zcaron;
unicode = 017E;
},
{
glyphname = zdotaccent;
layers = (
{
components = (
{
alignment = -1;
name = z;
},
{
alignment = -1;
name = dotaccent;
transform = "{1, 0, 0, 1, 150, 2}";
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 858;
}
);
note = zdotaccent;
unicode = 017C;
},
{
glyphname = fi;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"384 993 LINE",
"390 1046 LINE SMOOTH",
"402 1146 OFFCURVE",
"433.833 1219 OFFCURVE",
"490.5 1267 CURVE SMOOTH",
"547.167 1315 OFFCURVE",
"627.333 1339 OFFCURVE",
"738 1339 CURVE SMOOTH",
"748.667 1339 OFFCURVE",
"758.333 1338.833 OFFCURVE",
"767 1338.5 CURVE SMOOTH",
"775.667 1338.167 OFFCURVE",
"783.667 1338 OFFCURVE",
"791 1338 CURVE SMOOTH",
"813.667 1338 OFFCURVE",
"828 1341 OFFCURVE",
"832 1357 CURVE",
"849 1447 LINE",
"816.984 1459.314 OFFCURVE",
"745.66 1467 OFFCURVE",
"705 1467 CURVE SMOOTH",
"562.333 1467 OFFCURVE",
"450.333 1424.333 OFFCURVE",
"369 1351 CURVE SMOOTH",
"287.667 1277.667 OFFCURVE",
"238.667 1173 OFFCURVE",
"224 1049 CURVE SMOOTH",
"217 993 LINE",
"69 993 LINE",
"62 914 LINE",
"62 890.667 OFFCURVE",
"75.333 877.333 OFFCURVE",
"102 874 CURVE SMOOTH",
"201 862 LINE",
"64 -250 LINE",
"134 -250 LINE SMOOTH",
"184 -250 OFFCURVE",
"214.667 -225 OFFCURVE",
"226 -175 CURVE SMOOTH",
"272 32 LINE",
"374 864 LINE",
"761 864 LINE",
"654 0 LINE",
"830 0 LINE",
"951 993 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 39 0 39 34 29 22 20 15 14 9 7 4 3 2 1 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
26 1 5 4 13 1 1 3 10 1 0 1 3 30 0 5 5 4 1 0 36 0 4 4 13 31 0 1 1 3 0 0 36 7 6 2 3 3 14 31 0 0 0 12 31 0 2 2 3 0 0 36 7 6 2 3 3 14 2 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
26 1 5 4 13 1 1 3 10 1 0 1 3 30 0 1 0 3 1 0 0 35 7 6 2 3 0 2 3 2 1 0 37 0 5 5 4 1 0 36 0 4 4 13 31 0 0 0 12 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
26 1 5 4 13 1 1 3 10 1 0 1 3 30 0 1 0 3 1 0 0 35 7 6 2 3 0 2 3 2 1 0 37 0 5 5 4 1 0 36 0 4 4 13 31 0 0 0 15 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
217 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
26 1 5 4 13 1 1 3 10 1 0 1 3 30 0 0 1 2 1 0 2 50 0 1 0 3 1 0 0 35 7 6 2 3 0 2 3 2 1 0 37 0 5 5 4 1 0 36 0 4 4 13 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
26 1 5 4 13 1 1 3 10 1 0 1 3 30 0 0 1 2 1 0 2 50 0 4 0 5 3 4 5 1 0 38 7 6 2 3 0 1 0 3 1 0 0 38 7 6 2 3 3 2 1 0 36 0 2 3 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
26 1 5 4 13 1 1 6 10 1 0 1 3 30 0 0 1 2 1 0 2 50 0 4 0 5 3 4 5 1 0 38 0 3 6 2 3 0 0 35 7 1 6 0 1 0 6 1 0 0 38 0 3 3 2 1 0 36 0 2 3 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1055;
}
);
note = fi;
unicode = FB01;
},
{
glyphname = fl;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"608 865 LINE",
"623 993 LINE",
"385 993 LINE",
"391 1048 LINE SMOOTH",
"411 1228 OFFCURVE",
"512 1330 OFFCURVE",
"668 1330 CURVE SMOOTH",
"696.667 1330 OFFCURVE",
"726.833 1328.333 OFFCURVE",
"758.5 1325 CURVE SMOOTH",
"790.167 1321.667 OFFCURVE",
"821 1318.667 OFFCURVE",
"851 1316 CURVE",
"691 0 LINE",
"864 0 LINE",
"1041 1446 LINE",
"922 1446 LINE SMOOTH",
"886.667 1446 OFFCURVE",
"845.667 1448.167 OFFCURVE",
"799 1452.5 CURVE SMOOTH",
"752.333 1456.833 OFFCURVE",
"705.333 1459 OFFCURVE",
"658 1459 CURVE SMOOTH",
"528.667 1459 OFFCURVE",
"427.333 1412.667 OFFCURVE",
"354 1338 CURVE SMOOTH",
"280.667 1263.333 OFFCURVE",
"236.333 1160 OFFCURVE",
"223 1048 CURVE SMOOTH",
"216 993 LINE",
"70 993 LINE",
"62 912 LINE",
"62 890 OFFCURVE",
"75.333 877.333 OFFCURVE",
"102 874 CURVE SMOOTH",
"200 862 LINE",
"64 -250 LINE",
"134 -250 LINE SMOOTH",
"184 -250 OFFCURVE",
"214.667 -225 OFFCURVE",
"226 -175 CURVE SMOOTH",
"272 32 LINE",
"375 865 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 0 33 0 33 32 31 28 26 23 22 21 19 18 16 11 10 5 3 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 5 5 2 1 0 36 3 1 2 2 17 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 4 4 12 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
38 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 5 5 2 1 0 36 3 1 2 2 13 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 4 4 12 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 3 3 17 31 0 5 5 2 1 0 36 0 2 2 13 31 8 1 7 7 1 0 0 36 6 1 1 1 14 31 0 4 4 12 31 0 0 0 1 0 0 36 6 1 1 1 14 0 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 8 1 7 4 1 7 0 0 35 6 1 1 0 0 1 0 1 0 37 0 3 3 17 31 0 5 5 2 1 0 36 0 2 2 13 31 0 4 4 12 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 3 2 5 2 3 5 50 8 1 7 4 1 7 0 0 35 6 1 1 0 0 1 0 1 0 37 0 5 5 2 1 0 36 0 2 2 13 31 0 4 4 15 4 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
141 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 3 2 5 2 3 5 50 0 4 7 0 7 4 0 50 8 1 7 4 1 7 0 0 35 6 1 1 0 0 1 0 1 0 37 0 5 5 2 1 0 36 0 2 2 13 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 68 values pushed */
24 1 1 5 9 1 7 1 6 1 4 7 3 30 0 3 2 5 2 3 5 50 0 4 7 0 7 4 0 50 0 2 0 5 1 2 5 1 0 38 6 1 1 8 1 7 4 1 7 0 0 38 6 1 1 1 0 1 0 36 0 0 1 0 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
24 1 1 5 9 1 7 6 6 1 4 7 3 30 0 3 2 5 2 3 5 50 0 4 7 0 7 4 0 50 0 2 0 5 1 2 5 1 0 38 0 1 6 0 1 0 0 35 0 6 8 1 7 4 6 7 0 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1095;
}
);
note = fl;
unicode = FB02;
},
{
glyphname = ordfeminine;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"594 840 LINE",
"641 1221 LINE SMOOTH",
"642.333 1231.667 OFFCURVE",
"643 1244.333 OFFCURVE",
"643 1255 CURVE SMOOTH",
"643 1363.6 OFFCURVE",
"575.438 1449 OFFCURVE",
"460 1449 CURVE SMOOTH",
"369.333 1449 OFFCURVE",
"290 1419.667 OFFCURVE",
"218 1353 CURVE",
"235 1313 LINE SMOOTH",
"240.333 1299.667 OFFCURVE",
"250.333 1289 OFFCURVE",
"269 1289 CURVE SMOOTH",
"305.406 1289 OFFCURVE",
"375.341 1346 OFFCURVE",
"432 1346 CURVE SMOOTH",
"496 1346 OFFCURVE",
"520 1307.333 OFFCURVE",
"520 1246 CURVE SMOOTH",
"520 1242 OFFCURVE",
"520 1238 OFFCURVE",
"520 1234 CURVE SMOOTH",
"520 1230 OFFCURVE",
"519.667 1225.667 OFFCURVE",
"519 1221 CURVE SMOOTH",
"514 1183 LINE",
"372.667 1179 OFFCURVE",
"280.333 1151.833 OFFCURVE",
"223 1112.5 CURVE SMOOTH",
"165.667 1073.167 OFFCURVE",
"143 1021.333 OFFCURVE",
"143 968 CURVE SMOOTH",
"143 877.333 OFFCURVE",
"203.333 831 OFFCURVE",
"290 831 CURVE SMOOTH",
"371.661 831 OFFCURVE",
"426.835 862.261 OFFCURVE",
"492 917 CURVE",
"497 868 LINE SMOOTH",
"499.667 842.667 OFFCURVE",
"513.333 840 OFFCURVE",
"536 840 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"296.333 920 OFFCURVE",
"265 938.667 OFFCURVE",
"265 984 CURVE SMOOTH",
"265 1064.559 OFFCURVE",
"352.699 1097.385 OFFCURVE",
"505 1102 CURVE",
"492 993 LINE",
"444 946.333 OFFCURVE",
"400.333 920 OFFCURVE",
"339 920 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
47 46 1 0 51 50 46 57 47 57 37 35 30 28 25 23 17 16 10 8 0 45 1 45 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
54 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
33 1 3 5 4 1 0 6 2 30 0 4 3 2 3 4 2 50 0 2 0 7 6 2 7 1 0 38 9 1 6 1 8 2 0 6 0 1 0 37 0 3 3 5 1 0 36 0 5 5 17 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
33 1 3 5 4 1 0 6 2 30 0 4 3 2 3 4 2 50 8 1 0 6 1 6 0 1 50 0 2 0 7 6 2 7 1 0 38 9 1 6 0 1 6 1 1 0 37 0 3 3 5 1 0 36 0 5 5 17 3 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 72 values pushed */
33 1 3 5 4 1 0 6 2 30 0 4 3 2 3 4 2 50 8 1 0 6 1 6 0 1 50 0 5 0 3 4 5 3 1 0 38 0 2 0 7 6 2 7 1 0 38 9 1 6 0 1 6 1 0 35 9 1 6 6 1 1 0 36 0 1 6 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 632;
}
);
note = ordfeminine;
unicode = 00AA;
},
{
glyphname = ordmasculine;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"374 1448 OFFCURVE",
"291.5 1413.5 OFFCURVE",
"233.5 1351.5 CURVE SMOOTH",
"175.5 1289.5 OFFCURVE",
"142 1200 OFFCURVE",
"142 1092 CURVE SMOOTH",
"142 931.306 OFFCURVE",
"237.798 828 OFFCURVE",
"395 828 CURVE SMOOTH",
"491 828 OFFCURVE",
"572.833 862.5 OFFCURVE",
"629.5 924.5 CURVE SMOOTH",
"686.167 986.5 OFFCURVE",
"720 1075.667 OFFCURVE",
"720 1185 CURVE SMOOTH",
"720 1344.514 OFFCURVE",
"626.13 1448 OFFCURVE",
"470 1448 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"318.667 931 OFFCURVE",
"277 990 OFFCURVE",
"277 1090 CURVE SMOOTH",
"277 1237.449 OFFCURVE",
"326.006 1345 OFFCURVE",
"459 1345 CURVE SMOOTH",
"543 1345 OFFCURVE",
"587 1285 OFFCURVE",
"587 1185 CURVE SMOOTH",
"587 1029 OFFCURVE",
"528 931 OFFCURVE",
"408 931 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 27 25 20 33 21 33 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
5 1 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 4 1 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 704;
}
);
note = ordmasculine;
unicode = 00BA;
},
{
glyphname = pi;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"187 1011 LINE SMOOTH",
"146.943 1011 OFFCURVE",
"116.007 978.066 OFFCURVE",
"113 948 CURVE SMOOTH",
"105 885 LINE",
"277 885 LINE",
"199 244 LINE SMOOTH",
"188.333 154.667 OFFCURVE",
"152 114 OFFCURVE",
"72 114 CURVE SMOOTH",
"23.6 114 OFFCURVE",
"8.04 116.18 OFFCURVE",
"2 89 CURVE SMOOTH",
"-13 17 LINE",
"23 -5.667 OFFCURVE",
"64.667 -12 OFFCURVE",
"106 -12 CURVE SMOOTH",
"268.667 -12 OFFCURVE",
"351 83.333 OFFCURVE",
"371 242 CURVE SMOOTH",
"450 885 LINE",
"807 885 LINE",
"700 0 LINE",
"872 0 LINE",
"980 885 LINE",
"1104 885 LINE SMOOTH",
"1138.667 885 OFFCURVE",
"1163.333 912.333 OFFCURVE",
"1166 943 CURVE SMOOTH",
"1174 1011 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 33 0 32 27 26 23 20 14 12 9 8 7 6 5 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
40 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
16 1 1 4 1 30 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 4 4 1 1 0 36 3 1 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
16 1 1 4 1 30 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 1 1 12 31 0 4 4 3 1 0 36 0 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 40 values pushed */
16 1 1 4 1 30 5 2 2 0 0 6 1 0 36 7 1 6 6 14 31 0 1 1 15 31 0 4 4 3 1 0 36 0 3 3 21 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
16 1 1 4 1 30 0 1 4 3 4 1 3 50 7 1 6 5 2 2 0 4 6 0 0 0 38 0 4 1 3 4 1 0 35 0 4 4 3 1 0 36 0 3 4 3 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 62 values pushed */
16 1 1 4 1 30 0 5 6 2 2 5 42 0 0 2 4 2 0 42 0 1 4 3 4 1 3 50 7 1 6 0 2 0 6 2 0 0 38 0 4 1 3 4 1 0 35 0 4 4 3 1 0 36 0 3 4 3 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1144;
}
);
note = pi;
unicode = 03C0;
},
{
glyphname = zero;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"527 1447 OFFCURVE",
"373 1376.333 OFFCURVE",
"261 1231 CURVE SMOOTH",
"149 1085.667 OFFCURVE",
"79 866.333 OFFCURVE",
"79 569 CURVE SMOOTH",
"79 373 OFFCURVE",
"124.833 227.167 OFFCURVE",
"201.5 130.5 CURVE SMOOTH",
"278.167 33.833 OFFCURVE",
"387 -15 OFFCURVE",
"515 -15 CURVE SMOOTH",
"683 -15 OFFCURVE",
"836 55.667 OFFCURVE",
"948 201 CURVE SMOOTH",
"1060 346.333 OFFCURVE",
"1130 566.667 OFFCURVE",
"1130 864 CURVE SMOOTH",
"1130 1058.667 OFFCURVE",
"1084.167 1204.833 OFFCURVE",
"1007.5 1301.5 CURVE SMOOTH",
"930.833 1398.167 OFFCURVE",
"821.667 1447 OFFCURVE",
"695 1447 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"462.333 130 OFFCURVE",
"392.667 160.5 OFFCURVE",
"342 230.5 CURVE SMOOTH",
"291.333 300.5 OFFCURVE",
"259 412 OFFCURVE",
"259 572 CURVE SMOOTH",
"259 820 OFFCURVE",
"306.167 1002.833 OFFCURVE",
"381.5 1123.5 CURVE SMOOTH",
"456.833 1244.167 OFFCURVE",
"561 1303 OFFCURVE",
"673 1303 CURVE SMOOTH",
"747.667 1303 OFFCURVE",
"817.333 1272.667 OFFCURVE",
"868 1202 CURVE SMOOTH",
"918.667 1131.333 OFFCURVE",
"951 1020 OFFCURVE",
"951 860 CURVE SMOOTH",
"951 612 OFFCURVE",
"903.833 429 OFFCURVE",
"828.5 309 CURVE SMOOTH",
"753.167 189 OFFCURVE",
"649 130 OFFCURVE",
"537 130 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
21 20 1 0 31 29 20 39 21 39 11 9 0 19 1 19 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
0 3 3 0 1 0 36 4 1 0 0 17 31 5 1 2 2 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 2 1 1 0 36 0 1 1 21 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
4 1 0 0 3 2 0 3 1 0 38 5 1 2 1 1 2 1 0 35 5 1 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = zero;
unicode = 0030;
},
{
glyphname = one;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"229 0 LINE",
"994 0 LINE",
"1010 132 LINE",
"726 132 LINE",
"886 1436 LINE",
"746 1436 LINE",
"276 1067 LINE",
"320 992 LINE SMOOTH",
"326.667 981.333 OFFCURVE",
"344 971 OFFCURVE",
"364 971 CURVE SMOOTH",
"377.333 971 OFFCURVE",
"390 975.667 OFFCURVE",
"402 985 CURVE SMOOTH",
"695 1214 LINE",
"677 1137 LINE",
"554 132 LINE",
"244 132 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
16 15 14 13 12 11 7 5 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 35 values pushed */
10 3 2 1 2 1 30 0 1 2 0 2 1 0 50 0 2 2 11 31 3 1 0 0 4 0 2 36 0 4 4 12 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 0 4 0 2 36 0 4 4 15 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = one;
unicode = 0031;
},
{
glyphname = two;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"592.333 1447 OFFCURVE",
"480.333 1412 OFFCURVE",
"391 1344 CURVE SMOOTH",
"301.667 1276 OFFCURVE",
"233.333 1175.667 OFFCURVE",
"200 1045 CURVE",
"287 1030 LINE SMOOTH",
"295 1028.667 OFFCURVE",
"303.333 1028 OFFCURVE",
"310 1028 CURVE SMOOTH",
"343.333 1028 OFFCURVE",
"366.333 1042.333 OFFCURVE",
"381 1081 CURVE SMOOTH",
"430.333 1217 OFFCURVE",
"537.667 1300 OFFCURVE",
"687 1300 CURVE SMOOTH",
"823.381 1300 OFFCURVE",
"919 1222.587 OFFCURVE",
"919 1082 CURVE SMOOTH",
"919 990 OFFCURVE",
"891.167 912.167 OFFCURVE",
"838.5 835.5 CURVE SMOOTH",
"785.833 758.833 OFFCURVE",
"709.333 682.667 OFFCURVE",
"612 596 CURVE SMOOTH",
"94 133 LINE SMOOTH",
"70 111.667 OFFCURVE",
"56.667 81.667 OFFCURVE",
"54 59 CURVE SMOOTH",
"47 0 LINE",
"999 0 LINE",
"1006 53 LINE SMOOTH",
"1008.667 71.667 OFFCURVE",
"1012 97.667 OFFCURVE",
"1012 111 CURVE SMOOTH",
"1012 141.667 OFFCURVE",
"992.667 162 OFFCURVE",
"958 162 CURVE SMOOTH",
"468 162 LINE SMOOTH",
"417.333 162 OFFCURVE",
"361.667 153.667 OFFCURVE",
"307 139 CURVE",
"738 531 LINE SMOOTH",
"836.667 620.333 OFFCURVE",
"926.667 701.667 OFFCURVE",
"992 791 CURVE SMOOTH",
"1057.333 880.333 OFFCURVE",
"1098 977.667 OFFCURVE",
"1098 1099 CURVE SMOOTH",
"1098 1208.333 OFFCURVE",
"1058 1295 OFFCURVE",
"990 1355 CURVE SMOOTH",
"922 1415 OFFCURVE",
"825.667 1447 OFFCURVE",
"715 1447 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 45 43 39 37 23 22 16 13 0 52 1 52 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
48 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 0 3 3 0 1 0 36 5 1 0 0 17 31 0 1 1 2 0 0 36 0 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
48 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 1 2 0 0 36 0 2 2 15 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
48 1 4 3 11 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = two;
unicode = 0032;
},
{
glyphname = three;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"614.333 1447 OFFCURVE",
"503.333 1412 OFFCURVE",
"414 1344 CURVE SMOOTH",
"324.667 1276 OFFCURVE",
"256.333 1175.667 OFFCURVE",
"223 1045 CURVE",
"311 1030 LINE SMOOTH",
"317.667 1028.667 OFFCURVE",
"325.333 1028 OFFCURVE",
"332 1028 CURVE SMOOTH",
"364 1028 OFFCURVE",
"387.333 1042.333 OFFCURVE",
"402 1081 CURVE SMOOTH",
"452.667 1215.667 OFFCURVE",
"558 1300 OFFCURVE",
"710 1300 CURVE SMOOTH",
"846.3 1300 OFFCURVE",
"940 1227.491 OFFCURVE",
"940 1088 CURVE SMOOTH",
"940 909.333 OFFCURVE",
"817.333 800.333 OFFCURVE",
"564 795 CURVE",
"548 672 LINE",
"684 672 OFFCURVE",
"769 647.833 OFFCURVE",
"821 608.5 CURVE SMOOTH",
"873 569.167 OFFCURVE",
"890 514 OFFCURVE",
"890 450 CURVE SMOOTH",
"890 371.333 OFFCURVE",
"858.5 292 OFFCURVE",
"800.5 232 CURVE SMOOTH",
"742.5 172 OFFCURVE",
"656.333 131 OFFCURVE",
"547 131 CURVE SMOOTH",
"377.906 131 OFFCURVE",
"307.365 205.802 OFFCURVE",
"264 363 CURVE SMOOTH",
"257.333 384.333 OFFCURVE",
"238.333 395 OFFCURVE",
"213 395 CURVE SMOOTH",
"201 395 OFFCURVE",
"187.667 392.333 OFFCURVE",
"173 387 CURVE SMOOTH",
"93 357 LINE",
"114.333 230.333 OFFCURVE",
"157.333 137.333 OFFCURVE",
"228 76 CURVE SMOOTH",
"298.667 14.667 OFFCURVE",
"397.667 -16 OFFCURVE",
"531 -16 CURVE SMOOTH",
"672.333 -16 OFFCURVE",
"805.667 29.5 OFFCURVE",
"903 111.5 CURVE SMOOTH",
"1000.333 193.5 OFFCURVE",
"1062 310 OFFCURVE",
"1062 454 CURVE SMOOTH",
"1062 603.333 OFFCURVE",
"979.667 709.333 OFFCURVE",
"817 756 CURVE",
"906.333 780 OFFCURVE",
"980.167 818 OFFCURVE",
"1031.5 878 CURVE SMOOTH",
"1082.833 938 OFFCURVE",
"1112 1017.667 OFFCURVE",
"1112 1123 CURVE SMOOTH",
"1112 1220.333 OFFCURVE",
"1074.333 1301.833 OFFCURVE",
"1009 1358.5 CURVE SMOOTH",
"943.667 1415.167 OFFCURVE",
"849 1447 OFFCURVE",
"737 1447 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 60 58 54 52 46 45 44 43 35 33 27 25 19 17 0 67 1 67 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
63 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 0 5 0 4 2 5 4 1 0 38 0 6 6 0 1 0 36 8 1 0 0 17 31 0 3 3 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
63 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 3 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
63 1 7 6 10 1 4 5 23 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = three;
unicode = 0033;
},
{
glyphname = four;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1022 1433 LINE",
"856 1433 LINE",
"45 505 LINE",
"51 418 LINE",
"53.667 395.333 OFFCURVE",
"80.333 379 OFFCURVE",
"107 379 CURVE SMOOTH",
"737 379 LINE",
"690 0 LINE",
"846 0 LINE",
"892 379 LINE",
"1069 379 LINE SMOOTH",
"1095.667 379 OFFCURVE",
"1109.333 396 OFFCURVE",
"1112 416 CURVE SMOOTH",
"1126 514 LINE",
"909 514 LINE"
);
},
{
closed = 1;
nodes = (
"753 514 LINE",
"235 514 LINE",
"850 1225 LINE",
"839.333 1186.333 OFFCURVE",
"830.667 1149 OFFCURVE",
"828 1117 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
22 21 16 15 11 9 8 7 6 4 1 0 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
14 13 2 1 0 1 30 5 1 0 3 1 1 2 0 1 1 2 38 0 4 4 11 31 0 2 2 12 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
14 13 2 1 0 1 30 0 4 0 4 52 5 1 0 3 1 1 2 0 1 1 2 38 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
14 13 2 1 0 1 30 0 4 0 4 52 0 2 1 2 53 5 1 0 1 1 0 0 0 35 5 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
14 13 2 3 5 1 30 0 4 0 4 52 0 2 1 2 53 0 0 5 1 0 0 0 35 0 5 0 3 1 5 3 1 0 38 0 0 0 1 1 2 36 0 1 0 1 1 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = four;
unicode = 0034;
},
{
glyphname = five;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1094 1433 LINE",
"418 1433 LINE",
"221 765 LINE",
"324 734 LINE",
"414.667 758 OFFCURVE",
"490.333 769 OFFCURVE",
"557 769 CURVE SMOOTH",
"657 769 OFFCURVE",
"730 744.167 OFFCURVE",
"778 699.5 CURVE SMOOTH",
"826 654.833 OFFCURVE",
"850 592 OFFCURVE",
"850 516 CURVE SMOOTH",
"850 401.333 OFFCURVE",
"811.667 305.833 OFFCURVE",
"745 238.5 CURVE SMOOTH",
"678.333 171.167 OFFCURVE",
"583.667 132 OFFCURVE",
"473 132 CURVE SMOOTH",
"383.667 132 OFFCURVE",
"322.167 156.833 OFFCURVE",
"277.5 181.5 CURVE SMOOTH",
"243.163 200.462 OFFCURVE",
"200.303 231 OFFCURVE",
"178 231 CURVE SMOOTH",
"159.333 231 OFFCURVE",
"143 223 OFFCURVE",
"129 207 CURVE SMOOTH",
"68 133 LINE",
"154.553 46.447 OFFCURVE",
"287.594 -16 OFFCURVE",
"446 -16 CURVE SMOOTH",
"602 -16 OFFCURVE",
"747.667 39 OFFCURVE",
"853 135 CURVE SMOOTH",
"958.333 231 OFFCURVE",
"1025 370 OFFCURVE",
"1025 538 CURVE SMOOTH",
"1025 646 OFFCURVE",
"990.5 739.333 OFFCURVE",
"920.5 806 CURVE SMOOTH",
"850.5 872.667 OFFCURVE",
"746 913 OFFCURVE",
"606 913 CURVE SMOOTH",
"544.667 913 OFFCURVE",
"477 905 OFFCURVE",
"403 889 CURVE",
"518 1274 LINE",
"973 1274 LINE SMOOTH",
"1046.333 1274 OFFCURVE",
"1077.333 1309 OFFCURVE",
"1084 1357 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
46 45 41 39 31 29 26 24 18 16 8 6 4 2 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
5 1 5 1 44 43 2 3 5 22 1 4 3 3 30 0 3 5 4 5 3 4 50 0 1 0 5 3 1 5 1 0 38 0 0 0 6 0 0 36 0 6 6 11 31 0 4 4 2 1 0 36 0 2 2 18 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
5 1 5 1 44 43 2 3 5 22 1 4 3 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 4 2 1 0 36 0 2 2 21 2 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
5 1 5 1 44 43 2 3 5 22 1 4 3 3 30 0 3 5 4 5 3 4 50 0 6 0 0 1 6 0 1 0 38 0 1 0 5 3 1 5 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = five;
unicode = 0035;
},
{
glyphname = six;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"598.333 876 OFFCURVE",
"510.333 847 OFFCURVE",
"437 799 CURVE",
"461.667 828.333 OFFCURVE",
"489.333 860 OFFCURVE",
"520 894 CURVE SMOOTH",
"1012 1431 LINE",
"859 1431 LINE SMOOTH",
"819 1431 OFFCURVE",
"783 1412.667 OFFCURVE",
"763 1390 CURVE SMOOTH",
"336 899 LINE SMOOTH",
"256 807 OFFCURVE",
"198.5 725.167 OFFCURVE",
"160.5 644.5 CURVE SMOOTH",
"122.5 563.833 OFFCURVE",
"104 485.667 OFFCURVE",
"104 403 CURVE SMOOTH",
"104 276.333 OFFCURVE",
"143 172.333 OFFCURVE",
"215 99 CURVE SMOOTH",
"287 25.667 OFFCURVE",
"390.333 -16 OFFCURVE",
"521 -16 CURVE SMOOTH",
"678.333 -16 OFFCURVE",
"815.333 40.667 OFFCURVE",
"914 134 CURVE SMOOTH",
"1012.667 227.333 OFFCURVE",
"1072 357 OFFCURVE",
"1072 505 CURVE SMOOTH",
"1072 621 OFFCURVE",
"1030.833 714 OFFCURVE",
"963.5 778 CURVE SMOOTH",
"896.167 842 OFFCURVE",
"802.333 876 OFFCURVE",
"697 876 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"267 490.333 OFFCURVE",
"304.333 577.167 OFFCURVE",
"367 640.5 CURVE SMOOTH",
"429.667 703.833 OFFCURVE",
"519.667 744 OFFCURVE",
"625 744 CURVE SMOOTH",
"790.13 744 OFFCURVE",
"898 641.996 OFFCURVE",
"898 478 CURVE SMOOTH",
"898 376.667 OFFCURVE",
"860.167 289.667 OFFCURVE",
"795.5 227 CURVE SMOOTH",
"730.833 164.333 OFFCURVE",
"640.333 127 OFFCURVE",
"535 127 CURVE SMOOTH",
"367.823 127 OFFCURVE",
"267 236.44 OFFCURVE",
"267 397 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 47 45 37 35 25 23 11 9 0 30 1 30 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
28 1 4 0 1 30 5 1 0 0 4 3 0 4 1 0 38 0 2 2 11 31 0 3 3 1 1 0 36 0 1 1 18 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
28 1 4 0 1 30 0 2 0 2 52 5 1 0 0 4 3 0 4 1 0 38 0 3 3 1 1 0 36 0 1 1 21 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
28 1 4 0 1 30 0 2 0 2 52 5 1 0 0 4 3 0 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = six;
unicode = 0036;
},
{
glyphname = seven;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"229 1433 LINE",
"214 1316 LINE",
"214 1312 LINE SMOOTH",
"214 1290.667 OFFCURVE",
"229.333 1274 OFFCURVE",
"252 1274 CURVE SMOOTH",
"1005 1274 LINE",
"979.667 1248.667 OFFCURVE",
"960 1222 OFFCURVE",
"940 1190 CURVE SMOOTH",
"187 0 LINE",
"329 0 LINE SMOOTH",
"359.667 0 OFFCURVE",
"387.333 20 OFFCURVE",
"402 44 CURVE SMOOTH",
"1168 1281 LINE SMOOTH",
"1180 1299.667 OFFCURVE",
"1189 1331.667 OFFCURVE",
"1193 1365 CURVE SMOOTH",
"1200 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
0 0 0 19 0 19 15 13 9 7 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
18 1 1 2 1 30 0 1 1 2 0 0 36 3 1 2 2 11 31 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
18 1 1 2 1 30 3 1 2 0 1 0 2 1 1 0 38 0 0 0 15 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 36 values pushed */
18 1 1 2 1 30 0 0 1 0 53 3 1 2 1 1 2 0 0 35 3 1 2 2 1 1 0 36 0 1 2 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = seven;
unicode = 0037;
},
{
glyphname = eight;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"671.333 -16 OFFCURVE",
"805.167 27.167 OFFCURVE",
"900.5 106.5 CURVE SMOOTH",
"995.833 185.833 OFFCURVE",
"1053 299 OFFCURVE",
"1053 439 CURVE SMOOTH",
"1053 595 OFFCURVE",
"967.667 698.333 OFFCURVE",
"813 745 CURVE",
"991.667 805 OFFCURVE",
"1086 936.333 OFFCURVE",
"1086 1111 CURVE SMOOTH",
"1086 1204.333 OFFCURVE",
"1048.833 1288.833 OFFCURVE",
"981.5 1349.5 CURVE SMOOTH",
"914.167 1410.167 OFFCURVE",
"817 1447 OFFCURVE",
"697 1447 CURVE SMOOTH",
"557 1447 OFFCURVE",
"437.167 1401.833 OFFCURVE",
"352.5 1326.5 CURVE SMOOTH",
"267.833 1251.167 OFFCURVE",
"217 1146.333 OFFCURVE",
"217 1029 CURVE SMOOTH",
"217 898.333 OFFCURVE",
"281.667 797.667 OFFCURVE",
"411 747 CURVE",
"203 692.333 OFFCURVE",
"82 557.667 OFFCURVE",
"82 343 CURVE SMOOTH",
"82 235 OFFCURVE",
"125 144.667 OFFCURVE",
"201 82 CURVE SMOOTH",
"277 19.333 OFFCURVE",
"386 -16 OFFCURVE",
"518 -16 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"367.366 121 OFFCURVE",
"263 213.819 OFFCURVE",
"263 359 CURVE SMOOTH",
"263 469.667 OFFCURVE",
"304.167 548.333 OFFCURVE",
"367.5 599 CURVE SMOOTH",
"430.833 649.667 OFFCURVE",
"515 673 OFFCURVE",
"603 673 CURVE SMOOTH",
"753.611 673 OFFCURVE",
"876 598.242 OFFCURVE",
"876 435 CURVE SMOOTH",
"876 341.667 OFFCURVE",
"843 262.667 OFFCURVE",
"783 208 CURVE SMOOTH",
"723 153.333 OFFCURVE",
"638 121 OFFCURVE",
"534 121 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"461.516 811 OFFCURVE",
"384 907.128 OFFCURVE",
"384 1032 CURVE SMOOTH",
"384 1109.333 OFFCURVE",
"410.333 1181.333 OFFCURVE",
"461 1232 CURVE SMOOTH",
"511.667 1282.667 OFFCURVE",
"586 1315 OFFCURVE",
"682 1315 CURVE SMOOTH",
"830.991 1315 OFFCURVE",
"916 1225.378 OFFCURVE",
"916 1099 CURVE SMOOTH",
"916 1031 OFFCURVE",
"895.833 959.833 OFFCURVE",
"848.5 904.5 CURVE SMOOTH",
"801.167 849.167 OFFCURVE",
"727 811 OFFCURVE",
"619 811 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
53 52 33 32 1 0 63 61 52 71 53 71 43 41 32 51 33 51 17 15 0 31 1 31 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
24 8 2 3 4 1 30 8 1 4 0 3 2 4 3 1 0 38 0 5 5 1 1 0 36 0 1 1 17 31 7 1 2 2 0 1 0 36 6 1 0 0 18 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
24 8 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 2 0 1 0 36 6 1 0 0 21 0 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
24 8 2 3 4 1 30 0 1 0 5 4 1 5 1 0 38 8 1 4 0 3 2 4 3 1 0 38 7 1 2 0 0 2 1 0 35 7 1 2 2 0 1 0 36 6 1 0 2 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = eight;
unicode = 0038;
},
{
glyphname = nine;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"669 589 OFFCURVE",
"767.667 621 OFFCURVE",
"849 681 CURVE",
"822.333 646.333 OFFCURVE",
"791.667 610.667 OFFCURVE",
"757 572 CURVE SMOOTH",
"252 0 LINE",
"410 0 LINE SMOOTH",
"450 0 OFFCURVE",
"483 17 OFFCURVE",
"503 41 CURVE SMOOTH",
"916 547 LINE SMOOTH",
"988 635 OFFCURVE",
"1044.167 711.333 OFFCURVE",
"1083.5 790 CURVE SMOOTH",
"1122.833 868.667 OFFCURVE",
"1143 950 OFFCURVE",
"1143 1046 CURVE SMOOTH",
"1143 1163.333 OFFCURVE",
"1104.333 1264.333 OFFCURVE",
"1035 1335 CURVE SMOOTH",
"965.667 1405.667 OFFCURVE",
"865.333 1447 OFFCURVE",
"740 1447 CURVE SMOOTH",
"590.667 1447 OFFCURVE",
"457.833 1391.5 OFFCURVE",
"362.5 1301.5 CURVE SMOOTH",
"267.167 1211.5 OFFCURVE",
"209 1086 OFFCURVE",
"209 946 CURVE SMOOTH",
"209 834 OFFCURVE",
"248 744.333 OFFCURVE",
"312 683 CURVE SMOOTH",
"376 621.667 OFFCURVE",
"465 589 OFFCURVE",
"565 589 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"979 961.667 OFFCURVE",
"945.833 880 OFFCURVE",
"886.5 820 CURVE SMOOTH",
"827.167 760 OFFCURVE",
"742.333 722 OFFCURVE",
"637 722 CURVE SMOOTH",
"477 722 OFFCURVE",
"384 813 OFFCURVE",
"384 969 CURVE SMOOTH",
"384 1067.667 OFFCURVE",
"420 1151.167 OFFCURVE",
"480 1210.5 CURVE SMOOTH",
"540 1269.833 OFFCURVE",
"623.667 1305 OFFCURVE",
"721 1305 CURVE SMOOTH",
"875.508 1305 OFFCURVE",
"979 1201.508 OFFCURVE",
"979 1047 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 46 44 38 36 25 23 11 9 0 31 1 31 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
29 1 0 4 1 30 0 4 5 1 0 2 4 0 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
29 1 0 4 1 30 0 1 0 3 4 1 3 1 0 38 0 4 5 1 0 2 4 0 1 0 38 0 2 2 15 2 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
29 1 0 4 1 30 0 2 0 2 53 0 1 0 3 4 1 3 1 0 38 0 4 0 0 4 1 0 35 0 4 4 0 1 0 36 5 1 0 4 0 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = nine;
unicode = 0039;
},
{
glyphname = onesuperior;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"228 900 LINE",
"623 900 LINE",
"634 993 LINE",
"513 993 LINE",
"591 1630 LINE",
"487 1630 LINE",
"242 1441 LINE",
"274 1387 LINE",
"279.333 1379 OFFCURVE",
"289.333 1372 OFFCURVE",
"304 1372 CURVE SMOOTH",
"313.333 1372 OFFCURVE",
"322 1375 OFFCURVE",
"330 1381 CURVE SMOOTH",
"451 1473 LINE",
"441 1429 LINE",
"387 993 LINE",
"240 993 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
16 15 14 13 12 11 7 5 1 0 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
50 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 4 4 0 0 0 36 3 1 0 0 14 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 42 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 3 1 0 4 4 0 0 0 35 3 1 0 0 4 0 2 36 0 4 0 4 0 2 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 47 values pushed */
10 3 2 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 3 0 4 0 3 42 0 0 3 4 0 0 0 35 0 0 0 4 0 2 36 0 4 0 4 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = onesuperior;
unicode = 00B9;
},
{
glyphname = twosuperior;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"346 1636 OFFCURVE",
"240.667 1566.333 OFFCURVE",
"202 1425 CURVE",
"269 1413 LINE SMOOTH",
"275.667 1411.667 OFFCURVE",
"280.667 1411 OFFCURVE",
"286 1411 CURVE SMOOTH",
"308 1411 OFFCURVE",
"323.667 1421 OFFCURVE",
"333 1441 CURVE SMOOTH",
"363.667 1507.667 OFFCURVE",
"407 1534 OFFCURVE",
"463 1534 CURVE SMOOTH",
"519 1534 OFFCURVE",
"559 1501 OFFCURVE",
"559 1441 CURVE SMOOTH",
"559 1360.252 OFFCURVE",
"488.392 1280.406 OFFCURVE",
"411 1213 CURVE SMOOTH",
"161 993 LINE SMOOTH",
"143.667 978.333 OFFCURVE",
"136.667 958 OFFCURVE",
"134 942 CURVE",
"129 900 LINE",
"638 900 LINE",
"639.333 909.333 OFFCURVE",
"640.667 919 OFFCURVE",
"642 929 CURVE SMOOTH",
"644.667 945 OFFCURVE",
"646 966.333 OFFCURVE",
"646 981 CURVE SMOOTH",
"646 1001 OFFCURVE",
"633 1014 OFFCURVE",
"609 1014 CURVE SMOOTH",
"407 1014 LINE SMOOTH",
"379 1014 OFFCURVE",
"348.333 1009.333 OFFCURVE",
"315 1000 CURVE",
"514 1181 LINE SMOOTH",
"605.368 1264.306 OFFCURVE",
"687 1336.666 OFFCURVE",
"687 1453 CURVE SMOOTH",
"687 1563.667 OFFCURVE",
"610 1636 OFFCURVE",
"482 1636 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 16 values pushed */
1 0 40 38 35 33 21 20 13 10 0 45 1 45 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
43 1 4 3 9 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 2 2 1 1 0 36 0 1 1 14 2 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 52 values pushed */
43 1 4 3 9 1 2 1 2 30 0 4 3 1 3 4 1 50 5 1 0 0 3 4 0 3 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 0 0 36 0 2 1 2 0 0 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = twosuperior;
unicode = 00B2;
},
{
glyphname = threesuperior;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"369.706 1636 OFFCURVE",
"264.587 1560.896 OFFCURVE",
"228 1425 CURVE",
"292 1413 LINE SMOOTH",
"298.667 1411.667 OFFCURVE",
"303.667 1411 OFFCURVE",
"309 1411 CURVE SMOOTH",
"328.333 1411 OFFCURVE",
"342.667 1421.333 OFFCURVE",
"352 1442 CURVE SMOOTH",
"378.667 1499.333 OFFCURVE",
"416.333 1531 OFFCURVE",
"483 1531 CURVE SMOOTH",
"541.667 1531 OFFCURVE",
"580 1500.667 OFFCURVE",
"580 1442 CURVE SMOOTH",
"580 1359.333 OFFCURVE",
"527.333 1319.667 OFFCURVE",
"406 1317 CURVE",
"395 1228 LINE",
"509.667 1228 OFFCURVE",
"551 1195.333 OFFCURVE",
"551 1130 CURVE SMOOTH",
"551 1056.722 OFFCURVE",
"492.545 997 OFFCURVE",
"407 997 CURVE SMOOTH",
"327.8 997 OFFCURVE",
"300.999 1042.005 OFFCURVE",
"287 1091 CURVE",
"281.667 1106.333 OFFCURVE",
"269.667 1114 OFFCURVE",
"251 1114 CURVE SMOOTH",
"242.333 1114 OFFCURVE",
"233 1112 OFFCURVE",
"223 1108 CURVE SMOOTH",
"165 1084 LINE",
"189.738 954.812 OFFCURVE",
"256.252 892 OFFCURVE",
"400 892 CURVE SMOOTH",
"544.675 892 OFFCURVE",
"678 985.956 OFFCURVE",
"678 1141 CURVE SMOOTH",
"678 1214.333 OFFCURVE",
"641 1259.333 OFFCURVE",
"565 1282 CURVE",
"657.667 1312 OFFCURVE",
"704 1373.667 OFFCURVE",
"704 1467 CURVE SMOOTH",
"704 1566.933 OFFCURVE",
"621.11 1636 OFFCURVE",
"502 1636 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
1 0 51 49 46 44 40 39 38 37 31 29 24 22 16 14 0 58 1 58 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
62 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
54 1 7 6 7 1 4 5 20 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 1 1 3 1 0 36 0 3 3 14 1 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
54 1 7 6 7 1 4 5 20 1 3 2 3 30 0 7 6 5 6 7 5 50 0 2 4 3 4 2 3 50 8 1 0 0 6 7 0 6 1 0 38 0 5 0 4 2 5 4 1 0 38 0 3 1 1 3 1 0 35 0 3 3 1 1 0 36 0 1 3 1 1 0 33 8 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 664;
}
);
note = threesuperior;
unicode = 00B3;
},
{
glyphname = fraction;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"867 1431 LINE",
"796 1431 LINE SMOOTH",
"752 1431 OFFCURVE",
"720.667 1409.667 OFFCURVE",
"694 1371 CURVE SMOOTH",
"-230 0 LINE",
"-160 0 LINE SMOOTH",
"-121.333 0 OFFCURVE",
"-91 10.333 OFFCURVE",
"-63 53 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
9 7 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 1 11 31 0 0 0 12 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 52 0 0 0 15 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 577;
}
);
note = fraction;
unicode = 2044;
},
{
glyphname = onehalf;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1333 1431 LINE",
"1262 1431 LINE SMOOTH",
"1218 1431 OFFCURVE",
"1186.667 1409.667 OFFCURVE",
"1160 1371 CURVE SMOOTH",
"236 0 LINE",
"306 0 LINE SMOOTH",
"344.667 0 OFFCURVE",
"375 10.333 OFFCURVE",
"403 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1031 736 OFFCURVE",
"925.667 666.333 OFFCURVE",
"887 525 CURVE",
"930 517 LINE SMOOTH",
"945.333 514.333 OFFCURVE",
"955.167 512.833 OFFCURVE",
"959.5 512.5 CURVE SMOOTH",
"963.833 512.167 OFFCURVE",
"967.333 512 OFFCURVE",
"970 512 CURVE SMOOTH",
"992.667 512 OFFCURVE",
"1006 519.667 OFFCURVE",
"1018 541 CURVE SMOOTH",
"1047.333 595.667 OFFCURVE",
"1085.333 634 OFFCURVE",
"1148 634 CURVE SMOOTH",
"1204 634 OFFCURVE",
"1244 601 OFFCURVE",
"1244 541 CURVE SMOOTH",
"1244 460.252 OFFCURVE",
"1173.392 380.406 OFFCURVE",
"1096 313 CURVE SMOOTH",
"846 93 LINE SMOOTH",
"828.667 78.333 OFFCURVE",
"821.667 58 OFFCURVE",
"819 42 CURVE",
"814 0 LINE",
"1323 0 LINE",
"1329 56 LINE SMOOTH",
"1330.333 66.667 OFFCURVE",
"1331 73.167 OFFCURVE",
"1331 75.5 CURVE SMOOTH",
"1331 77.833 OFFCURVE",
"1331 79.667 OFFCURVE",
"1331 81 CURVE SMOOTH",
"1331 101 OFFCURVE",
"1318 114 OFFCURVE",
"1294 114 CURVE SMOOTH",
"1092 114 LINE SMOOTH",
"1064 114 OFFCURVE",
"1033.333 109.333 OFFCURVE",
"1000 100 CURVE",
"1187 270 LINE SMOOTH",
"1281.905 356.996 OFFCURVE",
"1372 431.3 OFFCURVE",
"1372 553 CURVE SMOOTH",
"1372 663.667 OFFCURVE",
"1295 736 OFFCURVE",
"1167 736 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"201 703 LINE",
"596 703 LINE",
"607 796 LINE",
"486 796 LINE",
"564 1433 LINE",
"460 1433 LINE",
"215 1244 LINE",
"247 1190 LINE",
"252.333 1182 OFFCURVE",
"262.333 1175 OFFCURVE",
"277 1175 CURVE SMOOTH",
"286.333 1175 OFFCURVE",
"295 1178 OFFCURVE",
"303 1184 CURVE SMOOTH",
"424 1276 LINE",
"414 1232 LINE",
"360 796 LINE",
"213 796 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
11 10 72 71 70 69 68 67 63 61 57 56 50 48 44 42 30 29 23 20 10 55 11 55 9 7 4 2 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
66 59 2 8 1 53 1 6 5 19 1 0 3 3 30 0 8 1 7 1 8 7 50 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 9 1 1 1 11 31 0 3 3 0 1 2 36 4 1 0 0 12 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 71 values pushed */
66 59 2 8 1 53 1 6 5 19 1 0 3 3 30 9 1 1 8 1 52 0 8 7 8 52 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 3 0 1 2 36 4 1 0 0 15 0 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
200 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
66 59 2 8 1 53 1 6 5 19 1 0 3 3 30 9 1 1 8 1 52 0 8 7 8 52 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 2 36 4 1 0 3 0 1 2 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 84 values pushed */
66 59 2 8 1 53 1 6 5 19 1 0 3 3 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 6 5 3 5 6 3 50 10 1 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 0 0 3 1 0 35 0 3 3 0 1 2 36 4 1 0 3 0 1 2 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 94 values pushed */
66 59 2 8 1 53 1 6 5 19 1 4 3 3 30 0 9 1 9 52 0 1 8 1 52 0 8 7 8 52 0 10 7 2 7 10 42 0 6 5 3 5 6 3 50 0 0 4 0 53 0 7 0 11 5 7 11 0 2 38 12 1 2 0 5 6 2 5 1 0 38 0 3 4 4 3 1 0 35 0 3 3 4 0 2 36 0 4 3 4 0 2 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = onehalf;
unicode = 00BD;
},
{
glyphname = onequarter;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1333 728 LINE",
"1214 728 LINE",
"812 267 LINE",
"816 205 LINE SMOOTH",
"817.333 189 OFFCURVE",
"830.333 177 OFFCURVE",
"853 177 CURVE SMOOTH",
"1160 177 LINE",
"1138 0 LINE",
"1244 0 LINE",
"1265 177 LINE",
"1350 177 LINE SMOOTH",
"1367.333 177 OFFCURVE",
"1376.333 188.333 OFFCURVE",
"1379 203 CURVE",
"1387 276 LINE",
"1277 276 LINE"
);
},
{
closed = 1;
nodes = (
"1371 1431 LINE",
"1300 1431 LINE SMOOTH",
"1256 1431 OFFCURVE",
"1224.667 1409.667 OFFCURVE",
"1198 1371 CURVE SMOOTH",
"274 0 LINE",
"344 0 LINE SMOOTH",
"382.667 0 OFFCURVE",
"413 10.333 OFFCURVE",
"441 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"196 703 LINE",
"591 703 LINE",
"602 796 LINE",
"481 796 LINE",
"559 1433 LINE",
"455 1433 LINE",
"210 1244 LINE",
"242 1190 LINE",
"247.333 1182 OFFCURVE",
"257.333 1175 OFFCURVE",
"272 1175 CURVE SMOOTH",
"280 1175 OFFCURVE",
"288.667 1178 OFFCURVE",
"298 1184 CURVE",
"419 1276 LINE",
"409 1232 LINE",
"355 796 LINE",
"208 796 LINE"
);
},
{
closed = 1;
nodes = (
"1172 276 LINE",
"940 276 LINE",
"1218 601 LINE",
"1210 569 OFFCURVE",
"1204.667 539.333 OFFCURVE",
"1202 514 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 28 values pushed */
49 48 43 42 41 40 39 38 34 32 28 27 26 24 21 19 16 15 11 9 8 7 6 4 1 0 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
37 30 2 8 6 47 1 0 11 14 13 2 1 0 3 30 0 8 6 7 6 8 7 50 0 4 7 11 7 4 11 50 10 1 7 0 11 0 7 11 0 2 38 12 1 0 3 1 1 2 0 1 1 2 38 9 1 6 6 11 31 5 1 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
37 30 2 8 6 47 1 0 11 14 13 2 1 0 3 30 9 1 6 8 6 52 0 8 7 8 52 0 4 7 11 7 4 11 50 10 1 7 0 11 0 7 11 0 2 38 12 1 0 3 1 1 2 0 1 1 2 38 5 1 2 2 15 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
200 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 78 values pushed */
37 30 2 8 6 47 1 0 11 14 13 2 1 0 3 30 9 1 6 8 6 52 0 8 7 8 52 0 4 7 11 7 4 11 50 5 1 2 1 2 53 10 1 7 0 11 0 7 11 0 2 38 12 1 0 1 1 0 0 0 35 12 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 82 values pushed */
37 30 2 8 6 47 1 0 11 14 13 2 1 0 3 30 0 9 6 9 52 0 6 8 6 52 0 8 7 8 52 0 4 7 11 7 4 11 50 5 1 2 1 2 53 10 1 7 0 11 0 7 11 0 2 38 12 1 0 1 1 0 0 0 35 12 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 10 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 100 values pushed */
37 30 2 8 6 47 1 0 11 14 13 2 3 12 3 30 0 9 6 9 52 0 6 8 6 52 0 8 7 8 52 0 10 7 4 7 10 42 0 4 11 7 4 11 48 0 5 1 2 1 5 2 50 0 2 2 51 0 7 0 11 0 7 11 0 2 38 0 0 12 1 0 0 0 35 0 12 0 3 1 12 3 1 0 38 0 0 0 1 1 2 36 0 1 0 1 1 2 33 13 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = onequarter;
unicode = 00BC;
},
{
glyphname = threequarters;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1348 728 LINE",
"1229 728 LINE",
"827 267 LINE",
"831 205 LINE SMOOTH",
"832.333 189 OFFCURVE",
"845.333 177 OFFCURVE",
"868 177 CURVE SMOOTH",
"1175 177 LINE",
"1153 0 LINE",
"1259 0 LINE",
"1280 177 LINE",
"1365 177 LINE SMOOTH",
"1382.333 177 OFFCURVE",
"1391.333 188.333 OFFCURVE",
"1394 203 CURVE",
"1402 276 LINE",
"1292 276 LINE"
);
},
{
closed = 1;
nodes = (
"1391 1431 LINE",
"1320 1431 LINE SMOOTH",
"1276 1431 OFFCURVE",
"1244.667 1409.667 OFFCURVE",
"1218 1371 CURVE SMOOTH",
"294 0 LINE",
"364 0 LINE SMOOTH",
"402.667 0 OFFCURVE",
"433 10.333 OFFCURVE",
"461 53 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"351.706 1439 OFFCURVE",
"246.587 1363.896 OFFCURVE",
"210 1228 CURVE",
"259 1219 LINE SMOOTH",
"269.667 1217 OFFCURVE",
"276.833 1215.833 OFFCURVE",
"280.5 1215.5 CURVE SMOOTH",
"284.167 1215.167 OFFCURVE",
"287.333 1215 OFFCURVE",
"290 1215 CURVE SMOOTH",
"308.667 1215 OFFCURVE",
"325.333 1222.333 OFFCURVE",
"336 1249 CURVE SMOOTH",
"356 1298.333 OFFCURVE",
"398.333 1334 OFFCURVE",
"465 1334 CURVE SMOOTH",
"523.667 1334 OFFCURVE",
"562 1303.667 OFFCURVE",
"562 1245 CURVE SMOOTH",
"562 1162.333 OFFCURVE",
"509.333 1122.667 OFFCURVE",
"388 1120 CURVE",
"377 1031 LINE",
"491.667 1031 OFFCURVE",
"533 998.333 OFFCURVE",
"533 933 CURVE SMOOTH",
"533 859.722 OFFCURVE",
"474.545 800 OFFCURVE",
"389 800 CURVE SMOOTH",
"317 800 OFFCURVE",
"287.667 835.333 OFFCURVE",
"269 894 CURVE SMOOTH",
"263.667 909.333 OFFCURVE",
"251.667 917 OFFCURVE",
"233 917 CURVE SMOOTH",
"224.333 917 OFFCURVE",
"215 915 OFFCURVE",
"205 911 CURVE SMOOTH",
"147 887 LINE",
"171.738 757.812 OFFCURVE",
"238.252 695 OFFCURVE",
"382 695 CURVE SMOOTH",
"526.675 695 OFFCURVE",
"660 788.956 OFFCURVE",
"660 944 CURVE SMOOTH",
"660 1017.333 OFFCURVE",
"623 1062.333 OFFCURVE",
"547 1085 CURVE",
"639.667 1115 OFFCURVE",
"686 1176.667 OFFCURVE",
"686 1270 CURVE SMOOTH",
"686 1369.933 OFFCURVE",
"603.11 1439 OFFCURVE",
"484 1439 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1187 276 LINE",
"955 276 LINE",
"1233 601 LINE",
"1225 569 OFFCURVE",
"1219.667 539.333 OFFCURVE",
"1217 514 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
28 27 90 89 77 75 71 69 65 64 63 62 56 54 51 49 43 41 27 84 28 84 26 24 21 19 16 15 11 9 8 7 6 4 1 0 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
60 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 101 values pushed */
80 1 14 13 34 1 11 12 47 1 10 9 88 1 0 8 14 13 2 1 0 5 30 0 14 13 12 13 14 12 50 0 9 11 10 11 9 10 50 0 4 10 8 10 4 8 50 0 12 0 11 9 12 11 1 0 38 0 10 0 8 0 10 8 1 0 38 15 1 0 3 1 1 2 0 1 1 2 38 0 13 13 6 1 0 36 16 7 2 6 6 11 31 5 1 2 2 12 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 105 values pushed */
80 1 14 13 34 1 11 12 47 1 10 9 88 1 0 8 14 13 2 1 0 5 30 0 14 13 12 13 14 12 50 0 9 11 10 11 9 10 50 0 4 10 8 10 4 8 50 0 12 0 11 9 12 11 1 0 38 0 10 0 8 0 10 8 1 0 38 15 1 0 3 1 1 2 0 1 1 2 38 0 6 6 11 31 0 13 13 7 1 0 36 16 1 7 7 11 31 5 1 2 2 12 2 32 11 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 106 values pushed */
80 1 14 13 34 1 11 12 47 1 10 9 88 1 0 8 14 13 2 1 0 5 30 0 6 7 13 7 6 13 50 0 14 13 12 13 14 12 50 0 9 11 10 11 9 10 50 0 4 10 8 10 4 8 50 16 1 7 0 13 14 7 13 1 0 38 0 12 0 11 9 12 11 1 0 38 0 10 0 8 0 10 8 1 0 38 15 1 0 3 1 1 2 0 1 1 2 38 5 1 2 2 15 2 32 10 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 118 values pushed */
80 1 14 13 34 1 11 12 47 1 10 9 88 1 0 8 14 13 2 1 0 5 30 0 6 7 13 7 6 13 50 0 14 13 12 13 14 12 50 0 9 11 10 11 9 10 50 0 4 10 8 10 4 8 50 5 1 2 1 2 53 16 1 7 0 13 14 7 13 1 0 38 0 12 0 11 9 12 11 1 0 38 0 10 0 8 0 10 8 1 0 38 15 1 0 1 1 0 0 0 35 15 1 0 0 1 1 2 36 3 1 1 0 1 1 2 33 12 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 131 values pushed */
80 1 14 13 34 1 11 12 47 1 10 9 88 1 0 8 14 13 2 3 15 5 30 0 6 7 13 7 6 13 50 0 14 13 12 13 14 12 50 0 9 11 10 11 9 10 50 0 4 10 8 10 4 8 50 0 5 1 2 1 5 2 50 0 2 2 51 16 1 7 0 13 14 7 13 1 0 38 0 12 0 11 9 12 11 1 0 38 0 10 0 8 0 10 8 1 0 38 0 0 15 1 0 0 0 35 0 15 0 3 1 15 3 1 0 38 0 0 0 1 1 2 36 0 1 0 1 1 2 33 14 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1475;
}
);
note = threequarters;
unicode = 00BE;
},
{
glyphname = period;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"45 39.164 OFFCURVE",
"99.164 -15 OFFCURVE",
"170 -15 CURVE SMOOTH",
"238.48 -15 OFFCURVE",
"295 39.41 OFFCURVE",
"295 110 CURVE SMOOTH",
"295 178.637 OFFCURVE",
"238.243 236 OFFCURVE",
"170 236 CURVE SMOOTH",
"99.372 236 OFFCURVE",
"45 178.895 OFFCURVE",
"45 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 21 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 425;
}
);
note = period;
unicode = 002E;
},
{
glyphname = comma;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"50 51 OFFCURVE",
"97.667 0 OFFCURVE",
"167 0 CURVE SMOOTH",
"179 0 LINE",
"169.667 -56 OFFCURVE",
"140 -102.167 OFFCURVE",
"112 -137.5 CURVE SMOOTH",
"88.995 -166.53 OFFCURVE",
"59 -198.011 OFFCURVE",
"59 -214 CURVE SMOOTH",
"59 -224.667 OFFCURVE",
"63.333 -234 OFFCURVE",
"72 -242 CURVE SMOOTH",
"103 -271 LINE",
"217.462 -174.343 OFFCURVE",
"292 -30.748 OFFCURVE",
"292 94 CURVE SMOOTH",
"292 174.079 OFFCURVE",
"247.618 236 OFFCURVE",
"169 236 CURVE SMOOTH",
"97 236 OFFCURVE",
"50 185.667 OFFCURVE",
"50 123 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
23 21 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
13 1 1 27 0 0 0 1 1 0 36 0 1 1 12 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
13 1 1 27 0 0 0 1 1 0 36 0 1 1 15 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 27 values pushed */
13 1 1 27 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 425;
}
);
note = comma;
unicode = 002C;
},
{
glyphname = colon;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"45 39.164 OFFCURVE",
"99.164 -15 OFFCURVE",
"170 -15 CURVE SMOOTH",
"238.48 -15 OFFCURVE",
"295 39.41 OFFCURVE",
"295 110 CURVE SMOOTH",
"295 178.637 OFFCURVE",
"238.243 236 OFFCURVE",
"170 236 CURVE SMOOTH",
"99.372 236 OFFCURVE",
"45 178.895 OFFCURVE",
"45 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"145 789.164 OFFCURVE",
"199.164 735 OFFCURVE",
"270 735 CURVE SMOOTH",
"338.48 735 OFFCURVE",
"395 789.41 OFFCURVE",
"395 860 CURVE SMOOTH",
"395 928.637 OFFCURVE",
"338.243 986 OFFCURVE",
"270 986 CURVE SMOOTH",
"199.372 986 OFFCURVE",
"145 928.895 OFFCURVE",
"145 860 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
36 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 18 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 18 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 21 1 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 425;
}
);
note = colon;
unicode = 003A;
},
{
glyphname = semicolon;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"46 51 OFFCURVE",
"93.667 0 OFFCURVE",
"163 0 CURVE SMOOTH",
"175 0 LINE",
"165.667 -56 OFFCURVE",
"136 -102.167 OFFCURVE",
"108 -137.5 CURVE SMOOTH",
"84.995 -166.53 OFFCURVE",
"55 -198.011 OFFCURVE",
"55 -214 CURVE SMOOTH",
"55 -224.667 OFFCURVE",
"59.333 -234 OFFCURVE",
"68 -242 CURVE SMOOTH",
"99 -271 LINE",
"213.462 -174.343 OFFCURVE",
"288 -30.748 OFFCURVE",
"288 94 CURVE SMOOTH",
"288 174.079 OFFCURVE",
"243.618 236 OFFCURVE",
"165 236 CURVE SMOOTH",
"93 236 OFFCURVE",
"46 185.667 OFFCURVE",
"46 123 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"151 789.164 OFFCURVE",
"205.164 735 OFFCURVE",
"276 735 CURVE SMOOTH",
"344.48 735 OFFCURVE",
"401 789.41 OFFCURVE",
"401 860 CURVE SMOOTH",
"401 928.637 OFFCURVE",
"344.243 986 OFFCURVE",
"276 986 CURVE SMOOTH",
"205.372 986 OFFCURVE",
"151 928.895 OFFCURVE",
"151 860 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
41 39 31 29 23 21 4 2 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
36 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
13 1 1 27 0 3 3 2 1 0 36 0 2 2 14 31 0 0 0 1 1 0 36 0 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
13 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 12 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
13 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 0 1 1 0 36 0 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 37 values pushed */
13 1 1 27 0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 425;
}
);
note = semicolon;
unicode = 003B;
},
{
glyphname = ellipsis;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"45 39.164 OFFCURVE",
"99.164 -15 OFFCURVE",
"170 -15 CURVE SMOOTH",
"238.48 -15 OFFCURVE",
"295 39.41 OFFCURVE",
"295 110 CURVE SMOOTH",
"295 178.637 OFFCURVE",
"238.243 236 OFFCURVE",
"170 236 CURVE SMOOTH",
"99.372 236 OFFCURVE",
"45 178.895 OFFCURVE",
"45 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"559 39.164 OFFCURVE",
"613.164 -15 OFFCURVE",
"684 -15 CURVE SMOOTH",
"752.48 -15 OFFCURVE",
"809 39.41 OFFCURVE",
"809 110 CURVE SMOOTH",
"809 178.637 OFFCURVE",
"752.243 236 OFFCURVE",
"684 236 CURVE SMOOTH",
"613.372 236 OFFCURVE",
"559 178.895 OFFCURVE",
"559 110 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1074 38.865 OFFCURVE",
"1128.328 -15 OFFCURVE",
"1198 -15 CURVE SMOOTH",
"1266.895 -15 OFFCURVE",
"1324 39.372 OFFCURVE",
"1324 110 CURVE SMOOTH",
"1324 179.084 OFFCURVE",
"1267.084 236 OFFCURVE",
"1198 236 CURVE SMOOTH",
"1128.128 236 OFFCURVE",
"1074 179.593 OFFCURVE",
"1074 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 46 44 36 34 26 24 16 14 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 18 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
4 2 2 0 0 1 1 0 36 5 3 2 1 1 21 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
4 2 2 0 1 1 0 1 0 35 4 2 2 0 0 1 1 0 36 5 3 2 1 0 1 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
0 0 2 1 0 1 0 35 0 4 0 5 3 4 5 1 0 38 0 2 0 3 1 2 3 1 0 38 0 0 0 1 1 0 36 0 1 0 1 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1454;
}
);
note = ellipsis;
unicode = 2026;
},
{
glyphname = exclam;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"355 1433 LINE",
"285 859 LINE SMOOTH",
"271.758 759.688 OFFCURVE",
"265.156 611.089 OFFCURVE",
"263 499 CURVE",
"380 499 LINE",
"407.802 619.476 OFFCURVE",
"433.523 750.422 OFFCURVE",
"448 859 CURVE SMOOTH",
"518 1433 LINE"
);
},
{
closed = 1;
nodes = (
"159 38.768 OFFCURVE",
"212.506 -15 OFFCURVE",
"283 -15 CURVE SMOOTH",
"353.418 -15 OFFCURVE",
"408 38.957 OFFCURVE",
"408 110 CURVE SMOOTH",
"408 179.084 OFFCURVE",
"353.22 236 OFFCURVE",
"283 236 CURVE SMOOTH",
"212.741 236 OFFCURVE",
"159 179.283 OFFCURVE",
"159 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 30 28 20 18 0 13 0 13 7 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 0 0 1 0 0 36 4 1 1 1 11 31 0 2 2 3 1 0 36 0 3 3 18 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 2 3 1 0 36 0 3 3 21 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
4 1 1 0 0 2 1 0 0 0 38 0 2 3 3 2 1 0 35 0 2 2 3 1 0 36 0 3 2 3 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 635;
}
);
note = exclam;
unicode = 0021;
},
{
glyphname = exclamdown;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"289 -344 LINE",
"355 198 LINE SMOOTH",
"367.607 292.551 OFFCURVE",
"376.925 451.019 OFFCURVE",
"381 559 CURVE",
"277 559 LINE",
"266.566 504.742 OFFCURVE",
"249.546 418.165 OFFCURVE",
"241.5 371.5 CURVE SMOOTH",
"231.5 313.5 OFFCURVE",
"223 258 OFFCURVE",
"215 198 CURVE SMOOTH",
"148 -344 LINE"
);
},
{
closed = 1;
nodes = (
"243 832.164 OFFCURVE",
"297.164 778 OFFCURVE",
"368 778 CURVE SMOOTH",
"436.48 778 OFFCURVE",
"493 832.41 OFFCURVE",
"493 903 CURVE SMOOTH",
"493 971.637 OFFCURVE",
"436.243 1029 OFFCURVE",
"368 1029 CURVE SMOOTH",
"297.372 1029 OFFCURVE",
"243 971.895 OFFCURVE",
"243 903 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 30 28 20 18 0 13 0 13 7 6 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
0 3 3 2 1 0 36 0 2 2 20 31 0 0 0 1 0 0 36 4 1 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 4 1 1 0 1 0 0 37 0 3 3 2 1 0 36 0 2 2 20 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 4 1 1 0 1 0 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 635;
}
);
note = exclamdown;
unicode = 00A1;
},
{
glyphname = question;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"168 1232 LINE",
"174.667 1217.333 OFFCURVE",
"186 1210 OFFCURVE",
"202 1210 CURVE SMOOTH",
"218.376 1210 OFFCURVE",
"252.975 1239.375 OFFCURVE",
"283.5 1258 CURVE SMOOTH",
"322.833 1282 OFFCURVE",
"376.333 1306 OFFCURVE",
"451 1306 CURVE SMOOTH",
"559 1306 OFFCURVE",
"627 1242 OFFCURVE",
"627 1138 CURVE SMOOTH",
"627 1097.333 OFFCURVE",
"618.833 1061.833 OFFCURVE",
"602.5 1031.5 CURVE SMOOTH",
"569.833 970.833 OFFCURVE",
"519.5 924.333 OFFCURVE",
"461.5 883 CURVE SMOOTH",
"432.5 862.333 OFFCURVE",
"405.333 841.167 OFFCURVE",
"380 819.5 CURVE SMOOTH",
"329.333 776.167 OFFCURVE",
"290 729 OFFCURVE",
"286 665 CURVE SMOOTH",
"275 499 LINE",
"394 499 LINE",
"431 653 LINE SMOOTH",
"437.667 681.667 OFFCURVE",
"451.167 706.667 OFFCURVE",
"471.5 728 CURVE SMOOTH",
"512.167 770.667 OFFCURVE",
"566.5 808.5 OFFCURVE",
"624.5 850.5 CURVE SMOOTH",
"653.5 871.5 OFFCURVE",
"680 896.5 OFFCURVE",
"704 925.5 CURVE SMOOTH",
"752 983.5 OFFCURVE",
"787 1059 OFFCURVE",
"787 1171 CURVE SMOOTH",
"787 1249.667 OFFCURVE",
"758.333 1318.667 OFFCURVE",
"705 1368 CURVE SMOOTH",
"651.667 1417.333 OFFCURVE",
"575.333 1447 OFFCURVE",
"482 1447 CURVE SMOOTH",
"337.862 1447 OFFCURVE",
"224.667 1384.435 OFFCURVE",
"132 1303 CURVE"
);
},
{
closed = 1;
nodes = (
"183 38.768 OFFCURVE",
"236.506 -15 OFFCURVE",
"307 -15 CURVE SMOOTH",
"377.418 -15 OFFCURVE",
"432 38.957 OFFCURVE",
"432 110 CURVE SMOOTH",
"432 179.084 OFFCURVE",
"377.22 236 OFFCURVE",
"307 236 CURVE SMOOTH",
"236.741 236 OFFCURVE",
"183 179.283 OFFCURVE",
"183 110 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
54 52 44 42 36 34 31 29 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 3 2 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 2 2 0 1 0 36 0 0 0 17 31 0 4 4 5 1 0 36 0 5 5 18 5 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
0 1 3 2 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 4 5 1 0 36 0 5 5 21 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 3 2 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 737;
}
);
note = question;
unicode = 003F;
},
{
glyphname = questiondown;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"592 -140 LINE SMOOTH",
"584.667 -126 OFFCURVE",
"573.667 -119 OFFCURVE",
"559 -119 CURVE SMOOTH",
"544.015 -119 OFFCURVE",
"509.052 -148.369 OFFCURVE",
"478 -167 CURVE SMOOTH",
"438 -191 OFFCURVE",
"383.333 -215 OFFCURVE",
"310 -215 CURVE SMOOTH",
"217.789 -215 OFFCURVE",
"147 -150.727 OFFCURVE",
"147 -46 CURVE SMOOTH",
"147 -6.667 OFFCURVE",
"154.833 27.333 OFFCURVE",
"170.5 56 CURVE SMOOTH",
"201.833 113.333 OFFCURVE",
"250.167 156.667 OFFCURVE",
"305.5 194 CURVE SMOOTH",
"333.167 212.667 OFFCURVE",
"359 231.667 OFFCURVE",
"383 251 CURVE SMOOTH",
"431 289.667 OFFCURVE",
"467 331 OFFCURVE",
"471 391 CURVE SMOOTH",
"480 559 LINE",
"363 559 LINE",
"327 404 LINE SMOOTH",
"321 380 OFFCURVE",
"308.333 359 OFFCURVE",
"289 341 CURVE SMOOTH",
"256.299 310.554 OFFCURVE",
"185.173 263.188 OFFCURVE",
"138.5 231 CURVE SMOOTH",
"109.5 211 OFFCURVE",
"82.833 187.167 OFFCURVE",
"58.5 159.5 CURVE SMOOTH",
"9.833 104.167 OFFCURVE",
"-25 30 OFFCURVE",
"-25 -78 CURVE SMOOTH",
"-25 -250.137 OFFCURVE",
"99.278 -357 OFFCURVE",
"279 -357 CURVE SMOOTH",
"419.695 -357 OFFCURVE",
"538.246 -292.754 OFFCURVE",
"629 -213 CURVE"
);
},
{
closed = 1;
nodes = (
"335 831.768 OFFCURVE",
"388.506 778 OFFCURVE",
"459 778 CURVE SMOOTH",
"529.418 778 OFFCURVE",
"584 831.957 OFFCURVE",
"584 903 CURVE SMOOTH",
"584 972.084 OFFCURVE",
"529.22 1029 OFFCURVE",
"459 1029 CURVE SMOOTH",
"388.741 1029 OFFCURVE",
"335 972.283 OFFCURVE",
"335 903 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 46 44 38 36 33 31 19 18 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 47 values pushed */
0 1 2 3 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 5 5 4 1 0 36 0 4 4 20 31 0 2 2 0 1 0 36 0 0 0 22 0 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 2 3 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 2 0 0 2 0 1 0 37 0 5 5 4 1 0 36 0 4 4 20 5 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 54 values pushed */
0 1 2 3 1 30 0 1 5 3 5 1 3 50 0 3 2 5 3 2 48 0 4 0 5 1 4 5 1 0 38 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 0 0 2 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 737;
}
);
note = questiondown;
unicode = 00BF;
},
{
glyphname = periodcentered;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"148 511.668 OFFCURVE",
"214.668 445 OFFCURVE",
"296 445 CURVE SMOOTH",
"377.944 445 OFFCURVE",
"446 511.15 OFFCURVE",
"446 593 CURVE SMOOTH",
"446 676.117 OFFCURVE",
"378.817 744 OFFCURVE",
"296 744 CURVE SMOOTH",
"213.338 744 OFFCURVE",
"148 675.37 OFFCURVE",
"148 593 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 547;
}
);
note = periodcentered;
unicode = 00B7;
},
{
glyphname = bullet;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"231 492.333 OFFCURVE",
"272.167 399.667 OFFCURVE",
"339.5 333 CURVE SMOOTH",
"406.833 266.333 OFFCURVE",
"498.667 224 OFFCURVE",
"600 224 CURVE SMOOTH",
"702.667 224 OFFCURVE",
"796.167 266.333 OFFCURVE",
"863.5 333 CURVE SMOOTH",
"930.833 399.667 OFFCURVE",
"973 492.333 OFFCURVE",
"973 595 CURVE SMOOTH",
"973 697.667 OFFCURVE",
"930.833 791.167 OFFCURVE",
"863.5 858.5 CURVE SMOOTH",
"796.167 925.833 OFFCURVE",
"702.667 968 OFFCURVE",
"600 968 CURVE SMOOTH",
"498.667 968 OFFCURVE",
"406.833 925.833 OFFCURVE",
"339.5 858.5 CURVE SMOOTH",
"272.167 791.167 OFFCURVE",
"231 697.667 OFFCURVE",
"231 595 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
23 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 1 1 0 1 0 36 0 0 0 14 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 1 0 35 0 0 0 1 1 0 36 0 1 0 1 1 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = bullet;
unicode = 2022;
},
{
glyphname = asterisk;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"446 865 LINE",
"470 1064 LINE SMOOTH",
"471.333 1073.333 OFFCURVE",
"472 1081 OFFCURVE",
"472 1089 CURVE SMOOTH",
"472 1103.667 OFFCURVE",
"469.667 1117.667 OFFCURVE",
"465 1131 CURVE",
"475.667 1112.333 OFFCURVE",
"492 1100.333 OFFCURVE",
"512 1087 CURVE SMOOTH",
"657 987 LINE",
"707 1059 LINE",
"562 1161 LINE SMOOTH",
"542 1175.667 OFFCURVE",
"523.667 1182.333 OFFCURVE",
"501 1185 CURVE",
"522.333 1187 OFFCURVE",
"544.667 1195 OFFCURVE",
"568 1209 CURVE SMOOTH",
"737 1310 LINE",
"705 1383 LINE",
"536 1283 LINE SMOOTH",
"513.333 1269.667 OFFCURVE",
"493.667 1256.667 OFFCURVE",
"479 1238 CURVE",
"491 1260.667 OFFCURVE",
"497.333 1281.667 OFFCURVE",
"500 1307 CURVE SMOOTH",
"524 1505 LINE",
"440 1505 LINE",
"415 1306 LINE SMOOTH",
"413.667 1296.667 OFFCURVE",
"413 1289 OFFCURVE",
"413 1281 CURVE SMOOTH",
"413 1265.667 OFFCURVE",
"415.667 1250 OFFCURVE",
"421 1234 CURVE",
"410.333 1255.333 OFFCURVE",
"395.333 1268.333 OFFCURVE",
"374 1283 CURVE SMOOTH",
"229 1384 LINE",
"178 1311 LINE",
"323 1209 LINE SMOOTH",
"343 1195 OFFCURVE",
"365 1187 OFFCURVE",
"389 1185 CURVE",
"365 1183 OFFCURVE",
"341 1175 OFFCURVE",
"317 1161 CURVE SMOOTH",
"148 1060 LINE",
"181 987 LINE",
"350 1087 LINE SMOOTH",
"372.667 1100.333 OFFCURVE",
"389.333 1111.667 OFFCURVE",
"404 1129 CURVE",
"393.333 1109 OFFCURVE",
"388.667 1087 OFFCURVE",
"386 1063 CURVE SMOOTH",
"361 865 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 54 0 54 27 26 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
25 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
48 44 43 39 36 35 31 20 16 15 12 9 8 4 14 1 0 1 30 2 1 1 0 1 53 0 0 0 13 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 30 values pushed */
48 44 43 39 36 35 31 20 16 15 12 9 8 4 14 1 0 1 30 0 0 1 0 52 2 1 1 1 43 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 736;
}
);
note = asterisk;
unicode = 002A;
},
{
glyphname = numbersign;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1019 424 LINE",
"1035 479 LINE SMOOTH",
"1039 492.333 OFFCURVE",
"1040 501.667 OFFCURVE",
"1040 511 CURVE SMOOTH",
"1040 539 OFFCURVE",
"1022.667 551 OFFCURVE",
"996 551 CURVE SMOOTH",
"814 551 LINE",
"920 882 LINE",
"1063 882 LINE SMOOTH",
"1112.333 882 OFFCURVE",
"1135.333 898.667 OFFCURVE",
"1146 936 CURVE SMOOTH",
"1168 1007 LINE",
"954 1007 LINE",
"1072 1367 LINE",
"1074.667 1373 OFFCURVE",
"1076 1379.667 OFFCURVE",
"1076 1387 CURVE SMOOTH",
"1076 1413.667 OFFCURVE",
"1055.333 1431 OFFCURVE",
"1026 1431 CURVE SMOOTH",
"949 1431 LINE",
"811 1007 LINE",
"561 1007 LINE",
"699 1431 LINE",
"621 1431 LINE SMOOTH",
"582.333 1431 OFFCURVE",
"550.333 1408.667 OFFCURVE",
"537 1370 CURVE SMOOTH",
"419 1007 LINE",
"258 1007 LINE SMOOTH",
"207.333 1007 OFFCURVE",
"183.667 990.333 OFFCURVE",
"173 953 CURVE SMOOTH",
"152 882 LINE",
"385 882 LINE",
"279 551 LINE",
"74 551 LINE",
"59 496 LINE",
"56.333 482.667 OFFCURVE",
"54 473.333 OFFCURVE",
"54 464 CURVE SMOOTH",
"54 437.333 OFFCURVE",
"68.333 424 OFFCURVE",
"97 424 CURVE SMOOTH",
"244 424 LINE",
"107 0 LINE",
"184 0 LINE SMOOTH",
"221.333 0 OFFCURVE",
"256.333 19.333 OFFCURVE",
"271 66 CURVE SMOOTH",
"387 424 LINE",
"637 424 LINE",
"524 75 LINE SMOOTH",
"521.333 67 OFFCURVE",
"520 58.333 OFFCURVE",
"520 49 CURVE SMOOTH",
"520 19.667 OFFCURVE",
"538.333 0 OFFCURVE",
"565 0 CURVE SMOOTH",
"643 0 LINE",
"780 424 LINE"
);
},
{
closed = 1;
nodes = (
"528 882 LINE",
"778 882 LINE",
"672 551 LINE",
"421 551 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 38 values pushed */
0 0 64 63 62 61 0 60 0 60 54 52 51 49 46 45 40 38 37 36 35 33 30 28 25 24 23 22 17 15 14 12 9 8 3 1 17 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 9 1 7 7 11 31 15 11 2 5 5 6 0 0 36 10 8 2 6 6 14 31 2 1 0 0 12 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
9 1 7 6 7 52 14 12 2 4 16 13 3 3 1 0 4 1 0 0 38 15 11 2 5 5 6 0 0 36 10 8 2 6 6 14 31 2 1 0 0 15 0 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
9 1 7 6 7 52 2 1 0 1 0 53 10 8 2 6 15 11 2 5 4 6 5 0 2 38 14 12 2 4 1 1 4 0 0 35 14 12 2 4 4 1 0 0 36 16 13 3 3 1 4 1 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 96 values pushed */
0 7 9 7 52 0 9 6 9 52 0 2 1 0 1 2 0 50 0 0 0 51 0 8 0 15 11 8 15 0 2 38 0 10 0 11 5 10 11 1 2 38 0 6 0 5 4 6 5 0 0 38 0 14 13 1 14 0 0 35 0 12 16 1 13 3 12 13 0 0 38 0 4 0 3 1 4 3 1 0 38 0 14 14 1 0 0 36 0 1 14 1 0 0 33 12 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = numbersign;
unicode = 0023;
},
{
glyphname = slash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"814 1451 LINE",
"741 1451 LINE SMOOTH",
"698.333 1451 OFFCURVE",
"661.667 1428 OFFCURVE",
"643 1388 CURVE SMOOTH",
"-81 -91 LINE",
"-8 -91 LINE SMOOTH",
"28 -91 OFFCURVE",
"71.667 -67.667 OFFCURVE",
"93 -25 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
9 7 4 2 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 0 1 0 53 0 1 1 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 695;
}
);
note = slash;
unicode = 002F;
},
{
glyphname = backslash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"467 -25 LINE SMOOTH",
"477.667 -67.667 OFFCURVE",
"515.667 -91 OFFCURVE",
"553 -91 CURVE SMOOTH",
"625 -91 LINE",
"264 1388 LINE SMOOTH",
"253.333 1426.667 OFFCURVE",
"223.667 1451 OFFCURVE",
"181 1451 CURVE SMOOTH",
"108 1451 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
7 5 2 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 12 values pushed */
0 1 0 1 53 0 0 0 17 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 10 values pushed */
0 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 694;
}
);
note = backslash;
unicode = 005C;
},
{
glyphname = parenleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"274 638.333 OFFCURVE",
"302 810 OFFCURVE",
"354 970 CURVE SMOOTH",
"406 1130 OFFCURVE",
"482.333 1279 OFFCURVE",
"581 1431 CURVE SMOOTH",
"590.333 1445 OFFCURVE",
"595 1457.333 OFFCURVE",
"595 1468 CURVE SMOOTH",
"595 1484 OFFCURVE",
"585.667 1495.333 OFFCURVE",
"575 1502 CURVE SMOOTH",
"504 1549 LINE",
"348 1333 OFFCURVE",
"253.167 1145 OFFCURVE",
"196.5 965 CURVE SMOOTH",
"139.833 785 OFFCURVE",
"122 611.667 OFFCURVE",
"122 425 CURVE SMOOTH",
"122 314.333 OFFCURVE",
"133.667 192.667 OFFCURVE",
"159 70 CURVE SMOOTH",
"184.333 -52.667 OFFCURVE",
"223 -176.333 OFFCURVE",
"279 -291 CURVE",
"360 -245 LINE SMOOTH",
"376 -235.667 OFFCURVE",
"390 -222.667 OFFCURVE",
"390 -200 CURVE SMOOTH",
"390 -192 OFFCURVE",
"388 -183 OFFCURVE",
"384 -173 CURVE SMOOTH",
"348 -83.667 OFFCURVE",
"319.5 21.333 OFFCURVE",
"301.5 128 CURVE SMOOTH",
"283.5 234.667 OFFCURVE",
"274 342.333 OFFCURVE",
"274 441 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
21 11 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = parenleft;
unicode = 0028;
},
{
glyphname = parenright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"313 630.333 OFFCURVE",
"285 458.833 OFFCURVE",
"233 295.5 CURVE SMOOTH",
"181 132.167 OFFCURVE",
"103.333 -21 OFFCURVE",
"6 -173 CURVE SMOOTH",
"-3.333 -187.667 OFFCURVE",
"-8 -200.667 OFFCURVE",
"-8 -212 CURVE SMOOTH",
"-8 -226.667 OFFCURVE",
"1.333 -237 OFFCURVE",
"12 -245 CURVE",
"82 -291 LINE",
"238 -75 OFFCURVE",
"334 112 OFFCURVE",
"390 292 CURVE SMOOTH",
"446 472 OFFCURVE",
"464 645.333 OFFCURVE",
"464 832 CURVE SMOOTH",
"464 944 OFFCURVE",
"452.333 1065.333 OFFCURVE",
"427 1188 CURVE SMOOTH",
"401.667 1310.667 OFFCURVE",
"362.667 1433 OFFCURVE",
"308 1549 CURVE",
"226 1502 LINE",
"210 1491.333 OFFCURVE",
"196 1479.667 OFFCURVE",
"196 1457 CURVE SMOOTH",
"196 1449.667 OFFCURVE",
"198 1441 OFFCURVE",
"202 1431 CURVE SMOOTH",
"238 1341.667 OFFCURVE",
"265.167 1236.667 OFFCURVE",
"284.5 1130 CURVE SMOOTH",
"303.833 1023.333 OFFCURVE",
"313 914.333 OFFCURVE",
"313 817 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
11 21 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = parenright;
unicode = 0029;
},
{
glyphname = braceleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"158 374.333 OFFCURVE",
"132.333 300.167 OFFCURVE",
"107 223.5 CURVE SMOOTH",
"81.667 146.833 OFFCURVE",
"56 68 OFFCURVE",
"56 -20 CURVE SMOOTH",
"56 -97.333 OFFCURVE",
"78.833 -164.167 OFFCURVE",
"123.5 -211.5 CURVE SMOOTH",
"168.167 -258.833 OFFCURVE",
"236 -287 OFFCURVE",
"328 -287 CURVE SMOOTH",
"378 -287 LINE",
"382 -250 LINE",
"382 -245.02 OFFCURVE",
"387 -213.378 OFFCURVE",
"387 -205 CURVE SMOOTH",
"387 -182.333 OFFCURVE",
"367.333 -173 OFFCURVE",
"354 -173 CURVE SMOOTH",
"335 -173 LINE SMOOTH",
"253.667 -173 OFFCURVE",
"207 -111.333 OFFCURVE",
"207 -18 CURVE SMOOTH",
"207 139.967 OFFCURVE",
"302 299.625 OFFCURVE",
"302 451 CURVE SMOOTH",
"302 535 OFFCURVE",
"255.667 599.333 OFFCURVE",
"185 622 CURVE",
"218.333 631.333 OFFCURVE",
"260.5 651.167 OFFCURVE",
"294.5 694.5 CURVE SMOOTH",
"328.5 737.833 OFFCURVE",
"354 804.333 OFFCURVE",
"354 907 CURVE SMOOTH",
"354 936.237 OFFCURVE",
"353 1097.222 OFFCURVE",
"353 1128 CURVE SMOOTH",
"353 1236 OFFCURVE",
"371.167 1308.5 OFFCURVE",
"402.5 1354.5 CURVE SMOOTH",
"433.833 1400.5 OFFCURVE",
"479 1419 OFFCURVE",
"531 1419 CURVE SMOOTH",
"549 1419 LINE SMOOTH",
"562.333 1419 OFFCURVE",
"589.333 1428.333 OFFCURVE",
"592 1455 CURVE SMOOTH",
"601 1532 LINE",
"552 1532 LINE SMOOTH",
"437.333 1532 OFFCURVE",
"348.833 1494.5 OFFCURVE",
"289.5 1424.5 CURVE SMOOTH",
"230.167 1354.5 OFFCURVE",
"200 1252.333 OFFCURVE",
"200 1123 CURVE SMOOTH",
"200 1096.922 OFFCURVE",
"209 944.078 OFFCURVE",
"209 918 CURVE SMOOTH",
"209 752.667 OFFCURVE",
"160.667 675 OFFCURVE",
"62 675 CURVE",
"49 571 LINE",
"119.667 571 OFFCURVE",
"158 522.333 OFFCURVE",
"158 453 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
61 59 51 48 24 21 18 16 5 4 3 2 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 53 values pushed */
38 1 0 1 58 1 5 4 2 30 0 2 0 3 1 2 3 1 0 38 0 1 0 0 4 1 0 1 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = braceleft;
unicode = 007B;
},
{
glyphname = braceright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"427 871.667 OFFCURVE",
"452.667 945.833 OFFCURVE",
"478 1022.5 CURVE SMOOTH",
"503.333 1099.167 OFFCURVE",
"529 1178 OFFCURVE",
"529 1266 CURVE SMOOTH",
"529 1343.333 OFFCURVE",
"506.167 1410.167 OFFCURVE",
"461.5 1457.5 CURVE SMOOTH",
"416.833 1504.833 OFFCURVE",
"349 1533 OFFCURVE",
"257 1533 CURVE SMOOTH",
"207 1533 LINE",
"203 1496 LINE",
"203 1491.02 OFFCURVE",
"198 1459.378 OFFCURVE",
"198 1451 CURVE SMOOTH",
"198 1428.333 OFFCURVE",
"217.667 1419 OFFCURVE",
"231 1419 CURVE SMOOTH",
"250 1419 LINE SMOOTH",
"331.333 1419 OFFCURVE",
"378 1357.333 OFFCURVE",
"378 1264 CURVE SMOOTH",
"378 1106.033 OFFCURVE",
"283 946.375 OFFCURVE",
"283 795 CURVE SMOOTH",
"283 711 OFFCURVE",
"329.333 646.667 OFFCURVE",
"400 624 CURVE",
"366.667 614.667 OFFCURVE",
"324.5 594.833 OFFCURVE",
"290.5 551.5 CURVE SMOOTH",
"256.5 508.167 OFFCURVE",
"231 440.333 OFFCURVE",
"231 339 CURVE SMOOTH",
"231 308.222 OFFCURVE",
"232 147.237 OFFCURVE",
"232 118 CURVE SMOOTH",
"232 10 OFFCURVE",
"213.833 -62.5 OFFCURVE",
"182.5 -108.5 CURVE SMOOTH",
"151.167 -154.5 OFFCURVE",
"106 -173 OFFCURVE",
"54 -173 CURVE SMOOTH",
"36 -173 LINE SMOOTH",
"20.392 -173 OFFCURVE",
"-4.665 -185.645 OFFCURVE",
"-7 -209 CURVE SMOOTH",
"-16 -286 LINE",
"33 -286 LINE SMOOTH",
"147.667 -286 OFFCURVE",
"236.167 -248.5 OFFCURVE",
"295.5 -178.5 CURVE SMOOTH",
"354.833 -108.5 OFFCURVE",
"385 -6.333 OFFCURVE",
"385 123 CURVE SMOOTH",
"385 149.078 OFFCURVE",
"376 301.922 OFFCURVE",
"376 328 CURVE SMOOTH",
"376 493.333 OFFCURVE",
"424.333 571 OFFCURVE",
"523 571 CURVE",
"536 675 LINE",
"465.333 675 OFFCURVE",
"427 723.667 OFFCURVE",
"427 793 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
63 61 53 50 26 23 18 16 5 4 3 2 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 53 values pushed */
60 1 4 5 40 1 1 0 2 30 0 5 0 4 0 5 4 1 0 38 0 0 0 1 3 0 1 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 0 2 3 2 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = braceright;
unicode = 007D;
},
{
glyphname = bracketleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"376 -287 LINE",
"378 -270 LINE SMOOTH",
"379.196 -259.236 OFFCURVE",
"385 -214.953 OFFCURVE",
"385 -212 CURVE SMOOTH",
"385 -189.333 OFFCURVE",
"368.333 -173 OFFCURVE",
"343 -173 CURVE SMOOTH",
"190 -173 LINE",
"387 1419 LINE",
"538 1419 LINE SMOOTH",
"566 1419 OFFCURVE",
"588.333 1438.333 OFFCURVE",
"591 1465 CURVE SMOOTH",
"599 1532 LINE",
"256 1532 LINE",
"33 -287 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
0 0 0 18 0 18 10 8 7 5 2 1 5 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 34 values pushed */
0 0 0 1 2 0 1 1 0 38 0 2 3 3 2 1 0 35 0 2 2 3 0 0 36 4 1 3 2 3 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = bracketleft;
unicode = 005B;
},
{
glyphname = bracketright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"206 1507 LINE",
"200 1459 LINE",
"200 1436.333 OFFCURVE",
"216.333 1419 OFFCURVE",
"243 1419 CURVE SMOOTH",
"395 1419 LINE",
"199 -173 LINE",
"47 -173 LINE SMOOTH",
"17.667 -173 OFFCURVE",
"-3.333 -193.333 OFFCURVE",
"-6 -220 CURVE SMOOTH",
"-15 -287 LINE",
"329 -287 LINE",
"553 1532 LINE",
"209 1532 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
11 9 8 6 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 39 values pushed */
13 1 3 0 1 30 0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 0 0 36 0 1 2 1 0 0 33 5 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 552;
}
);
note = bracketright;
unicode = 005D;
},
{
glyphname = hyphen;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"97 526 LINE",
"553 526 LINE",
"572 672 LINE",
"115 672 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 641;
}
);
note = hyphen;
unicode = 002D;
},
{
glyphname = softhyphen;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"97 526 LINE",
"553 526 LINE",
"572 672 LINE",
"115 672 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 641;
}
);
note = uni00AD;
unicode = 00AD;
},
{
glyphname = endash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"150 527 LINE",
"887 527 LINE",
"902 652 LINE",
"165 652 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1026;
}
);
note = endash;
unicode = 2013;
},
{
glyphname = emdash;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"150 527 LINE",
"1375 527 LINE",
"1391 652 LINE",
"165 652 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1516;
}
);
note = emdash;
unicode = 2014;
},
{
glyphname = underscore;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"-81 -168 LINE",
"-95 -284 LINE",
"630 -284 LINE",
"645 -168 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 25 values pushed */
2 1 1 0 0 1 0 0 35 2 1 1 1 0 0 0 36 0 0 1 0 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 726;
}
);
note = underscore;
unicode = 005F;
},
{
glyphname = quotesinglbase;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"117 194 LINE",
"97 185.333 OFFCURVE",
"87 173 OFFCURVE",
"87 157 CURVE SMOOTH",
"87 152.333 OFFCURVE",
"88 147.667 OFFCURVE",
"90 143 CURVE SMOOTH",
"107.333 105.667 OFFCURVE",
"113 69.667 OFFCURVE",
"113 35 CURVE SMOOTH",
"113 -53.127 OFFCURVE",
"66.681 -132.753 OFFCURVE",
"21 -187 CURVE",
"6.333 -203 OFFCURVE",
"1 -210.333 OFFCURVE",
"1 -221 CURVE SMOOTH",
"1 -229.667 OFFCURVE",
"4.667 -237 OFFCURVE",
"12 -243 CURVE",
"60 -274 LINE",
"185.333 -172.667 OFFCURVE",
"260 -45.333 OFFCURVE",
"260 88 CURVE SMOOTH",
"260 137.333 OFFCURVE",
"250.667 186.667 OFFCURVE",
"228 236 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 427;
}
);
note = quotesinglbase;
unicode = 201A;
},
{
glyphname = quotedblbase;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"80 194 LINE",
"60 185.333 OFFCURVE",
"50 173 OFFCURVE",
"50 157 CURVE SMOOTH",
"50 152.333 OFFCURVE",
"51 147.667 OFFCURVE",
"53 143 CURVE SMOOTH",
"70.333 105.667 OFFCURVE",
"76 69.667 OFFCURVE",
"76 35 CURVE SMOOTH",
"76 -53.127 OFFCURVE",
"29.681 -132.753 OFFCURVE",
"-16 -187 CURVE",
"-30.667 -203 OFFCURVE",
"-36 -210.333 OFFCURVE",
"-36 -221 CURVE SMOOTH",
"-36 -229.667 OFFCURVE",
"-32.333 -237 OFFCURVE",
"-25 -243 CURVE",
"23 -274 LINE",
"148.333 -172.667 OFFCURVE",
"223 -45.333 OFFCURVE",
"223 88 CURVE SMOOTH",
"223 137.333 OFFCURVE",
"213.667 186.667 OFFCURVE",
"191 236 CURVE"
);
},
{
closed = 1;
nodes = (
"364 194 LINE",
"344 185.333 OFFCURVE",
"334 173 OFFCURVE",
"334 157 CURVE SMOOTH",
"334 152.333 OFFCURVE",
"335 147.667 OFFCURVE",
"337 143 CURVE SMOOTH",
"354.333 105.667 OFFCURVE",
"360 69.667 OFFCURVE",
"360 35 CURVE SMOOTH",
"360 -53.127 OFFCURVE",
"313.681 -132.753 OFFCURVE",
"268 -187 CURVE",
"253.333 -203 OFFCURVE",
"248 -210.333 OFFCURVE",
"248 -221 CURVE SMOOTH",
"248 -229.667 OFFCURVE",
"251.667 -237 OFFCURVE",
"259 -243 CURVE",
"307 -274 LINE",
"432.333 -172.667 OFFCURVE",
"507 -45.333 OFFCURVE",
"507 88 CURVE SMOOTH",
"507 137.333 OFFCURVE",
"497.667 186.667 OFFCURVE",
"475 236 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 31 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 676;
}
);
note = quotedblbase;
unicode = 201E;
},
{
glyphname = quotedblleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"330 1058 LINE",
"350 1066.667 OFFCURVE",
"360 1079 OFFCURVE",
"360 1095 CURVE SMOOTH",
"360 1099 OFFCURVE",
"359 1103.667 OFFCURVE",
"357 1109 CURVE",
"339.667 1146.333 OFFCURVE",
"334 1182.333 OFFCURVE",
"334 1217 CURVE SMOOTH",
"334 1304.328 OFFCURVE",
"380.563 1385.043 OFFCURVE",
"426 1439 CURVE",
"440.667 1455 OFFCURVE",
"446 1462.333 OFFCURVE",
"446 1473 CURVE SMOOTH",
"446 1481.667 OFFCURVE",
"442 1489 OFFCURVE",
"434 1495 CURVE",
"387 1526 LINE",
"261.667 1424.667 OFFCURVE",
"187 1297.333 OFFCURVE",
"187 1164 CURVE SMOOTH",
"187 1114.667 OFFCURVE",
"196.333 1065.333 OFFCURVE",
"219 1016 CURVE"
);
},
{
closed = 1;
nodes = (
"614 1058 LINE",
"634 1066.667 OFFCURVE",
"644 1079 OFFCURVE",
"644 1095 CURVE SMOOTH",
"644 1099 OFFCURVE",
"643 1103.667 OFFCURVE",
"641 1109 CURVE",
"623.667 1146.333 OFFCURVE",
"618 1182.333 OFFCURVE",
"618 1217 CURVE SMOOTH",
"618 1304.328 OFFCURVE",
"664.563 1385.043 OFFCURVE",
"710 1439 CURVE",
"724.667 1455 OFFCURVE",
"730 1462.333 OFFCURVE",
"730 1473 CURVE SMOOTH",
"730 1481.667 OFFCURVE",
"726 1489 OFFCURVE",
"718 1495 CURVE",
"671 1526 LINE",
"545.667 1424.667 OFFCURVE",
"471 1297.333 OFFCURVE",
"471 1164 CURVE SMOOTH",
"471 1114.667 OFFCURVE",
"480.333 1065.333 OFFCURVE",
"503 1016 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
31 25 6 0 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 676;
}
);
note = quotedblleft;
unicode = 201C;
},
{
glyphname = quotedblright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"266 1461 LINE",
"246 1452.333 OFFCURVE",
"236 1440 OFFCURVE",
"236 1424 CURVE SMOOTH",
"236 1419.333 OFFCURVE",
"237 1414.667 OFFCURVE",
"239 1410 CURVE SMOOTH",
"256.333 1372.667 OFFCURVE",
"262 1336.667 OFFCURVE",
"262 1302 CURVE SMOOTH",
"262 1213.873 OFFCURVE",
"215.681 1134.247 OFFCURVE",
"170 1080 CURVE",
"155.333 1064 OFFCURVE",
"150 1056.667 OFFCURVE",
"150 1046 CURVE SMOOTH",
"150 1037.333 OFFCURVE",
"153.667 1030 OFFCURVE",
"161 1024 CURVE",
"209 993 LINE",
"334.333 1094.333 OFFCURVE",
"409 1221.667 OFFCURVE",
"409 1355 CURVE SMOOTH",
"409 1404.333 OFFCURVE",
"399.667 1453.667 OFFCURVE",
"377 1503 CURVE"
);
},
{
closed = 1;
nodes = (
"549 1461 LINE",
"529 1452.333 OFFCURVE",
"519 1440 OFFCURVE",
"519 1424 CURVE SMOOTH",
"519 1419.333 OFFCURVE",
"520 1414.667 OFFCURVE",
"522 1410 CURVE SMOOTH",
"539.333 1372.667 OFFCURVE",
"545 1336.667 OFFCURVE",
"545 1302 CURVE SMOOTH",
"545 1213.873 OFFCURVE",
"498.681 1134.247 OFFCURVE",
"453 1080 CURVE",
"438.333 1064 OFFCURVE",
"433 1056.667 OFFCURVE",
"433 1046 CURVE SMOOTH",
"433 1037.333 OFFCURVE",
"436.667 1030 OFFCURVE",
"444 1024 CURVE",
"492 993 LINE",
"617.333 1094.333 OFFCURVE",
"692 1221.667 OFFCURVE",
"692 1355 CURVE SMOOTH",
"692 1404.333 OFFCURVE",
"682.667 1453.667 OFFCURVE",
"660 1503 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 31 0 6 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 676;
}
);
note = quotedblright;
unicode = 201D;
},
{
glyphname = quoteleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"330 1058 LINE",
"350 1066.667 OFFCURVE",
"360 1079 OFFCURVE",
"360 1095 CURVE SMOOTH",
"360 1099 OFFCURVE",
"359 1103.667 OFFCURVE",
"357 1109 CURVE",
"339.667 1146.333 OFFCURVE",
"334 1182.333 OFFCURVE",
"334 1217 CURVE SMOOTH",
"334 1304.328 OFFCURVE",
"380.563 1385.043 OFFCURVE",
"426 1439 CURVE",
"440.667 1455 OFFCURVE",
"446 1462.333 OFFCURVE",
"446 1473 CURVE SMOOTH",
"446 1481.667 OFFCURVE",
"442 1489 OFFCURVE",
"434 1495 CURVE",
"387 1526 LINE",
"261.667 1424.667 OFFCURVE",
"187 1297.333 OFFCURVE",
"187 1164 CURVE SMOOTH",
"187 1114.667 OFFCURVE",
"196.333 1065.333 OFFCURVE",
"219 1016 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
6 0 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 394;
}
);
note = quoteleft;
unicode = 2018;
},
{
glyphname = quoteright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"257 1461 LINE",
"237 1452.333 OFFCURVE",
"227 1440 OFFCURVE",
"227 1424 CURVE SMOOTH",
"227 1419.333 OFFCURVE",
"228 1414.667 OFFCURVE",
"230 1410 CURVE SMOOTH",
"247.333 1372.667 OFFCURVE",
"253 1336.667 OFFCURVE",
"253 1302 CURVE SMOOTH",
"253 1213.873 OFFCURVE",
"206.681 1134.247 OFFCURVE",
"161 1080 CURVE",
"146.333 1064 OFFCURVE",
"141 1056.667 OFFCURVE",
"141 1046 CURVE SMOOTH",
"141 1037.333 OFFCURVE",
"144.667 1030 OFFCURVE",
"152 1024 CURVE",
"200 993 LINE",
"325.333 1094.333 OFFCURVE",
"400 1221.667 OFFCURVE",
"400 1355 CURVE SMOOTH",
"400 1404.333 OFFCURVE",
"390.667 1453.667 OFFCURVE",
"368 1503 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
0 6 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 394;
}
);
note = quoteright;
unicode = 2019;
},
{
glyphname = guillemetleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"316 129 LINE",
"375 156 LINE SMOOTH",
"396.333 166 OFFCURVE",
"407 181.667 OFFCURVE",
"407 203 CURVE SMOOTH",
"407 211.667 OFFCURVE",
"405 220.667 OFFCURVE",
"401 230 CURVE SMOOTH",
"290 493 LINE",
"281.333 510.333 OFFCURVE",
"273.667 522.333 OFFCURVE",
"267 529 CURVE",
"277.667 536.333 OFFCURVE",
"288.333 548.333 OFFCURVE",
"299 565 CURVE SMOOTH",
"474 828 LINE",
"484 840.667 OFFCURVE",
"489 853.667 OFFCURVE",
"489 867 CURVE SMOOTH",
"489 881.667 OFFCURVE",
"481.333 893 OFFCURVE",
"466 901 CURVE SMOOTH",
"414 928 LINE",
"136 540 LINE",
"133 518 LINE"
);
},
{
closed = 1;
nodes = (
"592 129 LINE",
"651 156 LINE SMOOTH",
"672.333 166 OFFCURVE",
"683 181.667 OFFCURVE",
"683 203 CURVE SMOOTH",
"683 211.667 OFFCURVE",
"681 220.667 OFFCURVE",
"677 230 CURVE SMOOTH",
"566 493 LINE",
"557.333 510.333 OFFCURVE",
"549.667 522.333 OFFCURVE",
"543 529 CURVE",
"553.667 536.333 OFFCURVE",
"564.333 548.333 OFFCURVE",
"575 565 CURVE SMOOTH",
"750 828 LINE",
"760 840.667 OFFCURVE",
"765 853.667 OFFCURVE",
"765 867 CURVE SMOOTH",
"765 881.667 OFFCURVE",
"757.333 893 OFFCURVE",
"742 901 CURVE SMOOTH",
"690 928 LINE",
"412 540 LINE",
"409 518 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
21 37 2 18 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 875;
}
);
note = guillemotleft;
unicode = 00AB;
},
{
glyphname = guillemetright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"292 928 LINE",
"233 901 LINE SMOOTH",
"211 891 OFFCURVE",
"200 875.333 OFFCURVE",
"200 854 CURVE SMOOTH",
"200 845.333 OFFCURVE",
"202 836.667 OFFCURVE",
"206 828 CURVE SMOOTH",
"318 565 LINE",
"324 548.333 OFFCURVE",
"331.333 536 OFFCURVE",
"340 528 CURVE",
"330.667 520.667 OFFCURVE",
"320.667 509 OFFCURVE",
"310 493 CURVE SMOOTH",
"132 230 LINE",
"123.333 214.667 OFFCURVE",
"119 201.667 OFFCURVE",
"119 191 CURVE SMOOTH",
"119 175 OFFCURVE",
"126.667 163.333 OFFCURVE",
"142 156 CURVE SMOOTH",
"195 129 LINE",
"472 518 LINE",
"474 540 LINE"
);
},
{
closed = 1;
nodes = (
"568 928 LINE",
"509 901 LINE SMOOTH",
"487 891 OFFCURVE",
"476 875.333 OFFCURVE",
"476 854 CURVE SMOOTH",
"476 845.333 OFFCURVE",
"478 836.667 OFFCURVE",
"482 828 CURVE SMOOTH",
"594 565 LINE",
"600 548.333 OFFCURVE",
"607.333 536 OFFCURVE",
"616 528 CURVE",
"606.667 520.667 OFFCURVE",
"596.667 509 OFFCURVE",
"586 493 CURVE SMOOTH",
"408 230 LINE",
"399.333 214.667 OFFCURVE",
"395 201.667 OFFCURVE",
"395 191 CURVE SMOOTH",
"395 175 OFFCURVE",
"402.667 163.333 OFFCURVE",
"418 156 CURVE SMOOTH",
"471 129 LINE",
"748 518 LINE",
"750 540 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
37 21 18 2 2 11 
CALL[ ]\011/* CallFunction */";
};
width = 875;
}
);
note = guillemotright;
unicode = 00BB;
},
{
glyphname = guilsinglleft;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"316 129 LINE",
"375 156 LINE SMOOTH",
"396.333 166 OFFCURVE",
"407 181.667 OFFCURVE",
"407 203 CURVE SMOOTH",
"407 211.667 OFFCURVE",
"405 220.667 OFFCURVE",
"401 230 CURVE SMOOTH",
"290 493 LINE",
"281.333 510.333 OFFCURVE",
"273.667 522.333 OFFCURVE",
"267 529 CURVE",
"277.667 536.333 OFFCURVE",
"288.333 548.333 OFFCURVE",
"299 565 CURVE SMOOTH",
"474 828 LINE",
"484 840.667 OFFCURVE",
"489 853.667 OFFCURVE",
"489 867 CURVE SMOOTH",
"489 881.667 OFFCURVE",
"481.333 893 OFFCURVE",
"466 901 CURVE SMOOTH",
"414 928 LINE",
"136 540 LINE",
"133 518 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
2 18 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 598;
}
);
note = guilsinglleft;
unicode = 2039;
},
{
glyphname = guilsinglright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"292 928 LINE",
"233 901 LINE SMOOTH",
"211 891 OFFCURVE",
"200 875.333 OFFCURVE",
"200 854 CURVE SMOOTH",
"200 845.333 OFFCURVE",
"202 836.667 OFFCURVE",
"206 828 CURVE SMOOTH",
"318 565 LINE",
"324 548.333 OFFCURVE",
"331.333 536 OFFCURVE",
"340 528 CURVE",
"330.667 520.667 OFFCURVE",
"320.667 509 OFFCURVE",
"310 493 CURVE SMOOTH",
"132 230 LINE",
"123.333 214.667 OFFCURVE",
"119 201.667 OFFCURVE",
"119 191 CURVE SMOOTH",
"119 175 OFFCURVE",
"126.667 163.333 OFFCURVE",
"142 156 CURVE SMOOTH",
"195 129 LINE",
"472 518 LINE",
"474 540 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
18 2 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 598;
}
);
note = guilsinglright;
unicode = 203A;
},
{
glyphname = quotedbl;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"255 1431 LINE",
"218 1142 LINE",
"218 987 LINE SMOOTH",
"218 945.667 OFFCURVE",
"231.333 922 OFFCURVE",
"266 922 CURVE SMOOTH",
"304.667 922 OFFCURVE",
"323.667 945.667 OFFCURVE",
"333 987 CURVE SMOOTH",
"367 1142 LINE",
"403 1431 LINE"
);
},
{
closed = 1;
nodes = (
"567 1431 LINE",
"530 1142 LINE",
"530 987 LINE SMOOTH",
"530 945.667 OFFCURVE",
"543.333 922 OFFCURVE",
"578 922 CURVE SMOOTH",
"616.667 922 OFFCURVE",
"635.667 945.667 OFFCURVE",
"645 987 CURVE SMOOTH",
"679 1142 LINE",
"715 1431 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
11 11 0 0 11 21 11 21 17 15 0 10 0 10 6 4 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
20 9 2 0 1 1 30 2 1 0 0 1 0 0 36 5 3 4 3 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
20 9 2 0 1 1 30 5 3 4 3 1 0 0 1 0 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
20 9 2 2 3 1 30 4 1 1 3 0 1 0 0 35 5 1 3 0 2 0 3 2 1 0 38 4 1 1 1 0 1 0 36 0 0 1 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 736;
}
);
note = quotedbl;
unicode = 0022;
},
{
glyphname = quotesingle;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"255 1431 LINE",
"218 1142 LINE",
"218 987 LINE SMOOTH",
"218 945.667 OFFCURVE",
"231.333 922 OFFCURVE",
"266 922 CURVE SMOOTH",
"304.667 922 OFFCURVE",
"323.667 945.667 OFFCURVE",
"333 987 CURVE SMOOTH",
"367 1142 LINE",
"403 1431 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 10 0 10 6 4 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 21 values pushed */
9 1 0 1 1 30 0 0 0 1 0 0 36 2 1 1 1 11 0 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 31 values pushed */
9 1 0 1 1 30 2 1 1 0 0 1 0 0 35 2 1 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 426;
}
);
note = quotesingle;
unicode = 0027;
},
{
glyphname = CR;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 0;
}
);
note = CR;
},
{
glyphname = .notdef;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"297 1065 LINE",
"305 1050.333 OFFCURVE",
"317.333 1043 OFFCURVE",
"334 1043 CURVE SMOOTH",
"360.404 1043 OFFCURVE",
"448.195 1101 OFFCURVE",
"510 1101 CURVE SMOOTH",
"586 1101 OFFCURVE",
"640 1058 OFFCURVE",
"640 990 CURVE SMOOTH",
"640 918.483 OFFCURVE",
"591.794 868.211 OFFCURVE",
"538.5 830 CURVE SMOOTH",
"488.163 793.91 OFFCURVE",
"437 752.094 OFFCURVE",
"437 693 CURVE SMOOTH",
"437 690.333 OFFCURVE",
"437.167 687 OFFCURVE",
"437.5 683 CURVE SMOOTH",
"437.833 679 OFFCURVE",
"438.667 670.667 OFFCURVE",
"440 658 CURVE SMOOTH",
"450 561 LINE",
"572 561 LINE",
"589 666 LINE SMOOTH",
"596.558 709.46 OFFCURVE",
"655.37 747.573 OFFCURVE",
"703 785.5 CURVE SMOOTH",
"721 799.833 OFFCURVE",
"737.5 816.833 OFFCURVE",
"752.5 836.5 CURVE SMOOTH",
"782.5 875.833 OFFCURVE",
"805 927.667 OFFCURVE",
"805 1001 CURVE SMOOTH",
"805 1152.82 OFFCURVE",
"688.823 1247 OFFCURVE",
"525 1247 CURVE SMOOTH",
"409.398 1247 OFFCURVE",
"319.51 1202.169 OFFCURVE",
"250 1141 CURVE"
);
},
{
closed = 1;
nodes = (
"396 229.333 OFFCURVE",
"442 182 OFFCURVE",
"506 182 CURVE SMOOTH",
"565.473 182 OFFCURVE",
"614 230.652 OFFCURVE",
"614 292 CURVE SMOOTH",
"614 354.194 OFFCURVE",
"565.951 403 OFFCURVE",
"506 403 CURVE SMOOTH",
"442 403 OFFCURVE",
"396 354.667 OFFCURVE",
"396 292 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"45 0 LINE",
"1019 0 LINE",
"1019 1433 LINE",
"45 1433 LINE"
);
},
{
closed = 1;
nodes = (
"95 1378 LINE",
"962 1378 LINE",
"962 54 LINE",
"95 54 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
64 63 62 61 60 59 58 57 55 53 45 43 39 37 34 32 19 18 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 67 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 9 9 6 0 0 36 0 6 6 11 31 0 8 8 7 0 0 36 0 7 7 12 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 65 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 8 7 0 0 36 0 7 7 15 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
0 1 2 0 1 30 0 3 2 1 2 3 1 50 0 1 4 2 1 4 48 0 6 0 9 0 6 9 0 0 38 0 0 0 2 3 0 2 1 0 38 0 4 0 5 8 4 5 1 0 38 0 8 7 7 8 0 0 35 0 8 8 7 0 0 36 0 7 8 7 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1063;
}
);
note = .notdef;
},
{
glyphname = space;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 386;
}
);
note = space;
unicode = 0020;
},
{
glyphname = nbspace;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 386;
}
);
note = uni00A0;
unicode = 00A0;
},
{
glyphname = at;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1142 186 OFFCURVE",
"1249.333 248.833 OFFCURVE",
"1328 353.5 CURVE SMOOTH",
"1406.667 458.167 OFFCURVE",
"1456 604.667 OFFCURVE",
"1456 774 CURVE SMOOTH",
"1456 958 OFFCURVE",
"1391.833 1103 OFFCURVE",
"1288.5 1203 CURVE SMOOTH",
"1185.167 1303 OFFCURVE",
"1043 1357 OFFCURVE",
"887 1357 CURVE SMOOTH",
"814.333 1357 OFFCURVE",
"744 1346.333 OFFCURVE",
"676 1325 CURVE SMOOTH",
"540 1282.333 OFFCURVE",
"419 1203.5 OFFCURVE",
"319 1093.5 CURVE SMOOTH",
"269 1038.5 OFFCURVE",
"226.167 977.5 OFFCURVE",
"190.5 910.5 CURVE SMOOTH",
"119.167 776.5 OFFCURVE",
"77 619.333 OFFCURVE",
"77 450 CURVE SMOOTH",
"77 236.667 OFFCURVE",
"143.167 64.833 OFFCURVE",
"258.5 -54.5 CURVE SMOOTH",
"373.833 -173.833 OFFCURVE",
"536.667 -239 OFFCURVE",
"730 -239 CURVE SMOOTH",
"943.333 -239 OFFCURVE",
"1115.333 -181 OFFCURVE",
"1258 -85 CURVE",
"1246 -34 LINE",
"1240.667 -18 OFFCURVE",
"1229 -3 OFFCURVE",
"1209 -3 CURVE SMOOTH",
"1198.333 -3 OFFCURVE",
"1188.667 -4.667 OFFCURVE",
"1174 -14 CURVE SMOOTH",
"1072.667 -78 OFFCURVE",
"931 -124 OFFCURVE",
"743 -124 CURVE SMOOTH",
"585.667 -124 OFFCURVE",
"450.833 -72.5 OFFCURVE",
"355.5 25.5 CURVE SMOOTH",
"260.167 123.5 OFFCURVE",
"204 270 OFFCURVE",
"204 458 CURVE SMOOTH",
"204 686 OFFCURVE",
"281.5 882 OFFCURVE",
"403.5 1022 CURVE SMOOTH",
"525.5 1162 OFFCURVE",
"693 1244 OFFCURVE",
"873 1244 CURVE SMOOTH",
"1007.667 1244 OFFCURVE",
"1122.667 1203.667 OFFCURVE",
"1204 1125 CURVE SMOOTH",
"1285.333 1046.333 OFFCURVE",
"1333 928.667 OFFCURVE",
"1333 774 CURVE SMOOTH",
"1333 634 OFFCURVE",
"1299.5 514.167 OFFCURVE",
"1249.5 429.5 CURVE SMOOTH",
"1199.5 344.833 OFFCURVE",
"1132 296 OFFCURVE",
"1064 296 CURVE SMOOTH",
"1008.548 296 OFFCURVE",
"973 319.261 OFFCURVE",
"973 387 CURVE SMOOTH",
"973 424.333 OFFCURVE",
"983.667 473.667 OFFCURVE",
"1009 543 CURVE SMOOTH",
"1141 903 LINE",
"1086.333 929.667 OFFCURVE",
"1030 943 OFFCURVE",
"946 943 CURVE SMOOTH",
"890 943 OFFCURVE",
"838 935.5 OFFCURVE",
"790 920.5 CURVE SMOOTH",
"694 890.5 OFFCURVE",
"614.167 837.333 OFFCURVE",
"553.5 768 CURVE SMOOTH",
"523.167 733.333 OFFCURVE",
"497.5 696.5 OFFCURVE",
"476.5 657.5 CURVE SMOOTH",
"434.5 579.5 OFFCURVE",
"413 493 OFFCURVE",
"413 413 CURVE SMOOTH",
"413 284.785 OFFCURVE",
"474.739 188 OFFCURVE",
"601 188 CURVE SMOOTH",
"697 188 OFFCURVE",
"786 230.333 OFFCURVE",
"870 337 CURVE",
"875.333 234.333 OFFCURVE",
"932.667 186 OFFCURVE",
"1026 186 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"582 303 OFFCURVE",
"549 356 OFFCURVE",
"549 432 CURVE SMOOTH",
"549 529.333 OFFCURVE",
"589.833 629 OFFCURVE",
"654.5 705 CURVE SMOOTH",
"719.167 781 OFFCURVE",
"808.667 833 OFFCURVE",
"906 833 CURVE SMOOTH",
"933.333 833 OFFCURVE",
"958.667 830 OFFCURVE",
"982 824 CURVE",
"875 528 LINE SMOOTH",
"843 438.667 OFFCURVE",
"804.667 382.5 OFFCURVE",
"766 348.5 CURVE SMOOTH",
"727.333 314.5 OFFCURVE",
"686 303 OFFCURVE",
"650 303 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 32 values pushed */
86 85 1 0 94 92 85 100 86 100 76 74 64 62 57 55 51 49 41 39 31 29 19 17 7 5 0 84 1 84 13 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
67 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 80 values pushed */
21 1 10 2 91 3 2 3 10 60 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 3 2 10 1 0 38 12 9 2 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
200 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 87 values pushed */
21 1 10 2 91 3 2 9 10 60 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 3 0 9 1 0 35 0 3 1 11 2 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 88 values pushed */
21 1 10 2 91 3 2 9 10 60 1 5 6 3 30 0 6 0 5 0 6 5 50 0 8 0 4 2 8 4 1 0 38 0 2 0 10 9 2 10 1 0 38 12 1 9 0 1 0 9 1 1 0 38 0 3 11 1 0 6 3 0 1 0 38 0 5 7 7 5 1 0 35 0 5 5 7 1 0 36 0 7 5 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1497;
}
);
note = at;
unicode = 0040;
},
{
glyphname = ampersand;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"604 1447 OFFCURVE",
"503.5 1402.667 OFFCURVE",
"433.5 1332 CURVE SMOOTH",
"363.5 1261.333 OFFCURVE",
"324 1161.333 OFFCURVE",
"324 1052 CURVE SMOOTH",
"324 968 OFFCURVE",
"348 883 OFFCURVE",
"400 795 CURVE",
"304 752.333 OFFCURVE",
"218.5 690.5 OFFCURVE",
"156.5 612.5 CURVE SMOOTH",
"94.5 534.5 OFFCURVE",
"57 440.333 OFFCURVE",
"57 335 CURVE SMOOTH",
"57 227 OFFCURVE",
"94.667 139.167 OFFCURVE",
"160 78.5 CURVE SMOOTH",
"225.333 17.833 OFFCURVE",
"317.667 -16 OFFCURVE",
"427 -16 CURVE SMOOTH",
"599 -16 OFFCURVE",
"754.667 57 OFFCURVE",
"880 173 CURVE",
"976 51 LINE",
"1009.391 12.044 OFFCURVE",
"1029.166 0 OFFCURVE",
"1085 0 CURVE SMOOTH",
"1233 0 LINE",
"995 301 LINE",
"1089.667 429 OFFCURVE",
"1151.667 580.667 OFFCURVE",
"1173 734 CURVE",
"1054 734 LINE SMOOTH",
"1028.667 734 OFFCURVE",
"1018.333 718 OFFCURVE",
"1013 694 CURVE SMOOTH",
"994.333 599.333 OFFCURVE",
"958.667 504 OFFCURVE",
"904 416 CURVE",
"582 825 LINE SMOOTH",
"515.333 909 OFFCURVE",
"485 989 OFFCURVE",
"485 1065 CURVE SMOOTH",
"485 1204.023 OFFCURVE",
"573.961 1313 OFFCURVE",
"709 1313 CURVE SMOOTH",
"812.884 1313 OFFCURVE",
"863.628 1238.966 OFFCURVE",
"881 1155 CURVE SMOOTH",
"885.667 1133 OFFCURVE",
"897.667 1122 OFFCURVE",
"917 1122 CURVE SMOOTH",
"922.333 1122 OFFCURVE",
"926.333 1122.667 OFFCURVE",
"933 1124 CURVE SMOOTH",
"1034 1143 LINE",
"1034.667 1146.333 OFFCURVE",
"1035 1149 OFFCURVE",
"1035 1151 CURVE SMOOTH",
"1035 1153 OFFCURVE",
"1035 1155 OFFCURVE",
"1035 1157 CURVE SMOOTH",
"1035 1239.667 OFFCURVE",
"1003.667 1312 OFFCURVE",
"949 1364 CURVE SMOOTH",
"894.333 1416 OFFCURVE",
"817.333 1447 OFFCURVE",
"724 1447 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"235 498.333 OFFCURVE",
"310.667 621.333 OFFCURVE",
"464 704 CURVE",
"797 279 LINE",
"703.667 185.667 OFFCURVE",
"590.667 123 OFFCURVE",
"464 123 CURVE SMOOTH",
"330.183 123 OFFCURVE",
"235 211.276 OFFCURVE",
"235 357 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
1 0 73 71 50 48 41 39 35 33 20 18 13 11 0 66 1 66 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
30 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
59 1 3 1 76 75 46 38 28 5 6 3 2 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 5 1 4 4 12 31 0 6 6 4 1 0 36 5 1 4 4 12 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
59 1 3 1 76 75 46 38 28 5 6 3 2 30 0 1 2 3 2 1 3 50 0 2 2 0 1 0 36 7 1 0 0 17 31 0 3 3 4 1 0 36 0 4 4 12 31 0 6 6 5 1 0 36 0 5 5 18 5 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 59 values pushed */
59 1 3 1 76 75 46 38 28 5 6 3 2 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 3 3 4 1 0 36 0 4 4 15 31 0 6 6 5 1 0 36 0 5 5 21 5 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
59 1 3 1 76 75 46 38 28 5 6 3 2 30 0 1 2 3 2 1 3 50 7 1 0 0 2 1 0 2 1 0 38 0 6 4 5 6 1 0 35 0 3 0 4 5 3 4 1 0 38 0 6 6 5 1 0 36 0 5 6 5 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1297;
}
);
note = ampersand;
unicode = 0026;
},
{
glyphname = paragraph;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"607 1433 LINE SMOOTH",
"456.333 1433 OFFCURVE",
"331.833 1385.333 OFFCURVE",
"244.5 1308 CURVE SMOOTH",
"157.167 1230.667 OFFCURVE",
"107 1123 OFFCURVE",
"107 1003 CURVE SMOOTH",
"107 900.333 OFFCURVE",
"146.5 815 OFFCURVE",
"216.5 755 CURVE SMOOTH",
"286.5 695 OFFCURVE",
"388 660 OFFCURVE",
"512 660 CURVE",
"406 -201 LINE",
"563 -201 LINE",
"745 1280 LINE",
"1022 1280 LINE",
"840 -201 LINE",
"997 -201 LINE",
"1178 1280 LINE",
"1398 1280 LINE",
"1417 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 19 0 18 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 2 1 0 0 5 1 0 36 6 1 5 5 11 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 39 values pushed */
0 4 0 1 0 4 1 50 3 1 1 1 51 6 1 5 0 0 5 1 0 35 6 1 5 5 0 0 0 36 2 1 0 5 0 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 0 2 4 2 0 42 0 4 3 2 4 3 48 0 3 1 2 3 1 48 0 1 1 51 6 1 5 2 2 5 1 0 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1339;
}
);
note = paragraph;
unicode = 00B6;
},
{
glyphname = section;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"895 1330 LINE",
"832.333 1402 OFFCURVE",
"738.333 1446 OFFCURVE",
"617 1446 CURVE SMOOTH",
"501 1446 OFFCURVE",
"407.167 1408 OFFCURVE",
"342.5 1348 CURVE SMOOTH",
"277.833 1288 OFFCURVE",
"243 1206.667 OFFCURVE",
"243 1120 CURVE SMOOTH",
"243 1037.333 OFFCURVE",
"276.667 981.333 OFFCURVE",
"326 936 CURVE",
"188.667 884 OFFCURVE",
"126 786.667 OFFCURVE",
"126 668 CURVE SMOOTH",
"126 523.912 OFFCURVE",
"238.808 456.372 OFFCURVE",
"362.5 398 CURVE SMOOTH",
"411.376 374.935 OFFCURVE",
"487.601 340.199 OFFCURVE",
"525 313 CURVE SMOOTH",
"569 281 OFFCURVE",
"599 242.667 OFFCURVE",
"599 188 CURVE SMOOTH",
"599 75.47 OFFCURVE",
"514.558 -2 OFFCURVE",
"386 -2 CURVE SMOOTH",
"308.667 -2 OFFCURVE",
"263 20.333 OFFCURVE",
"231 43 CURVE SMOOTH",
"203.92 62.182 OFFCURVE",
"177.572 88 OFFCURVE",
"156 88 CURVE SMOOTH",
"132 88 OFFCURVE",
"119 80.333 OFFCURVE",
"107 63 CURVE SMOOTH",
"59 -3 LINE",
"123 -75 OFFCURVE",
"227.667 -125 OFFCURVE",
"357 -125 CURVE SMOOTH",
"482.333 -125 OFFCURVE",
"581 -86 OFFCURVE",
"649 -22 CURVE SMOOTH",
"717 42 OFFCURVE",
"754 130.333 OFFCURVE",
"754 229 CURVE SMOOTH",
"754 305 OFFCURVE",
"721.333 360 OFFCURVE",
"672 404 CURVE",
"798.667 458.667 OFFCURVE",
"856 557.667 OFFCURVE",
"856 679 CURVE SMOOTH",
"856 727 OFFCURVE",
"844.667 767.667 OFFCURVE",
"822 801 CURVE SMOOTH",
"776.667 867.667 OFFCURVE",
"705.667 915.667 OFFCURVE",
"627 953 CURVE SMOOTH",
"587.667 971.667 OFFCURVE",
"551 990.333 OFFCURVE",
"517 1009 CURVE SMOOTH",
"449 1046.333 OFFCURVE",
"398 1086.667 OFFCURVE",
"398 1148 CURVE SMOOTH",
"398 1242.988 OFFCURVE",
"484.683 1318 OFFCURVE",
"603 1318 CURVE SMOOTH",
"667 1318 OFFCURVE",
"709.167 1299.5 OFFCURVE",
"740.5 1281.5 CURVE SMOOTH",
"765.481 1267.149 OFFCURVE",
"794.895 1245 OFFCURVE",
"812 1245 CURVE SMOOTH",
"827.333 1245 OFFCURVE",
"840 1252.333 OFFCURVE",
"850 1267 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"283 780.333 OFFCURVE",
"317 831.333 OFFCURVE",
"409 878 CURVE",
"462.373 847.501 OFFCURVE",
"555.244 805.724 OFFCURVE",
"603.5 774.5 CURVE SMOOTH",
"660.167 737.833 OFFCURVE",
"700 695.333 OFFCURVE",
"700 630 CURVE SMOOTH",
"700 559.333 OFFCURVE",
"669.333 500.667 OFFCURVE",
"592 462 CURVE",
"535.359 495.318 OFFCURVE",
"437.629 537.875 OFFCURVE",
"386 570 CURVE SMOOTH",
"326 607.333 OFFCURVE",
"283 648.333 OFFCURVE",
"283 711 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
68 66 43 41 38 36 31 29 8 6 3 1 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
70 1 1 5 84 76 59 22 4 3 0 33 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 4 0 2 4 2 1 0 37 0 1 1 5 1 0 36 0 5 5 17 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 65 values pushed */
70 1 1 5 84 76 59 22 4 3 0 33 1 2 4 3 30 0 0 1 3 1 0 3 50 0 3 4 1 3 4 48 0 5 0 1 0 5 1 1 0 38 0 4 2 2 4 1 0 35 0 4 4 2 1 0 36 0 2 4 2 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 927;
}
);
note = section;
unicode = 00A7;
},
{
glyphname = copyright;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1068.416 474 OFFCURVE",
"1038.871 449.443 OFFCURVE",
"1009.5 434.5 CURVE SMOOTH",
"971.5 415.167 OFFCURVE",
"916 395 OFFCURVE",
"832 395 CURVE SMOOTH",
"749.333 395 OFFCURVE",
"679.5 424.333 OFFCURVE",
"629.5 479 CURVE SMOOTH",
"579.5 533.667 OFFCURVE",
"550 615.333 OFFCURVE",
"550 718 CURVE SMOOTH",
"550 818 OFFCURVE",
"578.667 899 OFFCURVE",
"632 955 CURVE SMOOTH",
"685.333 1011 OFFCURVE",
"760.333 1042 OFFCURVE",
"855 1042 CURVE SMOOTH",
"932.333 1042 OFFCURVE",
"981.667 1023.5 OFFCURVE",
"1015 1005.5 CURVE SMOOTH",
"1039.451 992.297 OFFCURVE",
"1069.557 970 OFFCURVE",
"1085 970 CURVE SMOOTH",
"1099.667 970 OFFCURVE",
"1110.333 980 OFFCURVE",
"1117 988 CURVE",
"1163 1053 LINE",
"1087 1127.667 OFFCURVE",
"991.333 1176 OFFCURVE",
"846 1176 CURVE SMOOTH",
"715.333 1176 OFFCURVE",
"601.333 1129.167 OFFCURVE",
"520 1048.5 CURVE SMOOTH",
"438.667 967.833 OFFCURVE",
"391 852.667 OFFCURVE",
"391 718 CURVE SMOOTH",
"391 584.667 OFFCURVE",
"434.833 470.333 OFFCURVE",
"511.5 389 CURVE SMOOTH",
"588.167 307.667 OFFCURVE",
"697.333 260 OFFCURVE",
"828 260 CURVE SMOOTH",
"982.667 260 OFFCURVE",
"1090 311 OFFCURVE",
"1166 399 CURVE",
"1106 463 LINE SMOOTH",
"1099.333 469.667 OFFCURVE",
"1095 474 OFFCURVE",
"1083 474 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"93 648.667 OFFCURVE",
"101.667 584 OFFCURVE",
"119 522 CURVE SMOOTH",
"153.667 398 OFFCURVE",
"218.833 289.167 OFFCURVE",
"307.5 200.5 CURVE SMOOTH",
"351.833 156.167 OFFCURVE",
"401 118 OFFCURVE",
"455 86 CURVE SMOOTH",
"563 22 OFFCURVE",
"689.667 -14 OFFCURVE",
"823 -14 CURVE SMOOTH",
"890.333 -14 OFFCURVE",
"955.167 -5.333 OFFCURVE",
"1017.5 12 CURVE SMOOTH",
"1142.167 46.667 OFFCURVE",
"1250.667 111.833 OFFCURVE",
"1340 200.5 CURVE SMOOTH",
"1384.667 244.833 OFFCURVE",
"1422.833 294 OFFCURVE",
"1454.5 348 CURVE SMOOTH",
"1517.833 456 OFFCURVE",
"1554 582.667 OFFCURVE",
"1554 716 CURVE SMOOTH",
"1554 783.333 OFFCURVE",
"1545.333 848.167 OFFCURVE",
"1528 910.5 CURVE SMOOTH",
"1493.333 1035.167 OFFCURVE",
"1429.333 1144.833 OFFCURVE",
"1340 1233.5 CURVE SMOOTH",
"1295.333 1277.833 OFFCURVE",
"1246 1316 OFFCURVE",
"1192 1348 CURVE SMOOTH",
"1084 1412 OFFCURVE",
"957.667 1448 OFFCURVE",
"823 1448 CURVE SMOOTH",
"755.667 1448 OFFCURVE",
"691 1439.333 OFFCURVE",
"629 1422 CURVE SMOOTH",
"505 1387.333 OFFCURVE",
"396.167 1322.167 OFFCURVE",
"307.5 1233.5 CURVE SMOOTH",
"263.167 1189.167 OFFCURVE",
"225 1139.833 OFFCURVE",
"193 1085.5 CURVE SMOOTH",
"129 976.833 OFFCURVE",
"93 850.667 OFFCURVE",
"93 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"194 775.333 OFFCURVE",
"201.333 832.667 OFFCURVE",
"216 888 CURVE SMOOTH",
"245.333 998.667 OFFCURVE",
"299.833 1094.333 OFFCURVE",
"376.5 1173 CURVE SMOOTH",
"414.833 1212.333 OFFCURVE",
"457.167 1245.833 OFFCURVE",
"503.5 1273.5 CURVE SMOOTH",
"596.167 1328.833 OFFCURVE",
"705.667 1361 OFFCURVE",
"823 1361 CURVE SMOOTH",
"999 1361 OFFCURVE",
"1158.5 1289.167 OFFCURVE",
"1272.5 1172.5 CURVE SMOOTH",
"1386.5 1055.833 OFFCURVE",
"1457 894.667 OFFCURVE",
"1457 716 CURVE SMOOTH",
"1457 656.667 OFFCURVE",
"1449.5 599.667 OFFCURVE",
"1434.5 545 CURVE SMOOTH",
"1404.5 435.667 OFFCURVE",
"1349.167 339.333 OFFCURVE",
"1272.5 262 CURVE SMOOTH",
"1234.167 223.333 OFFCURVE",
"1191.5 190.167 OFFCURVE",
"1144.5 162.5 CURVE SMOOTH",
"1050.5 107.167 OFFCURVE",
"940.333 76 OFFCURVE",
"823 76 CURVE SMOOTH",
"764.333 76 OFFCURVE",
"708 83.5 OFFCURVE",
"654 98.5 CURVE SMOOTH",
"546 128.5 OFFCURVE",
"453.167 184.667 OFFCURVE",
"376.5 262 CURVE SMOOTH",
"338.167 300.667 OFFCURVE",
"305.5 343.833 OFFCURVE",
"278.5 391.5 CURVE SMOOTH",
"224.5 486.833 OFFCURVE",
"194 597.333 OFFCURVE",
"194 716 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
1 0 92 90 80 78 66 64 52 50 40 38 30 28 25 23 18 16 8 6 0 43 1 43 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
20 1 4 2 4 1 5 0 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 18 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 72 values pushed */
20 1 4 2 4 1 5 0 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 9 9 6 1 0 36 0 6 6 17 31 0 8 8 7 1 0 36 0 7 7 21 7 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 70 values pushed */
20 1 4 2 4 1 5 0 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 8 7 1 0 36 0 7 7 21 7 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 79 values pushed */
20 1 4 2 4 1 5 0 2 30 0 3 4 0 4 3 0 50 10 1 0 5 4 0 5 48 0 6 0 9 2 6 9 1 0 38 0 2 0 4 3 2 4 1 0 38 0 5 0 1 8 5 1 1 0 38 0 8 7 7 8 1 0 35 0 8 8 7 1 0 36 0 7 8 7 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1597;
}
);
note = copyright;
unicode = 00A9;
},
{
glyphname = registered;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"94 648.667 OFFCURVE",
"102.667 584 OFFCURVE",
"120 522 CURVE SMOOTH",
"154.667 398 OFFCURVE",
"219.833 289.167 OFFCURVE",
"308.5 200.5 CURVE SMOOTH",
"352.833 156.167 OFFCURVE",
"402.167 118 OFFCURVE",
"456.5 86 CURVE SMOOTH",
"565.167 22 OFFCURVE",
"690.333 -14 OFFCURVE",
"825 -14 CURVE SMOOTH",
"892.333 -14 OFFCURVE",
"957 -5.333 OFFCURVE",
"1019 12 CURVE SMOOTH",
"1143 46.667 OFFCURVE",
"1252.833 111.833 OFFCURVE",
"1341.5 200.5 CURVE SMOOTH",
"1385.833 244.833 OFFCURVE",
"1424 294 OFFCURVE",
"1456 348 CURVE SMOOTH",
"1520 456 OFFCURVE",
"1556 582.667 OFFCURVE",
"1556 716 CURVE SMOOTH",
"1556 783.333 OFFCURVE",
"1547.333 848.167 OFFCURVE",
"1530 910.5 CURVE SMOOTH",
"1495.333 1035.167 OFFCURVE",
"1430.167 1144.833 OFFCURVE",
"1341.5 1233.5 CURVE SMOOTH",
"1297.167 1277.833 OFFCURVE",
"1247.833 1316 OFFCURVE",
"1193.5 1348 CURVE SMOOTH",
"1084.833 1412 OFFCURVE",
"959.667 1448 OFFCURVE",
"825 1448 CURVE SMOOTH",
"757.667 1448 OFFCURVE",
"693 1439.333 OFFCURVE",
"631 1422 CURVE SMOOTH",
"507 1387.333 OFFCURVE",
"397.167 1322.167 OFFCURVE",
"308.5 1233.5 CURVE SMOOTH",
"264.167 1189.167 OFFCURVE",
"226 1139.833 OFFCURVE",
"194 1085.5 CURVE SMOOTH",
"130 976.833 OFFCURVE",
"94 850.667 OFFCURVE",
"94 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"195 894.667 OFFCURVE",
"264.667 1055.833 OFFCURVE",
"378 1172.5 CURVE SMOOTH",
"491.333 1289.167 OFFCURVE",
"649 1361 OFFCURVE",
"825 1361 CURVE SMOOTH",
"1001 1361 OFFCURVE",
"1159.5 1289.167 OFFCURVE",
"1273.5 1172.5 CURVE SMOOTH",
"1387.5 1055.833 OFFCURVE",
"1458 894.667 OFFCURVE",
"1458 716 CURVE SMOOTH",
"1458 656.667 OFFCURVE",
"1450.5 599.667 OFFCURVE",
"1435.5 545 CURVE SMOOTH",
"1405.5 435.667 OFFCURVE",
"1350.167 339.333 OFFCURVE",
"1273.5 262 CURVE SMOOTH",
"1235.167 223.333 OFFCURVE",
"1192.5 190.167 OFFCURVE",
"1145.5 162.5 CURVE SMOOTH",
"1051.5 107.167 OFFCURVE",
"942.333 76 OFFCURVE",
"825 76 CURVE SMOOTH",
"766.333 76 OFFCURVE",
"710 83.5 OFFCURVE",
"656 98.5 CURVE SMOOTH",
"548 128.5 OFFCURVE",
"454 184.667 OFFCURVE",
"378 262 CURVE SMOOTH",
"340 300.667 OFFCURVE",
"307.333 343.833 OFFCURVE",
"280 391.5 CURVE SMOOTH",
"225.333 486.833 OFFCURVE",
"195 597.333 OFFCURVE",
"195 716 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"761 626 LINE SMOOTH",
"795.667 626 OFFCURVE",
"809 617.667 OFFCURVE",
"821 599 CURVE SMOOTH",
"1022 297 LINE SMOOTH",
"1032.667 280.333 OFFCURVE",
"1049 272 OFFCURVE",
"1071 272 CURVE SMOOTH",
"1219 272 LINE",
"992 606 LINE SMOOTH",
"974.667 631.333 OFFCURVE",
"960.667 652.667 OFFCURVE",
"938 666 CURVE",
"1079.333 699.333 OFFCURVE",
"1151 791.667 OFFCURVE",
"1151 917 CURVE SMOOTH",
"1151 1079.667 OFFCURVE",
"1042.333 1164 OFFCURVE",
"813 1164 CURVE SMOOTH",
"525 1164 LINE",
"525 272 LINE",
"681 272 LINE",
"681 626 LINE"
);
},
{
closed = 1;
nodes = (
"681 1044 LINE",
"813 1044 LINE SMOOTH",
"943.043 1044 OFFCURVE",
"997 1002.212 OFFCURVE",
"997 897 CURVE SMOOTH",
"997 788.929 OFFCURVE",
"934.569 740 OFFCURVE",
"796 740 CURVE SMOOTH",
"681 740 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
52 52 86 84 76 74 52 73 52 72 68 66 57 55 54 53 48 46 36 34 22 20 8 6 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 18 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 0 2 2 1 1 0 36 0 1 1 21 1 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 2 2 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 69 values pushed */
62 1 7 8 1 30 6 1 4 7 2 7 4 2 50 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 4 8 7 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
62 1 7 8 1 30 0 6 7 4 7 6 4 50 0 4 2 7 4 2 48 0 0 0 3 5 0 3 1 0 38 0 5 0 9 8 5 9 1 0 38 0 8 10 1 7 6 8 7 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1597;
}
);
note = registered;
unicode = 00AE;
},
{
glyphname = trademark;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"848 1411 LINE SMOOTH",
"841.333 1429.667 OFFCURVE",
"831.333 1431 OFFCURVE",
"810 1431 CURVE SMOOTH",
"707 1431 LINE",
"636 841 LINE",
"741 841 LINE",
"787 1211 LINE",
"787 1283 LINE",
"912 945 LINE SMOOTH",
"918.667 927 OFFCURVE",
"931.333 918 OFFCURVE",
"950 918 CURVE SMOOTH",
"967 918 LINE SMOOTH",
"986.333 918 OFFCURVE",
"1001.333 927 OFFCURVE",
"1012 945 CURVE SMOOTH",
"1218 1282 LINE",
"1202 1211 LINE",
"1156 841 LINE",
"1263 841 LINE",
"1334 1431 LINE",
"1232 1431 LINE SMOOTH",
"1210.667 1431 OFFCURVE",
"1202 1429.667 OFFCURVE",
"1190 1411 CURVE SMOOTH",
"1001 1104 LINE SMOOTH",
"990.333 1086.667 OFFCURVE",
"982 1071.333 OFFCURVE",
"974 1054 CURVE",
"971.333 1069.333 OFFCURVE",
"967.333 1086 OFFCURVE",
"962 1104 CURVE"
);
},
{
closed = 1;
nodes = (
"174 1431 LINE",
"160 1330 LINE",
"324 1330 LINE",
"265 841 LINE",
"385 841 LINE",
"445 1330 LINE",
"609 1330 LINE",
"622 1431 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
30 30 30 37 30 37 36 35 34 33 32 31 27 25 24 23 19 16 12 11 10 8 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
22 21 14 2 4 2 5 1 30 0 2 5 1 5 2 1 50 7 1 5 5 0 1 0 36 9 8 4 3 0 0 11 31 6 3 2 1 1 0 1 0 36 9 8 4 3 0 0 11 1 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
22 21 14 2 4 2 5 1 30 0 2 5 1 5 2 1 50 9 8 4 3 0 7 1 5 2 0 5 0 0 38 9 8 4 3 0 0 1 0 0 36 6 3 2 1 0 1 0 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 75 values pushed */
22 21 14 2 4 2 5 1 30 0 7 8 5 5 7 42 0 2 5 6 5 2 6 50 0 6 3 5 6 3 48 0 0 4 1 0 1 0 35 9 1 8 0 5 2 8 5 0 0 38 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 0 36 0 1 0 1 0 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1327;
}
);
note = trademark;
unicode = 2122;
},
{
glyphname = degree;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"142 1040 OFFCURVE",
"178.333 959.5 OFFCURVE",
"237 901.5 CURVE SMOOTH",
"295.667 843.5 OFFCURVE",
"376.333 807 OFFCURVE",
"467 807 CURVE SMOOTH",
"559 807 OFFCURVE",
"640.333 843.5 OFFCURVE",
"699 901.5 CURVE SMOOTH",
"757.667 959.5 OFFCURVE",
"793 1040 OFFCURVE",
"793 1128 CURVE SMOOTH",
"793 1217.333 OFFCURVE",
"757.667 1298.5 OFFCURVE",
"699 1356.5 CURVE SMOOTH",
"640.333 1414.5 OFFCURVE",
"559 1450 OFFCURVE",
"467 1450 CURVE SMOOTH",
"376.333 1450 OFFCURVE",
"295.667 1414.5 OFFCURVE",
"237 1356.5 CURVE SMOOTH",
"178.333 1298.5 OFFCURVE",
"142 1217.333 OFFCURVE",
"142 1128 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"267 1239.915 OFFCURVE",
"355.259 1329 OFFCURVE",
"467 1329 CURVE SMOOTH",
"580.295 1329 OFFCURVE",
"666 1240.338 OFFCURVE",
"666 1127 CURVE SMOOTH",
"666 1014.856 OFFCURVE",
"580.275 927 OFFCURVE",
"467 927 CURVE SMOOTH",
"355.279 927 OFFCURVE",
"267 1015.279 OFFCURVE",
"267 1127 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 17 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 773;
}
);
note = degree;
unicode = 00B0;
},
{
glyphname = bar;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"171 -343 LINE",
"309 -343 LINE",
"309 1533 LINE",
"171 1533 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 0 0 36 0 1 1 16 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = bar;
unicode = 007C;
},
{
glyphname = brokenbar;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"171 739 LINE",
"309 739 LINE",
"309 1533 LINE",
"171 1533 LINE"
);
},
{
closed = 1;
nodes = (
"171 -343 LINE",
"309 -343 LINE",
"309 452 LINE",
"171 452 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 24 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 2 3 0 0 36 0 3 3 16 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 600;
}
);
note = brokenbar;
unicode = 00A6;
},
{
glyphname = dagger;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"153 882 LINE",
"515 882 LINE",
"461 438 LINE",
"344 -336 LINE",
"366.667 -350.667 OFFCURVE",
"395.333 -358 OFFCURVE",
"430 -358 CURVE SMOOTH",
"463.333 -358 OFFCURVE",
"496.333 -350.667 OFFCURVE",
"523 -336 CURVE",
"595 438 LINE",
"649 882 LINE",
"1012 882 LINE",
"1013.625 900.689 OFFCURVE",
"1018 946.853 OFFCURVE",
"1018 949 CURVE SMOOTH",
"1018 983.667 OFFCURVE",
"997.667 1016 OFFCURVE",
"947 1016 CURVE SMOOTH",
"904.333 1016 OFFCURVE",
"857.167 1008.667 OFFCURVE",
"808.5 1002 CURVE SMOOTH",
"769.23 996.621 OFFCURVE",
"701.139 985.345 OFFCURVE",
"661 982 CURVE",
"741 1450 LINE",
"717.667 1464.667 OFFCURVE",
"689 1472 OFFCURVE",
"655 1472 CURVE SMOOTH",
"621 1472 OFFCURVE",
"590.333 1464.667 OFFCURVE",
"563 1450 CURVE",
"528 982 LINE",
"480.667 986.667 OFFCURVE",
"433.167 993.333 OFFCURVE",
"385.5 1002 CURVE SMOOTH",
"337.833 1010.667 OFFCURVE",
"293 1015.333 OFFCURVE",
"251 1016 CURVE SMOOTH",
"195 1016 OFFCURVE",
"166.333 978.667 OFFCURVE",
"161 940 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
37 36 32 30 26 25 18 16 10 8 4 2 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
11 1 0 1 12 1 3 0 2 30 0 1 1 13 31 5 1 3 3 0 1 0 36 2 1 0 0 14 31 0 4 4 22 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
11 1 0 1 12 1 3 0 2 30 0 4 3 4 53 0 1 1 13 31 5 1 3 3 0 1 0 36 2 1 0 0 14 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
165 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
11 1 0 1 12 1 3 0 2 30 0 4 3 4 53 2 1 0 5 1 3 4 0 3 0 2 38 0 1 1 13 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 46 values pushed */
11 1 0 1 12 1 3 0 2 30 0 1 0 1 52 0 4 3 4 53 2 1 0 3 3 0 1 0 35 2 1 0 0 3 0 2 36 5 1 3 0 3 0 2 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
11 1 2 1 12 1 3 0 2 30 0 1 2 1 52 0 4 3 4 53 0 2 0 3 2 1 0 35 0 0 3 3 0 1 0 35 0 0 0 3 0 0 36 5 1 3 0 3 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 53 values pushed */
11 1 2 1 12 1 5 0 2 30 0 1 2 1 52 0 4 3 4 53 0 2 0 3 2 1 0 35 0 0 0 5 3 0 5 0 0 38 0 2 2 3 0 2 36 0 3 2 3 0 2 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1068;
}
);
note = dagger;
unicode = 2020;
},
{
glyphname = daggerdbl;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"153 882 LINE",
"516 882 LINE",
"436 232 LINE",
"73 232 LINE",
"70.404 212.094 OFFCURVE",
"66 166.33 OFFCURVE",
"66 164 CURVE SMOOTH",
"66 128 OFFCURVE",
"86.333 97 OFFCURVE",
"137 97 CURVE SMOOTH",
"206.638 97 OFFCURVE",
"345.708 122.559 OFFCURVE",
"423 129 CURVE",
"344 -336 LINE",
"366.667 -350.667 OFFCURVE",
"395.333 -358 OFFCURVE",
"430 -358 CURVE SMOOTH",
"463.333 -358 OFFCURVE",
"496.333 -350.667 OFFCURVE",
"523 -336 CURVE",
"556 129 LINE",
"603.333 125 OFFCURVE",
"651 118.833 OFFCURVE",
"699 110.5 CURVE SMOOTH",
"747 102.167 OFFCURVE",
"792 97.667 OFFCURVE",
"834 97 CURVE SMOOTH",
"890 97 OFFCURVE",
"921 134 OFFCURVE",
"925 174 CURVE SMOOTH",
"931 232 LINE",
"569 232 LINE",
"649 882 LINE",
"1012 882 LINE",
"1014.667 900.667 OFFCURVE",
"1019 931 OFFCURVE",
"1019 951 CURVE SMOOTH",
"1019 985.667 OFFCURVE",
"997.667 1016 OFFCURVE",
"947 1016 CURVE SMOOTH",
"904.333 1016 OFFCURVE",
"857.167 1008.667 OFFCURVE",
"808.5 1002 CURVE SMOOTH",
"769.23 996.621 OFFCURVE",
"701.139 985.345 OFFCURVE",
"661 982 CURVE",
"741 1450 LINE",
"717.667 1464.667 OFFCURVE",
"689 1472 OFFCURVE",
"655 1472 CURVE SMOOTH",
"621 1472 OFFCURVE",
"590.333 1464.667 OFFCURVE",
"563 1450 CURVE",
"528 982 LINE",
"480.667 986.667 OFFCURVE",
"433.167 993.333 OFFCURVE",
"385.5 1002 CURVE SMOOTH",
"337.833 1010.667 OFFCURVE",
"293 1015.333 OFFCURVE",
"251 1016 CURVE SMOOTH",
"195 1016 OFFCURVE",
"166.333 978.667 OFFCURVE",
"161 940 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
57 56 55 54 47 45 38 36 31 29 26 25 24 23 18 16 10 8 4 2 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
11 1 0 1 12 1 3 0 41 33 2 5 4 40 34 2 6 5 4 30 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 13 31 9 1 3 3 0 1 0 36 2 1 0 0 14 31 0 6 6 22 6 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 58 values pushed */
11 1 0 1 12 1 3 0 41 33 2 5 4 40 34 2 6 5 4 30 0 6 5 6 53 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 13 31 9 1 3 3 0 1 0 36 2 1 0 0 14 3 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
165 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
11 1 0 1 12 1 3 0 41 33 2 5 4 40 34 2 6 5 4 30 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 7 1 5 6 4 5 1 0 38 0 1 1 13 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 68 values pushed */
11 1 0 1 12 1 3 0 41 33 2 5 4 40 34 2 6 5 4 30 0 1 0 1 52 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 1 0 36 7 1 5 4 5 1 0 33 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 75 values pushed */
11 1 2 1 12 1 3 0 41 33 2 5 4 40 34 2 6 5 4 30 0 1 2 1 52 0 6 5 6 53 0 2 0 3 2 1 0 35 0 0 9 1 3 4 0 3 0 0 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 1 0 36 7 1 5 4 5 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 83 values pushed */
11 1 2 1 12 1 9 0 41 33 2 7 8 40 34 2 6 5 4 30 0 1 2 1 52 0 6 5 6 53 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 2 38 0 4 8 5 4 0 0 35 0 8 0 7 5 8 7 1 0 38 0 4 4 5 1 0 36 0 5 4 5 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1068;
}
);
note = daggerdbl;
unicode = 2021;
},
{
glyphname = cent;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"460 -237 LINE",
"524 -237 LINE SMOOTH",
"552 -237 OFFCURVE",
"572.667 -214.333 OFFCURVE",
"578 -189 CURVE SMOOTH",
"611 -12 LINE",
"752.533 -4.137 OFFCURVE",
"893.133 45.747 OFFCURVE",
"982 140 CURVE",
"943 200 LINE",
"937 210 OFFCURVE",
"926.667 215 OFFCURVE",
"912 215 CURVE SMOOTH",
"893.163 215 OFFCURVE",
"854.203 188.109 OFFCURVE",
"822.5 171 CURVE SMOOTH",
"780.5 148.333 OFFCURVE",
"721.333 124.333 OFFCURVE",
"636 119 CURVE",
"783 890 LINE",
"832.881 881.687 OFFCURVE",
"955.744 817 OFFCURVE",
"971 817 CURVE SMOOTH",
"989.667 817 OFFCURVE",
"999.333 822.333 OFFCURVE",
"1010 837 CURVE",
"1062 897 LINE",
"998 962.333 OFFCURVE",
"916.333 1005.333 OFFCURVE",
"807 1020 CURVE",
"852 1254 LINE",
"788 1254 LINE SMOOTH",
"761.333 1254 OFFCURVE",
"739.333 1231.333 OFFCURVE",
"734 1206 CURVE SMOOTH",
"700 1025 LINE",
"524 1021 OFFCURVE",
"383 956.333 OFFCURVE",
"287 851 CURVE SMOOTH",
"191 745.667 OFFCURVE",
"138 599 OFFCURVE",
"138 431 CURVE SMOOTH",
"138 303 OFFCURVE",
"174 198.833 OFFCURVE",
"238 123.5 CURVE SMOOTH",
"302 48.167 OFFCURVE",
"393.667 2 OFFCURVE",
"503 -10 CURVE"
);
},
{
closed = 1;
nodes = (
"307 571 OFFCURVE",
"339.5 681.333 OFFCURVE",
"401.5 760 CURVE SMOOTH",
"463.5 838.667 OFFCURVE",
"555 885 OFFCURVE",
"675 893 CURVE",
"529 125 LINE",
"387.667 153 OFFCURVE",
"307 263 OFFCURVE",
"307 439 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
53 52 47 45 42 41 35 33 30 29 24 22 15 13 10 9 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
19 16 2 7 0 37 1 3 4 0 1 5 3 3 30 0 1 0 1 52 0 2 7 4 7 2 4 50 0 4 3 7 4 3 48 0 6 5 6 53 0 7 7 0 1 0 36 0 0 0 20 31 0 3 3 5 1 0 36 0 5 5 18 5 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 66 values pushed */
19 16 2 7 0 37 1 3 4 0 1 5 3 3 30 0 1 0 1 52 0 2 7 4 7 2 4 50 0 4 3 7 4 3 48 0 6 5 6 53 0 7 7 0 1 0 36 0 0 0 20 31 0 3 3 5 1 0 36 0 5 5 21 5 32 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 73 values pushed */
19 16 2 7 0 37 1 3 4 0 1 5 3 3 30 0 1 0 1 52 0 2 7 4 7 2 4 50 0 4 3 7 4 3 48 0 6 5 6 53 0 0 0 7 2 0 7 1 0 38 0 3 5 5 3 1 0 35 0 3 3 5 1 0 36 0 5 3 5 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = cent;
unicode = 00A2;
},
{
glyphname = currency;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"262 594.667 OFFCURVE",
"284.667 525.667 OFFCURVE",
"326 467 CURVE",
"174 315 LINE",
"264 224 LINE",
"417 377 LINE",
"475.667 338.333 OFFCURVE",
"543 315 OFFCURVE",
"619 315 CURVE SMOOTH",
"695 315 OFFCURVE",
"765.333 337.667 OFFCURVE",
"824 379 CURVE",
"976 227 LINE",
"1067 319 LINE",
"915 470 LINE",
"953.667 527.333 OFFCURVE",
"977 596 OFFCURVE",
"977 672 CURVE SMOOTH",
"977 749.333 OFFCURVE",
"953.333 818.333 OFFCURVE",
"912 877 CURVE",
"1063 1029 LINE",
"974 1120 LINE",
"821 967 LINE",
"763.667 1007 OFFCURVE",
"695 1030 OFFCURVE",
"619 1030 CURVE SMOOTH",
"541.667 1030 OFFCURVE",
"471.667 1006.333 OFFCURVE",
"413 965 CURVE",
"262 1117 LINE",
"171 1027 LINE",
"324 874 LINE",
"285.333 815.333 OFFCURVE",
"262 748 OFFCURVE",
"262 672 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"394 797.109 OFFCURVE",
"494.309 898 OFFCURVE",
"619 898 CURVE SMOOTH",
"743.481 898 OFFCURVE",
"846 798.023 OFFCURVE",
"846 672 CURVE SMOOTH",
"846 549.554 OFFCURVE",
"743.217 448 OFFCURVE",
"619 448 CURVE SMOOTH",
"494.972 448 OFFCURVE",
"394 550.829 OFFCURVE",
"394 672 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
52 50 42 40 28 26 10 8 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
14 12 6 4 4 3 0 33 21 15 3 4 2 3 30 24 22 3 1 2 3 30 13 5 2 0 28 32 31 23 3 1 27 0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 20 3 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
14 12 6 4 4 3 0 33 21 15 3 4 2 3 30 24 22 3 1 2 3 30 13 5 2 0 28 32 31 23 3 1 27 0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = currency;
unicode = 00A4;
},
{
glyphname = dollar;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"397 -239 LINE",
"461 -239 LINE SMOOTH",
"489 -239 OFFCURVE",
"509.667 -217 OFFCURVE",
"515 -193 CURVE SMOOTH",
"549 -15 LINE",
"705 -5.667 OFFCURVE",
"832 52.833 OFFCURVE",
"920 141.5 CURVE SMOOTH",
"1008 230.167 OFFCURVE",
"1056 347.333 OFFCURVE",
"1056 474 CURVE SMOOTH",
"1056 579.333 OFFCURVE",
"1010.5 648.833 OFFCURVE",
"944.5 697.5 CURVE SMOOTH",
"878.5 746.167 OFFCURVE",
"790.333 777 OFFCURVE",
"705 805 CURVE",
"798 1296 LINE",
"864.667 1286.667 OFFCURVE",
"912 1261.667 OFFCURVE",
"948 1239 CURVE SMOOTH",
"976.562 1221.017 OFFCURVE",
"1009.09 1196 OFFCURVE",
"1026 1196 CURVE SMOOTH",
"1046 1196 OFFCURVE",
"1059.333 1205 OFFCURVE",
"1074 1225 CURVE SMOOTH",
"1122 1289 LINE",
"1054 1367.667 OFFCURVE",
"962.333 1425 OFFCURVE",
"825 1441 CURVE",
"863 1638 LINE",
"799 1638 LINE SMOOTH",
"772.333 1638 OFFCURVE",
"750.333 1615.333 OFFCURVE",
"745 1590 CURVE SMOOTH",
"717 1445 LINE",
"569 1439.667 OFFCURVE",
"449.667 1385 OFFCURVE",
"367 1305 CURVE SMOOTH",
"284.333 1225 OFFCURVE",
"239 1118.667 OFFCURVE",
"239 1008 CURVE SMOOTH",
"239 898.667 OFFCURVE",
"280.5 827.5 OFFCURVE",
"342.5 777.5 CURVE SMOOTH",
"404.5 727.5 OFFCURVE",
"487.333 697.333 OFFCURVE",
"570 672 CURVE",
"467 132 LINE",
"376.333 142.667 OFFCURVE",
"317.833 178.833 OFFCURVE",
"274.5 211.5 CURVE SMOOTH",
"239.795 237.662 OFFCURVE",
"202.748 274 OFFCURVE",
"181 274 CURVE SMOOTH",
"161 274 OFFCURVE",
"144.667 265.667 OFFCURVE",
"132 249 CURVE SMOOTH",
"71 171 LINE",
"155 71 OFFCURVE",
"281.333 2.667 OFFCURVE",
"440 -12 CURVE"
);
},
{
closed = 1;
nodes = (
"887 350.667 OFFCURVE",
"859.333 280.167 OFFCURVE",
"806 227.5 CURVE SMOOTH",
"752.667 174.833 OFFCURVE",
"675.667 140.333 OFFCURVE",
"577 131 CURVE",
"673 639 LINE",
"791.227 598.695 OFFCURVE",
"887 549.748 OFFCURVE",
"887 432 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"405 1109.667 OFFCURVE",
"427.167 1167.667 OFFCURVE",
"474.5 1213 CURVE SMOOTH",
"521.833 1258.333 OFFCURVE",
"593 1290 OFFCURVE",
"689 1298 CURVE",
"602 840 LINE",
"492.659 882.67 OFFCURVE",
"405 935.558 OFFCURVE",
"405 1047 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
56 54 51 50 36 34 27 25 22 21 7 5 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
74 31 28 3 3 1 41 12 2 0 3 63 3 2 4 0 3 30 0 1 4 1 29 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 17 31 0 4 4 21 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
13 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
74 31 28 3 3 1 41 12 2 0 3 63 3 2 4 0 3 30 0 1 4 1 29 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 17 31 0 4 4 18 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
74 31 28 3 3 1 41 12 2 0 3 63 3 2 4 0 3 30 0 1 4 1 29 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 17 31 0 4 4 21 4 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 62 values pushed */
74 31 28 3 3 1 41 12 2 0 3 63 3 2 4 0 3 30 0 1 4 1 29 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 1 4 1 0 36 0 4 4 21 4 32 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 71 values pushed */
74 31 28 3 3 1 41 12 2 0 3 63 3 2 4 0 3 30 0 1 4 1 29 0 2 1 2 52 0 3 1 0 1 3 0 50 0 0 4 1 0 4 48 0 5 4 5 53 0 1 3 4 1 1 0 35 0 1 1 4 1 0 36 0 4 1 4 1 0 33 9 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = dollar;
unicode = 0024;
},
{
glyphname = euro;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"72 798 LINE",
"204 798 LINE",
"196 750.667 OFFCURVE",
"191 702.333 OFFCURVE",
"189 653 CURVE",
"54 653 LINE",
"42 554 LINE",
"187 554 LINE",
"191 383.333 OFFCURVE",
"232.333 240.833 OFFCURVE",
"311 141.5 CURVE SMOOTH",
"389.667 42.167 OFFCURVE",
"505.333 -15 OFFCURVE",
"656 -15 CURVE SMOOTH",
"845.333 -15 OFFCURVE",
"992.333 64.333 OFFCURVE",
"1103 199 CURVE",
"1038 267 LINE",
"1030 277.667 OFFCURVE",
"1023.667 279 OFFCURVE",
"1013 279 CURVE SMOOTH",
"990.247 279 OFFCURVE",
"950.562 235.155 OFFCURVE",
"912.5 207 CURVE SMOOTH",
"863.833 171 OFFCURVE",
"792.333 135 OFFCURVE",
"683 135 CURVE SMOOTH",
"489.667 135 OFFCURVE",
"373.333 282 OFFCURVE",
"364 554 CURVE",
"776 554 LINE SMOOTH",
"806.667 554 OFFCURVE",
"829.333 576.333 OFFCURVE",
"832 599 CURVE SMOOTH",
"839 653 LINE",
"365 653 LINE",
"367.667 703.667 OFFCURVE",
"372 751.333 OFFCURVE",
"380 798 CURVE",
"898 798 LINE SMOOTH",
"931.333 798 OFFCURVE",
"951 819.333 OFFCURVE",
"955 842 CURVE",
"961 897 LINE",
"401 897 LINE",
"435.667 1025 OFFCURVE",
"492.5 1125 OFFCURVE",
"566.5 1193 CURVE SMOOTH",
"640.5 1261 OFFCURVE",
"732.333 1296 OFFCURVE",
"835 1296 CURVE SMOOTH",
"906.963 1296 OFFCURVE",
"999.532 1263.183 OFFCURVE",
"1033 1235 CURVE SMOOTH",
"1061.663 1210.863 OFFCURVE",
"1090.575 1174 OFFCURVE",
"1110 1174 CURVE SMOOTH",
"1128.667 1174 OFFCURVE",
"1134 1178 OFFCURVE",
"1150 1194 CURVE SMOOTH",
"1217 1260 LINE",
"1138.333 1376 OFFCURVE",
"1024.333 1446 OFFCURVE",
"847 1446 CURVE SMOOTH",
"697.667 1446 OFFCURVE",
"564.833 1393.667 OFFCURVE",
"457.5 1299 CURVE SMOOTH",
"350.167 1204.333 OFFCURVE",
"269 1066.333 OFFCURVE",
"225 897 CURVE",
"84 897 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
66 65 63 62 61 60 56 54 49 47 44 42 40 38 35 34 31 29 26 25 21 19 14 12 7 5 1 0 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 76 values pushed */
9 1 2 3 52 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 3 3 1 1 0 36 0 1 1 17 31 0 8 8 10 1 0 36 0 10 10 18 10 32 9 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
9 1 2 3 52 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 8 10 1 0 36 0 10 10 21 10 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 83 values pushed */
9 1 2 3 52 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 4 1 0 13 1 5 6 0 5 1 0 38 12 1 6 11 1 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 9 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 99 values pushed */
9 1 2 3 52 1 8 9 2 30 0 2 3 0 3 2 0 50 0 9 7 8 7 9 8 50 0 1 0 3 2 1 3 1 0 38 0 0 0 13 5 0 13 0 0 38 0 4 0 5 6 4 5 1 0 38 0 12 0 11 7 12 11 0 0 38 0 6 0 7 9 6 7 1 0 38 0 8 10 10 8 1 0 35 0 8 8 10 1 0 36 0 10 8 10 1 0 33 11 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = Euro;
unicode = 20AC;
},
{
glyphname = florin;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1041 770 LINE",
"1057 895 LINE",
"730 895 LINE",
"773 1059 LINE SMOOTH",
"797 1151 OFFCURVE",
"835.833 1212.167 OFFCURVE",
"884.5 1251.5 CURVE SMOOTH",
"933.167 1290.833 OFFCURVE",
"990.333 1307 OFFCURVE",
"1053 1307 CURVE SMOOTH",
"1093 1307 OFFCURVE",
"1113 1320.667 OFFCURVE",
"1117 1358 CURVE SMOOTH",
"1129 1453 LINE",
"839.667 1453 OFFCURVE",
"672 1327.667 OFFCURVE",
"608 1065 CURVE SMOOTH",
"566 895 LINE",
"352 895 LINE",
"350.667 884.333 OFFCURVE",
"349.333 874.333 OFFCURVE",
"348 865 CURVE SMOOTH",
"345.333 847.667 OFFCURVE",
"343 829 OFFCURVE",
"343 817 CURVE SMOOTH",
"343 797 OFFCURVE",
"355 782.667 OFFCURVE",
"379 780 CURVE SMOOTH",
"534 765 LINE",
"357 41 LINE SMOOTH",
"334.333 -51 OFFCURVE",
"296 -112.333 OFFCURVE",
"248 -151 CURVE SMOOTH",
"200 -189.667 OFFCURVE",
"142.333 -205.667 OFFCURVE",
"81 -207 CURVE SMOOTH",
"42.333 -207 OFFCURVE",
"20.667 -225.333 OFFCURVE",
"16 -262 CURVE SMOOTH",
"5 -353 LINE",
"285 -353 OFFCURVE",
"459.333 -235.667 OFFCURVE",
"526 35 CURVE SMOOTH",
"705 770 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
0 0 0 39 0 39 38 37 32 30 27 26 23 22 8 6 4 3 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
13 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 4 4 3 1 0 36 0 3 3 17 31 0 1 1 0 1 0 36 0 0 0 16 0 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
13 1 1 6 1 30 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 0 1 0 37 0 4 4 3 1 0 36 0 3 3 17 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 51 values pushed */
13 1 1 6 1 30 0 3 0 4 2 3 4 1 0 38 5 1 2 7 1 6 1 2 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 58 values pushed */
13 1 1 6 1 30 0 2 4 5 4 2 5 50 0 3 0 4 2 3 4 1 0 38 0 5 7 1 6 1 5 6 0 0 38 0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = florin;
unicode = 0192;
},
{
glyphname = sterling;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"890 661 LINE",
"897 731 LINE",
"425 731 LINE",
"457 997 LINE SMOOTH",
"467.667 1089 OFFCURVE",
"502.5 1164.833 OFFCURVE",
"556.5 1217.5 CURVE SMOOTH",
"610.5 1270.167 OFFCURVE",
"682.333 1300 OFFCURVE",
"769 1300 CURVE SMOOTH",
"901.425 1300 OFFCURVE",
"941.631 1253.763 OFFCURVE",
"995 1169 CURVE",
"1005.667 1150.333 OFFCURVE",
"1022.333 1145 OFFCURVE",
"1041 1145 CURVE SMOOTH",
"1054.333 1145 OFFCURVE",
"1067.667 1148.333 OFFCURVE",
"1081 1155 CURVE",
"1156 1199 LINE",
"1132 1269.667 OFFCURVE",
"1095.667 1332 OFFCURVE",
"1037 1376 CURVE SMOOTH",
"978.333 1420 OFFCURVE",
"898 1447 OFFCURVE",
"786 1447 CURVE SMOOTH",
"640.667 1447 OFFCURVE",
"522.5 1397.333 OFFCURVE",
"436.5 1316 CURVE SMOOTH",
"350.5 1234.667 OFFCURVE",
"296 1121.333 OFFCURVE",
"280 996 CURVE SMOOTH",
"247 731 LINE",
"134 731 LINE SMOOTH",
"103.333 731 OFFCURVE",
"80.667 709 OFFCURVE",
"78 685 CURVE SMOOTH",
"70 615 LINE",
"233 615 LINE",
"197 313 LINE SMOOTH",
"181.674 195.499 OFFCURVE",
"128.802 140.515 OFFCURVE",
"29 112 CURVE",
"15 0 LINE",
"980 0 LINE SMOOTH",
"1024.883 0 OFFCURVE",
"1058.358 39.324 OFFCURVE",
"1064 76 CURVE SMOOTH",
"1073 149 LINE",
"387 149 LINE SMOOTH",
"348.333 149 OFFCURVE",
"307.667 144 OFFCURVE",
"269 136 CURVE",
"333 192 OFFCURVE",
"368 259 OFFCURVE",
"380 359 CURVE SMOOTH",
"411 615 LINE",
"834 615 LINE SMOOTH",
"864.667 615 OFFCURVE",
"887.333 638.333 OFFCURVE",
"890 661 CURVE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
61 60 55 53 47 45 39 37 32 30 27 26 19 17 12 10 4 2 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
43 1 6 7 8 1 2 1 2 30 0 6 7 4 7 6 4 50 8 1 4 3 1 0 1 4 0 1 0 38 0 7 7 5 1 0 36 0 5 5 17 31 0 1 1 2 1 0 36 0 2 2 12 2 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 54 values pushed */
43 1 6 7 8 1 2 1 2 30 0 6 7 4 7 6 4 50 0 5 0 7 6 5 7 1 0 38 8 1 4 3 1 0 1 4 0 1 0 38 0 1 1 2 1 0 36 0 2 2 15 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 63 values pushed */
43 1 6 7 8 1 2 1 2 30 0 6 7 4 7 6 4 50 0 5 0 7 6 5 7 1 0 38 8 1 4 3 1 0 1 4 0 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 71 values pushed */
43 1 6 7 8 1 2 1 2 30 0 6 7 4 7 6 4 50 0 5 0 7 6 5 7 1 0 38 0 4 0 3 0 4 3 0 0 38 0 8 0 0 1 8 0 1 0 38 0 1 2 2 1 1 0 35 0 1 1 2 1 0 36 0 2 1 2 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = sterling;
unicode = 00A3;
},
{
glyphname = yen;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"151 525 LINE",
"494 525 LINE",
"481 420 LINE",
"139 420 LINE",
"126 321 LINE",
"469 321 LINE",
"430 0 LINE",
"602 0 LINE",
"641 321 LINE",
"983 321 LINE",
"995 420 LINE",
"653 420 LINE",
"666 525 LINE",
"1009 525 LINE",
"1020 624 LINE",
"710 624 LINE",
"1220 1431 LINE",
"1075 1431 LINE SMOOTH",
"1043 1431 OFFCURVE",
"1020.667 1410.667 OFFCURVE",
"1006 1388 CURVE SMOOTH",
"655 815 LINE SMOOTH",
"628.333 772.333 OFFCURVE",
"615 733.333 OFFCURVE",
"603 696 CURVE",
"597.667 733.333 OFFCURVE",
"593 771 OFFCURVE",
"577 815 CURVE SMOOTH",
"366 1388 LINE SMOOTH",
"356.667 1414.667 OFFCURVE",
"339 1431 OFFCURVE",
"307 1431 CURVE SMOOTH",
"163 1431 LINE",
"473 624 LINE",
"163 624 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 24 values pushed */
34 33 32 31 30 29 28 27 26 25 24 23 22 21 20 19 18 16 4 2 1 0 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 2 1 1 1 11 31 0 7 7 12 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 43 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 8 1 6 7 5 6 0 0 38 0 7 7 15 7 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
10 1 0 1 1 30 2 1 1 0 1 52 0 7 6 7 53 3 1 0 10 1 4 5 0 4 0 2 38 9 1 5 6 6 5 0 0 35 9 1 5 5 6 0 0 36 8 1 6 5 6 0 0 33 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 74 values pushed */
10 1 0 2 1 30 0 1 2 1 52 0 2 0 2 52 0 7 6 7 53 0 0 0 10 4 0 10 0 2 38 0 3 0 4 5 3 4 0 0 38 0 5 9 6 5 0 0 35 0 9 0 8 6 9 8 0 0 38 0 5 5 6 0 0 36 0 6 5 6 0 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = yen;
unicode = 00A5;
},
{
glyphname = plus;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"592 1165 LINE",
"538 736 LINE",
"131 736 LINE",
"115 606 LINE",
"522 606 LINE",
"469 175 LINE",
"610 175 LINE",
"663 606 LINE",
"1073 606 LINE",
"1089 736 LINE",
"679 736 LINE",
"732 1165 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 5 0 5 52 0 2 1 2 53 4 1 0 1 1 0 0 0 35 4 1 0 0 1 0 2 36 3 1 1 0 1 0 2 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 44 values pushed */
6 1 5 0 5 52 0 2 1 2 53 0 0 4 1 0 0 0 35 0 4 0 3 1 4 3 0 0 38 0 0 0 1 0 2 36 0 1 0 1 0 2 33 6 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plus;
unicode = 002B;
},
{
glyphname = minus;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"165 606 LINE",
"1023 606 LINE",
"1039 736 LINE",
"180 736 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = minus;
unicode = 2212;
},
{
glyphname = multiply;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1000 1109 LINE",
"612 763 LINE",
"308 1111 LINE",
"205 1018 LINE",
"509 671 LINE",
"108 314 LINE",
"188 221 LINE",
"590 579 LINE",
"903 223 LINE",
"1005 316 LINE",
"693 671 LINE",
"1081 1016 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
9 5 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = multiply;
unicode = 00D7;
},
{
glyphname = divide;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"115 606 LINE",
"1073 606 LINE",
"1089 736 LINE",
"131 736 LINE"
);
},
{
closed = 1;
nodes = (
"522 950.667 OFFCURVE",
"564.667 904 OFFCURVE",
"630 904 CURVE SMOOTH",
"702.868 904 OFFCURVE",
"768 963.8 OFFCURVE",
"768 1039 CURVE SMOOTH",
"768 1099.164 OFFCURVE",
"722.243 1150 OFFCURVE",
"660 1150 CURVE SMOOTH",
"585.393 1150 OFFCURVE",
"522 1086.607 OFFCURVE",
"522 1012 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"434 238.667 OFFCURVE",
"478 192 OFFCURVE",
"542 192 CURVE SMOOTH",
"614.868 192 OFFCURVE",
"680 251.8 OFFCURVE",
"680 327 CURVE SMOOTH",
"680 387.164 OFFCURVE",
"634.243 438 OFFCURVE",
"572 438 CURVE SMOOTH",
"497.393 438 OFFCURVE",
"434 374.607 OFFCURVE",
"434 300 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
38 36 28 26 20 18 10 8 3 2 1 0 6 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 43 values pushed */
0 2 0 3 0 2 3 1 0 38 0 0 0 1 4 0 1 0 0 38 0 4 5 5 4 1 0 35 0 4 4 5 1 0 36 0 5 4 5 1 0 33 5 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = divide;
unicode = 00F7;
},
{
glyphname = equal;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"141 442 LINE",
"999 442 LINE",
"1015 573 LINE",
"157 573 LINE"
);
},
{
closed = 1;
nodes = (
"183 775 LINE",
"1040 775 LINE",
"1055 906 LINE",
"199 906 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
7 6 5 4 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 2 0 3 0 2 3 0 0 38 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = equal;
unicode = 003D;
},
{
glyphname = notequal;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"183 775 LINE",
"612 775 LINE",
"493 573 LINE",
"157 573 LINE",
"141 442 LINE",
"415 442 LINE",
"266 190 LINE",
"391 190 LINE",
"540 442 LINE",
"999 442 LINE",
"1015 573 LINE",
"618 573 LINE",
"737 775 LINE",
"1040 775 LINE",
"1055 906 LINE",
"815 906 LINE",
"959 1149 LINE",
"834 1149 LINE",
"690 906 LINE",
"199 906 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
11 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 50 values pushed */
0 1 0 0 1 40 0 6 5 5 6 41 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 1 0 1 52 0 6 5 6 53 2 1 0 9 1 3 4 0 3 0 2 38 8 1 4 5 5 4 0 0 35 8 1 4 4 5 0 0 36 7 1 5 4 5 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 0 1 52 0 6 5 6 53 0 0 0 9 3 0 9 0 0 38 0 2 0 3 4 2 3 0 2 38 0 4 8 5 4 0 0 35 0 8 0 7 5 8 7 0 0 38 0 4 4 5 0 0 36 0 5 4 5 0 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = notequal;
unicode = 2260;
},
{
glyphname = greater;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"956 710 LINE",
"233 1112 LINE",
"229 1079.998 OFFCURVE",
"216 977.832 OFFCURVE",
"216 974 CURVE SMOOTH",
"216 959.333 OFFCURVE",
"226 942.667 OFFCURVE",
"246 932 CURVE SMOOTH",
"668 705 LINE SMOOTH",
"693.333 691.667 OFFCURVE",
"722 680.667 OFFCURVE",
"754 674 CURVE",
"719.333 666 OFFCURVE",
"688 656.667 OFFCURVE",
"660 642 CURVE",
"183 414 LINE SMOOTH",
"156.333 400.667 OFFCURVE",
"143.667 384.667 OFFCURVE",
"141 362 CURVE SMOOTH",
"125 235 LINE",
"947 636 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
21 1 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = greater;
unicode = 003E;
},
{
glyphname = less;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"159 636 LINE",
"882 234 LINE",
"886 266.002 OFFCURVE",
"899 368.168 OFFCURVE",
"899 372 CURVE SMOOTH",
"899 386.667 OFFCURVE",
"889 403.333 OFFCURVE",
"869 414 CURVE SMOOTH",
"447 641 LINE SMOOTH",
"421.667 654.333 OFFCURVE",
"393 665.333 OFFCURVE",
"361 672 CURVE",
"395.667 680 OFFCURVE",
"427 689.333 OFFCURVE",
"455 704 CURVE",
"932 932 LINE SMOOTH",
"958.667 945.333 OFFCURVE",
"971.333 961.333 OFFCURVE",
"974 984 CURVE SMOOTH",
"990 1111 LINE",
"168 710 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 4 values pushed */
1 21 1 11 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = less;
unicode = 003C;
},
{
glyphname = greaterequal;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"895 215 LINE",
"122 215 LINE",
"105 80 LINE",
"878 80 LINE"
);
},
{
closed = 1;
nodes = (
"966 791 LINE",
"240 1170 LINE",
"225 1048 LINE",
"225 1046.667 OFFCURVE",
"224.833 1045.333 OFFCURVE",
"224.5 1044 CURVE SMOOTH",
"224.167 1042.667 OFFCURVE",
"224 1041.333 OFFCURVE",
"224 1040 CURVE SMOOTH",
"224 1021.333 OFFCURVE",
"234 1007.667 OFFCURVE",
"262 993 CURVE SMOOTH",
"677 784 LINE",
"703.667 769.333 OFFCURVE",
"735.333 760.667 OFFCURVE",
"770 754 CURVE",
"734 746 OFFCURVE",
"700.667 737.333 OFFCURVE",
"670 724 CURVE SMOOTH",
"203 517 LINE SMOOTH",
"168.333 501 OFFCURVE",
"155.667 483.333 OFFCURVE",
"153 462 CURVE SMOOTH",
"138 340 LINE",
"957 717 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 30 values pushed */
24 23 13 5 4 1 28 0 1 0 0 1 0 0 35 0 1 1 0 0 0 36 0 0 1 0 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = greaterequal;
unicode = 2265;
},
{
glyphname = lessequal;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"169 717 LINE",
"895 338 LINE",
"910 460 LINE",
"910 461.333 OFFCURVE",
"910.167 462.667 OFFCURVE",
"910.5 464 CURVE SMOOTH",
"910.833 465.333 OFFCURVE",
"911 466.667 OFFCURVE",
"911 468 CURVE SMOOTH",
"911 486.667 OFFCURVE",
"901 500.333 OFFCURVE",
"873 515 CURVE SMOOTH",
"458 724 LINE",
"431.333 738.667 OFFCURVE",
"399.667 747.333 OFFCURVE",
"365 754 CURVE",
"401 762 OFFCURVE",
"434.333 770.667 OFFCURVE",
"465 784 CURVE SMOOTH",
"932 991 LINE SMOOTH",
"966.667 1007 OFFCURVE",
"979.333 1024.667 OFFCURVE",
"982 1046 CURVE SMOOTH",
"997 1168 LINE",
"178 791 LINE"
);
},
{
closed = 1;
nodes = (
"90 80 LINE",
"863 80 LINE",
"880 215 LINE",
"107 215 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
25 24 23 22 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 30 values pushed */
20 19 9 1 4 0 28 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = lessequal;
unicode = 2264;
},
{
glyphname = plusminus;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"595 1199 LINE",
"548 820 LINE",
"141 820 LINE",
"126 689 LINE",
"532 689 LINE",
"487 319 LINE",
"627 319 LINE",
"672 689 LINE",
"1083 689 LINE",
"1099 820 LINE",
"688 820 LINE",
"735 1199 LINE"
);
},
{
closed = 1;
nodes = (
"51 80 LINE",
"1007 80 LINE",
"1023 211 LINE",
"66 211 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
0 0 15 14 13 12 0 11 0 11 10 9 8 7 6 5 4 3 2 1 9 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 49 values pushed */
8 1 5 0 5 52 0 2 1 6 1 2 6 50 4 1 0 3 1 1 2 0 1 0 2 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
8 1 5 0 5 52 0 2 1 6 1 2 6 50 0 4 0 3 1 4 3 0 0 38 0 0 0 1 2 0 1 0 2 38 0 6 7 7 6 0 0 35 0 6 6 7 0 0 36 0 7 6 7 0 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = plusminus;
unicode = 00B1;
},
{
glyphname = approxequal;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"707.244 855 OFFCURVE",
"588.118 962 OFFCURVE",
"449 962 CURVE SMOOTH",
"361 962 OFFCURVE",
"277.667 930 OFFCURVE",
"223 862 CURVE",
"240 757 LINE",
"270.059 793.071 OFFCURVE",
"349.777 830 OFFCURVE",
"422 830 CURVE SMOOTH",
"542.459 830 OFFCURVE",
"671.069 722 OFFCURVE",
"805 722 CURVE SMOOTH",
"886.333 722 OFFCURVE",
"969.667 752 OFFCURVE",
"1023 816 CURVE",
"1012 924 LINE",
"978.102 890.102 OFFCURVE",
"903.432 855 OFFCURVE",
"832 855 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"667.773 518 OFFCURVE",
"545.92 625 OFFCURVE",
"408 625 CURVE SMOOTH",
"320 625 OFFCURVE",
"236.667 593 OFFCURVE",
"182 525 CURVE",
"198 421 LINE",
"228.006 457.008 OFFCURVE",
"308.895 492 OFFCURVE",
"380 492 CURVE SMOOTH",
"502.437 492 OFFCURVE",
"627.155 386 OFFCURVE",
"763 386 CURVE SMOOTH",
"844.333 386 OFFCURVE",
"929 415.333 OFFCURVE",
"981 478 CURVE",
"971 587 LINE",
"938.172 554.172 OFFCURVE",
"860.095 518 OFFCURVE",
"790 518 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 26 values pushed */
29 28 1 0 52 50 43 41 38 36 28 55 29 55 24 22 15 13 10 8 0 27 1 27 10 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 78 values pushed */
20 5 2 0 3 19 6 2 1 2 48 33 2 4 7 47 34 2 5 6 4 30 0 3 0 2 1 3 2 1 0 38 8 1 0 0 1 7 0 1 1 0 38 9 1 4 6 5 4 1 0 35 0 7 0 6 5 7 6 1 0 38 9 1 4 4 5 1 0 36 0 5 4 5 1 0 33 7 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = approxequal;
unicode = 2248;
},
{
glyphname = asciitilde;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"602.005 613 OFFCURVE",
"456.37 718 OFFCURVE",
"329 718 CURVE SMOOTH",
"242.333 718 OFFCURVE",
"174.5 686.333 OFFCURVE",
"128.5 633 CURVE SMOOTH",
"82.5 579.667 OFFCURVE",
"57 503.333 OFFCURVE",
"57 414 CURVE",
"201 414 LINE",
"202.333 508.667 OFFCURVE",
"253.333 569 OFFCURVE",
"340 569 CURVE SMOOTH",
"438.345 569 OFFCURVE",
"583.63 465 OFFCURVE",
"711 465 CURVE SMOOTH",
"796.333 465 OFFCURVE",
"865.5 495.667 OFFCURVE",
"911.5 549 CURVE SMOOTH",
"957.5 602.333 OFFCURVE",
"983 678.667 OFFCURVE",
"983 768 CURVE",
"839 768 LINE",
"837.667 674.667 OFFCURVE",
"786.667 613 OFFCURVE",
"700 613 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 45 values pushed */
0 1 5 1 52 0 4 2 4 53 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciitilde;
unicode = 007E;
},
{
glyphname = logicalnot;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"165 606 LINE",
"876 606 LINE",
"840 318 LINE",
"987 318 LINE",
"1039 736 LINE",
"180 736 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
0 1 2 2 1 41 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 28 values pushed */
0 1 2 1 53 0 0 2 2 0 0 0 35 0 0 0 2 0 0 36 0 2 0 2 0 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = logicalnot;
unicode = 00AC;
},
{
glyphname = asciicircum;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"215 787 LINE",
"351 787 LINE SMOOTH",
"377.667 787 OFFCURVE",
"392.333 802.333 OFFCURVE",
"403 821 CURVE SMOOTH",
"596 1173 LINE SMOOTH",
"611.333 1201.667 OFFCURVE",
"623.667 1230.667 OFFCURVE",
"633 1260 CURVE",
"642.333 1232 OFFCURVE",
"654.667 1203.667 OFFCURVE",
"672 1173 CURVE SMOOTH",
"868 821 LINE SMOOTH",
"878.667 802.333 OFFCURVE",
"894.333 787 OFFCURVE",
"917 787 CURVE SMOOTH",
"1047 787 LINE",
"688 1433 LINE",
"574 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
17 15 4 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
10 1 1 0 1 30 2 1 1 0 1 53 0 0 0 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
10 1 1 0 1 30 0 0 1 0 52 2 1 1 1 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
10 1 2 0 1 30 0 0 2 0 52 0 2 1 2 52 0 1 1 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = asciicircum;
unicode = 005E;
},
{
glyphname = infinity;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"979 254 OFFCURVE",
"1062.5 296.5 OFFCURVE",
"1124.5 366.5 CURVE SMOOTH",
"1186.5 436.5 OFFCURVE",
"1226 533.667 OFFCURVE",
"1226 643 CURVE SMOOTH",
"1226 810.771 OFFCURVE",
"1120.26 928 OFFCURVE",
"974 928 CURVE SMOOTH",
"838.505 928 OFFCURVE",
"743.139 833.28 OFFCURVE",
"659 722 CURVE",
"600.532 836.152 OFFCURVE",
"526.452 928 OFFCURVE",
"394 928 CURVE SMOOTH",
"306 928 OFFCURVE",
"223.333 884.5 OFFCURVE",
"162 814.5 CURVE SMOOTH",
"100.667 744.5 OFFCURVE",
"61 647.333 OFFCURVE",
"61 538 CURVE SMOOTH",
"61 371.081 OFFCURVE",
"166.341 254 OFFCURVE",
"311 254 CURVE SMOOTH",
"446.956 254 OFFCURVE",
"543.181 348.143 OFFCURVE",
"627 459 CURVE",
"685.579 344.632 OFFCURVE",
"756.389 254 OFFCURVE",
"891 254 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"255.31 400 OFFCURVE",
"203 456.241 OFFCURVE",
"203 553 CURVE SMOOTH",
"203 683.073 OFFCURVE",
"277.402 782 OFFCURVE",
"383 782 CURVE SMOOTH",
"472.505 782 OFFCURVE",
"520.837 688.852 OFFCURVE",
"566 591 CURVE",
"498.526 493.538 OFFCURVE",
"425.919 400 OFFCURVE",
"336 400 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"813.906 400 OFFCURVE",
"766.337 490.604 OFFCURVE",
"720 591 CURVE",
"786.092 686.466 OFFCURVE",
"860.843 782 OFFCURVE",
"949 782 CURVE SMOOTH",
"1028.184 782 OFFCURVE",
"1083 726.156 OFFCURVE",
"1083 629 CURVE SMOOTH",
"1083 498.596 OFFCURVE",
"1008.252 400 OFFCURVE",
"903 400 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
61 60 41 40 1 0 71 69 60 79 61 79 51 49 40 59 41 59 31 29 21 19 11 9 0 39 1 39 11 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
75 45 25 5 4 4 5 1 30 3 1 2 7 1 5 4 2 5 1 0 38 10 6 9 3 4 0 0 4 1 0 35 10 6 9 3 4 4 0 1 0 36 1 8 2 0 4 0 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 66 values pushed */
75 45 25 5 4 4 5 1 30 0 3 0 7 5 3 7 1 0 38 0 2 0 5 4 2 5 1 0 38 10 1 6 1 0 6 1 0 35 9 1 4 0 1 0 4 1 1 0 38 10 1 6 6 0 1 0 36 8 1 0 6 0 1 0 33 7 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1260;
}
);
note = infinity;
unicode = 221E;
},
{
glyphname = integral;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"226 32 LINE SMOOTH",
"185.036 -136.975 OFFCURVE",
"118.809 -213 OFFCURVE",
"-30 -213 CURVE SMOOTH",
"-83.293 -213 OFFCURVE",
"-104.478 -210.91 OFFCURVE",
"-113 -245 CURVE SMOOTH",
"-133 -321 LINE",
"-97 -342.333 OFFCURVE",
"-48.667 -350 OFFCURVE",
"-6 -350 CURVE SMOOTH",
"87.333 -350 OFFCURVE",
"171.833 -320.833 OFFCURVE",
"240.5 -257.5 CURVE SMOOTH",
"309.167 -194.167 OFFCURVE",
"363 -98 OFFCURVE",
"395 38 CURVE SMOOTH",
"642 1068 LINE SMOOTH",
"679.333 1224 OFFCURVE",
"749.333 1295 OFFCURVE",
"872 1295 CURVE SMOOTH",
"928 1295 OFFCURVE",
"942.333 1308 OFFCURVE",
"949 1332 CURVE",
"968 1419 LINE",
"930.667 1440.333 OFFCURVE",
"886.667 1449 OFFCURVE",
"840 1449 CURVE SMOOTH",
"657.333 1449 OFFCURVE",
"528.667 1323 OFFCURVE",
"474 1091 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
29 26 20 18 11 9 4 2 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
6 1 1 0 22 1 2 3 2 30 0 1 1 0 1 0 36 0 0 0 17 31 0 3 3 2 1 0 36 0 2 2 16 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
6 1 1 0 22 1 2 3 2 30 0 3 0 2 3 2 1 0 37 0 1 1 0 1 0 36 0 0 0 17 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 43 values pushed */
6 1 1 0 22 1 2 3 2 30 0 0 0 1 3 0 1 1 0 38 0 3 2 2 3 1 0 35 0 3 3 2 1 0 36 0 2 3 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 742;
}
);
note = integral;
unicode = 222B;
},
{
glyphname = Ohm;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1171 0 LINE",
"1209.667 2.667 OFFCURVE",
"1239 25 OFFCURVE",
"1243 61 CURVE SMOOTH",
"1253 158 LINE",
"871 158 LINE",
"893 336 LINE",
"1029 369.333 OFFCURVE",
"1141.167 443.167 OFFCURVE",
"1220.5 546.5 CURVE SMOOTH",
"1299.833 649.833 OFFCURVE",
"1345 782 OFFCURVE",
"1345 934 CURVE SMOOTH",
"1345 1083.333 OFFCURVE",
"1290.667 1212.333 OFFCURVE",
"1196 1303 CURVE SMOOTH",
"1101.333 1393.667 OFFCURVE",
"965.667 1447 OFFCURVE",
"803 1447 CURVE SMOOTH",
"739 1447 OFFCURVE",
"677.833 1439.833 OFFCURVE",
"619.5 1425.5 CURVE SMOOTH",
"502.833 1396.833 OFFCURVE",
"400.667 1342.333 OFFCURVE",
"318 1265 CURVE SMOOTH",
"276.667 1226.333 OFFCURVE",
"241.333 1182.667 OFFCURVE",
"212 1134 CURVE SMOOTH",
"153.333 1036.667 OFFCURVE",
"120 921.333 OFFCURVE",
"120 792 CURVE SMOOTH",
"120 680 OFFCURVE",
"150.333 580.667 OFFCURVE",
"205 502 CURVE SMOOTH",
"259.667 423.333 OFFCURVE",
"340.667 366.333 OFFCURVE",
"442 337 CURVE",
"420 158 LINE",
"37 158 LINE",
"35.667 144.667 OFFCURVE",
"34 132 OFFCURVE",
"32 120 CURVE",
"29.333 98.667 OFFCURVE",
"26 72 OFFCURVE",
"26 52 CURVE SMOOTH",
"26 21.333 OFFCURVE",
"46.333 0 OFFCURVE",
"81 0 CURVE SMOOTH",
"546 0 LINE",
"598 433 LINE",
"512.667 451.667 OFFCURVE",
"440.667 490.167 OFFCURVE",
"390 549.5 CURVE SMOOTH",
"339.333 608.833 OFFCURVE",
"310 689.333 OFFCURVE",
"310 792 CURVE SMOOTH",
"310 954.667 OFFCURVE",
"360.667 1080.667 OFFCURVE",
"446 1166 CURVE SMOOTH",
"531.333 1251.333 OFFCURVE",
"650.333 1296 OFFCURVE",
"785 1296 CURVE SMOOTH",
"894.333 1296 OFFCURVE",
"985.833 1263.833 OFFCURVE",
"1050.5 1200.5 CURVE SMOOTH",
"1115.167 1137.167 OFFCURVE",
"1152 1045 OFFCURVE",
"1152 925 CURVE SMOOTH",
"1152 775.667 OFFCURVE",
"1109.5 665 OFFCURVE",
"1039.5 585 CURVE SMOOTH",
"969.5 505 OFFCURVE",
"872 457 OFFCURVE",
"760 433 CURVE",
"707 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 61 0 60 57 56 46 44 32 31 24 22 12 10 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
33 21 2 2 0 1 30 0 0 0 3 1 0 36 0 3 3 17 31 4 1 2 2 1 1 0 36 6 5 2 1 1 12 1 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 34 values pushed */
33 21 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 2 1 1 0 36 6 5 2 1 1 15 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
78 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
33 21 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 1 1 2 0 0 35 4 1 2 2 1 1 0 36 6 5 2 1 2 1 1 0 33 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHW[ ]\011/* 1 value pushed */
1000 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 45 values pushed */
33 21 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 4 1 2 6 1 5 1 2 5 1 0 38 4 1 2 2 1 1 0 36 0 1 2 1 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
33 21 2 2 0 1 30 0 3 0 0 2 3 0 1 0 38 0 2 4 1 2 0 0 35 0 4 6 1 5 1 4 5 1 0 38 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1373;
}
);
note = Omega;
unicode = 2126;
},
{
glyphname = increment;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"846 1431 LINE",
"677 1431 LINE",
"-47 0 LINE",
"1217 0 LINE"
);
},
{
closed = 1;
nodes = (
"689 1123 LINE SMOOTH",
"703.667 1153.667 OFFCURVE",
"719.667 1192 OFFCURVE",
"737 1236 CURVE",
"740.333 1214.667 OFFCURVE",
"744.167 1194.5 OFFCURVE",
"748.5 1175.5 CURVE SMOOTH",
"752.833 1156.5 OFFCURVE",
"756.667 1139.333 OFFCURVE",
"760 1124 CURVE SMOOTH",
"989 150 LINE",
"218 150 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
5 4 3 2 1 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
9 1 2 1 1 30 0 1 1 11 31 0 2 2 0 0 2 36 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 25 values pushed */
9 1 2 1 1 30 0 1 2 1 52 0 2 2 0 0 2 36 0 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
9 1 2 1 1 30 0 1 2 1 52 0 2 0 0 2 0 0 35 0 2 2 0 0 2 36 0 0 2 0 0 2 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1291;
}
);
note = Delta;
unicode = 2206;
},
{
glyphname = product;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"179 1431 LINE",
"162 1285 LINE",
"350 1285 LINE",
"150 -344 LINE",
"327 -344 LINE",
"528 1285 LINE",
"1035 1285 LINE",
"836 -344 LINE",
"1014 -344 LINE",
"1214 1285 LINE",
"1403 1285 LINE",
"1420 1431 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 11 0 11 10 9 8 7 6 5 4 3 2 1 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
4 2 2 0 0 5 0 0 36 6 1 5 5 11 31 3 1 1 1 16 1 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
3 1 1 0 1 53 4 2 2 0 0 5 0 0 36 6 1 5 5 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
3 1 1 0 1 53 6 1 5 0 0 5 0 0 35 6 1 5 5 0 0 0 36 4 2 2 0 5 0 0 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 50 values pushed */
0 4 5 2 2 4 42 0 0 2 3 2 0 42 0 3 1 2 3 1 48 0 1 1 51 6 1 5 4 2 5 0 2 35 6 1 5 5 2 0 0 36 0 2 5 2 0 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1369;
}
);
note = product;
unicode = 220F;
},
{
glyphname = summation;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"195 1368 LINE",
"194.333 1366 OFFCURVE",
"194 1363.833 OFFCURVE",
"194 1361.5 CURVE SMOOTH",
"194 1359.167 OFFCURVE",
"194 1357 OFFCURVE",
"194 1355 CURVE SMOOTH",
"194 1340.333 OFFCURVE",
"198.333 1326 OFFCURVE",
"207 1312 CURVE SMOOTH",
"686 547 LINE",
"18 -224 LINE",
"3.333 -238.667 OFFCURVE",
"-5.333 -259.333 OFFCURVE",
"-8 -278 CURVE SMOOTH",
"-16 -343 LINE",
"1090 -343 LINE",
"1108 -190 LINE",
"275 -190 LINE",
"881 519 LINE",
"888 571 LINE",
"455 1280 LINE",
"1290 1280 LINE",
"1308 1433 LINE",
"202 1433 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
9 8 7 6 3 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
14 1 2 1 1 30 0 1 1 0 0 0 36 0 0 0 11 31 0 2 2 3 0 0 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 29 values pushed */
14 1 2 1 1 30 0 2 0 3 2 3 0 0 37 0 1 1 0 0 0 36 0 0 0 11 1 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
14 1 2 1 1 30 0 0 0 1 2 0 1 0 0 38 0 2 3 3 2 0 0 35 0 2 2 3 0 0 36 0 3 2 3 0 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1261;
}
);
note = summation;
unicode = 2211;
},
{
glyphname = radical;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"1388 1713 LINE",
"1278 1713 LINE SMOOTH",
"1252.667 1713 OFFCURVE",
"1231.667 1697.333 OFFCURVE",
"1221 1676 CURVE",
"618 315 LINE SMOOTH",
"602 277.667 OFFCURVE",
"590.667 240.667 OFFCURVE",
"580 206 CURVE",
"580 248.667 OFFCURVE",
"578.667 292.333 OFFCURVE",
"568 335 CURVE SMOOTH",
"467 756 LINE",
"461.667 774.667 OFFCURVE",
"445 792 OFFCURVE",
"417 792 CURVE SMOOTH",
"83 792 LINE",
"80.224 770.716 OFFCURVE",
"76 725.66 OFFCURVE",
"76 723 CURVE SMOOTH",
"76 680.333 OFFCURVE",
"101.667 665 OFFCURVE",
"135 665 CURVE SMOOTH",
"311 665 LINE",
"480 0 LINE",
"624 0 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
27 25 13 11 4 2 1 0 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
19 1 0 1 1 30 0 3 2 3 52 0 2 0 1 0 2 1 1 0 38 0 0 0 12 0 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 28 values pushed */
19 1 0 1 1 30 0 3 2 3 52 0 2 0 1 0 2 1 1 0 38 0 0 0 15 0 32 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
19 1 0 1 1 30 0 3 2 3 52 0 0 1 0 53 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1144;
}
);
note = radical;
unicode = 221A;
},
{
glyphname = micro;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"176 1011 LINE",
"18 -270 LINE",
"17.333 -272 OFFCURVE",
"17 -274.167 OFFCURVE",
"17 -276.5 CURVE SMOOTH",
"17 -278.833 OFFCURVE",
"17 -281 OFFCURVE",
"17 -283 CURVE SMOOTH",
"17 -321.667 OFFCURVE",
"43.333 -344 OFFCURVE",
"86 -344 CURVE SMOOTH",
"171 -344 LINE",
"206 -61 LINE SMOOTH",
"211.333 -18.333 OFFCURVE",
"215 31 OFFCURVE",
"215 79 CURVE SMOOTH",
"215 95 LINE",
"255 37.667 OFFCURVE",
"317.333 5 OFFCURVE",
"404 5 CURVE SMOOTH",
"510.667 5 OFFCURVE",
"595.667 48 OFFCURVE",
"689 144 CURVE",
"689 36 LINE SMOOTH",
"689 12 OFFCURVE",
"706 0 OFFCURVE",
"730 0 CURVE SMOOTH",
"833 0 LINE",
"957 1011 LINE",
"786 1011 LINE",
"693 261 LINE",
"611.667 173 OFFCURVE",
"523.333 121 OFFCURVE",
"430 121 CURVE SMOOTH",
"322 121 OFFCURVE",
"263 182.667 OFFCURVE",
"263 292 CURVE SMOOTH",
"263 298.667 OFFCURVE",
"263 305.167 OFFCURVE",
"263 311.5 CURVE SMOOTH",
"263 317.833 OFFCURVE",
"263.667 324.667 OFFCURVE",
"265 332 CURVE",
"348 1011 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
0 0 0 37 0 37 31 29 22 20 15 13 12 11 8 6 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
18 1 0 1 24 1 2 0 2 30 6 5 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 31 0 4 4 16 4 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
91 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
18 1 0 1 24 1 2 0 2 30 0 4 2 4 53 6 5 2 1 1 14 31 0 0 0 2 1 2 36 3 1 2 2 12 2 32 5 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
18 1 0 1 24 1 3 0 2 30 0 4 2 4 53 6 5 2 1 1 14 31 0 0 0 3 1 2 36 0 3 3 12 31 0 2 2 12 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 41 values pushed */
18 1 0 1 24 1 3 0 2 30 0 4 2 4 53 6 5 2 1 1 14 31 0 0 0 3 1 2 36 0 3 3 15 31 0 2 2 15 2 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
18 1 0 1 24 1 3 0 2 30 0 4 2 4 53 6 5 2 1 0 2 1 0 0 35 0 0 0 3 2 0 3 1 2 38 6 5 2 1 1 2 1 0 36 0 2 1 2 1 0 33 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 57 values pushed */
18 1 0 5 24 1 3 0 2 30 6 1 5 1 0 1 5 0 50 0 4 2 4 53 0 1 5 2 1 0 0 35 0 0 0 3 2 0 3 1 2 38 0 1 1 2 1 0 36 0 2 1 2 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1026;
}
);
note = mu;
unicode = 00B5;
},
{
glyphname = partialdiff;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"447 1270 LINE SMOOTH",
"457.667 1246 OFFCURVE",
"468.333 1240 OFFCURVE",
"483 1240 CURVE SMOOTH",
"519.232 1240 OFFCURVE",
"635.676 1305 OFFCURVE",
"698 1305 CURVE SMOOTH",
"820.667 1305 OFFCURVE",
"891 1208.667 OFFCURVE",
"891 1018 CURVE SMOOTH",
"891 983.333 OFFCURVE",
"889.333 945.333 OFFCURVE",
"884 904 CURVE SMOOTH",
"882 888.667 OFFCURVE",
"879.5 870.833 OFFCURVE",
"876.5 850.5 CURVE SMOOTH",
"873.5 830.167 OFFCURVE",
"870.333 808.667 OFFCURVE",
"867 786 CURVE",
"821.667 894 OFFCURVE",
"735.333 949 OFFCURVE",
"610 949 CURVE SMOOTH",
"472.667 949 OFFCURVE",
"347.167 887.667 OFFCURVE",
"250.5 789 CURVE SMOOTH",
"153.833 690.333 OFFCURVE",
"87.667 551.333 OFFCURVE",
"69 398 CURVE SMOOTH",
"66.333 374 OFFCURVE",
"65 350.667 OFFCURVE",
"65 328 CURVE SMOOTH",
"65 221.333 OFFCURVE",
"97 136.667 OFFCURVE",
"153 78 CURVE SMOOTH",
"209 19.333 OFFCURVE",
"290 -13 OFFCURVE",
"386 -13 CURVE SMOOTH",
"568.667 -13 OFFCURVE",
"716.333 81.5 OFFCURVE",
"827 243.5 CURVE SMOOTH",
"937.667 405.5 OFFCURVE",
"1011.667 634.667 OFFCURVE",
"1045 904 CURVE SMOOTH",
"1050.333 948 OFFCURVE",
"1053 990.333 OFFCURVE",
"1053 1029 CURVE SMOOTH",
"1053 1161 OFFCURVE",
"1022.5 1266 OFFCURVE",
"968.5 1338 CURVE SMOOTH",
"914.5 1410 OFFCURVE",
"836.333 1448 OFFCURVE",
"739 1448 CURVE SMOOTH",
"610.084 1448 OFFCURVE",
"521.911 1409.631 OFFCURVE",
"417 1337 CURVE"
);
},
{
closed = 1;
nodes = (
"314.667 127 OFFCURVE",
"249 204.667 OFFCURVE",
"249 342 CURVE SMOOTH",
"249 360.667 OFFCURVE",
"250.333 379.667 OFFCURVE",
"253 401 CURVE SMOOTH",
"267.667 517 OFFCURVE",
"306.667 618.833 OFFCURVE",
"368 691.5 CURVE SMOOTH",
"429.333 764.167 OFFCURVE",
"512 808 OFFCURVE",
"612 808 CURVE SMOOTH",
"747.77 808 OFFCURVE",
"800.793 703.082 OFFCURVE",
"812 577 CURVE",
"769.333 425 OFFCURVE",
"711.667 311.5 OFFCURVE",
"645 237.5 CURVE SMOOTH",
"578.333 163.5 OFFCURVE",
"501.333 127 OFFCURVE",
"424 127 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 20 values pushed */
53 52 63 61 52 72 53 72 49 47 44 42 32 30 19 17 6 4 8 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 55 values pushed */
0 1 3 0 34 1 5 6 2 30 0 4 3 2 3 4 2 50 0 2 0 6 5 2 6 1 0 38 0 3 3 0 1 0 36 0 0 0 17 31 7 1 5 5 1 1 0 36 0 1 1 21 1 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 53 values pushed */
0 1 3 0 34 1 5 6 2 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 5 1 1 0 36 0 1 1 21 1 32 6 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 63 values pushed */
0 1 3 0 34 1 5 6 2 30 0 4 3 2 3 4 2 50 0 0 0 3 4 0 3 1 0 38 0 2 0 6 5 2 6 1 0 38 7 1 5 1 1 5 1 0 35 7 1 5 5 1 1 0 36 0 1 5 1 1 0 33 7 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1067;
}
);
note = partialdiff;
unicode = 2202;
},
{
glyphname = percent;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"732 1238.667 OFFCURVE",
"705.167 1314 OFFCURVE",
"660.5 1366 CURVE SMOOTH",
"615.833 1418 OFFCURVE",
"551.667 1446 OFFCURVE",
"477 1446 CURVE SMOOTH",
"383.667 1446 OFFCURVE",
"297.5 1407.833 OFFCURVE",
"235.5 1336.5 CURVE SMOOTH",
"173.5 1265.167 OFFCURVE",
"135 1161 OFFCURVE",
"135 1029 CURVE SMOOTH",
"135 935.667 OFFCURVE",
"160.833 860.833 OFFCURVE",
"205.5 809.5 CURVE SMOOTH",
"250.167 758.167 OFFCURVE",
"314.333 730 OFFCURVE",
"389 730 CURVE SMOOTH",
"475.667 730 OFFCURVE",
"561 767.333 OFFCURVE",
"625 838 CURVE SMOOTH",
"689 908.667 OFFCURVE",
"732 1012 OFFCURVE",
"732 1144 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"597 1035 OFFCURVE",
"574.833 960.833 OFFCURVE",
"539.5 913.5 CURVE SMOOTH",
"504.167 866.167 OFFCURVE",
"455 845 OFFCURVE",
"403 845 CURVE SMOOTH",
"317.85 845 OFFCURVE",
"269 910.064 OFFCURVE",
"269 1029 CURVE SMOOTH",
"269 1137 OFFCURVE",
"291.333 1212.667 OFFCURVE",
"326 1262 CURVE SMOOTH",
"360.667 1311.333 OFFCURVE",
"409.667 1333 OFFCURVE",
"463 1333 CURVE SMOOTH",
"546.294 1333 OFFCURVE",
"597 1263.925 OFFCURVE",
"597 1143 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"90 0 LINE",
"216 0 LINE SMOOTH",
"242.667 0 OFFCURVE",
"261.667 10.667 OFFCURVE",
"275 28 CURVE SMOOTH",
"1415 1431 LINE",
"1291 1431 LINE SMOOTH",
"1260.333 1431 OFFCURVE",
"1242.667 1417.667 OFFCURVE",
"1228 1403 CURVE"
);
},
{
closed = 1;
nodes = (
"1372 491.667 OFFCURVE",
"1346.333 567 OFFCURVE",
"1301 619 CURVE SMOOTH",
"1255.667 671 OFFCURVE",
"1192.667 699 OFFCURVE",
"1118 699 CURVE SMOOTH",
"1024.667 699 OFFCURVE",
"938.5 661 OFFCURVE",
"876.5 589 CURVE SMOOTH",
"814.5 517 OFFCURVE",
"776 413 OFFCURVE",
"776 281 CURVE SMOOTH",
"776 187.667 OFFCURVE",
"801.833 113.833 OFFCURVE",
"846.5 62.5 CURVE SMOOTH",
"891.167 11.167 OFFCURVE",
"954.333 -17 OFFCURVE",
"1029 -17 CURVE SMOOTH",
"1115.667 -17 OFFCURVE",
"1202 20.5 OFFCURVE",
"1266 90.5 CURVE SMOOTH",
"1330 160.5 OFFCURVE",
"1372 265 OFFCURVE",
"1372 397 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1238 288 OFFCURVE",
"1216 213 OFFCURVE",
"1180 165 CURVE SMOOTH",
"1144 117 OFFCURVE",
"1095 96 OFFCURVE",
"1043 96 CURVE SMOOTH",
"957.315 96 OFFCURVE",
"909 161.242 OFFCURVE",
"909 281 CURVE SMOOTH",
"909 389 OFFCURVE",
"931.167 463.667 OFFCURVE",
"966.5 513 CURVE SMOOTH",
"1001.833 562.333 OFFCURVE",
"1050.667 584 OFFCURVE",
"1104 584 CURVE SMOOTH",
"1187.211 584 OFFCURVE",
"1238 517.691 OFFCURVE",
"1238 396 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 22 values pushed */
86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 10 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 48 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 9 9 5 1 0 36 6 1 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 0 9 9 6 1 0 36 0 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 57 values pushed */
0 4 1 2 1 4 2 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 5 5 15 31 0 9 9 6 1 0 36 0 6 6 21 6 32 7 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 69 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 5 6 9 1 0 35 0 9 9 6 1 0 36 0 6 9 6 1 0 33 8 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1452;
}
);
note = percent;
unicode = 0025;
},
{
glyphname = perthousand;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"732 1238.667 OFFCURVE",
"705.167 1314 OFFCURVE",
"660.5 1366 CURVE SMOOTH",
"615.833 1418 OFFCURVE",
"551.667 1446 OFFCURVE",
"477 1446 CURVE SMOOTH",
"383.667 1446 OFFCURVE",
"297.5 1407.833 OFFCURVE",
"235.5 1336.5 CURVE SMOOTH",
"173.5 1265.167 OFFCURVE",
"135 1161 OFFCURVE",
"135 1029 CURVE SMOOTH",
"135 935.667 OFFCURVE",
"160.833 860.833 OFFCURVE",
"205.5 809.5 CURVE SMOOTH",
"250.167 758.167 OFFCURVE",
"314.333 730 OFFCURVE",
"389 730 CURVE SMOOTH",
"475.667 730 OFFCURVE",
"561 767.333 OFFCURVE",
"625 838 CURVE SMOOTH",
"689 908.667 OFFCURVE",
"732 1012 OFFCURVE",
"732 1144 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"597 1035 OFFCURVE",
"574.833 960.833 OFFCURVE",
"539.5 913.5 CURVE SMOOTH",
"504.167 866.167 OFFCURVE",
"455 845 OFFCURVE",
"403 845 CURVE SMOOTH",
"317.85 845 OFFCURVE",
"269 910.064 OFFCURVE",
"269 1029 CURVE SMOOTH",
"269 1137 OFFCURVE",
"291.333 1212.667 OFFCURVE",
"326 1262 CURVE SMOOTH",
"360.667 1311.333 OFFCURVE",
"409.667 1333 OFFCURVE",
"463 1333 CURVE SMOOTH",
"546.294 1333 OFFCURVE",
"597 1263.925 OFFCURVE",
"597 1143 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"90 0 LINE",
"216 0 LINE SMOOTH",
"242.667 0 OFFCURVE",
"261.667 10.667 OFFCURVE",
"275 28 CURVE SMOOTH",
"1415 1431 LINE",
"1291 1431 LINE SMOOTH",
"1260.333 1431 OFFCURVE",
"1242.667 1417.667 OFFCURVE",
"1228 1403 CURVE"
);
},
{
closed = 1;
nodes = (
"1372 491.667 OFFCURVE",
"1346.333 567 OFFCURVE",
"1301 619 CURVE SMOOTH",
"1255.667 671 OFFCURVE",
"1192.667 699 OFFCURVE",
"1118 699 CURVE SMOOTH",
"1024.667 699 OFFCURVE",
"938.5 661 OFFCURVE",
"876.5 589 CURVE SMOOTH",
"814.5 517 OFFCURVE",
"776 413 OFFCURVE",
"776 281 CURVE SMOOTH",
"776 187.667 OFFCURVE",
"801.833 113.833 OFFCURVE",
"846.5 62.5 CURVE SMOOTH",
"891.167 11.167 OFFCURVE",
"954.333 -17 OFFCURVE",
"1029 -17 CURVE SMOOTH",
"1115.667 -17 OFFCURVE",
"1202 20.5 OFFCURVE",
"1266 90.5 CURVE SMOOTH",
"1330 160.5 OFFCURVE",
"1372 265 OFFCURVE",
"1372 397 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1238 288 OFFCURVE",
"1216 213 OFFCURVE",
"1180 165 CURVE SMOOTH",
"1144 117 OFFCURVE",
"1095 96 OFFCURVE",
"1043 96 CURVE SMOOTH",
"957.315 96 OFFCURVE",
"909 161.242 OFFCURVE",
"909 281 CURVE SMOOTH",
"909 389 OFFCURVE",
"931.167 463.667 OFFCURVE",
"966.5 513 CURVE SMOOTH",
"1001.833 562.333 OFFCURVE",
"1050.667 584 OFFCURVE",
"1104 584 CURVE SMOOTH",
"1187.211 584 OFFCURVE",
"1238 517.691 OFFCURVE",
"1238 396 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"2047 491.667 OFFCURVE",
"2021.333 567 OFFCURVE",
"1976 619 CURVE SMOOTH",
"1930.667 671 OFFCURVE",
"1867.667 699 OFFCURVE",
"1793 699 CURVE SMOOTH",
"1699.667 699 OFFCURVE",
"1613.5 661 OFFCURVE",
"1551.5 589 CURVE SMOOTH",
"1489.5 517 OFFCURVE",
"1451 413 OFFCURVE",
"1451 281 CURVE SMOOTH",
"1451 187.667 OFFCURVE",
"1476.833 113.833 OFFCURVE",
"1521.5 62.5 CURVE SMOOTH",
"1566.167 11.167 OFFCURVE",
"1630.333 -17 OFFCURVE",
"1705 -17 CURVE SMOOTH",
"1791.667 -17 OFFCURVE",
"1877 20.5 OFFCURVE",
"1941 90.5 CURVE SMOOTH",
"2005 160.5 OFFCURVE",
"2047 265 OFFCURVE",
"2047 397 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"1913 288 OFFCURVE",
"1891 213 OFFCURVE",
"1855 165 CURVE SMOOTH",
"1819 117 OFFCURVE",
"1771 96 OFFCURVE",
"1719 96 CURVE SMOOTH",
"1633.978 96 OFFCURVE",
"1586 161.08 OFFCURVE",
"1586 281 CURVE SMOOTH",
"1586 389 OFFCURVE",
"1607.167 463.667 OFFCURVE",
"1642.5 513 CURVE SMOOTH",
"1677.833 562.333 OFFCURVE",
"1725.667 584 OFFCURVE",
"1779 584 CURVE SMOOTH",
"1862.211 584 OFFCURVE",
"1913 517.691 OFFCURVE",
"1913 396 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 30 values pushed */
126 124 116 114 106 104 96 94 86 84 76 74 66 64 56 54 49 47 44 42 36 34 26 24 16 14 6 4 14 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 52 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 13 1 9 9 5 1 0 36 10 6 2 5 5 12 5 32 6 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
32 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 56 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 2 2 1 1 0 36 4 1 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 60 values pushed */
0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 4 4 11 31 0 2 2 1 1 0 36 0 1 1 17 31 0 5 5 12 31 13 1 9 9 6 1 0 36 10 1 6 6 18 6 32 8 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
108 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 61 values pushed */
0 4 1 2 1 4 2 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 0 5 5 15 31 13 1 9 9 6 1 0 36 10 1 6 6 21 6 32 7 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 74 values pushed */
0 4 1 2 1 4 2 50 0 5 9 6 9 5 6 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 11 1 7 12 1 8 9 7 8 1 0 38 13 1 9 5 6 9 1 0 35 13 1 9 9 6 1 0 36 10 1 6 9 6 1 0 33 8 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 89 values pushed */
0 4 1 2 1 4 2 50 0 5 13 10 13 5 10 50 0 1 0 2 3 1 2 1 0 38 0 3 0 0 7 3 0 1 0 38 0 11 0 12 8 11 12 1 0 38 0 7 0 8 9 7 8 1 0 38 0 9 13 6 9 1 0 35 0 13 0 10 6 13 10 1 0 38 0 9 9 6 1 0 36 0 6 9 6 1 0 33 10 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 2127;
}
);
note = perthousand;
unicode = 2030;
},
{
glyphname = lozenge;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"533 -119 LINE",
"657 -119 LINE",
"1048 701 LINE",
"657 1522 LINE",
"533 1522 LINE",
"143 701 LINE"
);
},
{
closed = 1;
nodes = (
"567 1283 LINE",
"572.333 1297.667 OFFCURVE",
"577.5 1311.333 OFFCURVE",
"582.5 1324 CURVE SMOOTH",
"587.5 1336.667 OFFCURVE",
"591.667 1349.333 OFFCURVE",
"595 1362 CURVE",
"601.667 1338.667 OFFCURVE",
"611 1312.333 OFFCURVE",
"623 1283 CURVE",
"903 701 LINE",
"623 120 LINE",
"611 89.333 OFFCURVE",
"601.667 65 OFFCURVE",
"595 41 CURVE",
"591.667 53 OFFCURVE",
"587.5 65.333 OFFCURVE",
"582.5 78 CURVE SMOOTH",
"577.5 90.667 OFFCURVE",
"572.333 104.667 OFFCURVE",
"567 120 CURVE",
"291 701 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
5 4 2 1 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 34 values pushed */
17 14 10 6 3 0 6 1 0 1 30 0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 1160;
}
);
note = lozenge;
unicode = 25CA;
},
{
glyphname = "quarternote-musical";
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"-116 -500 LINE",
"126 1500 LINE",
"124 1500 LINE",
"-118 -500 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 3 0 3 2 1 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
2 1 1 0 1 53 0 0 0 13 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
0 0 1 0 52 2 1 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 0;
}
);
note = uni2669;
unicode = 2669;
},
{
glyphname = dieresis;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"319 1372.597 OFFCURVE",
"267.003 1425 OFFCURVE",
"205 1425 CURVE SMOOTH",
"144.587 1425 OFFCURVE",
"94 1372.954 OFFCURVE",
"94 1311 CURVE SMOOTH",
"94 1251.066 OFFCURVE",
"145.066 1200 OFFCURVE",
"205 1200 CURVE SMOOTH",
"266.503 1200 OFFCURVE",
"319 1251.384 OFFCURVE",
"319 1311 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"678 1372.976 OFFCURVE",
"626.618 1425 OFFCURVE",
"565 1425 CURVE SMOOTH",
"503.736 1425 OFFCURVE",
"453 1373.446 OFFCURVE",
"453 1311 CURVE SMOOTH",
"453 1250.606 OFFCURVE",
"504.228 1200 OFFCURVE",
"565 1200 CURVE SMOOTH",
"626.122 1200 OFFCURVE",
"678 1251.042 OFFCURVE",
"678 1311 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 16 values pushed */
2 1 0 0 1 1 0 36 3 1 1 1 11 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = dieresis;
unicode = 00A8;
},
{
glyphname = dotaccent;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"528 1407.842 OFFCURVE",
"468.327 1466 OFFCURVE",
"400 1466 CURVE SMOOTH",
"331.736 1466 OFFCURVE",
"275 1407.819 OFFCURVE",
"275 1338 CURVE SMOOTH",
"275 1270.192 OFFCURVE",
"332.192 1213 OFFCURVE",
"400 1213 CURVE SMOOTH",
"467.87 1213 OFFCURVE",
"528 1270.168 OFFCURVE",
"528 1338 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 14 values pushed */
0 0 0 1 1 0 36 0 1 1 13 0 32 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = dotaccent;
unicode = 02D9;
},
{
glyphname = grave;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"77 1447 LINE",
"262 1190 LINE SMOOTH",
"276.667 1170 OFFCURVE",
"290.333 1163 OFFCURVE",
"317 1163 CURVE SMOOTH",
"416 1163 LINE",
"309 1405 LINE SMOOTH",
"295.667 1434.333 OFFCURVE",
"281.333 1447 OFFCURVE",
"240 1447 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 1 0 1 53 2 1 0 0 17 0 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
2 1 0 1 0 52 0 1 1 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = grave;
unicode = 0060;
},
{
glyphname = acute;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"508 1447 LINE SMOOTH",
"466.667 1447 OFFCURVE",
"447.667 1434.333 OFFCURVE",
"429 1405 CURVE SMOOTH",
"263 1163 LINE",
"365 1163 LINE SMOOTH",
"391.667 1163 OFFCURVE",
"409.333 1170 OFFCURVE",
"428 1190 CURVE SMOOTH",
"676 1447 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 9 0 8 5 3 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 13 values pushed */
0 0 1 0 53 2 1 1 1 17 1 32 2 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = acute;
unicode = 00B4;
},
{
glyphname = hungarumlaut;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"402 1447 LINE SMOOTH",
"360.667 1447 OFFCURVE",
"341.667 1434.333 OFFCURVE",
"323 1405 CURVE SMOOTH",
"167 1163 LINE",
"239 1163 LINE SMOOTH",
"265.667 1163 OFFCURVE",
"283.333 1168.667 OFFCURVE",
"302 1190 CURVE SMOOTH",
"516 1447 LINE"
);
},
{
closed = 1;
nodes = (
"683 1447 LINE SMOOTH",
"641.667 1447 OFFCURVE",
"625.667 1431.667 OFFCURVE",
"603 1405 CURVE SMOOTH",
"408 1163 LINE",
"491 1163 LINE SMOOTH",
"517.667 1163 OFFCURVE",
"534.333 1170 OFFCURVE",
"553 1190 CURVE SMOOTH",
"809 1447 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 19 10 18 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
2 1 0 0 1 1 0 36 5 3 4 3 1 1 17 0 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = hungarumlaut;
unicode = 02DD;
},
{
glyphname = circumflex;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"480 1431 LINE",
"320 1431 LINE",
"81 1169 LINE",
"200 1169 LINE SMOOTH",
"216 1169 OFFCURVE",
"232 1176.333 OFFCURVE",
"240 1183 CURVE",
"373 1311 LINE",
"378.333 1315 OFFCURVE",
"383.333 1319.333 OFFCURVE",
"390 1326 CURVE",
"394 1319.333 OFFCURVE",
"399 1315 OFFCURVE",
"403 1311 CURVE",
"503 1183 LINE SMOOTH",
"509.667 1175 OFFCURVE",
"524.333 1169 OFFCURVE",
"539 1169 CURVE SMOOTH",
"653 1169 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
18 17 16 14 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
8 1 0 2 1 30 1 1 0 2 0 53 0 2 2 11 2 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
8 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
8 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = circumflex;
unicode = 02C6;
},
{
glyphname = caron;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"288 1169 LINE",
"447 1169 LINE",
"686 1431 LINE",
"571 1431 LINE SMOOTH",
"556.333 1431 OFFCURVE",
"540.333 1425 OFFCURVE",
"531 1417 CURVE",
"400 1288 LINE",
"381 1269 LINE",
"368 1288 LINE",
"268 1417 LINE",
"261.333 1425 OFFCURVE",
"247.667 1431 OFFCURVE",
"233 1431 CURVE SMOOTH",
"113 1431 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
14 13 12 10 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 19 values pushed */
6 1 2 0 1 30 0 2 0 2 53 1 1 0 0 11 0 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
6 1 2 0 1 30 1 1 0 2 0 52 0 2 2 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
6 1 2 1 1 30 0 0 1 0 52 0 1 2 1 52 0 2 2 43 4 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = caron;
unicode = 02C7;
},
{
glyphname = breve;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"464.667 1164 OFFCURVE",
"532.5 1194.833 OFFCURVE",
"578.5 1243.5 CURVE SMOOTH",
"624.5 1292.167 OFFCURVE",
"648.667 1359 OFFCURVE",
"658 1431 CURVE",
"536 1431 LINE",
"524.737 1338.08 OFFCURVE",
"483.417 1277 OFFCURVE",
"384 1277 CURVE SMOOTH",
"296 1277 OFFCURVE",
"266 1323 OFFCURVE",
"266 1391 CURVE SMOOTH",
"266 1403.667 OFFCURVE",
"267 1417 OFFCURVE",
"269 1431 CURVE",
"148 1431 LINE",
"145.333 1412.333 OFFCURVE",
"144 1394.333 OFFCURVE",
"144 1377 CURVE SMOOTH",
"144 1248.568 OFFCURVE",
"214.324 1164 OFFCURVE",
"370 1164 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 20 19 15 13 9 8 0 24 1 24 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
95 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
0 2 4 1 0 2 0 1 0 37 3 1 1 1 11 1 32 2 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = breve;
unicode = 02D8;
},
{
glyphname = ring;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"185 1207.187 OFFCURVE",
"275.746 1131 OFFCURVE",
"384 1131 CURVE SMOOTH",
"494.708 1131 OFFCURVE",
"586 1206.899 OFFCURVE",
"586 1315 CURVE SMOOTH",
"586 1424.991 OFFCURVE",
"493.935 1502 OFFCURVE",
"384 1502 CURVE SMOOTH",
"276.498 1502 OFFCURVE",
"185 1424.722 OFFCURVE",
"185 1315 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"285 1375 OFFCURVE",
"323.333 1416 OFFCURVE",
"386 1416 CURVE SMOOTH",
"446 1416 OFFCURVE",
"486 1375 OFFCURVE",
"486 1315 CURVE SMOOTH",
"486 1256.333 OFFCURVE",
"446 1215 OFFCURVE",
"386 1215 CURVE SMOOTH",
"323.333 1215 OFFCURVE",
"285 1256.333 OFFCURVE",
"285 1315 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
28 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 23 values pushed */
0 2 0 1 2 1 1 0 37 0 3 3 0 1 0 36 0 0 0 13 3 32 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = ring;
unicode = 02DA;
},
{
glyphname = tilde;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"430.919 1321 OFFCURVE",
"376.033 1414 OFFCURVE",
"297 1414 CURVE SMOOTH",
"195.071 1414 OFFCURVE",
"119.506 1321.88 OFFCURVE",
"104 1203 CURVE",
"210 1203 LINE",
"218 1261.667 OFFCURVE",
"245.333 1292 OFFCURVE",
"288 1292 CURVE SMOOTH",
"345.079 1292 OFFCURVE",
"401.812 1199 OFFCURVE",
"480 1199 CURVE SMOOTH",
"583.823 1199 OFFCURVE",
"656.703 1289.173 OFFCURVE",
"672 1409 CURVE",
"567 1409 LINE",
"557.667 1350.333 OFFCURVE",
"531.333 1321 OFFCURVE",
"488 1321 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 23 21 17 16 14 12 9 7 3 2 0 26 1 26 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
42 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
6 1 0 4 1 2 0 2 1 0 37 0 3 3 1 1 0 36 5 1 1 1 11 3 32 3 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
91 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = tilde;
unicode = 02DC;
},
{
glyphname = macron;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"112 1232 LINE",
"642 1232 LINE",
"656 1345 LINE",
"126 1345 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = macron;
unicode = 00AF;
},
{
glyphname = cedilla;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"59 -249 OFFCURVE",
"51.333 -254.667 OFFCURVE",
"46 -266 CURVE SMOOTH",
"23 -319 LINE",
"59 -339 OFFCURVE",
"103.333 -351 OFFCURVE",
"154 -351 CURVE SMOOTH",
"276.836 -351 OFFCURVE",
"375 -297.158 OFFCURVE",
"375 -198 CURVE SMOOTH",
"375 -136.667 OFFCURVE",
"332.667 -94.667 OFFCURVE",
"234 -72 CURVE",
"266 10 LINE",
"159 10 LINE",
"101 -131 LINE",
"189 -143 OFFCURVE",
"238 -157.333 OFFCURVE",
"238 -204 CURVE SMOOTH",
"238 -244 OFFCURVE",
"208.333 -274 OFFCURVE",
"155 -274 CURVE SMOOTH",
"126.197 -274 OFFCURVE",
"83.145 -249 OFFCURVE",
"69 -249 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 23 21 13 12 6 4 0 27 1 27 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
9 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 33 values pushed */
14 11 2 0 2 25 1 3 0 2 30 0 2 0 0 2 40 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 32 values pushed */
14 11 2 0 2 25 1 3 0 2 30 0 2 0 2 52 1 4 2 0 0 3 1 2 36 0 3 3 16 3 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 36 values pushed */
14 11 2 0 2 25 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 1 3 1 2 36 0 3 3 16 3 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 45 values pushed */
14 11 2 0 2 25 1 3 1 2 30 0 2 0 2 52 4 1 0 1 0 52 0 1 3 3 1 1 0 35 0 1 1 3 1 2 36 0 3 1 3 1 2 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = cedilla;
unicode = 00B8;
},
{
glyphname = ogonek;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"328.741 -214 OFFCURVE",
"282.128 -238 OFFCURVE",
"252 -238 CURVE SMOOTH",
"209.333 -238 OFFCURVE",
"180 -209.667 OFFCURVE",
"180 -167 CURVE SMOOTH",
"180 -91.325 OFFCURVE",
"248.196 -34.173 OFFCURVE",
"308 0 CURVE",
"221 13 LINE",
"126.716 -40.512 OFFCURVE",
"47 -120.082 OFFCURVE",
"47 -214 CURVE SMOOTH",
"47 -291.333 OFFCURVE",
"103.667 -342 OFFCURVE",
"205 -342 CURVE SMOOTH",
"269 -342 OFFCURVE",
"332 -320.667 OFFCURVE",
"372 -290 CURVE",
"354 -226 LINE SMOOTH",
"352 -218 OFFCURVE",
"346.667 -214 OFFCURVE",
"338 -214 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
1 0 24 22 7 5 0 27 1 27 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
21 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 27 values pushed */
3 1 1 0 1 30 15 14 2 0 28 2 3 2 0 0 1 1 0 36 0 1 1 16 1 32 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
73 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 31 values pushed */
3 1 1 2 1 30 15 14 2 0 28 3 1 0 2 0 52 0 2 2 1 1 0 36 0 1 1 16 1 32 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 40 values pushed */
3 1 1 2 1 30 15 14 2 0 28 3 1 0 2 0 52 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = ogonek;
unicode = 02DB;
},
{
glyphname = dieresis.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"336 1721.346 OFFCURVE",
"287.514 1768 OFFCURVE",
"233 1768 CURVE SMOOTH",
"180.248 1768 OFFCURVE",
"134 1720.359 OFFCURVE",
"134 1665 CURVE SMOOTH",
"134 1611.335 OFFCURVE",
"180.158 1567 OFFCURVE",
"233 1567 CURVE SMOOTH",
"287.585 1567 OFFCURVE",
"336 1610.345 OFFCURVE",
"336 1665 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"680 1720.956 OFFCURVE",
"633.805 1768 OFFCURVE",
"579 1768 CURVE SMOOTH",
"524.195 1768 OFFCURVE",
"478 1720.956 OFFCURVE",
"478 1665 CURVE SMOOTH",
"478 1610.729 OFFCURVE",
"524.096 1567 OFFCURVE",
"579 1567 CURVE SMOOTH",
"633.904 1567 OFFCURVE",
"680 1610.729 OFFCURVE",
"680 1665 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
36 34 26 24 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 26 values pushed */
3 1 1 0 0 1 1 0 35 3 1 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 33 values pushed */
0 1 3 0 1 1 0 35 0 3 0 2 0 3 2 1 0 38 0 1 1 0 1 0 36 0 0 1 0 1 0 33 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = dieresis.case;
},
{
glyphname = dotaccent.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"542 1753.501 OFFCURVE",
"483.922 1811 OFFCURVE",
"418 1811 CURVE SMOOTH",
"352.976 1811 OFFCURVE",
"298 1753.675 OFFCURVE",
"298 1688 CURVE SMOOTH",
"298 1623.934 OFFCURVE",
"352.8 1567 OFFCURVE",
"418 1567 CURVE SMOOTH",
"484.089 1567 OFFCURVE",
"542 1624.105 OFFCURVE",
"542 1688 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
16 14 6 4 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 1 0 0 1 1 0 35 0 1 1 0 1 0 36 0 0 1 0 1 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = dotaccent.case;
},
{
glyphname = grave.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"85 1781 LINE",
"320 1571 LINE",
"340 1555 OFFCURVE",
"350.333 1546 OFFCURVE",
"377 1546 CURVE SMOOTH",
"521 1546 LINE",
"354 1749 LINE SMOOTH",
"332.667 1774.333 OFFCURVE",
"320.333 1781 OFFCURVE",
"279 1781 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
1 0 6 4 0 9 1 9 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 0 1 0 52 0 1 1 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = grave.case;
},
{
glyphname = acute.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"580 1781 LINE SMOOTH",
"539.245 1781 OFFCURVE",
"524.884 1774.096 OFFCURVE",
"497 1749 CURVE SMOOTH",
"279 1546 LINE",
"424 1546 LINE SMOOTH",
"450.667 1546 OFFCURVE",
"463.333 1555 OFFCURVE",
"486 1571 CURVE SMOOTH",
"774 1781 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
0 0 0 11 0 10 5 3 3 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 11 values pushed */
2 1 1 0 1 52 0 0 0 43 2 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = acute.case;
},
{
glyphname = hungarumlaut.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"439 1771 LINE SMOOTH",
"397.667 1771 OFFCURVE",
"374.667 1753.667 OFFCURVE",
"352 1727 CURVE SMOOTH",
"200 1546 LINE",
"283 1546 LINE SMOOTH",
"309.667 1546 OFFCURVE",
"325.333 1553.333 OFFCURVE",
"344 1572 CURVE SMOOTH",
"552 1771 LINE"
);
},
{
closed = 1;
nodes = (
"735 1771 LINE SMOOTH",
"695 1771 OFFCURVE",
"670.667 1753.667 OFFCURVE",
"644 1727 CURVE SMOOTH",
"457 1546 LINE",
"550 1546 LINE SMOOTH",
"576.667 1546 OFFCURVE",
"594.333 1554.667 OFFCURVE",
"617 1572 CURVE SMOOTH",
"866 1771 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
10 10 0 0 10 19 10 18 15 13 0 9 0 8 5 3 6 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
5 3 4 3 1 0 0 1 1 0 35 5 3 4 3 1 1 0 1 0 36 2 1 0 1 0 1 0 33 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 39 values pushed */
5 1 3 1 2 1 3 2 50 0 0 2 0 53 4 1 1 3 2 1 1 0 35 4 1 1 1 2 1 0 36 0 2 1 2 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = hungarumlaut.case;
},
{
glyphname = circumflex.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"517 1755 LINE",
"348 1755 LINE",
"102 1546 LINE",
"232 1546 LINE SMOOTH",
"248 1546 OFFCURVE",
"268 1549.667 OFFCURVE",
"280 1559 CURVE SMOOTH",
"422 1666 LINE",
"536 1559 LINE SMOOTH",
"546.667 1549.667 OFFCURVE",
"565.333 1546 OFFCURVE",
"580 1546 CURVE SMOOTH",
"711 1546 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 8 values pushed */
12 11 10 8 2 0 3 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 17 values pushed */
5 1 0 2 1 30 0 2 0 2 52 1 1 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 21 values pushed */
5 1 1 2 1 30 0 2 1 2 52 0 1 0 1 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = circumflex.case;
},
{
glyphname = caron.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"611 1755 LINE SMOOTH",
"595 1755 OFFCURVE",
"575 1751.333 OFFCURVE",
"563 1742 CURVE SMOOTH",
"421 1635 LINE",
"307 1742 LINE SMOOTH",
"296.333 1751.333 OFFCURVE",
"277.667 1755 OFFCURVE",
"263 1755 CURVE SMOOTH",
"132 1755 LINE",
"326 1546 LINE",
"495 1546 LINE",
"741 1755 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 12 values pushed */
0 0 0 12 0 11 5 3 2 1 4 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 18 values pushed */
8 1 0 1 1 30 3 2 2 1 0 1 52 0 0 0 43 3 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 22 values pushed */
8 1 0 2 1 30 0 1 2 1 52 3 1 2 0 2 52 0 0 0 43 4 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = caron.case;
},
{
glyphname = breve.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"574.065 1528 OFFCURVE",
"679.685 1612.515 OFFCURVE",
"699 1756 CURVE",
"587 1756 LINE",
"579 1676 OFFCURVE",
"528 1634 OFFCURVE",
"424 1634 CURVE SMOOTH",
"332.667 1634 OFFCURVE",
"287 1667 OFFCURVE",
"287 1733 CURVE SMOOTH",
"287 1739.667 OFFCURVE",
"287.667 1748 OFFCURVE",
"289 1756 CURVE",
"178 1756 LINE",
"176 1742 OFFCURVE",
"175 1728.667 OFFCURVE",
"175 1716 CURVE SMOOTH",
"175 1590.667 OFFCURVE",
"257.667 1528 OFFCURVE",
"411 1528 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 14 values pushed */
1 0 15 14 12 10 6 5 0 19 1 19 5 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
232 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 30 values pushed */
3 1 1 2 1 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 4 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 34 values pushed */
0 1 3 1 52 0 3 2 3 52 0 2 0 0 2 1 0 35 0 2 2 0 1 0 36 4 1 0 2 0 1 0 33 5 
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = breve.case;
},
{
glyphname = ring.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"219 1558.388 OFFCURVE",
"304.635 1485 OFFCURVE",
"407 1485 CURVE SMOOTH",
"509.879 1485 OFFCURVE",
"598 1558.144 OFFCURVE",
"598 1659 CURVE SMOOTH",
"598 1763.114 OFFCURVE",
"510.616 1837 OFFCURVE",
"407 1837 CURVE SMOOTH",
"304.322 1837 OFFCURVE",
"219 1762.44 OFFCURVE",
"219 1659 CURVE SMOOTH"
);
},
{
closed = 1;
nodes = (
"308 1719 OFFCURVE",
"346.333 1760 OFFCURVE",
"409 1760 CURVE SMOOTH",
"469 1760 OFFCURVE",
"509 1719 OFFCURVE",
"509 1659 CURVE SMOOTH",
"509 1601.667 OFFCURVE",
"469 1559 OFFCURVE",
"409 1559 CURVE SMOOTH",
"346.333 1559 OFFCURVE",
"308 1601.667 OFFCURVE",
"308 1659 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 10 values pushed */
30 28 24 22 16 14 6 4 4 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 33 values pushed */
0 0 0 3 2 0 3 1 0 38 0 2 1 1 2 1 0 35 0 2 2 1 1 0 36 0 1 2 1 1 0 33 4 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = ring.case;
},
{
glyphname = tilde.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"480.237 1660 OFFCURVE",
"413.654 1744 OFFCURVE",
"334 1744 CURVE SMOOTH",
"235.014 1744 OFFCURVE",
"166.234 1659.164 OFFCURVE",
"153 1548 CURVE",
"250 1548 LINE",
"256.667 1597.333 OFFCURVE",
"284 1630 OFFCURVE",
"324 1630 CURVE SMOOTH",
"382.03 1630 OFFCURVE",
"451.789 1544 OFFCURVE",
"529 1544 CURVE SMOOTH",
"628.227 1544 OFFCURVE",
"695.836 1628.424 OFFCURVE",
"709 1739 CURVE",
"615 1739 LINE",
"608.333 1689.667 OFFCURVE",
"579 1660 OFFCURVE",
"539 1660 CURVE SMOOTH"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 18 values pushed */
1 0 24 22 18 17 15 13 10 8 4 3 0 27 1 27 7 7 
CALL[ ]\011/* CallFunction */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
91 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 37 values pushed */
6 1 0 3 2 0 1 0 35 5 1 1 0 3 2 1 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 4 
ELSE[ ]\011/* Else */
MPPEM[ ]\011/* MeasurePixelPerEm */
PUSHB[ ]\011/* 1 value pushed */
112 
LT[ ]\011/* LessThan */
IF[ ]\011/* If */
NPUSHB[ ]\011/* 44 values pushed */
0 1 5 0 5 1 0 50 6 1 0 3 2 0 1 0 35 0 5 0 3 2 5 3 1 0 38 6 1 0 0 2 1 0 36 4 1 2 0 2 1 0 33 5 
ELSE[ ]\011/* Else */
NPUSHB[ ]\011/* 51 values pushed */
0 1 5 0 5 1 0 50 0 4 3 2 3 4 2 50 6 1 0 3 2 0 1 0 35 0 5 0 3 4 5 3 1 0 38 6 1 0 0 2 1 0 36 0 2 0 2 1 0 33 6 
EIF[ ]\011/* EndIf */
EIF[ ]\011/* EndIf */
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = tilde.case;
},
{
glyphname = macron.case;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
paths = (
{
closed = 1;
nodes = (
"134 1576 LINE",
"697 1576 LINE",
"711 1678 LINE",
"147 1678 LINE"
);
}
);
userData = {
assembly = "NPUSHB[ ]\011/* 6 values pushed */
3 2 1 0 2 7 
CALL[ ]\011/* CallFunction */
NPUSHB[ ]\011/* 23 values pushed */
0 0 1 1 0 0 0 35 0 0 0 1 0 0 36 0 1 0 1 0 0 33 3 
PUSHB[ ]\011/* 1 value pushed */
56 
CALL[ ]\011/* CallFunction */";
};
width = 568;
}
);
note = macron.case;
},
{
glyphname = firsttonechinese;
layers = (
{
components = (
{
alignment = -1;
name = macron;
}
);
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 568;
}
);
note = uni02C9;
unicode = 02C9;
},
{
glyphname = NULL;
layers = (
{
layerId = "30DC88F3-813A-4685-BB5F-1C042FFC1B6D";
width = 0;
}
);
note = NULL;
}
);
instances = (
{
isItalic = 1;
name = Italic;
weightClass = Normal;
}
);
kerning = {
"30DC88F3-813A-4685-BB5F-1C042FFC1B6D" = {
A = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Aacute = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Acircumflex = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Adieresis = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Agrave = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Aogonek = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Aring = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
Atilde = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
C = {
bullet = -128;
emdash = -128;
endash = -128;
guillemetleft = -128;
guillemetright = -128;
guilsinglleft = -128;
guilsinglright = -128;
hyphen = -128;
periodcentered = -128;
softhyphen = -128;
};
Cacute = {
bullet = -128;
emdash = -128;
endash = -128;
guillemetleft = -128;
guillemetright = -128;
guilsinglleft = -128;
guilsinglright = -128;
hyphen = -128;
periodcentered = -128;
softhyphen = -128;
};
Ccedilla = {
bullet = -128;
emdash = -128;
endash = -128;
guillemetleft = -128;
guillemetright = -128;
guilsinglleft = -128;
guilsinglright = -128;
hyphen = -128;
periodcentered = -128;
softhyphen = -128;
};
D = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Eth = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
F = {
A = -132;
AE = -132;
Aacute = -132;
Acircumflex = -132;
Adieresis = -132;
Agrave = -132;
Aogonek = -132;
Aring = -132;
Atilde = -132;
J = -198;
a = -69;
aacute = -69;
acircumflex = -69;
adieresis = -69;
ae = -69;
agrave = -69;
ampersand = -132;
aogonek = -69;
aring = -69;
atilde = -69;
c = -69;
cacute = -69;
ccedilla = -69;
colon = -60;
comma = -180;
d = -69;
e = -69;
eacute = -69;
ecircumflex = -69;
edieresis = -69;
egrave = -69;
ellipsis = -180;
eogonek = -69;
eth = -69;
increment = -132;
m = -60;
micro = -60;
n = -60;
nacute = -60;
ntilde = -60;
o = -69;
oacute = -69;
ocircumflex = -69;
odieresis = -69;
oe = -69;
ograve = -69;
oslash = -69;
otilde = -69;
p = -60;
period = -180;
q = -69;
question = 20;
quotedblbase = -180;
quotesinglbase = -180;
r = -60;
semicolon = -60;
slash = -132;
u = -60;
uacute = -60;
ucircumflex = -60;
udieresis = -60;
ugrave = -60;
};
J = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
K = {
C = -102;
Cacute = -102;
Ccedilla = -102;
G = -102;
O = -102;
OE = -102;
Oacute = -102;
Ocircumflex = -102;
Odieresis = -102;
Ograve = -102;
Oslash = -102;
Otilde = -102;
Q = -102;
asterisk = 31;
at = -102;
bullet = -70;
copyright = -102;
degree = 31;
emdash = -70;
endash = -70;
f = -51;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
ordfeminine = 31;
ordmasculine = 31;
periodcentered = -70;
quotedbl = 31;
quotedblleft = 31;
quotedblright = 31;
quoteleft = 31;
quoteright = 31;
quotesingle = 31;
registered = -102;
softhyphen = -70;
t = -112;
v = -62;
w = -45;
y = -62;
yacute = -62;
ydieresis = -62;
};
L = {
C = -91;
Cacute = -91;
Ccedilla = -91;
G = -91;
O = -91;
OE = -91;
Oacute = -91;
Ocircumflex = -91;
Odieresis = -91;
Ograve = -91;
Oslash = -91;
Otilde = -91;
Q = -91;
T = -200;
V = -182;
W = -152;
Y = -212;
Yacute = -212;
Ydieresis = -212;
asterisk = -257;
at = -91;
backslash = -182;
bullet = -197;
copyright = -91;
degree = -257;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
onesuperior = -212;
ordfeminine = -257;
ordmasculine = -257;
periodcentered = -197;
quotedbl = -257;
quotedblleft = -257;
quotedblright = -257;
quoteleft = -257;
quoteright = -257;
quotesingle = -257;
registered = -91;
softhyphen = -197;
threesuperior = -212;
twosuperior = -212;
v = -132;
w = -85;
y = -132;
yacute = -132;
ydieresis = -132;
};
Lslash = {
V = -162;
W = -122;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -151;
backslash = -162;
bullet = -117;
degree = -151;
emdash = -117;
endash = -117;
guillemetleft = -117;
guillemetright = -117;
guilsinglleft = -117;
guilsinglright = -117;
hyphen = -117;
onesuperior = -131;
ordfeminine = -151;
ordmasculine = -151;
periodcentered = -117;
quotedbl = -151;
quotedblleft = -151;
quotedblright = -151;
quoteleft = -151;
quoteright = -151;
quotesingle = -151;
softhyphen = -117;
threesuperior = -131;
twosuperior = -131;
v = -80;
w = -51;
y = -80;
yacute = -80;
ydieresis = -80;
};
O = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Oacute = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Ocircumflex = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Odieresis = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Ograve = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
Otilde = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
P = {
A = -138;
AE = -138;
Aacute = -138;
Acircumflex = -138;
Adieresis = -138;
Agrave = -138;
Aogonek = -138;
Aring = -138;
Atilde = -138;
J = -182;
a = -30;
aacute = -30;
acircumflex = -30;
adieresis = -30;
ae = -30;
agrave = -30;
ampersand = -138;
aogonek = -30;
aring = -30;
atilde = -30;
c = -30;
cacute = -30;
ccedilla = -30;
comma = -189;
d = -30;
e = -30;
eacute = -30;
ecircumflex = -30;
edieresis = -30;
egrave = -30;
ellipsis = -189;
eogonek = -30;
eth = -30;
increment = -138;
o = -30;
oacute = -30;
ocircumflex = -30;
odieresis = -30;
oe = -30;
ograve = -30;
oslash = -30;
otilde = -30;
period = -189;
q = -30;
quotedblbase = -189;
quotesinglbase = -189;
slash = -138;
};
Q = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
R = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
T = -51;
U = -42;
Uacute = -42;
Ucircumflex = -42;
Udieresis = -42;
Ugrave = -42;
at = -40;
copyright = -40;
registered = -40;
};
T = {
A = -132;
AE = -132;
Aacute = -132;
Acircumflex = -132;
Adieresis = -132;
Agrave = -132;
Aogonek = -132;
Aring = -132;
Atilde = -132;
C = -97;
Cacute = -97;
Ccedilla = -97;
G = -97;
J = -200;
O = -97;
OE = -97;
Oacute = -97;
Ocircumflex = -97;
Odieresis = -97;
Ograve = -97;
Oslash = -97;
Otilde = -97;
Q = -97;
a = -209;
aacute = -209;
acircumflex = -209;
adieresis = -209;
ae = -209;
agrave = -209;
ampersand = -132;
aogonek = -209;
aring = -209;
at = -97;
atilde = -209;
bullet = -180;
c = -209;
cacute = -209;
ccedilla = -209;
colon = -154;
comma = -180;
copyright = -97;
d = -209;
e = -209;
eacute = -209;
ecircumflex = -209;
edieresis = -209;
egrave = -209;
ellipsis = -180;
emdash = -180;
endash = -180;
eogonek = -209;
eth = -209;
g = -187;
guillemetleft = -180;
guillemetright = -180;
guilsinglleft = -180;
guilsinglright = -180;
hyphen = -180;
increment = -132;
m = -154;
micro = -154;
n = -154;
nacute = -154;
ntilde = -154;
o = -209;
oacute = -209;
ocircumflex = -209;
odieresis = -209;
oe = -209;
ograve = -209;
oslash = -209;
otilde = -209;
p = -154;
period = -180;
periodcentered = -180;
q = -209;
question = 39;
quotedblbase = -180;
quotesinglbase = -180;
r = -154;
registered = -97;
s = -182;
sacute = -182;
scaron = -182;
semicolon = -154;
slash = -132;
softhyphen = -180;
u = -154;
uacute = -154;
ucircumflex = -154;
udieresis = -154;
ugrave = -154;
v = -169;
w = -129;
x = -166;
y = -180;
yacute = -169;
ydieresis = -169;
z = -161;
zacute = -161;
zcaron = -161;
zdotaccent = -161;
};
Thorn = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
U = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Uacute = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Ucircumflex = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Udieresis = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
Ugrave = {
A = -40;
AE = -40;
Aacute = -40;
Acircumflex = -40;
Adieresis = -40;
Agrave = -40;
Aogonek = -40;
Aring = -40;
Atilde = -40;
ampersand = -40;
increment = -40;
slash = -40;
};
V = {
A = -114;
AE = -114;
Aacute = -114;
Acircumflex = -114;
Adieresis = -114;
Agrave = -114;
Aogonek = -114;
Aring = -114;
Atilde = -114;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
J = -151;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -117;
aacute = -117;
acircumflex = -117;
adieresis = -117;
ae = -117;
agrave = -117;
ampersand = -114;
aogonek = -117;
aring = -117;
asterisk = 54;
at = -40;
atilde = -117;
bullet = -122;
c = -117;
cacute = -117;
ccedilla = -117;
colon = -85;
comma = -191;
copyright = -40;
d = -117;
degree = 54;
e = -117;
eacute = -117;
ecircumflex = -117;
edieresis = -117;
egrave = -117;
ellipsis = -191;
emdash = -122;
endash = -122;
eogonek = -117;
eth = -117;
guillemetleft = -122;
guillemetright = -122;
guilsinglleft = -122;
guilsinglright = -122;
hyphen = -122;
increment = -114;
m = -85;
micro = -85;
n = -85;
nacute = -85;
ntilde = -85;
o = -117;
oacute = -117;
ocircumflex = -117;
odieresis = -117;
oe = -117;
ograve = -117;
onesuperior = 80;
ordfeminine = 54;
ordmasculine = 54;
oslash = -117;
otilde = -117;
p = -85;
period = -191;
periodcentered = -122;
q = -117;
question = 58;
quotedbl = 54;
quotedblbase = -191;
quotedblleft = 54;
quotedblright = 54;
quoteleft = 54;
quoteright = 54;
quotesinglbase = -191;
quotesingle = 54;
r = -85;
registered = -40;
s = -112;
sacute = -112;
scaron = -112;
semicolon = -85;
slash = -114;
softhyphen = -122;
threesuperior = 80;
twosuperior = 80;
u = -85;
uacute = -85;
ucircumflex = -85;
udieresis = -85;
ugrave = -85;
v = -36;
w = -36;
y = -36;
yacute = -36;
ydieresis = -36;
z = -72;
zacute = -72;
zcaron = -72;
zdotaccent = -72;
};
W = {
A = -72;
AE = -72;
Aacute = -72;
Acircumflex = -72;
Adieresis = -72;
Agrave = -72;
Aogonek = -72;
Aring = -72;
Atilde = -72;
J = -102;
a = -105;
aacute = -105;
acircumflex = -105;
adieresis = -105;
ae = -105;
agrave = -105;
ampersand = -72;
aogonek = -105;
aring = -105;
asterisk = 58;
atilde = -105;
c = -105;
cacute = -105;
ccedilla = -105;
colon = -66;
comma = -100;
d = -105;
degree = 58;
e = -105;
eacute = -105;
ecircumflex = -105;
edieresis = -105;
egrave = -105;
ellipsis = -100;
eogonek = -105;
eth = -105;
g = -84;
increment = -72;
m = -66;
micro = -66;
n = -66;
nacute = -66;
ntilde = -66;
o = -105;
oacute = -105;
ocircumflex = -105;
odieresis = -105;
oe = -105;
ograve = -105;
onesuperior = 60;
ordfeminine = 58;
ordmasculine = 58;
oslash = -105;
otilde = -105;
p = -66;
period = -100;
q = -105;
quotedbl = 58;
quotedblbase = -100;
quotedblleft = 58;
quotedblright = 58;
quoteleft = 58;
quoteright = 58;
quotesinglbase = -100;
quotesingle = 58;
r = -66;
s = -86;
sacute = -86;
scaron = -86;
semicolon = -66;
slash = -72;
threesuperior = 60;
twosuperior = 60;
u = -66;
uacute = -66;
ucircumflex = -66;
udieresis = -66;
ugrave = -66;
};
X = {
C = -102;
Cacute = -102;
Ccedilla = -102;
G = -102;
O = -102;
OE = -102;
Oacute = -102;
Ocircumflex = -102;
Odieresis = -102;
Ograve = -102;
Oslash = -102;
Otilde = -102;
Q = -102;
asterisk = 31;
at = -102;
bullet = -70;
copyright = -102;
degree = 31;
emdash = -70;
endash = -70;
f = -51;
guillemetleft = -70;
guillemetright = -70;
guilsinglleft = -70;
guilsinglright = -70;
hyphen = -70;
ordfeminine = 31;
ordmasculine = 31;
periodcentered = -70;
quotedbl = 31;
quotedblleft = 31;
quotedblright = 31;
quoteleft = 31;
quoteright = 31;
quotesingle = 31;
registered = -102;
softhyphen = -70;
t = -112;
v = -62;
w = -45;
y = -62;
yacute = -62;
ydieresis = -62;
};
Y = {
A = -142;
AE = -142;
Aacute = -142;
Acircumflex = -142;
Adieresis = -142;
Agrave = -142;
Aogonek = -142;
Aring = -142;
Atilde = -142;
C = -69;
Cacute = -69;
Ccedilla = -69;
G = -69;
J = -200;
O = -69;
OE = -69;
Oacute = -69;
Ocircumflex = -69;
Odieresis = -69;
Ograve = -69;
Oslash = -69;
Otilde = -69;
Q = -69;
a = -191;
aacute = -191;
acircumflex = -191;
adieresis = -191;
ae = -191;
agrave = -191;
ampersand = -142;
aogonek = -191;
aring = -191;
asterisk = 55;
at = -69;
atilde = -191;
bullet = -182;
c = -191;
cacute = -191;
ccedilla = -191;
colon = -115;
comma = -217;
copyright = -69;
d = -191;
degree = 55;
e = -191;
eacute = -191;
ecircumflex = -191;
edieresis = -191;
egrave = -191;
ellipsis = -217;
emdash = -182;
endash = -182;
eogonek = -191;
eth = -191;
g = -169;
guillemetleft = -182;
guillemetright = -182;
guilsinglleft = -182;
guilsinglright = -182;
hyphen = -182;
increment = -142;
m = -115;
micro = -115;
n = -115;
nacute = -115;
ntilde = -115;
o = -191;
oacute = -191;
ocircumflex = -191;
odieresis = -191;
oe = -191;
ograve = -191;
onesuperior = 62;
ordfeminine = 55;
ordmasculine = 55;
oslash = -191;
otilde = -191;
p = -115;
period = -217;
periodcentered = -182;
q = -191;
question = 50;
quotedbl = 55;
quotedblbase = -217;
quotedblleft = 55;
quotedblright = 55;
quoteleft = 55;
quoteright = 55;
quotesinglbase = -217;
quotesingle = 55;
r = -115;
registered = -69;
s = -191;
sacute = -191;
scaron = -191;
semicolon = -115;
slash = -142;
softhyphen = -182;
threesuperior = 62;
twosuperior = 62;
u = -115;
uacute = -115;
ucircumflex = -115;
udieresis = -115;
ugrave = -115;
z = -100;
zacute = -100;
zcaron = -100;
zdotaccent = -100;
};
Yacute = {
A = -142;
AE = -142;
Aacute = -142;
Acircumflex = -142;
Adieresis = -142;
Agrave = -142;
Aogonek = -142;
Aring = -142;
Atilde = -142;
C = -69;
Cacute = -69;
Ccedilla = -69;
G = -69;
J = -200;
O = -69;
OE = -69;
Oacute = -69;
Ocircumflex = -69;
Odieresis = -69;
Ograve = -69;
Oslash = -69;
Otilde = -69;
Q = -69;
a = -191;
aacute = -191;
acircumflex = -191;
adieresis = -191;
ae = -191;
agrave = -191;
ampersand = -142;
aogonek = -191;
aring = -191;
asterisk = 55;
at = -69;
atilde = -191;
bullet = -182;
c = -191;
cacute = -191;
ccedilla = -191;
colon = -115;
comma = -217;
copyright = -69;
d = -191;
degree = 55;
e = -191;
eacute = -191;
ecircumflex = -191;
edieresis = -191;
egrave = -191;
ellipsis = -217;
emdash = -182;
endash = -182;
eogonek = -191;
eth = -191;
g = -169;
guillemetleft = -182;
guillemetright = -182;
guilsinglleft = -182;
guilsinglright = -182;
hyphen = -182;
increment = -142;
m = -115;
micro = -115;
n = -115;
nacute = -115;
ntilde = -115;
o = -191;
oacute = -191;
ocircumflex = -191;
odieresis = -191;
oe = -191;
ograve = -191;
onesuperior = 62;
ordfeminine = 55;
ordmasculine = 55;
oslash = -191;
otilde = -191;
p = -115;
period = -217;
periodcentered = -182;
q = -191;
question = 50;
quotedbl = 55;
quotedblbase = -217;
quotedblleft = 55;
quotedblright = 55;
quoteleft = 55;
quoteright = 55;
quotesinglbase = -217;
quotesingle = 55;
r = -115;
registered = -69;
s = -191;
sacute = -191;
scaron = -191;
semicolon = -115;
slash = -142;
softhyphen = -182;
threesuperior = 62;
twosuperior = 62;
u = -115;
uacute = -115;
ucircumflex = -115;
udieresis = -115;
ugrave = -115;
z = -100;
zacute = -100;
zcaron = -100;
zdotaccent = -100;
};
Ydieresis = {
A = -142;
AE = -142;
Aacute = -142;
Acircumflex = -142;
Adieresis = -142;
Agrave = -142;
Aogonek = -142;
Aring = -142;
Atilde = -142;
C = -69;
Cacute = -69;
Ccedilla = -69;
G = -69;
J = -200;
O = -69;
OE = -69;
Oacute = -69;
Ocircumflex = -69;
Odieresis = -69;
Ograve = -69;
Oslash = -69;
Otilde = -69;
Q = -69;
a = -191;
aacute = -191;
acircumflex = -191;
adieresis = -191;
ae = -191;
agrave = -191;
ampersand = -142;
aogonek = -191;
aring = -191;
asterisk = 55;
at = -69;
atilde = -191;
bullet = -182;
c = -191;
cacute = -191;
ccedilla = -191;
colon = -115;
comma = -217;
copyright = -69;
d = -191;
degree = 55;
e = -191;
eacute = -191;
ecircumflex = -191;
edieresis = -191;
egrave = -191;
ellipsis = -217;
emdash = -182;
endash = -182;
eogonek = -191;
eth = -191;
g = -169;
guillemetleft = -182;
guillemetright = -182;
guilsinglleft = -182;
guilsinglright = -182;
hyphen = -182;
increment = -142;
m = -115;
micro = -115;
n = -115;
nacute = -115;
ntilde = -115;
o = -191;
oacute = -191;
ocircumflex = -191;
odieresis = -191;
oe = -191;
ograve = -191;
onesuperior = 62;
ordfeminine = 55;
ordmasculine = 55;
oslash = -191;
otilde = -191;
p = -115;
period = -217;
periodcentered = -182;
q = -191;
question = 50;
quotedbl = 55;
quotedblbase = -217;
quotedblleft = 55;
quotedblright = 55;
quoteleft = 55;
quoteright = 55;
quotesinglbase = -217;
quotesingle = 55;
r = -115;
registered = -69;
s = -191;
sacute = -191;
scaron = -191;
semicolon = -115;
slash = -142;
softhyphen = -182;
threesuperior = 62;
twosuperior = 62;
u = -115;
uacute = -115;
ucircumflex = -115;
udieresis = -115;
ugrave = -115;
z = -100;
zacute = -100;
zcaron = -100;
zdotaccent = -100;
};
Z = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -85;
copyright = -58;
emdash = -85;
endash = -85;
guillemetleft = -85;
guillemetright = -85;
guilsinglleft = -85;
guilsinglright = -85;
hyphen = -85;
periodcentered = -85;
question = 35;
registered = -58;
softhyphen = -85;
};
Zacute = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -85;
copyright = -58;
emdash = -85;
endash = -85;
guillemetleft = -85;
guillemetright = -85;
guilsinglleft = -85;
guilsinglright = -85;
hyphen = -85;
periodcentered = -85;
question = 35;
registered = -58;
softhyphen = -85;
};
Zcaron = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -85;
copyright = -58;
emdash = -85;
endash = -85;
guillemetleft = -85;
guillemetright = -85;
guilsinglleft = -85;
guilsinglright = -85;
hyphen = -85;
periodcentered = -85;
question = 35;
registered = -58;
softhyphen = -85;
};
Zdotaccent = {
C = -58;
Cacute = -58;
Ccedilla = -58;
G = -58;
O = -58;
OE = -58;
Oacute = -58;
Ocircumflex = -58;
Odieresis = -58;
Ograve = -58;
Oslash = -58;
Otilde = -58;
Q = -58;
at = -58;
bullet = -85;
copyright = -58;
emdash = -85;
endash = -85;
guillemetleft = -85;
guillemetright = -85;
guilsinglleft = -85;
guilsinglright = -85;
hyphen = -85;
periodcentered = -85;
question = 35;
registered = -58;
softhyphen = -85;
};
ae = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
asterisk = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
at = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
b = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
backslash = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
braceleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -31;
aacute = -31;
acircumflex = -31;
adieresis = -31;
ae = -31;
agrave = -31;
aogonek = -31;
aring = -31;
at = -40;
atilde = -31;
c = -31;
cacute = -31;
ccedilla = -31;
copyright = -40;
d = -31;
e = -31;
eacute = -31;
ecircumflex = -31;
edieresis = -31;
egrave = -31;
eogonek = -31;
eth = -31;
o = -31;
oacute = -31;
ocircumflex = -31;
odieresis = -31;
oe = -31;
ograve = -31;
oslash = -31;
otilde = -31;
q = -31;
registered = -40;
};
bracketleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -31;
aacute = -31;
acircumflex = -31;
adieresis = -31;
ae = -31;
agrave = -31;
aogonek = -31;
aring = -31;
at = -40;
atilde = -31;
c = -31;
cacute = -31;
ccedilla = -31;
copyright = -40;
d = -31;
e = -31;
eacute = -31;
ecircumflex = -31;
edieresis = -31;
egrave = -31;
eogonek = -31;
eth = -31;
o = -31;
oacute = -31;
ocircumflex = -31;
odieresis = -31;
oe = -31;
ograve = -31;
oslash = -31;
otilde = -31;
q = -31;
registered = -40;
};
bullet = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
comma = {
C = -55;
Cacute = -55;
Ccedilla = -55;
G = -55;
O = -55;
OE = -55;
Oacute = -55;
Ocircumflex = -55;
Odieresis = -55;
Ograve = -55;
Oslash = -55;
Otilde = -55;
Q = -55;
T = -203;
V = -212;
W = -132;
Y = -197;
Yacute = -197;
Ydieresis = -197;
asterisk = -120;
at = -55;
backslash = -212;
bullet = -197;
copyright = -55;
degree = -120;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
ordfeminine = -120;
ordmasculine = -120;
periodcentered = -197;
quotedbl = -120;
quotedblleft = -120;
quotedblright = -120;
quoteleft = -120;
quoteright = -120;
quotesingle = -120;
registered = -55;
softhyphen = -197;
v = -142;
w = -72;
y = -132;
yacute = -142;
ydieresis = -142;
};
copyright = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
degree = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
e = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
eacute = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
ecircumflex = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
edieresis = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
egrave = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
ellipsis = {
C = -55;
Cacute = -55;
Ccedilla = -55;
G = -55;
O = -55;
OE = -55;
Oacute = -55;
Ocircumflex = -55;
Odieresis = -55;
Ograve = -55;
Oslash = -55;
Otilde = -55;
Q = -55;
T = -203;
V = -212;
W = -132;
Y = -197;
Yacute = -197;
Ydieresis = -197;
asterisk = -120;
at = -55;
backslash = -212;
bullet = -197;
copyright = -55;
degree = -120;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
ordfeminine = -120;
ordmasculine = -120;
periodcentered = -197;
quotedbl = -120;
quotedblleft = -120;
quotedblright = -120;
quoteleft = -120;
quoteright = -120;
quotesingle = -120;
registered = -55;
softhyphen = -197;
v = -142;
w = -72;
y = -132;
yacute = -142;
ydieresis = -142;
};
emdash = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
endash = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
eogonek = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
f = {
asterisk = 69;
comma = -129;
degree = 69;
ellipsis = -129;
onesuperior = 100;
ordfeminine = 69;
ordmasculine = 69;
period = -129;
quotedbl = 69;
quotedblbase = -129;
quotedblleft = 69;
quotedblright = 69;
quoteleft = 69;
quoteright = 69;
quotesinglbase = -129;
quotesingle = 69;
threesuperior = 100;
twosuperior = 100;
};
guillemetleft = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
guillemetright = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
guilsinglleft = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
guilsinglright = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
h = {
asterisk = -60;
degree = -60;
onesuperior = -103;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -103;
twosuperior = -103;
v = -31;
y = -42;
yacute = -31;
ydieresis = -31;
};
hyphen = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
increment = {
C = -47;
Cacute = -47;
Ccedilla = -47;
G = -47;
J = 62;
O = -47;
OE = -47;
Oacute = -47;
Ocircumflex = -47;
Odieresis = -47;
Ograve = -47;
Oslash = -47;
Otilde = -47;
Q = -47;
T = -132;
U = -40;
Uacute = -40;
Ucircumflex = -40;
Udieresis = -40;
Ugrave = -40;
V = -114;
W = -83;
Y = -152;
Yacute = -152;
Ydieresis = -152;
asterisk = -182;
at = -47;
backslash = -114;
bullet = -52;
copyright = -47;
degree = -182;
emdash = -52;
endash = -52;
guillemetleft = -52;
guillemetright = -52;
guilsinglleft = -52;
guilsinglright = -52;
hyphen = -52;
onesuperior = -183;
ordfeminine = -182;
ordmasculine = -182;
periodcentered = -52;
quotedbl = -182;
quotedblleft = -182;
quotedblright = -182;
quoteleft = -182;
quoteright = -182;
quotesingle = -182;
registered = -47;
softhyphen = -52;
t = -57;
threesuperior = -183;
twosuperior = -183;
v = -47;
w = -32;
y = -47;
yacute = -47;
ydieresis = -47;
};
k = {
a = -51;
aacute = -51;
acircumflex = -51;
adieresis = -51;
ae = -51;
agrave = -51;
aogonek = -51;
aring = -51;
atilde = -51;
c = -51;
cacute = -51;
ccedilla = -51;
d = -51;
e = -51;
eacute = -51;
ecircumflex = -51;
edieresis = -51;
egrave = -51;
eogonek = -51;
eth = -51;
o = -51;
oacute = -51;
ocircumflex = -51;
odieresis = -51;
oe = -51;
ograve = -51;
oslash = -51;
otilde = -51;
q = -51;
};
m = {
asterisk = -60;
degree = -60;
onesuperior = -103;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -103;
twosuperior = -103;
v = -31;
y = -42;
yacute = -31;
ydieresis = -31;
};
n = {
asterisk = -60;
degree = -60;
onesuperior = -103;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -103;
twosuperior = -103;
v = -31;
y = -42;
yacute = -31;
ydieresis = -31;
};
nacute = {
asterisk = -60;
degree = -60;
onesuperior = -103;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -103;
twosuperior = -103;
v = -31;
y = -42;
yacute = -31;
ydieresis = -31;
};
ntilde = {
asterisk = -60;
degree = -60;
onesuperior = -103;
ordfeminine = -60;
ordmasculine = -60;
quotedbl = -60;
quotedblleft = -60;
quotedblright = -60;
quoteleft = -60;
quoteright = -60;
quotesingle = -60;
threesuperior = -103;
twosuperior = -103;
v = -31;
y = -42;
yacute = -31;
ydieresis = -31;
};
o = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
oacute = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
ocircumflex = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
odieresis = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
oe = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
ograve = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
onesuperior = {
A = -172;
AE = -172;
Aacute = -172;
Acircumflex = -172;
Adieresis = -172;
Agrave = -172;
Aogonek = -172;
Aring = -172;
Atilde = -172;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -172;
backslash = 58;
increment = -172;
slash = -172;
};
ordfeminine = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
ordmasculine = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
oslash = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
otilde = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
p = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
parenleft = {
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -31;
aacute = -31;
acircumflex = -31;
adieresis = -31;
ae = -31;
agrave = -31;
aogonek = -31;
aring = -31;
at = -40;
atilde = -31;
c = -31;
cacute = -31;
ccedilla = -31;
copyright = -40;
d = -31;
e = -31;
eacute = -31;
ecircumflex = -31;
edieresis = -31;
egrave = -31;
eogonek = -31;
eth = -31;
o = -31;
oacute = -31;
ocircumflex = -31;
odieresis = -31;
oe = -31;
ograve = -31;
oslash = -31;
otilde = -31;
q = -31;
registered = -40;
};
period = {
C = -55;
Cacute = -55;
Ccedilla = -55;
G = -55;
O = -55;
OE = -55;
Oacute = -55;
Ocircumflex = -55;
Odieresis = -55;
Ograve = -55;
Oslash = -55;
Otilde = -55;
Q = -55;
T = -203;
V = -212;
W = -132;
Y = -197;
Yacute = -197;
Ydieresis = -197;
asterisk = -120;
at = -55;
backslash = -212;
bullet = -197;
copyright = -55;
degree = -120;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
ordfeminine = -120;
ordmasculine = -120;
periodcentered = -197;
quotedbl = -120;
quotedblleft = -120;
quotedblright = -120;
quoteleft = -120;
quoteright = -120;
quotesingle = -120;
registered = -55;
softhyphen = -197;
v = -142;
w = -72;
y = -132;
yacute = -142;
ydieresis = -142;
};
periodcentered = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
quotedbl = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
quotedblbase = {
C = -55;
Cacute = -55;
Ccedilla = -55;
G = -55;
O = -55;
OE = -55;
Oacute = -55;
Ocircumflex = -55;
Odieresis = -55;
Ograve = -55;
Oslash = -55;
Otilde = -55;
Q = -55;
T = -203;
V = -212;
W = -132;
Y = -197;
Yacute = -197;
Ydieresis = -197;
asterisk = -120;
at = -55;
backslash = -212;
bullet = -197;
copyright = -55;
degree = -120;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
ordfeminine = -120;
ordmasculine = -120;
periodcentered = -197;
quotedbl = -120;
quotedblleft = -120;
quotedblright = -120;
quoteleft = -120;
quoteright = -120;
quotesingle = -120;
registered = -55;
softhyphen = -197;
v = -142;
w = -72;
y = -132;
yacute = -142;
ydieresis = -142;
};
quotedblleft = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
quotedblright = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
quoteleft = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
quoteright = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
quotesinglbase = {
C = -55;
Cacute = -55;
Ccedilla = -55;
G = -55;
O = -55;
OE = -55;
Oacute = -55;
Ocircumflex = -55;
Odieresis = -55;
Ograve = -55;
Oslash = -55;
Otilde = -55;
Q = -55;
T = -203;
V = -212;
W = -132;
Y = -197;
Yacute = -197;
Ydieresis = -197;
asterisk = -120;
at = -55;
backslash = -212;
bullet = -197;
copyright = -55;
degree = -120;
emdash = -197;
endash = -197;
guillemetleft = -197;
guillemetright = -197;
guilsinglleft = -197;
guilsinglright = -197;
hyphen = -197;
ordfeminine = -120;
ordmasculine = -120;
periodcentered = -197;
quotedbl = -120;
quotedblleft = -120;
quotedblright = -120;
quoteleft = -120;
quoteright = -120;
quotesingle = -120;
registered = -55;
softhyphen = -197;
v = -142;
w = -72;
y = -132;
yacute = -142;
ydieresis = -142;
};
quotesingle = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
r = {
a = -40;
aacute = -40;
acircumflex = -40;
adieresis = -40;
ae = -40;
agrave = -40;
aogonek = -40;
aring = -40;
atilde = -40;
c = -40;
cacute = -40;
ccedilla = -40;
comma = -152;
d = -40;
e = -40;
eacute = -40;
ecircumflex = -40;
edieresis = -40;
egrave = -40;
ellipsis = -152;
eogonek = -40;
eth = -40;
o = -40;
oacute = -40;
ocircumflex = -40;
odieresis = -40;
oe = -40;
ograve = -40;
oslash = -40;
otilde = -40;
period = -152;
q = -40;
quotedblbase = -152;
quotesinglbase = -152;
};
registered = {
A = -36;
AE = -36;
Aacute = -36;
Acircumflex = -36;
Adieresis = -36;
Agrave = -36;
Aogonek = -36;
Aring = -36;
Atilde = -36;
T = -97;
V = -51;
X = -68;
Y = -80;
Yacute = -80;
Ydieresis = -80;
Z = -69;
Zacute = -69;
Zcaron = -69;
Zdotaccent = -69;
ampersand = -36;
asterisk = -55;
backslash = -51;
braceright = -40;
bracketright = -40;
degree = -55;
increment = -36;
ordfeminine = -55;
ordmasculine = -55;
parenright = -40;
quotedbl = -55;
quotedblleft = -55;
quotedblright = -55;
quoteleft = -55;
quoteright = -55;
quotesingle = -55;
slash = -36;
};
slash = {
A = -114;
AE = -114;
Aacute = -114;
Acircumflex = -114;
Adieresis = -114;
Agrave = -114;
Aogonek = -114;
Aring = -114;
Atilde = -114;
C = -40;
Cacute = -40;
Ccedilla = -40;
G = -40;
J = -151;
O = -40;
OE = -40;
Oacute = -40;
Ocircumflex = -40;
Odieresis = -40;
Ograve = -40;
Oslash = -40;
Otilde = -40;
Q = -40;
a = -117;
aacute = -117;
acircumflex = -117;
adieresis = -117;
ae = -117;
agrave = -117;
ampersand = -114;
aogonek = -117;
aring = -117;
asterisk = 54;
at = -40;
atilde = -117;
bullet = -122;
c = -117;
cacute = -117;
ccedilla = -117;
colon = -85;
comma = -191;
copyright = -40;
d = -117;
degree = 54;
e = -117;
eacute = -117;
ecircumflex = -117;
edieresis = -117;
egrave = -117;
ellipsis = -191;
emdash = -122;
endash = -122;
eogonek = -117;
eth = -117;
guillemetleft = -122;
guillemetright = -122;
guilsinglleft = -122;
guilsinglright = -122;
hyphen = -122;
increment = -114;
m = -85;
micro = -85;
n = -85;
nacute = -85;
ntilde = -85;
o = -117;
oacute = -117;
ocircumflex = -117;
odieresis = -117;
oe = -117;
ograve = -117;
onesuperior = 80;
ordfeminine = 54;
ordmasculine = 54;
oslash = -117;
otilde = -117;
p = -85;
period = -191;
periodcentered = -122;
q = -117;
question = 58;
quotedbl = 54;
quotedblbase = -191;
quotedblleft = 54;
quotedblright = 54;
quoteleft = 54;
quoteright = 54;
quotesinglbase = -191;
quotesingle = 54;
r = -85;
registered = -40;
s = -112;
sacute = -112;
scaron = -112;
semicolon = -85;
slash = -114;
softhyphen = -122;
threesuperior = 80;
twosuperior = 80;
u = -85;
uacute = -85;
ucircumflex = -85;
udieresis = -85;
ugrave = -85;
v = -36;
w = -36;
y = -36;
yacute = -36;
ydieresis = -36;
z = -72;
zacute = -72;
zcaron = -72;
zdotaccent = -72;
};
softhyphen = {
A = -52;
AE = -52;
Aacute = -52;
Acircumflex = -52;
Adieresis = -52;
Agrave = -52;
Aogonek = -52;
Aring = -52;
Atilde = -52;
T = -191;
V = -122;
X = -70;
Y = -192;
Yacute = -192;
Ydieresis = -192;
Z = -55;
Zacute = -55;
Zcaron = -55;
Zdotaccent = -55;
ampersand = -52;
asterisk = -83;
backslash = -122;
comma = -162;
degree = -83;
ellipsis = -162;
increment = -52;
ordfeminine = -83;
ordmasculine = -83;
period = -162;
quotedbl = -83;
quotedblbase = -162;
quotedblleft = -83;
quotedblright = -83;
quoteleft = -83;
quoteright = -83;
quotesinglbase = -162;
quotesingle = -83;
slash = -52;
};
thorn = {
asterisk = -80;
braceright = -31;
bracketright = -31;
degree = -80;
ordfeminine = -80;
ordmasculine = -80;
parenright = -31;
quotedbl = -80;
quotedblleft = -80;
quotedblright = -80;
quoteleft = -80;
quoteright = -80;
quotesingle = -80;
x = -51;
};
threesuperior = {
A = -172;
AE = -172;
Aacute = -172;
Acircumflex = -172;
Adieresis = -172;
Agrave = -172;
Aogonek = -172;
Aring = -172;
Atilde = -172;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -172;
backslash = 58;
increment = -172;
slash = -172;
};
trademark = {
A = -171;
AE = -171;
Aacute = -171;
Acircumflex = -171;
Adieresis = -171;
Agrave = -171;
Aogonek = -171;
Aring = -171;
Atilde = -171;
V = 54;
W = 48;
Y = 45;
Yacute = 45;
Ydieresis = 45;
a = -91;
aacute = -91;
acircumflex = -91;
adieresis = -91;
ae = -91;
agrave = -91;
ampersand = -171;
aogonek = -91;
aring = -91;
atilde = -91;
backslash = 54;
bullet = -83;
c = -91;
cacute = -91;
ccedilla = -91;
comma = -92;
d = -91;
e = -91;
eacute = -91;
ecircumflex = -91;
edieresis = -91;
egrave = -91;
ellipsis = -92;
emdash = -83;
endash = -83;
eogonek = -91;
eth = -91;
guillemetleft = -83;
guillemetright = -83;
guilsinglleft = -83;
guilsinglright = -83;
hyphen = -83;
increment = -171;
o = -91;
oacute = -91;
ocircumflex = -91;
odieresis = -91;
oe = -91;
ograve = -91;
oslash = -91;
otilde = -91;
period = -92;
periodcentered = -83;
q = -91;
quotedblbase = -92;
quotesinglbase = -92;
slash = -171;
softhyphen = -83;
};
twosuperior = {
A = -172;
AE = -172;
Aacute = -172;
Acircumflex = -172;
Adieresis = -172;
Agrave = -172;
Aogonek = -172;
Aring = -172;
Atilde = -172;
V = 58;
W = 58;
Y = 40;
Yacute = 40;
Ydieresis = 40;
ampersand = -172;
backslash = 58;
increment = -172;
slash = -172;
};
v = {
A = -47;
AE = -47;
Aacute = -47;
Acircumflex = -47;
Adieresis = -47;
Agrave = -47;
Aogonek = -47;
Aring = -47;
Atilde = -47;
a = -26;
aacute = -26;
acircumflex = -26;
adieresis = -26;
ae = -26;
agrave = -26;
ampersand = -47;
aogonek = -26;
aring = -26;
atilde = -26;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -142;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
ellipsis = -142;
eogonek = -26;
eth = -26;
increment = -47;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -142;
q = -26;
quotedblbase = -142;
quotesinglbase = -142;
slash = -47;
};
w = {
A = -32;
AE = -32;
Aacute = -32;
Acircumflex = -32;
Adieresis = -32;
Agrave = -32;
Aogonek = -32;
Aring = -32;
Atilde = -32;
ampersand = -32;
comma = -83;
ellipsis = -83;
increment = -32;
period = -83;
quotedblbase = -83;
quotesinglbase = -83;
slash = -32;
};
x = {
a = -51;
aacute = -51;
acircumflex = -51;
adieresis = -51;
ae = -51;
agrave = -51;
aogonek = -51;
aring = -51;
atilde = -51;
c = -51;
cacute = -51;
ccedilla = -51;
d = -51;
e = -51;
eacute = -51;
ecircumflex = -51;
edieresis = -51;
egrave = -51;
eogonek = -51;
eth = -51;
o = -51;
oacute = -51;
ocircumflex = -51;
odieresis = -51;
oe = -51;
ograve = -51;
oslash = -51;
otilde = -51;
q = -51;
};
y = {
A = -47;
AE = -47;
Aacute = -47;
Acircumflex = -47;
Adieresis = -47;
Agrave = -47;
Aogonek = -47;
Aring = -47;
Atilde = -47;
a = -26;
aacute = -26;
acircumflex = -26;
adieresis = -26;
ae = -26;
agrave = -26;
ampersand = -47;
aogonek = -26;
aring = -26;
atilde = -26;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -152;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
ellipsis = -152;
eogonek = -26;
eth = -26;
increment = -47;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -152;
q = -26;
quotedblbase = -152;
quotesinglbase = -152;
slash = -47;
};
yacute = {
A = -47;
AE = -47;
Aacute = -47;
Acircumflex = -47;
Adieresis = -47;
Agrave = -47;
Aogonek = -47;
Aring = -47;
Atilde = -47;
a = -26;
aacute = -26;
acircumflex = -26;
adieresis = -26;
ae = -26;
agrave = -26;
ampersand = -47;
aogonek = -26;
aring = -26;
atilde = -26;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -142;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
ellipsis = -142;
eogonek = -26;
eth = -26;
increment = -47;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -142;
q = -26;
quotedblbase = -142;
quotesinglbase = -142;
slash = -47;
};
ydieresis = {
A = -47;
AE = -47;
Aacute = -47;
Acircumflex = -47;
Adieresis = -47;
Agrave = -47;
Aogonek = -47;
Aring = -47;
Atilde = -47;
a = -26;
aacute = -26;
acircumflex = -26;
adieresis = -26;
ae = -26;
agrave = -26;
ampersand = -47;
aogonek = -26;
aring = -26;
atilde = -26;
c = -26;
cacute = -26;
ccedilla = -26;
comma = -142;
d = -26;
e = -26;
eacute = -26;
ecircumflex = -26;
edieresis = -26;
egrave = -26;
ellipsis = -142;
eogonek = -26;
eth = -26;
increment = -47;
o = -26;
oacute = -26;
ocircumflex = -26;
odieresis = -26;
oe = -26;
ograve = -26;
oslash = -26;
otilde = -26;
period = -142;
q = -26;
quotedblbase = -142;
quotesinglbase = -142;
slash = -47;
};
};
};
manufacturer = Truebase;
manufacturerURL = "http://www.truebase.com/";
unitsPerEm = 2000;
versionMajor = 1;
versionMinor = 104;
}
